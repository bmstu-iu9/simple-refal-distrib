// This file automatically generated from 'R5-Parser.ref'
// Don't edit! Edit 'R5-Parser.ref' and recompile it

#include "refalrts.h"

#define cookie_ns cookie_ns_380948769_1707878895
#define COOKIE1_ 380948769U
#define COOKIE2_ 1707878895U

enum efunc {
  efunc_u_u_Stepm_Drop = 0,
  efunc_u_u_Metau_Mu = 1,
  efunc_d_table = 2,
  efunc_Program = 3,
  efunc_DoProgram = 4,
  efunc_gen_DoProgram_S1C1 = 5,
  efunc_gen_DoProgram_S1C2 = 6,
  efunc_gen_OneOf_Z1 = 7,
  efunc_UnitStartToken = 8,
  efunc_gen_DoProgram_S1A3 = 9,
  efunc_Unit = 10,
  efunc_ELm_AddErrorAt = 11,
  efunc_TokName = 12,
  efunc_gen_UnexpectedToken_D2 = 13,
  efunc_gen_ClassicError_Z1 = 14,
  efunc_NameList = 15,
  efunc_gen_Unit_B1D1 = 16,
  efunc_NameListm_DoNames = 17,
  efunc_gen_NameList_S3C1 = 18,
  efunc_gen_NameListm_DoNames_S8C1 = 19,
  efunc_gen_NameListm_DoNames_S8C2 = 20,
  efunc_gen_Include_A1 = 21,
  efunc_gen_ClassicError_D2 = 22,
  efunc_gen_Specialization_S1A2 = 23,
  efunc_gen_Expect_D2 = 24,
  efunc_gen_Specialization_S1A1 = 25,
  efunc_Pattern = 26,
  efunc_gen_Function_S1C1 = 27,
  efunc_gen_ClassicError_Z2 = 28,
  efunc_Functionm_AfterBlock = 29,
  efunc_Block = 30,
  efunc_gen_Block_S2A1 = 31,
  efunc_Blockm_AfterSentence = 32,
  efunc_Sentence = 33,
  efunc_gen_Blockm_AfterSentence_S1B1S6A1 = 34,
  efunc_SentenceTail = 35,
  efunc_SentencePartm_AfterPattern = 36,
  efunc_gen_SentenceTail_S1A3Z1 = 37,
  efunc_gen_SentenceTail_S1A2 = 38,
  efunc_DoCheckExceedBlocks = 39,
  efunc_gen_DoCheckExceedBlocks_Z3 = 40,
  efunc_gen_DoCheckExceedBlocks_Z0 = 41,
  efunc_gen_SentenceTail_S1A3 = 42,
  efunc_gen_SentenceTail_S1A1 = 43,
  efunc_gen_CheckSentenceEnd_S1A1Z1 = 44,
  efunc_gen_SentenceTail_S2A1 = 45,
  efunc_gen_CheckSentenceEnd_S1A2 = 46,
  efunc_gen_CheckSentenceEnd_S1A1 = 47,
  efunc_gen_CheckMistakenAssign_D2 = 48,
  efunc_gen_CheckSentenceEnd_D3 = 49,
  efunc_gen_SentencePartm_AfterPattern_B1S1C1 = 50,
  efunc_gen_SentencePartm_AfterPattern_B1S1A2 = 51,
  efunc_Result = 52,
  efunc_gen_SentencePartm_AfterPattern_B1S2C1 = 53,
  efunc_gen_SentencePartm_AfterPattern_B1 = 54,
  efunc_DoTokenChain = 55,
  efunc_Expressionm_CheckBrackets = 56,
  efunc_Resultm_Blocks = 57,
  efunc_gen_Resultm_Blocks_Z1 = 58,
  efunc_gen_Resultm_Blocks_S3A1 = 59,
  efunc_TokenChain = 60,
  efunc_gen_DoTokenChain_B1S6A2 = 61,
  efunc_gen_DoTokenChain_B1S6A2B1D2 = 62,
  efunc_DoTokenChainm_AfterCall = 63,
  efunc_gen_DoTokenChain_B1S9A3 = 64,
  efunc_gen_DoTokenChain_B1S9A3B1D2 = 65,
  efunc_gen_DoTokenChain_B1S9A2 = 66,
  efunc_gen_DoTokenChain_B1S12A3 = 67,
  efunc_gen_DoTokenChain_B1S6A1 = 68,
  efunc_gen_DoTokenChain_B1S7A1Z1 = 69,
  efunc_gen_DoTokenChain_B1S7A1 = 70,
  efunc_gen_DoTokenChain_B1S9A1Z1 = 71,
  efunc_gen_DoTokenChain_B1S9A2Z1 = 72,
  efunc_gen_DoTokenChain_B1S9A1 = 73,
  efunc_gen_DoTokenChain_B1S11A1Z1 = 74,
  efunc_gen_DoTokenChain_B1S11A1Z2 = 75,
  efunc_gen_DoTokenChain_B1S11A1B1S2A1B1D2 = 76,
  efunc_gen_DoTokenChain_B1S11A1 = 77,
  efunc_gen_DoTokenChain_B1S11A1B1S2A1 = 78,
  efunc_gen_DoTokenChain_B1D11 = 79,
  efunc_gen_DoTokenChain_B1S6A1Z1 = 80,
  efunc_gen_DoTokenChain_B1S7A1Z2 = 81,
  efunc_gen_DoTokenChain_B1S7A1Z3 = 82,
  efunc_gen_DoTokenChain_B1S9A1Z2 = 83,
  efunc_gen_DoTokenChain_B1S9A2Z3 = 84,
  efunc_gen_DoTokenChain_B1S9A1Z3 = 85,
  efunc_gen_DoTokenChain_B1S11A1Z3 = 86,
  efunc_gen_DoTokenChain_B1S11A1Z4 = 87,
  efunc_gen_DoTokenChain_B1S11A1Z5 = 88,
  efunc_gen_DoTokenChain_B1D11Z1 = 89,
  efunc_gen_DoTokenChainm_AfterCall_S4A2 = 90,
  efunc_gen_DoTokenChainm_AfterCall_S4A1 = 91,
  efunc_gen_Expressionm_CheckBrackets_S1A3 = 92,
  efunc_gen_Expressionm_CheckBrackets_S1C1 = 93,
  efunc_gen_Expressionm_CheckBrackets_S1A2 = 94,
  efunc_Mu = 95,
  efunc_Up = 96,
  efunc_Evm_met = 97,
  efunc_Residue = 98,
  efunc_u_u_Metau_Residue = 99,
  efunc_R5m_Parse = 100,
  efunc_UnexpectedUnitToken = 101,
  efunc_NameListTags = 102,
  efunc_OneOf = 103,
  efunc_TkExtern = 104,
  efunc_TkEnum = 105,
  efunc_TkEEnum = 106,
  efunc_TkSwap = 107,
  efunc_TkESwap = 108,
  efunc_TkLabel = 109,
  efunc_TkEntryL = 110,
  efunc_TkInline = 111,
  efunc_TkDrive = 112,
  efunc_TkMeta = 113,
  efunc_TkIntrinsic = 114,
  efunc_Include = 115,
  efunc_Specialization = 116,
  efunc_Expect = 117,
  efunc_Function = 118,
  efunc_CheckExceedBlocks = 119,
  efunc_AssignmentError = 120,
  efunc_CheckSentenceEnd = 121,
  efunc_CheckMistakenAssign = 122,
  efunc_SentencePart = 123,
  efunc_Expression = 124,
  efunc_DoTokenChainm_AddRedefinition = 125,
  efunc_ClassicError = 126,
  efunc_UnexpectedToken = 127,
  efunc_gen_Unit_B1D1S2C1 = 128,
  efunc_gen_Unit_B1S2B1 = 129,
  efunc_gen_Include_D1 = 130,
  efunc_gen_Specialization_D2 = 131,
  efunc_gen_Unit_B1D1S7C1 = 132,
  efunc_gen_Unit_B1S8B1 = 133,
  efunc_gen_DoTokenChain_B1D11S12C1 = 134,
  efunc_gen_DoTokenChain_B1S12A2 = 135,
  efunc_gen_ClassicError_Z3 = 136,
  efunc_gen_DoTokenChainm_AddRedefinition_D3 = 137,
  efunc_gen_OneOf_Z0 = 138,
  efunc_gen_ClassicError_Z0 = 139,
  efunc_gen_SentenceTail_S1A3Z0 = 140,
  efunc_gen_CheckSentenceEnd_S1A1Z0 = 141,
  efunc_gen_Resultm_Blocks_Z0 = 142,
  efunc_gen_DoTokenChain_B1S7A1Z0 = 143,
  efunc_gen_DoTokenChain_B1S9A2Z2 = 144,
  efunc_gen_DoTokenChain_B1S9A1Z0 = 145,
  efunc_gen_DoTokenChain_B1S9A3Z1 = 146,
  efunc_gen_DoTokenChain_B1S9A2Z0 = 147,
  efunc_gen_DoTokenChain_B1S11A1Z0 = 148,
  efunc_gen_DoTokenChain_B1S9A3Z2 = 149,
  efunc_gen_DoTokenChain_B1S9A3Z0 = 150,
  efunc_gen_DoTokenChain_B1S6A2Z1 = 151,
  efunc_gen_DoTokenChain_B1S6A1Z0 = 152,
  efunc_gen_DoTokenChain_B1S9A2Z4 = 153,
  efunc_gen_DoTokenChain_B1S9A3Z3 = 154,
  efunc_gen_DoTokenChain_B1S9A2Z5 = 155,
  efunc_gen_DoTokenChain_B1D11Z1S12C1 = 156,
  efunc_gen_DoTokenChain_B1S12A2Z1 = 157,
  efunc_gen_DoTokenChain_B1Z0 = 158,
  efunc_gen_DoTokenChain_B1S6A2Z0 = 159,
  efunc_gen_DoTokenChain_B1S9A3Z4 = 160,
  efunc_gen_DoTokenChain_B1S9A3Z5 = 161,
  efunc_gen_DoTokenChain_B1S12A3Z1 = 162,
  efunc_gen_DoTokenChain_B1S12A2Z0 = 163,
  efunc_gen_DoTokenChain_B1S12A3Z0 = 164,
};


enum ident {
  ident_True = 0,
  ident_TkRefal5Mode = 1,
  ident_TkEOF = 2,
  ident_TkError = 3,
  ident_TkSwap = 4,
  ident_TkESwap = 5,
  ident_TkLabel = 6,
  ident_TkInline = 7,
  ident_TkDrive = 8,
  ident_TkMeta = 9,
  ident_TkIntrinsic = 10,
  ident_TkEntry = 11,
  ident_TkName = 12,
  ident_TkSemicolon = 13,
  ident_TkInclude = 14,
  ident_TkNativeCode = 15,
  ident_TkSpec = 16,
  ident_TkPseudoComment = 17,
  ident_TkExtern = 18,
  ident_TkEnum = 19,
  ident_TkEEnum = 20,
  ident_False = 21,
  ident_GNm_Entry = 22,
  ident_Declaration = 23,
  ident_GNm_Local = 24,
  ident_Enum = 25,
  ident_Swap = 26,
  ident_Ident = 27,
  ident_Entry = 28,
  ident_Inline = 29,
  ident_Drive = 30,
  ident_Meta = 31,
  ident_Intrinsic = 32,
  ident_TkComma = 33,
  ident_TkOpenBlock = 34,
  ident_TkCompound = 35,
  ident_Include = 36,
  ident_Classic = 37,
  ident_Extended = 38,
  ident_Spec = 39,
  ident_TkEntryL = 40,
  ident_Function = 41,
  ident_NativeBody = 42,
  ident_TkCloseBlock = 43,
  ident_Sentences = 44,
  ident_Assign = 45,
  ident_TkColon = 46,
  ident_Condition = 47,
  ident_TkAssign = 48,
  ident_Pattern = 49,
  ident_Result = 50,
  ident_Brackets = 51,
  ident_TkCloseBracket = 52,
  ident_ADTm_Brackets = 53,
  ident_TkCloseADT = 54,
  ident_Closure = 55,
  ident_Symbol = 56,
  ident_Identifier = 57,
  ident_TkMacroDigit = 58,
  ident_Number = 59,
  ident_TkChar = 60,
  ident_Char = 61,
  ident_TkVariable = 62,
  ident_Var = 63,
  ident_TkOpenBracket = 64,
  ident_TkOpenCall = 65,
  ident_Name = 66,
  ident_TkOpenADT = 67,
  ident_TkAmpersand = 68,
  ident_TkCloseCall = 69,
  ident_CallBrackets = 70,
  ident_NewVar = 71,
  ident_TkScopeId = 72,
  ident_TkRedefinition = 73,
  ident_Mu = 74,
  ident_Up = 75,
  ident_Evm_met = 76,
  ident_Residue = 77,
  ident_u_u_Metau_Residue = 78,
  ident_R5m_Parse = 79,
  ident_Program = 80,
  ident_DoProgram = 81,
  ident_UnexpectedUnitToken = 82,
  ident_UnitStartToken = 83,
  ident_NameListTags = 84,
  ident_OneOf = 85,
  ident_Unit = 86,
  ident_NameList = 87,
  ident_NameListm_DoNames = 88,
  ident_Specialization = 89,
  ident_Expect = 90,
  ident_Functionm_AfterBlock = 91,
  ident_Block = 92,
  ident_Blockm_AfterSentence = 93,
  ident_Sentence = 94,
  ident_SentenceTail = 95,
  ident_CheckExceedBlocks = 96,
  ident_DoCheckExceedBlocks = 97,
  ident_AssignmentError = 98,
  ident_CheckSentenceEnd = 99,
  ident_CheckMistakenAssign = 100,
  ident_SentencePart = 101,
  ident_SentencePartm_AfterPattern = 102,
  ident_Resultm_Blocks = 103,
  ident_Expression = 104,
  ident_TokenChain = 105,
  ident_DoTokenChain = 106,
  ident_DoTokenChainm_AfterCall = 107,
  ident_DoTokenChainm_AddRedefinition = 108,
  ident_Expressionm_CheckBrackets = 109,
  ident_ClassicError = 110,
  ident_UnexpectedToken = 111,
  ident_TokName = 112,
  ident_NativeBlock = 113,
  ident_Cookie1 = 114,
  ident_Cookie2 = 115,
};


static refalrts::FnResult func_Mu(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Mu/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg/2 HalfReuse: & $table/1 } >/8 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::reinit_name(context[1], functions[efunc_d_table]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Mu("Mu", COOKIE1_, COOKIE2_, func_Mu);


static refalrts::FnResult func_Residue(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Residue/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg/2 HalfReuse: & $table/1 } >/8 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::reinit_name(context[1], functions[efunc_d_table]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Residue("Residue", COOKIE1_, COOKIE2_, func_Residue);


static refalrts::FnResult func_u_u_Metau_Residue(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & __Meta_Residue/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_u_u_Metau_Residue("__Meta_Residue", COOKIE1_, COOKIE2_, func_u_u_Metau_Residue);


static refalrts::FnResult func_R5m_Parse(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & R5-Parse/4 t.ErrorList/5 s.Mode/7 e.Tokens/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Tokens as range 2
  //DEBUG: t.ErrorList: 5
  //DEBUG: s.Mode: 7
  //DEBUG: e.Tokens: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Program/4 AsIs: t.ErrorList/5 AsIs: s.Mode/7 AsIs: e.Tokens/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Program]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_R5m_Parse("R5-Parse", 0U, 0U, func_R5m_Parse);


static refalrts::FnResult func_Program(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & Program/4 t.ErrorList/5 s.Mode/7 e.Tokens/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Tokens as range 2
  //DEBUG: t.ErrorList: 5
  //DEBUG: s.Mode: 7
  //DEBUG: e.Tokens: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoProgram/4 AsIs: t.ErrorList/5 AsIs: s.Mode/7 } (/8 )/9 Tile{ AsIs: e.Tokens/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[8]);
  refalrts::alloc_close_bracket(vm, context[9]);
  refalrts::update_name(context[4], functions[efunc_DoProgram]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[8], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Program("Program", COOKIE1_, COOKIE2_, func_Program);


static refalrts::FnResult func_gen_DoProgram_S1A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & DoProgram$1=3/4 s.Mode/5 (/8 e.Units/6 )/9 t.ErrorList$a/10 (/14 e.NewUnits/12 )/15 e.Tokens$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.Units as range 6
  context[11] = refalrts::tvar_left( context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  // closed e.NewUnits as range 12
  // closed e.Tokens$a as range 2
  //DEBUG: s.Mode: 5
  //DEBUG: e.Units: 6
  //DEBUG: t.ErrorList$a: 10
  //DEBUG: e.NewUnits: 12
  //DEBUG: e.Tokens$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/9 {REMOVED TILE} (/14 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoProgram/4 } Tile{ AsIs: t.ErrorList$a/10 } Tile{ AsIs: s.Mode/5 AsIs: (/8 } Tile{ AsIs: e.Units/6 } Tile{ AsIs: e.NewUnits/12 } Tile{ AsIs: )/15 AsIs: e.Tokens$a/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_DoProgram]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[8], context[15] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[15];
  res = refalrts::splice_evar( res, context[12], context[13] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[5], context[8] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoProgram_S1A3("DoProgram$1=3", COOKIE1_, COOKIE2_, func_gen_DoProgram_S1A3);


static refalrts::FnResult func_DoProgram(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 40 elems
  refalrts::Iter context[40];
  refalrts::zeros( context, 40 );
  // </0 & DoProgram/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoProgram/4 t.new1/5 s.new2/7 (/10 e.new3/8 )/11 t.new4/12 e.new5/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[8] = 0;
  context[9] = 0;
  context[10] = refalrts::brackets_left( context[8], context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[10], context[11]);
  // closed e.new3 as range 8
  context[13] = refalrts::tvar_left( context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  // closed e.new5 as range 2
  do {
    // </0 & DoProgram/4 t.ErrorList/5 s.Mode/7 (/10 e.Units/14 )/11 t.NextToken/12 e.Tokens/16 >/1
    context[14] = context[8];
    context[15] = context[9];
    context[16] = context[2];
    context[17] = context[3];
    // closed e.Units as range 14
    // closed e.Tokens as range 16
    //DEBUG: t.ErrorList: 5
    //DEBUG: t.NextToken: 12
    //DEBUG: s.Mode: 7
    //DEBUG: e.Units: 14
    //DEBUG: e.Tokens: 16
    //5: t.ErrorList
    //7: s.Mode
    //12: t.NextToken
    //14: e.Units
    //16: e.Tokens
    //21: t.NextToken

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[18]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_DoProgram_S1C1]);
    refalrts::copy_stvar(vm, context[21], context[12]);
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[18] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_stvar( res, context[21] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_elem( res, context[18] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </18 & DoProgram$1?1/22 (/25 s.Type/27 t.Pos/28 e.Value/23 )/26 >/19
      context[20] = 0;
      context[21] = 0;
      context[22] = refalrts::call_left( context[20], context[21], context[18], context[19] );
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_left( context[23], context[24], context[20], context[21] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      if( ! refalrts::empty_seq( context[20], context[21] ) )
        continue;
      if( ! refalrts::svar_left( context[27], context[23], context[24] ) )
        continue;
      context[29] = refalrts::tvar_left( context[28], context[23], context[24] );
      if( ! context[29] )
        continue;
      // closed e.Value as range 23
      //DEBUG: t.ErrorList: 5
      //DEBUG: t.NextToken: 12
      //DEBUG: s.Mode: 7
      //DEBUG: e.Units: 14
      //DEBUG: e.Tokens: 16
      //DEBUG: s.Type: 27
      //DEBUG: t.Pos: 28
      //DEBUG: e.Value: 23
      //5: t.ErrorList
      //7: s.Mode
      //12: t.NextToken
      //14: e.Units
      //16: e.Tokens
      //23: e.Value
      //27: s.Type
      //28: t.Pos
      //35: s.Type

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[32], functions[efunc_gen_DoProgram_S1C2]);
      refalrts::alloc_open_call(vm, context[33]);
      refalrts::alloc_name(vm, context[34], functions[efunc_gen_OneOf_Z1]);
      refalrts::copy_stvar(vm, context[35], context[27]);
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_UnitStartToken]);
      refalrts::alloc_close_call(vm, context[38]);
      refalrts::alloc_close_call(vm, context[39]);
      refalrts::alloc_close_call(vm, context[31]);
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[30] );
      res = refalrts::splice_elem( res, context[31] );
      refalrts::push_stack( vm, context[39] );
      refalrts::push_stack( vm, context[33] );
      res = refalrts::splice_elem( res, context[39] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[36] );
      res = refalrts::splice_elem( res, context[38] );
      res = refalrts::splice_elem( res, context[37] );
      res = refalrts::splice_elem( res, context[36] );
      res = refalrts::splice_stvar( res, context[35] );
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_elem( res, context[30] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </30 & DoProgram$1?2/34 # True/35 >/31
        context[32] = 0;
        context[33] = 0;
        context[34] = refalrts::call_left( context[32], context[33], context[30], context[31] );
        context[35] = refalrts::ident_left( identifiers[ident_True], context[32], context[33] );
        if( ! context[35] )
          continue;
        if( ! refalrts::empty_seq( context[32], context[33] ) )
          continue;
        //DEBUG: t.ErrorList: 5
        //DEBUG: t.NextToken: 12
        //DEBUG: s.Mode: 7
        //DEBUG: e.Units: 14
        //DEBUG: e.Tokens: 16
        //DEBUG: s.Type: 27
        //DEBUG: t.Pos: 28
        //DEBUG: e.Value: 23

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} (/25 s.Type/27 t.Pos/28 e.Value/23 )/26 {REMOVED TILE} </30 & DoProgram$1?2/34 # True/35 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoProgram$1=3/4 } Tile{ AsIs: s.Mode/7 AsIs: (/10 AsIs: e.Units/14 AsIs: )/11 } Tile{ AsIs: </18 Reuse: & Unit/22 } Tile{ AsIs: t.ErrorList/5 } Tile{ HalfReuse: s.Mode7 /19 } Tile{ AsIs: t.NextToken/12 } Tile{ AsIs: e.Tokens/16 } Tile{ AsIs: >/31 AsIs: >/1 ]] }
        refalrts::update_name(context[4], functions[efunc_gen_DoProgram_S1A3]);
        refalrts::update_name(context[22], functions[efunc_Unit]);
        refalrts::reinit_svar( context[19], context[7] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[31] );
        refalrts::push_stack( vm, context[18] );
        refalrts::link_brackets( context[10], context[11] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[31];
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        res = refalrts::splice_elem( res, context[19] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[18], context[22] );
        res = refalrts::splice_evar( res, context[7], context[11] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[30], context[31]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[18], context[19]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoProgram/4 t.new6/5 s.new7/7 (/10 e.new12/14 )/11 (/12 s.new8/20 t.new9/21 e.new10/18 )/13 e.new11/16 >/1
    context[14] = context[8];
    context[15] = context[9];
    context[16] = context[2];
    context[17] = context[3];
    context[18] = 0;
    context[19] = 0;
    if( ! refalrts::brackets_term( context[18], context[19], context[12] ) )
      continue;
    // closed e.new12 as range 14
    // closed e.new11 as range 16
    if( ! refalrts::svar_left( context[20], context[18], context[19] ) )
      continue;
    context[22] = refalrts::tvar_left( context[21], context[18], context[19] );
    if( ! context[22] )
      continue;
    // closed e.new10 as range 18
    do {
      // </0 & DoProgram/4 t.ErrorList/5 s.Mode/7 (/10 e.Units/23 )/11 (/12 # TkRefal5Mode/20 t.Pos/21 s.NewMode/29 )/13 e.Tokens/27 >/1
      context[23] = context[14];
      context[24] = context[15];
      context[25] = context[18];
      context[26] = context[19];
      context[27] = context[16];
      context[28] = context[17];
      if( ! refalrts::ident_term( identifiers[ident_TkRefal5Mode], context[20] ) )
        continue;
      // closed e.Units as range 23
      // closed e.Tokens as range 27
      if( ! refalrts::svar_left( context[29], context[25], context[26] ) )
        continue;
      if( ! refalrts::empty_seq( context[25], context[26] ) )
        continue;
      //DEBUG: t.ErrorList: 5
      //DEBUG: t.Pos: 21
      //DEBUG: s.Mode: 7
      //DEBUG: e.Units: 23
      //DEBUG: e.Tokens: 27
      //DEBUG: s.NewMode: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Mode/7 (/10 {REMOVED TILE} {REMOVED TILE} # TkRefal5Mode/20 t.Pos/21 s.NewMode/29 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoProgram/4 AsIs: t.ErrorList/5 } Tile{ HalfReuse: s.NewMode29 /11 AsIs: (/12 } Tile{ AsIs: e.Units/23 } Tile{ AsIs: )/13 AsIs: e.Tokens/27 AsIs: >/1 ]] }
      refalrts::reinit_svar( context[11], context[29] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[13];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      refalrts::splice_to_freelist_open( vm, context[6], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoProgram/4 t.ErrorList/5 s.Mode/7 (/10 e.Units/23 )/11 (/12 # TkEOF/20 t.Pos/21 )/13 >/1
      context[23] = context[14];
      context[24] = context[15];
      if( ! refalrts::ident_term( identifiers[ident_TkEOF], context[20] ) )
        continue;
      if( ! refalrts::empty_seq( context[18], context[19] ) )
        continue;
      if( ! refalrts::empty_seq( context[16], context[17] ) )
        continue;
      // closed e.Units as range 23
      //DEBUG: t.ErrorList: 5
      //DEBUG: t.Pos: 21
      //DEBUG: s.Mode: 7
      //DEBUG: e.Units: 23

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & DoProgram/4 {REMOVED TILE} s.Mode/7 (/10 {REMOVED TILE} )/11 (/12 # TkEOF/20 t.Pos/21 )/13 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList/5 } Tile{ AsIs: e.Units/23 } Tile{ ]] }
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoProgram/4 t.ErrorList/5 s.Mode/7 (/10 e.Units/23 )/11 (/12 # TkError/20 t.0/21 e.1/25 )/13 e.Tokens/27 >/1
      context[23] = context[14];
      context[24] = context[15];
      context[25] = context[18];
      context[26] = context[19];
      context[27] = context[16];
      context[28] = context[17];
      if( ! refalrts::ident_term( identifiers[ident_TkError], context[20] ) )
        continue;
      // closed e.Units as range 23
      // closed e.1 as range 25
      // closed e.Tokens as range 27
      //DEBUG: t.ErrorList: 5
      //DEBUG: t.0: 21
      //DEBUG: s.Mode: 7
      //DEBUG: e.Units: 23
      //DEBUG: e.1: 25
      //DEBUG: e.Tokens: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoProgram/4 } Tile{ HalfReuse: </12 HalfReuse: & EL-AddErrorAt/20 } Tile{ AsIs: t.ErrorList/5 } Tile{ AsIs: t.0/21 } Tile{ AsIs: e.1/25 } Tile{ HalfReuse: >/11 } Tile{ AsIs: s.Mode/7 AsIs: (/10 } Tile{ AsIs: e.Units/23 } Tile{ AsIs: )/13 AsIs: e.Tokens/27 AsIs: >/1 ]] }
      refalrts::reinit_open_call(context[12]);
      refalrts::reinit_name(context[20], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_close_call(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[13] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[13];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[7], context[10] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[12], context[20] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoProgram/4 t.ErrorList/5 s.Mode/7 (/10 e.Units/23 )/11 (/12 s.Type/20 t.0/21 e.1/25 )/13 e.Tokens/27 >/1
    context[23] = context[14];
    context[24] = context[15];
    context[25] = context[18];
    context[26] = context[19];
    context[27] = context[16];
    context[28] = context[17];
    // closed e.Units as range 23
    // closed e.1 as range 25
    // closed e.Tokens as range 27
    //DEBUG: t.ErrorList: 5
    //DEBUG: t.0: 21
    //DEBUG: s.Mode: 7
    //DEBUG: s.Type: 20
    //DEBUG: e.Units: 23
    //DEBUG: e.1: 25
    //DEBUG: e.Tokens: 27

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.1/25 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoProgram/4 } </29 & EL-AddErrorAt/30 Tile{ AsIs: t.ErrorList/5 } Tile{ AsIs: t.0/21 }"unexpected "/31 Tile{ HalfReuse: </11 HalfReuse: & TokName/12 AsIs: s.Type/20 } >/33", expected Declaration, definition, $INCLUDE or special comment"/34 >/36 Tile{ AsIs: s.Mode/7 AsIs: (/10 } Tile{ AsIs: e.Units/23 } Tile{ AsIs: )/13 AsIs: e.Tokens/27 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[29]);
    refalrts::alloc_name(vm, context[30], functions[efunc_ELm_AddErrorAt]);
    refalrts::alloc_chars(vm, context[31], context[32], "unexpected ", 11);
    refalrts::alloc_close_call(vm, context[33]);
    refalrts::alloc_chars(vm, context[34], context[35], ", expected Declaration, definition, $INCLUDE or special comment", 63);
    refalrts::alloc_close_call(vm, context[36]);
    refalrts::reinit_open_call(context[11]);
    refalrts::reinit_name(context[12], functions[efunc_TokName]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[10], context[13] );
    refalrts::push_stack( vm, context[36] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[13];
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[7], context[10] );
    res = refalrts::splice_evar( res, context[33], context[36] );
    res = refalrts::splice_evar( res, context[11], context[20] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoProgram/4 t.ErrorList/5 s.Mode/7 (/10 e.Units/8 )/11 t.Unexpected/12 e.Tokens/2 >/1
  // closed e.Units as range 8
  // closed e.Tokens as range 2
  //DEBUG: t.ErrorList: 5
  //DEBUG: t.Unexpected: 12
  //DEBUG: s.Mode: 7
  //DEBUG: e.Units: 8
  //DEBUG: e.Tokens: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoProgram/4 } </14 & UnexpectedToken*2/15 Tile{ AsIs: t.ErrorList/5 } Tile{ AsIs: t.Unexpected/12 }"Declaration, definition, $INCLUDE or special comment"/16 >/18 Tile{ AsIs: s.Mode/7 AsIs: (/10 AsIs: e.Units/8 AsIs: )/11 } Tile{ AsIs: e.Tokens/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[14]);
  refalrts::alloc_name(vm, context[15], functions[efunc_gen_UnexpectedToken_D2]);
  refalrts::alloc_chars(vm, context[16], context[17], "Declaration, definition, $INCLUDE or special comment", 52);
  refalrts::alloc_close_call(vm, context[18]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[10], context[11] );
  refalrts::push_stack( vm, context[18] );
  refalrts::push_stack( vm, context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[11] );
  res = refalrts::splice_evar( res, context[16], context[18] );
  res = refalrts::splice_evar( res, context[12], context[13] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoProgram("DoProgram", COOKIE1_, COOKIE2_, func_DoProgram);


static refalrts::FnResult func_UnexpectedUnitToken(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & UnexpectedUnitToken/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & UnexpectedUnitToken/4 t.new1/5 t.new2/7 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & UnexpectedUnitToken/4 t.new3/5 (/7 s.new4/11 t.new5/12 e.new6/9 )/8 >/1
    context[9] = 0;
    context[10] = 0;
    if( ! refalrts::brackets_term( context[9], context[10], context[7] ) )
      continue;
    if( ! refalrts::svar_left( context[11], context[9], context[10] ) )
      continue;
    context[13] = refalrts::tvar_left( context[12], context[9], context[10] );
    if( ! context[13] )
      continue;
    // closed e.new6 as range 9
    do {
      // </0 & UnexpectedUnitToken/4 t.ErrorList/5 (/7 # TkError/11 t.0/12 e.1/14 )/8 >/1
      context[14] = context[9];
      context[15] = context[10];
      if( ! refalrts::ident_term( identifiers[ident_TkError], context[11] ) )
        continue;
      // closed e.1 as range 14
      //DEBUG: t.ErrorList: 5
      //DEBUG: t.0: 12
      //DEBUG: e.1: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} (/7 # TkError/11 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList/5 } Tile{ AsIs: t.0/12 AsIs: e.1/14 HalfReuse: >/8 } Tile{ ]] }
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[12], context[8] );
      refalrts::splice_to_freelist_open( vm, context[6], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & UnexpectedUnitToken/4 t.ErrorList/5 (/7 s.Type/11 t.0/12 e.1/14 )/8 >/1
    context[14] = context[9];
    context[15] = context[10];
    // closed e.1 as range 14
    //DEBUG: t.ErrorList: 5
    //DEBUG: t.0: 12
    //DEBUG: s.Type: 11
    //DEBUG: e.1: 14

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.1/14 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList/5 } Tile{ AsIs: t.0/12 }"unexpected "/16 </18 Tile{ HalfReuse: & TokName/7 AsIs: s.Type/11 } >/19", expected Declaration, definition, $INCLUDE or special commen"/20 Tile{ HalfReuse: 't'/8 AsIs: >/1 ]] }
    refalrts::alloc_chars(vm, context[16], context[17], "unexpected ", 11);
    refalrts::alloc_open_call(vm, context[18]);
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::alloc_chars(vm, context[20], context[21], ", expected Declaration, definition, $INCLUDE or special commen", 62);
    refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
    refalrts::reinit_name(context[7], functions[efunc_TokName]);
    refalrts::reinit_char(context[8], 't');
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[19], context[21] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    res = refalrts::splice_evar( res, context[16], context[18] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    refalrts::splice_to_freelist_open( vm, context[6], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UnexpectedUnitToken/4 t.ErrorList/5 t.Unexpected/7 >/1
  //DEBUG: t.ErrorList: 5
  //DEBUG: t.Unexpected: 7

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UnexpectedToken*2/4 AsIs: t.ErrorList/5 AsIs: t.Unexpected/7 HalfReuse: 'D'/1 }"eclaration, definition, $INCLUDE or special comment"/9 >/11 Tile{ ]] }
  refalrts::alloc_chars(vm, context[9], context[10], "eclaration, definition, $INCLUDE or special comment", 51);
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_gen_UnexpectedToken_D2]);
  refalrts::reinit_char(context[1], 'D');
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[9], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_UnexpectedUnitToken("UnexpectedUnitToken", COOKIE1_, COOKIE2_, func_UnexpectedUnitToken);


static refalrts::FnResult func_UnitStartToken(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & UnitStartToken/4 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: # TkExtern/0 HalfReuse: # TkEnum/4 HalfReuse: # TkEEnum/1 } # TkSwap/5 # TkESwap/6 # TkLabel/7 # TkInline/8 # TkDrive/9 # TkMeta/10 # TkIntrinsic/11 # TkEntry/12 # TkName/13 # TkSemicolon/14 # TkInclude/15 # TkNativeCode/16 # TkSpec/17 # TkPseudoComment/18 Tile{ ]] }
  refalrts::alloc_ident(vm, context[5], identifiers[ident_TkSwap]);
  refalrts::alloc_ident(vm, context[6], identifiers[ident_TkESwap]);
  refalrts::alloc_ident(vm, context[7], identifiers[ident_TkLabel]);
  refalrts::alloc_ident(vm, context[8], identifiers[ident_TkInline]);
  refalrts::alloc_ident(vm, context[9], identifiers[ident_TkDrive]);
  refalrts::alloc_ident(vm, context[10], identifiers[ident_TkMeta]);
  refalrts::alloc_ident(vm, context[11], identifiers[ident_TkIntrinsic]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_TkEntry]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_TkName]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_TkSemicolon]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_TkInclude]);
  refalrts::alloc_ident(vm, context[16], identifiers[ident_TkNativeCode]);
  refalrts::alloc_ident(vm, context[17], identifiers[ident_TkSpec]);
  refalrts::alloc_ident(vm, context[18], identifiers[ident_TkPseudoComment]);
  refalrts::reinit_ident(context[0], identifiers[ident_TkExtern]);
  refalrts::reinit_ident(context[4], identifiers[ident_TkEnum]);
  refalrts::reinit_ident(context[1], identifiers[ident_TkEEnum]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[18] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_UnitStartToken("UnitStartToken", COOKIE1_, COOKIE2_, func_UnitStartToken);


static refalrts::FnResult func_NameListTags(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & NameListTags/4 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: # TkExtern/0 HalfReuse: # TkEnum/4 HalfReuse: # TkEEnum/1 } # TkSwap/5 # TkESwap/6 # TkLabel/7 # TkInline/8 # TkDrive/9 # TkMeta/10 # TkIntrinsic/11 Tile{ ]] }
  refalrts::alloc_ident(vm, context[5], identifiers[ident_TkSwap]);
  refalrts::alloc_ident(vm, context[6], identifiers[ident_TkESwap]);
  refalrts::alloc_ident(vm, context[7], identifiers[ident_TkLabel]);
  refalrts::alloc_ident(vm, context[8], identifiers[ident_TkInline]);
  refalrts::alloc_ident(vm, context[9], identifiers[ident_TkDrive]);
  refalrts::alloc_ident(vm, context[10], identifiers[ident_TkMeta]);
  refalrts::alloc_ident(vm, context[11], identifiers[ident_TkIntrinsic]);
  refalrts::reinit_ident(context[0], identifiers[ident_TkExtern]);
  refalrts::reinit_ident(context[4], identifiers[ident_TkEnum]);
  refalrts::reinit_ident(context[1], identifiers[ident_TkEEnum]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_NameListTags("NameListTags", COOKIE1_, COOKIE2_, func_NameListTags);


static refalrts::FnResult func_OneOf(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & OneOf/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & OneOf/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & OneOf/4 t.Elem/5 e.Elems-B/9 t.Elem/13 e.Elems-E/11 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[9] = 0;
    context[10] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[11] = context[7];
      context[12] = context[8];
      context[14] = refalrts::repeated_stvar_left( vm, context[13], context[5], context[11], context[12] );
      if( ! context[14] )
        continue;
      // closed e.Elems-E as range 11
      //DEBUG: t.Elem: 5
      //DEBUG: e.Elems-B: 9
      //DEBUG: e.Elems-E: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & OneOf/4 t.Elem/5 e.Elems-B/9 t.Elem/13 e.Elems-E/11 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
      refalrts::reinit_ident(context[1], identifiers[ident_True]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[9], context[10], context[7], context[8] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OneOf/4 t.Elem/5 e.Elems/2 >/1
  // closed e.Elems as range 2
  //DEBUG: t.Elem: 5
  //DEBUG: e.Elems: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & OneOf/4 t.Elem/5 e.Elems/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_False]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_OneOf("OneOf", COOKIE1_, COOKIE2_, func_OneOf);


static refalrts::FnResult func_gen_Unit_B1S2B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & Unit:1$2:1/4 s.Mode/5 t.Pos/6 s.Tag/8 t.ErrorList$a/9 (/13 e.Units/11 )/14 e.Tokens$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = refalrts::tvar_left( context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[8], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.Units as range 11
  // closed e.Tokens$a as range 2
  //DEBUG: s.Mode: 5
  //DEBUG: t.Pos: 6
  //DEBUG: s.Tag: 8
  //DEBUG: t.ErrorList$a: 9
  //DEBUG: e.Units: 11
  //DEBUG: e.Tokens$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ClassicError@1/4 } Tile{ AsIs: t.ErrorList$a/9 } Tile{ AsIs: s.Mode/5 AsIs: t.Pos/6 } </15 & TokName/16 Tile{ AsIs: s.Tag/8 } Tile{ AsIs: >/1 } >/17 Tile{ AsIs: (/13 AsIs: e.Units/11 AsIs: )/14 } Tile{ AsIs: e.Tokens$a/2 } Tile{ ]] }
  refalrts::alloc_open_call(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_TokName]);
  refalrts::alloc_close_call(vm, context[17]);
  refalrts::update_name(context[4], functions[efunc_gen_ClassicError_Z1]);
  refalrts::link_brackets( context[13], context[14] );
  refalrts::push_stack( vm, context[17] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[15] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_elem( res, context[1] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[5], context[7] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Unit_B1S2B1("Unit:1$2:1", COOKIE1_, COOKIE2_, func_gen_Unit_B1S2B1);


static refalrts::FnResult func_gen_Unit_B1S8B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & Unit:1$8:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Unit:1$8:1/4 (/7 e.new1/5 )/8 t.new2/9 (/13 e.new3/11 )/14 (/17 s.new4/19 t.new5/20 e.new6/15 )/18 e.new7/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.new3 as range 11
  // closed e.new7 as range 2
  if( ! refalrts::svar_left( context[19], context[15], context[16] ) )
    return refalrts::cRecognitionImpossible;
  context[21] = refalrts::tvar_left( context[20], context[15], context[16] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  // closed e.new6 as range 15
  do {
    // </0 & Unit:1$8:1/4 (/7 e.Tokens/22 )/8 t.ErrorList$a/9 (/13 e.Units/24 )/14 (/17 # TkEOF/19 t._/20 )/18 >/1
    context[22] = context[5];
    context[23] = context[6];
    context[24] = context[11];
    context[25] = context[12];
    if( ! refalrts::ident_term( identifiers[ident_TkEOF], context[19] ) )
      continue;
    if( ! refalrts::empty_seq( context[15], context[16] ) )
      continue;
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Tokens as range 22
    // closed e.Units as range 24
    //DEBUG: t.ErrorList$a: 9
    //DEBUG: t._: 20
    //DEBUG: e.Tokens: 22
    //DEBUG: e.Units: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Unit:1$8:1/4 (/7 {REMOVED TILE} )/8 {REMOVED TILE} (/17 # TkEOF/19 t._/20 )/18 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList$a/9 AsIs: (/13 AsIs: e.Units/24 AsIs: )/14 } Tile{ AsIs: e.Tokens/22 } Tile{ ]] }
    refalrts::link_brackets( context[13], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[9], context[14] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Unit:1$8:1/4 (/7 e.Tokens/5 )/8 t.ErrorList$a/9 (/13 e.Units/11 )/14 (/17 s.Token/19 t.Pos$a/20 e.Info/15 )/18 e._/2 >/1
  // closed e.Tokens as range 5
  // closed e.Units as range 11
  // closed e.Info as range 15
  // closed e._ as range 2
  //DEBUG: t.ErrorList$a: 9
  //DEBUG: t.Pos$a: 20
  //DEBUG: s.Token: 19
  //DEBUG: e.Tokens: 5
  //DEBUG: e.Units: 11
  //DEBUG: e.Info: 15
  //DEBUG: e._: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Units/11 {REMOVED TILE} s.Token/19 {REMOVED TILE} e.Info/15 {REMOVED TILE} e._/2 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 } Tile{ AsIs: t.ErrorList$a/9 } Tile{ AsIs: t.Pos$a/20 } Tile{ HalfReuse: 'T'/13 } Tile{ HalfReuse: 'o'/8 } Tile{ HalfReuse: 'o'/7 }" m"/22 Tile{ HalfReuse: 'a'/1 }"ny units in the pseudocomment"/24 Tile{ HalfReuse: >/14 AsIs: (/17 } Tile{ AsIs: )/18 } Tile{ AsIs: e.Tokens/5 } Tile{ ]] }
  refalrts::alloc_chars(vm, context[22], context[23], " m", 2);
  refalrts::alloc_chars(vm, context[24], context[25], "ny units in the pseudocomment", 29);
  refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
  refalrts::reinit_char(context[13], 'T');
  refalrts::reinit_char(context[8], 'o');
  refalrts::reinit_char(context[7], 'o');
  refalrts::reinit_char(context[1], 'a');
  refalrts::reinit_close_call(context[14]);
  refalrts::link_brackets( context[17], context[18] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_elem( res, context[18] );
  res = refalrts::splice_evar( res, context[14], context[17] );
  res = refalrts::splice_evar( res, context[24], context[25] );
  res = refalrts::splice_elem( res, context[1] );
  res = refalrts::splice_evar( res, context[22], context[23] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[20], context[21] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Unit_B1S8B1("Unit:1$8:1", COOKIE1_, COOKIE2_, func_gen_Unit_B1S8B1);


static refalrts::FnResult func_Unit(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & Unit/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Unit/4 t.new1/5 s.new2/7 t.new3/8 e.new4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[9] = refalrts::tvar_left( context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  // closed e.new4 as range 2
  do {
    // </0 & Unit/4 t.ErrorList/5 s.Mode/7 (/8 # TkExtern/14 t.0/15 )/9 e.Tokens/10 >/1
    context[10] = context[2];
    context[11] = context[3];
    context[12] = 0;
    context[13] = 0;
    if( ! refalrts::brackets_term( context[12], context[13], context[8] ) )
      continue;
    context[14] = refalrts::ident_left( identifiers[ident_TkExtern], context[12], context[13] );
    if( ! context[14] )
      continue;
    // closed e.Tokens as range 10
    context[16] = refalrts::tvar_left( context[15], context[12], context[13] );
    if( ! context[16] )
      continue;
    if( ! refalrts::empty_seq( context[12], context[13] ) )
      continue;
    //DEBUG: t.ErrorList: 5
    //DEBUG: s.Mode: 7
    //DEBUG: e.Tokens: 10
    //DEBUG: t.0: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Mode/7 (/8 # TkExtern/14 t.0/15 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & NameList/4 AsIs: t.ErrorList/5 } Tile{ HalfReuse: # TkExtern/9 AsIs: e.Tokens/10 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_NameList]);
    refalrts::reinit_ident(context[9], identifiers[ident_TkExtern]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[9];
    refalrts::splice_to_freelist_open( vm, context[6], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Unit/4 t.ErrorList/5 s.Mode/7 t.NextToken/8 e.Tokens/2 >/1
  // closed e.Tokens as range 2
  //DEBUG: t.ErrorList: 5
  //DEBUG: t.NextToken: 8
  //DEBUG: s.Mode: 7
  //DEBUG: e.Tokens: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Unit:1*1/4 AsIs: t.ErrorList/5 } (/10 Tile{ AsIs: e.Tokens/2 } )/11 Tile{ AsIs: s.Mode/7 AsIs: t.NextToken/8 } t.NextToken/8/12 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[10]);
  refalrts::alloc_close_bracket(vm, context[11]);
  refalrts::copy_evar(vm, context[12], context[13], context[8], context[9]);
  refalrts::update_name(context[4], functions[efunc_gen_Unit_B1D1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[10], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[12], context[13] );
  res = refalrts::splice_evar( res, context[7], context[9] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Unit("Unit", COOKIE1_, COOKIE2_, func_Unit);


static refalrts::FnResult func_NameList(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 29 elems
  refalrts::Iter context[29];
  refalrts::zeros( context, 29 );
  // </0 & NameList/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & NameList/4 t.new1/5 s.new2/7 t.new3/8 e.new4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[9] = refalrts::tvar_left( context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  // closed e.new4 as range 2
  do {
    // </0 & NameList/4 t.new5/5 s.new6/7 (/8 s.new7/14 t.new8/15 e.new9/12 )/9 e.new10/10 >/1
    context[10] = context[2];
    context[11] = context[3];
    context[12] = 0;
    context[13] = 0;
    if( ! refalrts::brackets_term( context[12], context[13], context[8] ) )
      continue;
    // closed e.new10 as range 10
    if( ! refalrts::svar_left( context[14], context[12], context[13] ) )
      continue;
    context[16] = refalrts::tvar_left( context[15], context[12], context[13] );
    if( ! context[16] )
      continue;
    // closed e.new9 as range 12
    do {
      // </0 & NameList/4 t.ErrorList/5 s.Tag/7 (/8 # TkName/14 t.Pos/15 e.Name/17 )/9 e.Tokens/19 >/1
      context[17] = context[12];
      context[18] = context[13];
      context[19] = context[10];
      context[20] = context[11];
      if( ! refalrts::ident_term( identifiers[ident_TkName], context[14] ) )
        continue;
      // closed e.Name as range 17
      // closed e.Tokens as range 19
      //DEBUG: t.ErrorList: 5
      //DEBUG: t.Pos: 15
      //DEBUG: s.Tag: 7
      //DEBUG: e.Name: 17
      //DEBUG: e.Tokens: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & NameList-DoNames/4 AsIs: t.ErrorList/5 AsIs: s.Tag/7 AsIs: (/8 HalfReuse: </14 } & __Meta_Mu/21 s.Tag/7/22 Tile{ AsIs: t.Pos/15 } Tile{ AsIs: e.Name/17 } & $table/23 >/24 Tile{ AsIs: )/9 AsIs: e.Tokens/19 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[21], functions[efunc_u_u_Metau_Mu]);
      refalrts::copy_stvar(vm, context[22], context[7]);
      refalrts::alloc_name(vm, context[23], functions[efunc_d_table]);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_NameListm_DoNames]);
      refalrts::reinit_open_call(context[14]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[9];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & NameList/4 t.ErrorList/5 s.Tag/7 (/8 # TkRefal5Mode/14 t.Pos/15 s.Mode/21 )/9 e.Tokens/19 >/1
    context[17] = context[12];
    context[18] = context[13];
    context[19] = context[10];
    context[20] = context[11];
    if( ! refalrts::ident_term( identifiers[ident_TkRefal5Mode], context[14] ) )
      continue;
    // closed e.Tokens as range 19
    if( ! refalrts::svar_left( context[21], context[17], context[18] ) )
      continue;
    if( ! refalrts::empty_seq( context[17], context[18] ) )
      continue;
    //DEBUG: t.ErrorList: 5
    //DEBUG: t.Pos: 15
    //DEBUG: s.Tag: 7
    //DEBUG: e.Tokens: 19
    //DEBUG: s.Mode: 21

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/8 # TkRefal5Mode/14 t.Pos/15 s.Mode/21 )/9 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & NameList/4 AsIs: t.ErrorList/5 AsIs: s.Tag/7 } Tile{ AsIs: e.Tokens/19 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & NameList/4 t.ErrorList/5 s.Tag/7 t.NextToken/8 e.Tokens/2 >/1
  // closed e.Tokens as range 2
  //DEBUG: t.ErrorList: 5
  //DEBUG: t.NextToken: 8
  //DEBUG: s.Tag: 7
  //DEBUG: e.Tokens: 2
  //2: e.Tokens
  //5: t.ErrorList
  //7: s.Tag
  //8: t.NextToken
  //13: t.NextToken

  refalrts::reset_allocator(vm);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::alloc_open_call(vm, context[10]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_NameList_S3C1]);
  refalrts::copy_stvar(vm, context[13], context[8]);
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[10] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_stvar( res, context[13] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_elem( res, context[10] );
  refalrts::use( res );
  refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
  if (rec_res != refalrts::cSuccess)
    return rec_res;
  refalrts::this_is_generated_function(vm);
  do {
    // </10 & NameList$3?1/14 (/17 s.Type/19 t.Pos/20 e.Value/15 )/18 >/11
    context[12] = 0;
    context[13] = 0;
    context[14] = refalrts::call_left( context[12], context[13], context[10], context[11] );
    context[15] = 0;
    context[16] = 0;
    context[17] = refalrts::brackets_left( context[15], context[16], context[12], context[13] );
    if( ! context[17] )
      continue;
    refalrts::bracket_pointers(context[17], context[18]);
    if( ! refalrts::empty_seq( context[12], context[13] ) )
      continue;
    if( ! refalrts::svar_left( context[19], context[15], context[16] ) )
      continue;
    context[21] = refalrts::tvar_left( context[20], context[15], context[16] );
    if( ! context[21] )
      continue;
    // closed e.Value as range 15
    //DEBUG: t.ErrorList: 5
    //DEBUG: t.NextToken: 8
    //DEBUG: s.Tag: 7
    //DEBUG: e.Tokens: 2
    //DEBUG: s.Type: 19
    //DEBUG: t.Pos: 20
    //DEBUG: e.Value: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Tag/7 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Type/19 {REMOVED TILE} e.Value/15 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList/5 } Tile{ AsIs: t.Pos/20 }"expected function name after the "/22 Tile{ AsIs: </10 Reuse: & TokName/14 HalfReuse: s.Tag7 /17 } >/24" keywo"/25 Tile{ HalfReuse: 'r'/18 HalfReuse: 'd'/11 AsIs: >/1 } (/27 )/28 Tile{ AsIs: t.NextToken/8 } Tile{ AsIs: e.Tokens/2 } Tile{ ]] }
    refalrts::alloc_chars(vm, context[22], context[23], "expected function name after the ", 33);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::alloc_chars(vm, context[25], context[26], " keywo", 6);
    refalrts::alloc_open_bracket(vm, context[27]);
    refalrts::alloc_close_bracket(vm, context[28]);
    refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
    refalrts::update_name(context[14], functions[efunc_TokName]);
    refalrts::reinit_svar( context[17], context[7] );
    refalrts::reinit_char(context[18], 'r');
    refalrts::reinit_char(context[11], 'd');
    refalrts::link_brackets( context[27], context[28] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[2], context[3] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[18], context[1] );
    res = refalrts::splice_evar( res, context[24], context[26] );
    res = refalrts::splice_evar( res, context[10], context[17] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    refalrts::splice_to_freelist_open( vm, context[6], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  refalrts::splice_to_freelist(vm, context[10], context[11]);
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_NameList("NameList", COOKIE1_, COOKIE2_, func_NameList);


static refalrts::FnResult func_TkExtern(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & TkExtern/4 t.Pos/5 e.Name/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Name as range 2
  //DEBUG: t.Pos: 5
  //DEBUG: e.Name: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Declaration/4 AsIs: t.Pos/5 } # GN-Entry/7 Tile{ AsIs: e.Name/2 } Tile{ HalfReuse: )/1 ]] }
  refalrts::alloc_ident(vm, context[7], identifiers[ident_GNm_Entry]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Declaration]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_TkExtern("TkExtern", COOKIE1_, COOKIE2_, func_TkExtern);


static refalrts::FnResult func_TkEnum(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & TkEnum/4 t.Pos/5 e.Name/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Name as range 2
  //DEBUG: t.Pos: 5
  //DEBUG: e.Name: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Enum/4 AsIs: t.Pos/5 } # GN-Local/7 Tile{ AsIs: e.Name/2 } Tile{ HalfReuse: )/1 ]] }
  refalrts::alloc_ident(vm, context[7], identifiers[ident_GNm_Local]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Enum]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_TkEnum("TkEnum", COOKIE1_, COOKIE2_, func_TkEnum);


static refalrts::FnResult func_TkEEnum(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & TkEEnum/4 t.Pos/5 e.Name/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Name as range 2
  //DEBUG: t.Pos: 5
  //DEBUG: e.Name: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Enum/4 AsIs: t.Pos/5 } # GN-Entry/7 Tile{ AsIs: e.Name/2 } Tile{ HalfReuse: )/1 ]] }
  refalrts::alloc_ident(vm, context[7], identifiers[ident_GNm_Entry]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Enum]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_TkEEnum("TkEEnum", COOKIE1_, COOKIE2_, func_TkEEnum);


static refalrts::FnResult func_TkSwap(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & TkSwap/4 t.Pos/5 e.Name/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Name as range 2
  //DEBUG: t.Pos: 5
  //DEBUG: e.Name: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Swap/4 AsIs: t.Pos/5 } # GN-Local/7 Tile{ AsIs: e.Name/2 } Tile{ HalfReuse: )/1 ]] }
  refalrts::alloc_ident(vm, context[7], identifiers[ident_GNm_Local]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Swap]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_TkSwap("TkSwap", COOKIE1_, COOKIE2_, func_TkSwap);


static refalrts::FnResult func_TkESwap(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & TkESwap/4 t.Pos/5 e.Name/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Name as range 2
  //DEBUG: t.Pos: 5
  //DEBUG: e.Name: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Swap/4 AsIs: t.Pos/5 } # GN-Entry/7 Tile{ AsIs: e.Name/2 } Tile{ HalfReuse: )/1 ]] }
  refalrts::alloc_ident(vm, context[7], identifiers[ident_GNm_Entry]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Swap]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_TkESwap("TkESwap", COOKIE1_, COOKIE2_, func_TkESwap);


static refalrts::FnResult func_TkLabel(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & TkLabel/4 t.Pos/5 e.Name/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Name as range 2
  //DEBUG: t.Pos: 5
  //DEBUG: e.Name: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Ident/4 AsIs: t.Pos/5 AsIs: e.Name/2 HalfReuse: )/1 ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Ident]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[1] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_TkLabel("TkLabel", COOKIE1_, COOKIE2_, func_TkLabel);


static refalrts::FnResult func_TkEntryL(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & TkEntryL/4 t.Pos/5 e.Name/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Name as range 2
  //DEBUG: t.Pos: 5
  //DEBUG: e.Name: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Entry/4 AsIs: t.Pos/5 } # GN-Entry/7 Tile{ AsIs: e.Name/2 } Tile{ HalfReuse: )/1 ]] }
  refalrts::alloc_ident(vm, context[7], identifiers[ident_GNm_Entry]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Entry]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_TkEntryL("TkEntryL", COOKIE1_, COOKIE2_, func_TkEntryL);


static refalrts::FnResult func_TkInline(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & TkInline/4 t.Pos/5 e.Name/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Name as range 2
  //DEBUG: t.Pos: 5
  //DEBUG: e.Name: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Inline/4 AsIs: t.Pos/5 } # GN-Local/7 Tile{ AsIs: e.Name/2 } Tile{ HalfReuse: )/1 ]] }
  refalrts::alloc_ident(vm, context[7], identifiers[ident_GNm_Local]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Inline]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_TkInline("TkInline", COOKIE1_, COOKIE2_, func_TkInline);


static refalrts::FnResult func_TkDrive(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & TkDrive/4 t.Pos/5 e.Name/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Name as range 2
  //DEBUG: t.Pos: 5
  //DEBUG: e.Name: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Drive/4 AsIs: t.Pos/5 } # GN-Local/7 Tile{ AsIs: e.Name/2 } Tile{ HalfReuse: )/1 ]] }
  refalrts::alloc_ident(vm, context[7], identifiers[ident_GNm_Local]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Drive]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_TkDrive("TkDrive", COOKIE1_, COOKIE2_, func_TkDrive);


static refalrts::FnResult func_TkMeta(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & TkMeta/4 t.Pos/5 e.Name/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Name as range 2
  //DEBUG: t.Pos: 5
  //DEBUG: e.Name: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Meta/4 AsIs: t.Pos/5 } # GN-Local/7 Tile{ AsIs: e.Name/2 } Tile{ HalfReuse: )/1 ]] }
  refalrts::alloc_ident(vm, context[7], identifiers[ident_GNm_Local]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Meta]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_TkMeta("TkMeta", COOKIE1_, COOKIE2_, func_TkMeta);


static refalrts::FnResult func_TkIntrinsic(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & TkIntrinsic/4 t.Pos/5 e.Name/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Name as range 2
  //DEBUG: t.Pos: 5
  //DEBUG: e.Name: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Intrinsic/4 AsIs: t.Pos/5 } # GN-Local/7 Tile{ AsIs: e.Name/2 } Tile{ HalfReuse: )/1 ]] }
  refalrts::alloc_ident(vm, context[7], identifiers[ident_GNm_Local]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Intrinsic]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_TkIntrinsic("TkIntrinsic", COOKIE1_, COOKIE2_, func_TkIntrinsic);


static refalrts::FnResult func_NameListm_DoNames(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 51 elems
  refalrts::Iter context[51];
  refalrts::zeros( context, 51 );
  // </0 & NameList-DoNames/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & NameList-DoNames/4 t.new1/5 s.new2/7 (/10 e.new3/8 )/11 t.new4/12 e.new5/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[8] = 0;
  context[9] = 0;
  context[10] = refalrts::brackets_left( context[8], context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[10], context[11]);
  // closed e.new3 as range 8
  context[13] = refalrts::tvar_left( context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  // closed e.new5 as range 2
  do {
    // </0 & NameList-DoNames/4 t.new6/5 s.new7/7 (/10 e.new12/14 )/11 (/12 s.new8/20 t.new9/21 e.new10/18 )/13 e.new11/16 >/1
    context[14] = context[8];
    context[15] = context[9];
    context[16] = context[2];
    context[17] = context[3];
    context[18] = 0;
    context[19] = 0;
    if( ! refalrts::brackets_term( context[18], context[19], context[12] ) )
      continue;
    // closed e.new12 as range 14
    // closed e.new11 as range 16
    if( ! refalrts::svar_left( context[20], context[18], context[19] ) )
      continue;
    context[22] = refalrts::tvar_left( context[21], context[18], context[19] );
    if( ! context[22] )
      continue;
    // closed e.new10 as range 18
    do {
      // </0 & NameList-DoNames/4 t.ErrorList/5 s.Tag/7 (/10 e.Units/23 )/11 (/12 # TkRefal5Mode/20 t.Pos/21 s.Mode/29 )/13 e.Tokens/27 >/1
      context[23] = context[14];
      context[24] = context[15];
      context[25] = context[18];
      context[26] = context[19];
      context[27] = context[16];
      context[28] = context[17];
      if( ! refalrts::ident_term( identifiers[ident_TkRefal5Mode], context[20] ) )
        continue;
      // closed e.Units as range 23
      // closed e.Tokens as range 27
      if( ! refalrts::svar_left( context[29], context[25], context[26] ) )
        continue;
      if( ! refalrts::empty_seq( context[25], context[26] ) )
        continue;
      //DEBUG: t.ErrorList: 5
      //DEBUG: t.Pos: 21
      //DEBUG: s.Tag: 7
      //DEBUG: e.Units: 23
      //DEBUG: e.Tokens: 27
      //DEBUG: s.Mode: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} (/12 # TkRefal5Mode/20 t.Pos/21 s.Mode/29 )/13 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & NameList-DoNames/4 AsIs: t.ErrorList/5 AsIs: s.Tag/7 AsIs: (/10 AsIs: e.Units/23 AsIs: )/11 } Tile{ AsIs: e.Tokens/27 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[11] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::splice_to_freelist_open( vm, context[11], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NameList-DoNames/4 t.new13/5 s.new14/7 (/10 e.new18/23 )/11 (/12 s.new15/20 t.new16/21 )/13 e.new17/25 >/1
      context[23] = context[14];
      context[24] = context[15];
      context[25] = context[16];
      context[26] = context[17];
      if( ! refalrts::empty_seq( context[18], context[19] ) )
        continue;
      // closed e.new18 as range 23
      // closed e.new17 as range 25
      do {
        // </0 & NameList-DoNames/4 t.new19/5 s.new20/7 (/10 e.new26/27 )/11 (/12 # TkComma/20 t.new21/21 )/13 (/33 s.new22/35 t.new23/36 e.new24/31 )/34 e.new25/29 >/1
        context[27] = context[23];
        context[28] = context[24];
        context[29] = context[25];
        context[30] = context[26];
        if( ! refalrts::ident_term( identifiers[ident_TkComma], context[20] ) )
          continue;
        context[31] = 0;
        context[32] = 0;
        context[33] = refalrts::brackets_left( context[31], context[32], context[29], context[30] );
        if( ! context[33] )
          continue;
        refalrts::bracket_pointers(context[33], context[34]);
        // closed e.new26 as range 27
        // closed e.new25 as range 29
        if( ! refalrts::svar_left( context[35], context[31], context[32] ) )
          continue;
        context[37] = refalrts::tvar_left( context[36], context[31], context[32] );
        if( ! context[37] )
          continue;
        // closed e.new24 as range 31
        do {
          // </0 & NameList-DoNames/4 t.ErrorList/5 s.Tag/7 (/10 e.Units/38 )/11 (/12 # TkComma/20 t.CommaPos/21 )/13 (/33 # TkRefal5Mode/35 t.ModePos/36 s.Mode/44 )/34 e.Tokens/42 >/1
          context[38] = context[27];
          context[39] = context[28];
          context[40] = context[31];
          context[41] = context[32];
          context[42] = context[29];
          context[43] = context[30];
          if( ! refalrts::ident_term( identifiers[ident_TkRefal5Mode], context[35] ) )
            continue;
          // closed e.Units as range 38
          // closed e.Tokens as range 42
          if( ! refalrts::svar_left( context[44], context[40], context[41] ) )
            continue;
          if( ! refalrts::empty_seq( context[40], context[41] ) )
            continue;
          //DEBUG: t.ErrorList: 5
          //DEBUG: t.CommaPos: 21
          //DEBUG: t.ModePos: 36
          //DEBUG: s.Tag: 7
          //DEBUG: e.Units: 38
          //DEBUG: e.Tokens: 42
          //DEBUG: s.Mode: 44

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} (/33 # TkRefal5Mode/35 t.ModePos/36 s.Mode/44 )/34 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & NameList-DoNames/4 AsIs: t.ErrorList/5 AsIs: s.Tag/7 AsIs: (/10 AsIs: e.Units/38 AsIs: )/11 AsIs: (/12 AsIs: # TkComma/20 AsIs: t.CommaPos/21 AsIs: )/13 } Tile{ AsIs: e.Tokens/42 } Tile{ AsIs: >/1 ]] }
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[12], context[13] );
          refalrts::link_brackets( context[10], context[11] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[42], context[43] );
          refalrts::splice_to_freelist_open( vm, context[13], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & NameList-DoNames/4 t.ErrorList/5 s.Tag/7 (/10 e.Units/38 )/11 (/12 # TkComma/20 t.CommaPos/21 )/13 (/33 # TkName/35 t.NamePos/36 e.Name/40 )/34 e.Tokens/42 >/1
        context[38] = context[27];
        context[39] = context[28];
        context[40] = context[31];
        context[41] = context[32];
        context[42] = context[29];
        context[43] = context[30];
        if( ! refalrts::ident_term( identifiers[ident_TkName], context[35] ) )
          continue;
        // closed e.Units as range 38
        // closed e.Name as range 40
        // closed e.Tokens as range 42
        //DEBUG: t.ErrorList: 5
        //DEBUG: t.CommaPos: 21
        //DEBUG: t.NamePos: 36
        //DEBUG: s.Tag: 7
        //DEBUG: e.Units: 38
        //DEBUG: e.Name: 40
        //DEBUG: e.Tokens: 42

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} t.CommaPos/21 )/13 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & NameList-DoNames/4 AsIs: t.ErrorList/5 AsIs: s.Tag/7 AsIs: (/10 AsIs: e.Units/38 HalfReuse: </11 HalfReuse: & __Meta_Mu/12 HalfReuse: s.Tag7 /20 } Tile{ AsIs: t.NamePos/36 } Tile{ AsIs: e.Name/40 } Tile{ HalfReuse: & $table/33 HalfReuse: >/35 } Tile{ AsIs: )/34 AsIs: e.Tokens/42 AsIs: >/1 ]] }
        refalrts::reinit_open_call(context[11]);
        refalrts::reinit_name(context[12], functions[efunc_u_u_Metau_Mu]);
        refalrts::reinit_svar( context[20], context[7] );
        refalrts::reinit_name(context[33], functions[efunc_d_table]);
        refalrts::reinit_close_call(context[35]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[10], context[34] );
        refalrts::push_stack( vm, context[35] );
        refalrts::push_stack( vm, context[11] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[34];
        res = refalrts::splice_evar( res, context[33], context[35] );
        res = refalrts::splice_evar( res, context[40], context[41] );
        res = refalrts::splice_evar( res, context[36], context[37] );
        refalrts::splice_to_freelist_open( vm, context[20], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NameList-DoNames/4 t.ErrorList/5 s.Tag/7 (/10 e.Units/27 )/11 (/12 # TkSemicolon/20 t.Pos/21 )/13 e.Tokens/29 >/1
        context[27] = context[23];
        context[28] = context[24];
        context[29] = context[25];
        context[30] = context[26];
        if( ! refalrts::ident_term( identifiers[ident_TkSemicolon], context[20] ) )
          continue;
        // closed e.Units as range 27
        // closed e.Tokens as range 29
        //DEBUG: t.ErrorList: 5
        //DEBUG: t.Pos: 21
        //DEBUG: s.Tag: 7
        //DEBUG: e.Units: 27
        //DEBUG: e.Tokens: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NameList-DoNames/4 {REMOVED TILE} s.Tag/7 {REMOVED TILE} (/12 # TkSemicolon/20 t.Pos/21 )/13 {REMOVED TILE} >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList/5 } Tile{ AsIs: (/10 AsIs: e.Units/27 AsIs: )/11 } Tile{ AsIs: e.Tokens/29 } Tile{ ]] }
        refalrts::link_brackets( context[10], context[11] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_evar( res, context[10], context[11] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & NameList-DoNames/4 t.ErrorList/5 s.Tag/7 (/10 e.Units/27 )/11 (/12 # TkComma/20 t.Pos/21 )/13 e.Tokens/29 >/1
      context[27] = context[23];
      context[28] = context[24];
      context[29] = context[25];
      context[30] = context[26];
      if( ! refalrts::ident_term( identifiers[ident_TkComma], context[20] ) )
        continue;
      // closed e.Units as range 27
      // closed e.Tokens as range 29
      //DEBUG: t.ErrorList: 5
      //DEBUG: t.Pos: 21
      //DEBUG: s.Tag: 7
      //DEBUG: e.Units: 27
      //DEBUG: e.Tokens: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & NameList-DoNames/4 } </31 & EL-AddErrorAt/32 Tile{ AsIs: t.ErrorList/5 } Tile{ AsIs: t.Pos/21 } Tile{ HalfReuse: 'e'/11 HalfReuse: 'x'/12 HalfReuse: 'p'/20 }"ected name after comma"/33 >/35 Tile{ AsIs: s.Tag/7 AsIs: (/10 } Tile{ AsIs: e.Units/27 } Tile{ AsIs: )/13 AsIs: e.Tokens/29 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[31]);
      refalrts::alloc_name(vm, context[32], functions[efunc_ELm_AddErrorAt]);
      refalrts::alloc_chars(vm, context[33], context[34], "ected name after comma", 22);
      refalrts::alloc_close_call(vm, context[35]);
      refalrts::reinit_char(context[11], 'e');
      refalrts::reinit_char(context[12], 'x');
      refalrts::reinit_char(context[20], 'p');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[13] );
      refalrts::push_stack( vm, context[35] );
      refalrts::push_stack( vm, context[31] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[13];
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[7], context[10] );
      res = refalrts::splice_evar( res, context[33], context[35] );
      res = refalrts::splice_evar( res, context[11], context[20] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & NameList-DoNames/4 t.new13/5 s.new14/7 (/10 e.new18/23 )/11 (/12 # TkName/20 t.new15/21 e.new16/25 )/13 e.new17/27 >/1
    context[23] = context[14];
    context[24] = context[15];
    context[25] = context[18];
    context[26] = context[19];
    context[27] = context[16];
    context[28] = context[17];
    if( ! refalrts::ident_term( identifiers[ident_TkName], context[20] ) )
      continue;
    // closed e.new18 as range 23
    // closed e.new16 as range 25
    // closed e.new17 as range 27
    do {
      // </0 & NameList-DoNames/4 t.ErrorList/5 s.Tag/7 (/10 e.Units/29 )/11 (/12 # TkName/20 t.NamePos/21 e.Name/31 )/13 (/37 # TkOpenBlock/39 t.BracketPos/40 )/38 e.Tokens/33 >/1
      context[29] = context[23];
      context[30] = context[24];
      context[31] = context[25];
      context[32] = context[26];
      context[33] = context[27];
      context[34] = context[28];
      context[35] = 0;
      context[36] = 0;
      context[37] = refalrts::brackets_left( context[35], context[36], context[33], context[34] );
      if( ! context[37] )
        continue;
      refalrts::bracket_pointers(context[37], context[38]);
      context[39] = refalrts::ident_left( identifiers[ident_TkOpenBlock], context[35], context[36] );
      if( ! context[39] )
        continue;
      // closed e.Units as range 29
      // closed e.Name as range 31
      // closed e.Tokens as range 33
      context[41] = refalrts::tvar_left( context[40], context[35], context[36] );
      if( ! context[41] )
        continue;
      if( ! refalrts::empty_seq( context[35], context[36] ) )
        continue;
      //DEBUG: t.ErrorList: 5
      //DEBUG: t.NamePos: 21
      //DEBUG: s.Tag: 7
      //DEBUG: e.Units: 29
      //DEBUG: e.Name: 31
      //DEBUG: e.Tokens: 33
      //DEBUG: t.BracketPos: 40

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList/5 } t.NamePos/21/42"missed semicolon after previous "/44 </46 & TokName/47 Tile{ AsIs: s.Tag/7 } >/48" declaration"/49 Tile{ AsIs: >/1 } Tile{ AsIs: (/10 AsIs: e.Units/29 AsIs: )/11 AsIs: (/12 AsIs: # TkName/20 AsIs: t.NamePos/21 AsIs: e.Name/31 AsIs: )/13 AsIs: (/37 AsIs: # TkOpenBlock/39 AsIs: t.BracketPos/40 AsIs: )/38 } Tile{ AsIs: e.Tokens/33 } Tile{ ]] }
      refalrts::copy_evar(vm, context[42], context[43], context[21], context[22]);
      refalrts::alloc_chars(vm, context[44], context[45], "missed semicolon after previous ", 32);
      refalrts::alloc_open_call(vm, context[46]);
      refalrts::alloc_name(vm, context[47], functions[efunc_TokName]);
      refalrts::alloc_close_call(vm, context[48]);
      refalrts::alloc_chars(vm, context[49], context[50], " declaration", 12);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::link_brackets( context[37], context[38] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[10], context[11] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[48] );
      refalrts::push_stack( vm, context[46] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[10], context[38] );
      res = refalrts::splice_elem( res, context[1] );
      res = refalrts::splice_evar( res, context[48], context[50] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[42], context[47] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & NameList-DoNames/4 t.ErrorList/5 s.Tag/7 (/10 e.Units/29 )/11 (/12 # TkName/20 t.Pos/21 e.Name/31 )/13 e.Tokens/33 >/1
    context[29] = context[23];
    context[30] = context[24];
    context[31] = context[25];
    context[32] = context[26];
    context[33] = context[27];
    context[34] = context[28];
    // closed e.Units as range 29
    // closed e.Name as range 31
    // closed e.Tokens as range 33
    //DEBUG: t.ErrorList: 5
    //DEBUG: t.Pos: 21
    //DEBUG: s.Tag: 7
    //DEBUG: e.Units: 29
    //DEBUG: e.Name: 31
    //DEBUG: e.Tokens: 33

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Name/31 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & NameList-DoNames/4 } </35 & EL-AddErrorAt/36 Tile{ AsIs: t.ErrorList/5 } Tile{ AsIs: t.Pos/21 } Tile{ HalfReuse: 'm'/11 HalfReuse: 'i'/12 HalfReuse: 's'/20 }"sed comma after the external name"/37 >/39 Tile{ AsIs: s.Tag/7 AsIs: (/10 } Tile{ AsIs: e.Units/29 } Tile{ AsIs: )/13 AsIs: e.Tokens/33 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[35]);
    refalrts::alloc_name(vm, context[36], functions[efunc_ELm_AddErrorAt]);
    refalrts::alloc_chars(vm, context[37], context[38], "sed comma after the external name", 33);
    refalrts::alloc_close_call(vm, context[39]);
    refalrts::reinit_char(context[11], 'm');
    refalrts::reinit_char(context[12], 'i');
    refalrts::reinit_char(context[20], 's');
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[10], context[13] );
    refalrts::push_stack( vm, context[39] );
    refalrts::push_stack( vm, context[35] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[13];
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_evar( res, context[7], context[10] );
    res = refalrts::splice_evar( res, context[37], context[39] );
    res = refalrts::splice_evar( res, context[11], context[20] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NameList-DoNames/4 t.ErrorList/5 s.Tag/7 (/10 e.Units/14 )/11 t.NextToken/12 e.Tokens/16 >/1
    context[14] = context[8];
    context[15] = context[9];
    context[16] = context[2];
    context[17] = context[3];
    // closed e.Units as range 14
    // closed e.Tokens as range 16
    //DEBUG: t.ErrorList: 5
    //DEBUG: t.NextToken: 12
    //DEBUG: s.Tag: 7
    //DEBUG: e.Units: 14
    //DEBUG: e.Tokens: 16
    //5: t.ErrorList
    //7: s.Tag
    //12: t.NextToken
    //14: e.Units
    //16: e.Tokens
    //21: t.NextToken

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[18]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_NameListm_DoNames_S8C1]);
    refalrts::copy_stvar(vm, context[21], context[12]);
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[18] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_stvar( res, context[21] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_elem( res, context[18] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </18 & NameList-DoNames$8?1/22 (/25 s.Type/27 t.Pos/28 e.Value/23 )/26 >/19
      context[20] = 0;
      context[21] = 0;
      context[22] = refalrts::call_left( context[20], context[21], context[18], context[19] );
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_left( context[23], context[24], context[20], context[21] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      if( ! refalrts::empty_seq( context[20], context[21] ) )
        continue;
      if( ! refalrts::svar_left( context[27], context[23], context[24] ) )
        continue;
      context[29] = refalrts::tvar_left( context[28], context[23], context[24] );
      if( ! context[29] )
        continue;
      // closed e.Value as range 23
      //DEBUG: t.ErrorList: 5
      //DEBUG: t.NextToken: 12
      //DEBUG: s.Tag: 7
      //DEBUG: e.Units: 14
      //DEBUG: e.Tokens: 16
      //DEBUG: s.Type: 27
      //DEBUG: t.Pos: 28
      //DEBUG: e.Value: 23
      //5: t.ErrorList
      //7: s.Tag
      //12: t.NextToken
      //14: e.Units
      //16: e.Tokens
      //23: e.Value
      //27: s.Type
      //28: t.Pos
      //35: s.Type

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[32], functions[efunc_gen_NameListm_DoNames_S8C2]);
      refalrts::alloc_open_call(vm, context[33]);
      refalrts::alloc_name(vm, context[34], functions[efunc_gen_OneOf_Z1]);
      refalrts::copy_stvar(vm, context[35], context[27]);
      refalrts::alloc_ident(vm, context[36], identifiers[ident_TkExtern]);
      refalrts::alloc_ident(vm, context[37], identifiers[ident_TkEntry]);
      refalrts::alloc_ident(vm, context[38], identifiers[ident_TkEOF]);
      refalrts::alloc_close_call(vm, context[39]);
      refalrts::alloc_close_call(vm, context[31]);
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[30] );
      res = refalrts::splice_elem( res, context[31] );
      refalrts::push_stack( vm, context[39] );
      refalrts::push_stack( vm, context[33] );
      res = refalrts::splice_elem( res, context[39] );
      res = refalrts::splice_elem( res, context[38] );
      res = refalrts::splice_elem( res, context[37] );
      res = refalrts::splice_elem( res, context[36] );
      res = refalrts::splice_stvar( res, context[35] );
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_elem( res, context[30] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </30 & NameList-DoNames$8?2/34 # True/35 >/31
        context[32] = 0;
        context[33] = 0;
        context[34] = refalrts::call_left( context[32], context[33], context[30], context[31] );
        context[35] = refalrts::ident_left( identifiers[ident_True], context[32], context[33] );
        if( ! context[35] )
          continue;
        if( ! refalrts::empty_seq( context[32], context[33] ) )
          continue;
        //DEBUG: t.ErrorList: 5
        //DEBUG: t.NextToken: 12
        //DEBUG: s.Tag: 7
        //DEBUG: e.Units: 14
        //DEBUG: e.Tokens: 16
        //DEBUG: s.Type: 27
        //DEBUG: t.Pos: 28
        //DEBUG: e.Value: 23

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Tag/7 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Type/27 {REMOVED TILE} e.Value/23 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList/5 } Tile{ AsIs: t.Pos/28 } Tile{ HalfReuse: 's'/18 HalfReuse: 'e'/22 HalfReuse: 'm'/25 } Tile{ HalfReuse: 'i'/26 HalfReuse: 'c'/19 HalfReuse: 'o'/30 HalfReuse: 'l'/34 HalfReuse: 'o'/35 HalfReuse: 'n'/31 AsIs: >/1 } Tile{ AsIs: (/10 AsIs: e.Units/14 AsIs: )/11 AsIs: t.NextToken/12 } Tile{ AsIs: e.Tokens/16 } Tile{ ]] }
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_char(context[18], 's');
        refalrts::reinit_char(context[22], 'e');
        refalrts::reinit_char(context[25], 'm');
        refalrts::reinit_char(context[26], 'i');
        refalrts::reinit_char(context[19], 'c');
        refalrts::reinit_char(context[30], 'o');
        refalrts::reinit_char(context[34], 'l');
        refalrts::reinit_char(context[35], 'o');
        refalrts::reinit_char(context[31], 'n');
        refalrts::link_brackets( context[10], context[11] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[10], context[13] );
        res = refalrts::splice_evar( res, context[26], context[1] );
        res = refalrts::splice_evar( res, context[18], context[25] );
        res = refalrts::splice_evar( res, context[28], context[29] );
        refalrts::splice_to_freelist_open( vm, context[6], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[30], context[31]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[18], context[19]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NameList-DoNames/4 t.new6/5 s.new7/7 (/10 e.new12/14 )/11 (/12 s.new8/20 t.new9/21 e.new10/18 )/13 e.new11/16 >/1
    context[14] = context[8];
    context[15] = context[9];
    context[16] = context[2];
    context[17] = context[3];
    context[18] = 0;
    context[19] = 0;
    if( ! refalrts::brackets_term( context[18], context[19], context[12] ) )
      continue;
    // closed e.new12 as range 14
    // closed e.new11 as range 16
    if( ! refalrts::svar_left( context[20], context[18], context[19] ) )
      continue;
    context[22] = refalrts::tvar_left( context[21], context[18], context[19] );
    if( ! context[22] )
      continue;
    // closed e.new10 as range 18
    do {
      // </0 & NameList-DoNames/4 t.ErrorList/5 s.Tag/7 (/10 e.Units/23 )/11 (/12 # TkError/20 t.0/21 e.1/25 )/13 e.Tokens/27 >/1
      context[23] = context[14];
      context[24] = context[15];
      context[25] = context[18];
      context[26] = context[19];
      context[27] = context[16];
      context[28] = context[17];
      if( ! refalrts::ident_term( identifiers[ident_TkError], context[20] ) )
        continue;
      // closed e.Units as range 23
      // closed e.1 as range 25
      // closed e.Tokens as range 27
      //DEBUG: t.ErrorList: 5
      //DEBUG: t.0: 21
      //DEBUG: s.Tag: 7
      //DEBUG: e.Units: 23
      //DEBUG: e.1: 25
      //DEBUG: e.Tokens: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & NameList-DoNames/4 } Tile{ HalfReuse: </12 HalfReuse: & EL-AddErrorAt/20 } Tile{ AsIs: t.ErrorList/5 } Tile{ AsIs: t.0/21 } Tile{ AsIs: e.1/25 } Tile{ HalfReuse: >/11 } Tile{ AsIs: s.Tag/7 AsIs: (/10 } Tile{ AsIs: e.Units/23 } Tile{ AsIs: )/13 AsIs: e.Tokens/27 AsIs: >/1 ]] }
      refalrts::reinit_open_call(context[12]);
      refalrts::reinit_name(context[20], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_close_call(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[13] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[13];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[7], context[10] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[12], context[20] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & NameList-DoNames/4 t.ErrorList/5 s.Tag/7 (/10 e.Units/23 )/11 (/12 s.Type/20 t.0/21 e.1/25 )/13 e.Tokens/27 >/1
    context[23] = context[14];
    context[24] = context[15];
    context[25] = context[18];
    context[26] = context[19];
    context[27] = context[16];
    context[28] = context[17];
    // closed e.Units as range 23
    // closed e.1 as range 25
    // closed e.Tokens as range 27
    //DEBUG: t.ErrorList: 5
    //DEBUG: t.0: 21
    //DEBUG: s.Tag: 7
    //DEBUG: s.Type: 20
    //DEBUG: e.Units: 23
    //DEBUG: e.1: 25
    //DEBUG: e.Tokens: 27

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.1/25 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & NameList-DoNames/4 } </29 & EL-AddErrorAt/30 Tile{ AsIs: t.ErrorList/5 } Tile{ AsIs: t.0/21 }"unexpected "/31 Tile{ HalfReuse: </11 HalfReuse: & TokName/12 AsIs: s.Type/20 } >/33", expected comma or semicolon"/34 >/36 Tile{ AsIs: s.Tag/7 AsIs: (/10 } Tile{ AsIs: e.Units/23 } Tile{ AsIs: )/13 AsIs: e.Tokens/27 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[29]);
    refalrts::alloc_name(vm, context[30], functions[efunc_ELm_AddErrorAt]);
    refalrts::alloc_chars(vm, context[31], context[32], "unexpected ", 11);
    refalrts::alloc_close_call(vm, context[33]);
    refalrts::alloc_chars(vm, context[34], context[35], ", expected comma or semicolon", 29);
    refalrts::alloc_close_call(vm, context[36]);
    refalrts::reinit_open_call(context[11]);
    refalrts::reinit_name(context[12], functions[efunc_TokName]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[10], context[13] );
    refalrts::push_stack( vm, context[36] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[13];
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[7], context[10] );
    res = refalrts::splice_evar( res, context[33], context[36] );
    res = refalrts::splice_evar( res, context[11], context[20] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & NameList-DoNames/4 t.ErrorList/5 s.Tag/7 (/10 e.Units/8 )/11 t.NextToken/12 e.Tokens/2 >/1
  // closed e.Units as range 8
  // closed e.Tokens as range 2
  //DEBUG: t.ErrorList: 5
  //DEBUG: t.NextToken: 12
  //DEBUG: s.Tag: 7
  //DEBUG: e.Units: 8
  //DEBUG: e.Tokens: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 AsIs: & NameList-DoNames/4 } </14 & UnexpectedToken*2/15 Tile{ AsIs: t.ErrorList/5 } Tile{ AsIs: t.NextToken/12 }"comma or semicolon"/16 >/18 Tile{ AsIs: s.Tag/7 AsIs: (/10 AsIs: e.Units/8 AsIs: )/11 } Tile{ AsIs: e.Tokens/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[14]);
  refalrts::alloc_name(vm, context[15], functions[efunc_gen_UnexpectedToken_D2]);
  refalrts::alloc_chars(vm, context[16], context[17], "comma or semicolon", 18);
  refalrts::alloc_close_call(vm, context[18]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[10], context[11] );
  refalrts::push_stack( vm, context[18] );
  refalrts::push_stack( vm, context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[11] );
  res = refalrts::splice_evar( res, context[16], context[18] );
  res = refalrts::splice_evar( res, context[12], context[13] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_NameListm_DoNames("NameList-DoNames", COOKIE1_, COOKIE2_, func_NameListm_DoNames);


static refalrts::FnResult func_gen_Include_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 54 elems
  refalrts::Iter context[54];
  refalrts::zeros( context, 54 );
  // </0 & Include=1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Include=1/4 (/7 e.new1/5 )/8 t.new2/9 t.new3/11 t.new4/13 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & Include=1/4 (/7 e.new10/15 )/8 (/9 s.new5/19 t.new6/20 e.new7/17 )/10 t.new8/11 t.new9/13 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = 0;
    context[18] = 0;
    if( ! refalrts::brackets_term( context[17], context[18], context[9] ) )
      continue;
    // closed e.new10 as range 15
    if( ! refalrts::svar_left( context[19], context[17], context[18] ) )
      continue;
    context[21] = refalrts::tvar_left( context[20], context[17], context[18] );
    if( ! context[21] )
      continue;
    // closed e.new7 as range 17
    do {
      // </0 & Include=1/4 (/7 e.new15/22 )/8 (/9 # TkCompound/19 t.new11/20 e.new12/24 )/10 t.new13/11 t.new14/13 >/1
      context[22] = context[15];
      context[23] = context[16];
      context[24] = context[17];
      context[25] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_TkCompound], context[19] ) )
        continue;
      // closed e.new15 as range 22
      // closed e.new12 as range 24
      do {
        // </0 & Include=1/4 (/7 e.new22/26 )/8 (/9 # TkCompound/19 t.new16/20 e.new17/28 )/10 (/11 s.new18/32 t.new19/33 e.new20/30 )/12 t.new21/13 >/1
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        context[29] = context[25];
        context[30] = 0;
        context[31] = 0;
        if( ! refalrts::brackets_term( context[30], context[31], context[11] ) )
          continue;
        // closed e.new22 as range 26
        // closed e.new17 as range 28
        if( ! refalrts::svar_left( context[32], context[30], context[31] ) )
          continue;
        context[34] = refalrts::tvar_left( context[33], context[30], context[31] );
        if( ! context[34] )
          continue;
        // closed e.new20 as range 30
        do {
          // </0 & Include=1/4 (/7 e.Tokens/35 )/8 (/9 # TkCompound/19 t.0/20 e.2/37 )/10 (/11 # TkSemicolon/32 t.2/33 )/12 t.ErrorList$a/13 >/1
          context[35] = context[26];
          context[36] = context[27];
          context[37] = context[28];
          context[38] = context[29];
          if( ! refalrts::ident_term( identifiers[ident_TkSemicolon], context[32] ) )
            continue;
          if( ! refalrts::empty_seq( context[30], context[31] ) )
            continue;
          // closed e.Tokens as range 35
          // closed e.2 as range 37
          //DEBUG: t.0: 20
          //DEBUG: t.2: 33
          //DEBUG: t.ErrorList$a: 13
          //DEBUG: e.Tokens: 35
          //DEBUG: e.2: 37

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & Include=1/4 (/7 {REMOVED TILE} {REMOVED TILE} # TkSemicolon/32 t.2/33 )/12 {REMOVED TILE} >/1 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList$a/13 } Tile{ HalfReuse: (/8 AsIs: (/9 Reuse: # Include/19 AsIs: t.0/20 AsIs: e.2/37 AsIs: )/10 HalfReuse: )/11 } Tile{ AsIs: e.Tokens/35 } Tile{ ]] }
          refalrts::reinit_open_bracket(context[8]);
          refalrts::update_ident(context[19], identifiers[ident_Include]);
          refalrts::reinit_close_bracket(context[11]);
          refalrts::link_brackets( context[8], context[11] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[35], context[36] );
          res = refalrts::splice_evar( res, context[8], context[11] );
          res = refalrts::splice_evar( res, context[13], context[14] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Include=1/4 (/7 e.Tokens/35 )/8 (/9 # TkCompound/19 t.0/20 e.1/37 )/10 (/11 # TkError/32 t.1/33 e.2/39 )/12 t.ErrorList$a/13 >/1
          context[35] = context[26];
          context[36] = context[27];
          context[37] = context[28];
          context[38] = context[29];
          context[39] = context[30];
          context[40] = context[31];
          if( ! refalrts::ident_term( identifiers[ident_TkError], context[32] ) )
            continue;
          // closed e.Tokens as range 35
          // closed e.1 as range 37
          // closed e.2 as range 39
          //DEBUG: t.0: 20
          //DEBUG: t.1: 33
          //DEBUG: t.ErrorList$a: 13
          //DEBUG: e.Tokens: 35
          //DEBUG: e.1: 37
          //DEBUG: e.2: 39

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 } Tile{ AsIs: t.ErrorList$a/13 } t.1/33/41 e.2/39/43 Tile{ AsIs: >/1 } Tile{ HalfReuse: (/8 AsIs: (/9 Reuse: # Include/19 AsIs: t.0/20 } Tile{ AsIs: e.1/37 } Tile{ HalfReuse: )/7 } Tile{ AsIs: )/10 AsIs: (/11 AsIs: # TkError/32 AsIs: t.1/33 AsIs: e.2/39 AsIs: )/12 } Tile{ AsIs: e.Tokens/35 } Tile{ ]] }
          refalrts::copy_evar(vm, context[41], context[42], context[33], context[34]);
          refalrts::copy_evar(vm, context[43], context[44], context[39], context[40]);
          refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
          refalrts::reinit_open_bracket(context[8]);
          refalrts::update_ident(context[19], identifiers[ident_Include]);
          refalrts::reinit_close_bracket(context[7]);
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[8], context[10] );
          refalrts::link_brackets( context[9], context[7] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[35], context[36] );
          res = refalrts::splice_evar( res, context[10], context[12] );
          res = refalrts::splice_elem( res, context[7] );
          res = refalrts::splice_evar( res, context[37], context[38] );
          res = refalrts::splice_evar( res, context[8], context[21] );
          res = refalrts::splice_elem( res, context[1] );
          res = refalrts::splice_evar( res, context[43], context[44] );
          res = refalrts::splice_evar( res, context[41], context[42] );
          res = refalrts::splice_evar( res, context[13], context[14] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Include=1/4 (/7 e.Tokens/35 )/8 (/9 # TkCompound/19 t.0/20 e.1/37 )/10 (/11 s.Type/32 t.1/33 e.2/39 )/12 t.ErrorList$a/13 >/1
        context[35] = context[26];
        context[36] = context[27];
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        // closed e.Tokens as range 35
        // closed e.1 as range 37
        // closed e.2 as range 39
        //DEBUG: t.0: 20
        //DEBUG: t.1: 33
        //DEBUG: t.ErrorList$a: 13
        //DEBUG: s.Type: 32
        //DEBUG: e.Tokens: 35
        //DEBUG: e.1: 37
        //DEBUG: e.2: 39

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 } Tile{ AsIs: t.ErrorList$a/13 } t.1/33/41"une"/43 Tile{ HalfReuse: 'x'/7 }"pected "/45 </47 & TokName/48 s.Type/32/49 >/50", expected \';\'"/51 Tile{ AsIs: >/1 } Tile{ HalfReuse: (/8 AsIs: (/9 Reuse: # Include/19 AsIs: t.0/20 } Tile{ AsIs: e.1/37 } )/53 Tile{ AsIs: )/10 AsIs: (/11 AsIs: s.Type/32 AsIs: t.1/33 AsIs: e.2/39 AsIs: )/12 } Tile{ AsIs: e.Tokens/35 } Tile{ ]] }
        refalrts::copy_evar(vm, context[41], context[42], context[33], context[34]);
        refalrts::alloc_chars(vm, context[43], context[44], "une", 3);
        refalrts::alloc_chars(vm, context[45], context[46], "pected ", 7);
        refalrts::alloc_open_call(vm, context[47]);
        refalrts::alloc_name(vm, context[48], functions[efunc_TokName]);
        refalrts::copy_stvar(vm, context[49], context[32]);
        refalrts::alloc_close_call(vm, context[50]);
        refalrts::alloc_chars(vm, context[51], context[52], ", expected \';\'", 14);
        refalrts::alloc_close_bracket(vm, context[53]);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_char(context[7], 'x');
        refalrts::reinit_open_bracket(context[8]);
        refalrts::update_ident(context[19], identifiers[ident_Include]);
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[8], context[10] );
        refalrts::link_brackets( context[9], context[53] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[50] );
        refalrts::push_stack( vm, context[47] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_evar( res, context[10], context[12] );
        res = refalrts::splice_elem( res, context[53] );
        res = refalrts::splice_evar( res, context[37], context[38] );
        res = refalrts::splice_evar( res, context[8], context[21] );
        res = refalrts::splice_elem( res, context[1] );
        res = refalrts::splice_evar( res, context[45], context[52] );
        res = refalrts::splice_elem( res, context[7] );
        res = refalrts::splice_evar( res, context[41], context[44] );
        res = refalrts::splice_evar( res, context[13], context[14] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Include=1/4 (/7 e.Tokens/26 )/8 (/9 # TkCompound/19 t.0/20 e.1/28 )/10 t.Token2/11 t.ErrorList$a/13 >/1
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      context[29] = context[25];
      // closed e.Tokens as range 26
      // closed e.1 as range 28
      //DEBUG: t.0: 20
      //DEBUG: t.Token2: 11
      //DEBUG: t.ErrorList$a: 13
      //DEBUG: e.Tokens: 26
      //DEBUG: e.1: 28

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & UnexpectedToken*2/4 } Tile{ AsIs: t.ErrorList$a/13 } Tile{ AsIs: t.Token2/11 } Tile{ HalfReuse: '\''/7 }";\'"/30 Tile{ AsIs: >/1 } Tile{ HalfReuse: (/8 AsIs: (/9 Reuse: # Include/19 AsIs: t.0/20 AsIs: e.1/28 AsIs: )/10 } )/32 t.Token2/11/33 Tile{ AsIs: e.Tokens/26 } Tile{ ]] }
      refalrts::alloc_chars(vm, context[30], context[31], ";\'", 2);
      refalrts::alloc_close_bracket(vm, context[32]);
      refalrts::copy_evar(vm, context[33], context[34], context[11], context[12]);
      refalrts::update_name(context[4], functions[efunc_gen_UnexpectedToken_D2]);
      refalrts::reinit_char(context[7], '\'');
      refalrts::reinit_open_bracket(context[8]);
      refalrts::update_ident(context[19], identifiers[ident_Include]);
      refalrts::link_brackets( context[8], context[32] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[32], context[34] );
      res = refalrts::splice_evar( res, context[8], context[10] );
      res = refalrts::splice_elem( res, context[1] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Include=1/4 (/7 e.Tokens/22 )/8 (/9 # TkError/19 t.0/20 e.1/24 )/10 t.Token2/11 t.ErrorList$a/13 >/1
      context[22] = context[15];
      context[23] = context[16];
      context[24] = context[17];
      context[25] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_TkError], context[19] ) )
        continue;
      // closed e.Tokens as range 22
      // closed e.1 as range 24
      //DEBUG: t.0: 20
      //DEBUG: t.Token2: 11
      //DEBUG: t.ErrorList$a: 13
      //DEBUG: e.Tokens: 22
      //DEBUG: e.1: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 } Tile{ AsIs: t.ErrorList$a/13 } t.0/20/26 e.1/24/28 Tile{ AsIs: >/1 } Tile{ AsIs: (/7 } Tile{ AsIs: )/8 AsIs: (/9 AsIs: # TkError/19 AsIs: t.0/20 AsIs: e.1/24 AsIs: )/10 AsIs: t.Token2/11 } Tile{ AsIs: e.Tokens/22 } Tile{ ]] }
      refalrts::copy_evar(vm, context[26], context[27], context[20], context[21]);
      refalrts::copy_evar(vm, context[28], context[29], context[24], context[25]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::link_brackets( context[9], context[10] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[8], context[12] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_elem( res, context[1] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Include=1/4 (/7 e.Tokens/22 )/8 (/9 s.Type/19 t.0/20 e.1/24 )/10 t.Token2/11 t.ErrorList$a/13 >/1
    context[22] = context[15];
    context[23] = context[16];
    context[24] = context[17];
    context[25] = context[18];
    // closed e.Tokens as range 22
    // closed e.1 as range 24
    //DEBUG: t.0: 20
    //DEBUG: t.Token2: 11
    //DEBUG: t.ErrorList$a: 13
    //DEBUG: s.Type: 19
    //DEBUG: e.Tokens: 22
    //DEBUG: e.1: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 } Tile{ AsIs: t.ErrorList$a/13 } t.0/20/26"unexpected "/28 </30 & TokName/31 s.Type/19/32 Tile{ AsIs: >/1 }", expected compound symbol"/33 >/35 Tile{ AsIs: (/7 } Tile{ AsIs: )/8 AsIs: (/9 AsIs: s.Type/19 AsIs: t.0/20 AsIs: e.1/24 AsIs: )/10 AsIs: t.Token2/11 } Tile{ AsIs: e.Tokens/22 } Tile{ ]] }
    refalrts::copy_evar(vm, context[26], context[27], context[20], context[21]);
    refalrts::alloc_chars(vm, context[28], context[29], "unexpected ", 11);
    refalrts::alloc_open_call(vm, context[30]);
    refalrts::alloc_name(vm, context[31], functions[efunc_TokName]);
    refalrts::copy_stvar(vm, context[32], context[19]);
    refalrts::alloc_chars(vm, context[33], context[34], ", expected compound symbol", 26);
    refalrts::alloc_close_call(vm, context[35]);
    refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
    refalrts::link_brackets( context[9], context[10] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[30] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[8], context[12] );
    res = refalrts::splice_elem( res, context[7] );
    res = refalrts::splice_evar( res, context[33], context[35] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[26], context[32] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Include=1/4 (/7 e.Tokens/5 )/8 t.Token1/9 t.Token2/11 t.ErrorList$a/13 >/1
  // closed e.Tokens as range 5
  //DEBUG: t.Token1: 9
  //DEBUG: t.Token2: 11
  //DEBUG: t.ErrorList$a: 13
  //DEBUG: e.Tokens: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UnexpectedToken*2/4 } Tile{ AsIs: t.ErrorList$a/13 } t.Token1/9/15"compound symbol"/17 Tile{ AsIs: >/1 } Tile{ AsIs: (/7 } Tile{ AsIs: )/8 AsIs: t.Token1/9 AsIs: t.Token2/11 } Tile{ AsIs: e.Tokens/5 } Tile{ ]] }
  refalrts::copy_evar(vm, context[15], context[16], context[9], context[10]);
  refalrts::alloc_chars(vm, context[17], context[18], "compound symbol", 15);
  refalrts::update_name(context[4], functions[efunc_gen_UnexpectedToken_D2]);
  refalrts::link_brackets( context[7], context[8] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[8], context[12] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_elem( res, context[1] );
  res = refalrts::splice_evar( res, context[15], context[18] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Include_A1("Include=1", COOKIE1_, COOKIE2_, func_gen_Include_A1);


static refalrts::FnResult func_Include(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 56 elems
  refalrts::Iter context[56];
  refalrts::zeros( context, 56 );
  // </0 & Include/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Include/4 t.new1/5 s.new2/7 t.new3/8 t.new4/10 t.new5/12 e.new6/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[9] = refalrts::tvar_left( context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  context[11] = refalrts::tvar_left( context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  context[13] = refalrts::tvar_left( context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  // closed e.new6 as range 2
  do {
    // </0 & Include/4 t.ErrorList/5 # Classic/7 t.Pos/8 t.Token1/10 t.Token2/12 e.Tokens/14 >/1
    context[14] = context[2];
    context[15] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Classic], context[7] ) )
      continue;
    // closed e.Tokens as range 14
    //DEBUG: t.ErrorList: 5
    //DEBUG: t.Pos: 8
    //DEBUG: t.Token1: 10
    //DEBUG: t.Token2: 12
    //DEBUG: e.Tokens: 14

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Include=1/4 } (/16 Tile{ AsIs: e.Tokens/14 } )/17 Tile{ AsIs: t.Token1/10 AsIs: t.Token2/12 } </18 Tile{ HalfReuse: & EL-AddErrorAt/7 } Tile{ AsIs: t.ErrorList/5 } Tile{ AsIs: t.Pos/8 }"$INCLUDE is extension"/19 >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[16]);
    refalrts::alloc_close_bracket(vm, context[17]);
    refalrts::alloc_open_call(vm, context[18]);
    refalrts::alloc_chars(vm, context[19], context[20], "$INCLUDE is extension", 21);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_Include_A1]);
    refalrts::reinit_name(context[7], functions[efunc_ELm_AddErrorAt]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[18] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[19], context[21] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_elem( res, context[7] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[10], context[13] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_elem( res, context[16] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Include/4 t.new7/5 # Extended/7 t.new8/8 t.new9/10 t.new10/12 e.new11/14 >/1
    context[14] = context[2];
    context[15] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Extended], context[7] ) )
      continue;
    // closed e.new11 as range 14
    do {
      // </0 & Include/4 t.new12/5 # Extended/7 t.new13/8 (/10 s.new14/20 t.new15/21 e.new16/18 )/11 t.new17/12 e.new18/16 >/1
      context[16] = context[14];
      context[17] = context[15];
      context[18] = 0;
      context[19] = 0;
      if( ! refalrts::brackets_term( context[18], context[19], context[10] ) )
        continue;
      // closed e.new18 as range 16
      if( ! refalrts::svar_left( context[20], context[18], context[19] ) )
        continue;
      context[22] = refalrts::tvar_left( context[21], context[18], context[19] );
      if( ! context[22] )
        continue;
      // closed e.new16 as range 18
      do {
        // </0 & Include/4 t.new19/5 # Extended/7 t.new20/8 (/10 # TkCompound/20 t.new21/21 e.new22/23 )/11 t.new23/12 e.new24/25 >/1
        context[23] = context[18];
        context[24] = context[19];
        context[25] = context[16];
        context[26] = context[17];
        if( ! refalrts::ident_term( identifiers[ident_TkCompound], context[20] ) )
          continue;
        // closed e.new22 as range 23
        // closed e.new24 as range 25
        do {
          // </0 & Include/4 t.new25/5 # Extended/7 t.new26/8 (/10 # TkCompound/20 t.new27/21 e.new28/27 )/11 (/12 s.new29/33 t.new30/34 e.new31/31 )/13 e.new32/29 >/1
          context[27] = context[23];
          context[28] = context[24];
          context[29] = context[25];
          context[30] = context[26];
          context[31] = 0;
          context[32] = 0;
          if( ! refalrts::brackets_term( context[31], context[32], context[12] ) )
            continue;
          // closed e.new28 as range 27
          // closed e.new32 as range 29
          if( ! refalrts::svar_left( context[33], context[31], context[32] ) )
            continue;
          context[35] = refalrts::tvar_left( context[34], context[31], context[32] );
          if( ! context[35] )
            continue;
          // closed e.new31 as range 31
          do {
            // </0 & Include/4 t.ErrorList/5 # Extended/7 t.Pos/8 (/10 # TkCompound/20 t.0/21 e.2/36 )/11 (/12 # TkSemicolon/33 t.2/34 )/13 e.Tokens/38 >/1
            context[36] = context[27];
            context[37] = context[28];
            context[38] = context[29];
            context[39] = context[30];
            if( ! refalrts::ident_term( identifiers[ident_TkSemicolon], context[33] ) )
              continue;
            if( ! refalrts::empty_seq( context[31], context[32] ) )
              continue;
            // closed e.2 as range 36
            // closed e.Tokens as range 38
            //DEBUG: t.ErrorList: 5
            //DEBUG: t.Pos: 8
            //DEBUG: t.0: 21
            //DEBUG: t.2: 34
            //DEBUG: e.2: 36
            //DEBUG: e.Tokens: 38

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} </0 & Include/4 {REMOVED TILE} t.Pos/8 {REMOVED TILE} # TkSemicolon/33 t.2/34 )/13 {REMOVED TILE} >/1 {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList/5 HalfReuse: (/7 } Tile{ AsIs: (/10 Reuse: # Include/20 AsIs: t.0/21 AsIs: e.2/36 AsIs: )/11 HalfReuse: )/12 } Tile{ AsIs: e.Tokens/38 } Tile{ ]] }
            refalrts::reinit_open_bracket(context[7]);
            refalrts::update_ident(context[20], identifiers[ident_Include]);
            refalrts::reinit_close_bracket(context[12]);
            refalrts::link_brackets( context[7], context[12] );
            refalrts::link_brackets( context[10], context[11] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[38], context[39] );
            res = refalrts::splice_evar( res, context[10], context[12] );
            res = refalrts::splice_evar( res, context[5], context[7] );
            refalrts::splice_to_freelist_open( vm, trash_prev, res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & Include/4 t.ErrorList/5 # Extended/7 t.Pos/8 (/10 # TkCompound/20 t.0/21 e.1/36 )/11 (/12 # TkError/33 t.1/34 e.2/38 )/13 e.Tokens/40 >/1
            context[36] = context[27];
            context[37] = context[28];
            context[38] = context[31];
            context[39] = context[32];
            context[40] = context[29];
            context[41] = context[30];
            if( ! refalrts::ident_term( identifiers[ident_TkError], context[33] ) )
              continue;
            // closed e.1 as range 36
            // closed e.2 as range 38
            // closed e.Tokens as range 40
            //DEBUG: t.ErrorList: 5
            //DEBUG: t.Pos: 8
            //DEBUG: t.0: 21
            //DEBUG: t.1: 34
            //DEBUG: e.1: 36
            //DEBUG: e.2: 38
            //DEBUG: e.Tokens: 40

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} t.Pos/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList/5 } t.1/34/42 e.2/38/44 Tile{ AsIs: >/1 } Tile{ HalfReuse: (/7 } Tile{ AsIs: (/10 Reuse: # Include/20 AsIs: t.0/21 } Tile{ AsIs: e.1/36 } )/46 Tile{ AsIs: )/11 AsIs: (/12 AsIs: # TkError/33 AsIs: t.1/34 AsIs: e.2/38 AsIs: )/13 } Tile{ AsIs: e.Tokens/40 } Tile{ ]] }
            refalrts::copy_evar(vm, context[42], context[43], context[34], context[35]);
            refalrts::copy_evar(vm, context[44], context[45], context[38], context[39]);
            refalrts::alloc_close_bracket(vm, context[46]);
            refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
            refalrts::reinit_open_bracket(context[7]);
            refalrts::update_ident(context[20], identifiers[ident_Include]);
            refalrts::link_brackets( context[12], context[13] );
            refalrts::link_brackets( context[7], context[11] );
            refalrts::link_brackets( context[10], context[46] );
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[40], context[41] );
            res = refalrts::splice_evar( res, context[11], context[13] );
            res = refalrts::splice_elem( res, context[46] );
            res = refalrts::splice_evar( res, context[36], context[37] );
            res = refalrts::splice_evar( res, context[10], context[22] );
            res = refalrts::splice_elem( res, context[7] );
            res = refalrts::splice_elem( res, context[1] );
            res = refalrts::splice_evar( res, context[44], context[45] );
            res = refalrts::splice_evar( res, context[42], context[43] );
            refalrts::splice_to_freelist_open( vm, context[6], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & Include/4 t.ErrorList/5 # Extended/7 t.Pos/8 (/10 # TkCompound/20 t.0/21 e.1/36 )/11 (/12 s.Type/33 t.1/34 e.2/38 )/13 e.Tokens/40 >/1
          context[36] = context[27];
          context[37] = context[28];
          context[38] = context[31];
          context[39] = context[32];
          context[40] = context[29];
          context[41] = context[30];
          // closed e.1 as range 36
          // closed e.2 as range 38
          // closed e.Tokens as range 40
          //DEBUG: t.ErrorList: 5
          //DEBUG: t.Pos: 8
          //DEBUG: t.0: 21
          //DEBUG: t.1: 34
          //DEBUG: s.Type: 33
          //DEBUG: e.1: 36
          //DEBUG: e.2: 38
          //DEBUG: e.Tokens: 40

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} t.Pos/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList/5 } t.1/34/42"une"/44 Tile{ HalfReuse: 'x'/7 }"pected "/46 </48 & TokName/49 s.Type/33/50 >/51", expected \';\'"/52 Tile{ AsIs: >/1 } (/54 Tile{ AsIs: (/10 Reuse: # Include/20 AsIs: t.0/21 } Tile{ AsIs: e.1/36 } )/55 Tile{ AsIs: )/11 AsIs: (/12 AsIs: s.Type/33 AsIs: t.1/34 AsIs: e.2/38 AsIs: )/13 } Tile{ AsIs: e.Tokens/40 } Tile{ ]] }
          refalrts::copy_evar(vm, context[42], context[43], context[34], context[35]);
          refalrts::alloc_chars(vm, context[44], context[45], "une", 3);
          refalrts::alloc_chars(vm, context[46], context[47], "pected ", 7);
          refalrts::alloc_open_call(vm, context[48]);
          refalrts::alloc_name(vm, context[49], functions[efunc_TokName]);
          refalrts::copy_stvar(vm, context[50], context[33]);
          refalrts::alloc_close_call(vm, context[51]);
          refalrts::alloc_chars(vm, context[52], context[53], ", expected \';\'", 14);
          refalrts::alloc_open_bracket(vm, context[54]);
          refalrts::alloc_close_bracket(vm, context[55]);
          refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
          refalrts::reinit_char(context[7], 'x');
          refalrts::update_ident(context[20], identifiers[ident_Include]);
          refalrts::link_brackets( context[12], context[13] );
          refalrts::link_brackets( context[54], context[11] );
          refalrts::link_brackets( context[10], context[55] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[51] );
          refalrts::push_stack( vm, context[48] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[40], context[41] );
          res = refalrts::splice_evar( res, context[11], context[13] );
          res = refalrts::splice_elem( res, context[55] );
          res = refalrts::splice_evar( res, context[36], context[37] );
          res = refalrts::splice_evar( res, context[10], context[22] );
          res = refalrts::splice_elem( res, context[54] );
          res = refalrts::splice_elem( res, context[1] );
          res = refalrts::splice_evar( res, context[46], context[53] );
          res = refalrts::splice_elem( res, context[7] );
          res = refalrts::splice_evar( res, context[42], context[45] );
          refalrts::splice_to_freelist_open( vm, context[6], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Include/4 t.ErrorList/5 # Extended/7 t.Pos/8 (/10 # TkCompound/20 t.0/21 e.1/27 )/11 t.Token2/12 e.Tokens/29 >/1
        context[27] = context[23];
        context[28] = context[24];
        context[29] = context[25];
        context[30] = context[26];
        // closed e.1 as range 27
        // closed e.Tokens as range 29
        //DEBUG: t.ErrorList: 5
        //DEBUG: t.Pos: 8
        //DEBUG: t.0: 21
        //DEBUG: t.Token2: 12
        //DEBUG: e.1: 27
        //DEBUG: e.Tokens: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} t.Pos/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & UnexpectedToken*2/4 AsIs: t.ErrorList/5 } Tile{ AsIs: t.Token2/12 }"\';"/31 Tile{ HalfReuse: '\''/7 } Tile{ AsIs: >/1 } (/33 Tile{ AsIs: (/10 Reuse: # Include/20 AsIs: t.0/21 AsIs: e.1/27 AsIs: )/11 } )/34 t.Token2/12/35 Tile{ AsIs: e.Tokens/29 } Tile{ ]] }
        refalrts::alloc_chars(vm, context[31], context[32], "\';", 2);
        refalrts::alloc_open_bracket(vm, context[33]);
        refalrts::alloc_close_bracket(vm, context[34]);
        refalrts::copy_evar(vm, context[35], context[36], context[12], context[13]);
        refalrts::update_name(context[4], functions[efunc_gen_UnexpectedToken_D2]);
        refalrts::reinit_char(context[7], '\'');
        refalrts::update_ident(context[20], identifiers[ident_Include]);
        refalrts::link_brackets( context[33], context[34] );
        refalrts::link_brackets( context[10], context[11] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_evar( res, context[34], context[36] );
        res = refalrts::splice_evar( res, context[10], context[11] );
        res = refalrts::splice_elem( res, context[33] );
        res = refalrts::splice_elem( res, context[1] );
        res = refalrts::splice_elem( res, context[7] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        refalrts::splice_to_freelist_open( vm, context[6], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Include/4 t.ErrorList/5 # Extended/7 t.Pos/8 (/10 # TkError/20 t.0/21 e.1/23 )/11 t.Token2/12 e.Tokens/25 >/1
        context[23] = context[18];
        context[24] = context[19];
        context[25] = context[16];
        context[26] = context[17];
        if( ! refalrts::ident_term( identifiers[ident_TkError], context[20] ) )
          continue;
        // closed e.1 as range 23
        // closed e.Tokens as range 25
        //DEBUG: t.ErrorList: 5
        //DEBUG: t.Pos: 8
        //DEBUG: t.0: 21
        //DEBUG: t.Token2: 12
        //DEBUG: e.1: 23
        //DEBUG: e.Tokens: 25

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} t.Pos/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList/5 } t.0/21/27 e.1/23/29 Tile{ AsIs: >/1 } Tile{ HalfReuse: (/7 } )/31 Tile{ AsIs: (/10 AsIs: # TkError/20 AsIs: t.0/21 AsIs: e.1/23 AsIs: )/11 AsIs: t.Token2/12 } Tile{ AsIs: e.Tokens/25 } Tile{ ]] }
        refalrts::copy_evar(vm, context[27], context[28], context[21], context[22]);
        refalrts::copy_evar(vm, context[29], context[30], context[23], context[24]);
        refalrts::alloc_close_bracket(vm, context[31]);
        refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_open_bracket(context[7]);
        refalrts::link_brackets( context[10], context[11] );
        refalrts::link_brackets( context[7], context[31] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_evar( res, context[10], context[13] );
        res = refalrts::splice_elem( res, context[31] );
        res = refalrts::splice_elem( res, context[7] );
        res = refalrts::splice_elem( res, context[1] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        refalrts::splice_to_freelist_open( vm, context[6], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Include/4 t.ErrorList/5 # Extended/7 t.Pos/8 (/10 s.Type/20 t.0/21 e.1/23 )/11 t.Token2/12 e.Tokens/25 >/1
      context[23] = context[18];
      context[24] = context[19];
      context[25] = context[16];
      context[26] = context[17];
      // closed e.1 as range 23
      // closed e.Tokens as range 25
      //DEBUG: t.ErrorList: 5
      //DEBUG: t.Pos: 8
      //DEBUG: t.0: 21
      //DEBUG: t.Token2: 12
      //DEBUG: s.Type: 20
      //DEBUG: e.1: 23
      //DEBUG: e.Tokens: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} t.Pos/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList/5 } t.0/21/27"un"/29 Tile{ HalfReuse: 'e'/7 }"xpected "/31 </33 & TokName/34 s.Type/20/35 Tile{ AsIs: >/1 }", expected compound symbol"/36 >/38 (/39 )/40 Tile{ AsIs: (/10 AsIs: s.Type/20 AsIs: t.0/21 AsIs: e.1/23 AsIs: )/11 AsIs: t.Token2/12 } Tile{ AsIs: e.Tokens/25 } Tile{ ]] }
      refalrts::copy_evar(vm, context[27], context[28], context[21], context[22]);
      refalrts::alloc_chars(vm, context[29], context[30], "un", 2);
      refalrts::alloc_chars(vm, context[31], context[32], "xpected ", 8);
      refalrts::alloc_open_call(vm, context[33]);
      refalrts::alloc_name(vm, context[34], functions[efunc_TokName]);
      refalrts::copy_stvar(vm, context[35], context[20]);
      refalrts::alloc_chars(vm, context[36], context[37], ", expected compound symbol", 26);
      refalrts::alloc_close_call(vm, context[38]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_char(context[7], 'e');
      refalrts::link_brackets( context[10], context[11] );
      refalrts::link_brackets( context[39], context[40] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[33] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[10], context[13] );
      res = refalrts::splice_evar( res, context[36], context[40] );
      res = refalrts::splice_elem( res, context[1] );
      res = refalrts::splice_evar( res, context[31], context[35] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[27], context[30] );
      refalrts::splice_to_freelist_open( vm, context[6], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Include/4 t.ErrorList/5 # Extended/7 t.Pos/8 t.Token1/10 t.Token2/12 e.Tokens/16 >/1
    context[16] = context[14];
    context[17] = context[15];
    // closed e.Tokens as range 16
    //DEBUG: t.ErrorList: 5
    //DEBUG: t.Pos: 8
    //DEBUG: t.Token1: 10
    //DEBUG: t.Token2: 12
    //DEBUG: e.Tokens: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} t.Pos/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & UnexpectedToken*2/4 AsIs: t.ErrorList/5 } t.Token1/10/18"co"/20 Tile{ HalfReuse: 'm'/7 }"pound symbol"/22 Tile{ AsIs: >/1 } (/24 )/25 Tile{ AsIs: t.Token1/10 AsIs: t.Token2/12 } Tile{ AsIs: e.Tokens/16 } Tile{ ]] }
    refalrts::copy_evar(vm, context[18], context[19], context[10], context[11]);
    refalrts::alloc_chars(vm, context[20], context[21], "co", 2);
    refalrts::alloc_chars(vm, context[22], context[23], "pound symbol", 12);
    refalrts::alloc_open_bracket(vm, context[24]);
    refalrts::alloc_close_bracket(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_UnexpectedToken_D2]);
    refalrts::reinit_char(context[7], 'm');
    refalrts::link_brackets( context[24], context[25] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[10], context[13] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_elem( res, context[7] );
    res = refalrts::splice_evar( res, context[18], context[21] );
    refalrts::splice_to_freelist_open( vm, context[6], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Include/4 t.ErrorList/5 s.Mode/7 t.Pos/8 t.Token1/10 t.Token2/12 e.Tokens/2 >/1
  // closed e.Tokens as range 2
  //DEBUG: t.ErrorList: 5
  //DEBUG: t.Pos: 8
  //DEBUG: t.Token1: 10
  //DEBUG: t.Token2: 12
  //DEBUG: s.Mode: 7
  //DEBUG: e.Tokens: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </14 & Include=1/15 (/16 Tile{ AsIs: e.Tokens/2 } )/17 Tile{ AsIs: t.Token1/10 AsIs: t.Token2/12 } Tile{ AsIs: </0 Reuse: & ClassicError*2/4 AsIs: t.ErrorList/5 AsIs: s.Mode/7 AsIs: t.Pos/8 }"$INCLUDE is extension"/18 >/20 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[14]);
  refalrts::alloc_name(vm, context[15], functions[efunc_gen_Include_A1]);
  refalrts::alloc_open_bracket(vm, context[16]);
  refalrts::alloc_close_bracket(vm, context[17]);
  refalrts::alloc_chars(vm, context[18], context[19], "$INCLUDE is extension", 21);
  refalrts::alloc_close_call(vm, context[20]);
  refalrts::update_name(context[4], functions[efunc_gen_ClassicError_D2]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[20] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[18], context[20] );
  res = refalrts::splice_evar( res, context[0], context[9] );
  res = refalrts::splice_evar( res, context[10], context[13] );
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[14], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Include("Include", COOKIE1_, COOKIE2_, func_Include);


static refalrts::FnResult func_gen_Specialization_S1A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & Specialization$1=2/4 t.Pos/5 (/9 e.Name/7 )/10 (/13 e.Pattern/11 )/14 t.ErrorList$b/15 e.Tokens$b/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.Name as range 7
  // closed e.Pattern as range 11
  context[16] = refalrts::tvar_left( context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tokens$b as range 2
  //DEBUG: t.Pos: 5
  //DEBUG: e.Name: 7
  //DEBUG: e.Pattern: 11
  //DEBUG: t.ErrorList$b: 15
  //DEBUG: e.Tokens$b: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList$b/15 } Tile{ AsIs: (/13 } Tile{ HalfReuse: (/0 HalfReuse: # Spec/4 AsIs: t.Pos/5 AsIs: (/9 AsIs: e.Name/7 AsIs: )/10 } Tile{ AsIs: e.Pattern/11 } Tile{ AsIs: )/14 } Tile{ HalfReuse: )/1 } Tile{ AsIs: e.Tokens$b/2 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Spec]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[13], context[1] );
  refalrts::link_brackets( context[0], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[1] );
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[0], context[10] );
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Specialization_S1A2("Specialization$1=2", COOKIE1_, COOKIE2_, func_gen_Specialization_S1A2);


static refalrts::FnResult func_gen_Specialization_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 57 elems
  refalrts::Iter context[57];
  refalrts::zeros( context, 57 );
  // </0 & Specialization$1=1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Specialization$1=1/4 t.new1/5 (/9 e.new2/7 )/10 t.new3/11 (/15 e.new4/13 )/16 e.new5/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new4 as range 13
  // closed e.new5 as range 2
  do {
    // </0 & Specialization$1=1/4 t.new6/5 (/9 e.new10/17 )/10 t.new7/11 (/15 e.new11/19 )/16 t.new8/23 e.new9/21 >/1
    context[17] = context[7];
    context[18] = context[8];
    context[19] = context[13];
    context[20] = context[14];
    context[21] = context[2];
    context[22] = context[3];
    // closed e.new10 as range 17
    // closed e.new11 as range 19
    context[24] = refalrts::tvar_left( context[23], context[21], context[22] );
    if( ! context[24] )
      continue;
    // closed e.new9 as range 21
    do {
      // </0 & Specialization$1=1/4 t.new12/5 (/9 e.new18/25 )/10 t.new13/11 (/15 e.new19/27 )/16 (/23 s.new14/33 t.new15/34 e.new16/31 )/24 e.new17/29 >/1
      context[25] = context[17];
      context[26] = context[18];
      context[27] = context[19];
      context[28] = context[20];
      context[29] = context[21];
      context[30] = context[22];
      context[31] = 0;
      context[32] = 0;
      if( ! refalrts::brackets_term( context[31], context[32], context[23] ) )
        continue;
      // closed e.new18 as range 25
      // closed e.new19 as range 27
      // closed e.new17 as range 29
      if( ! refalrts::svar_left( context[33], context[31], context[32] ) )
        continue;
      context[35] = refalrts::tvar_left( context[34], context[31], context[32] );
      if( ! context[35] )
        continue;
      // closed e.new16 as range 31
      do {
        // </0 & Specialization$1=1/4 t.Pos/5 (/9 e.Name/36 )/10 t.ErrorList$a/11 (/15 e.Pattern/38 )/16 (/23 # TkSemicolon/33 t.1/34 )/24 e./40 >/1
        context[36] = context[25];
        context[37] = context[26];
        context[38] = context[27];
        context[39] = context[28];
        context[40] = context[29];
        context[41] = context[30];
        if( ! refalrts::ident_term( identifiers[ident_TkSemicolon], context[33] ) )
          continue;
        if( ! refalrts::empty_seq( context[31], context[32] ) )
          continue;
        // closed e.Name as range 36
        // closed e.Pattern as range 38
        // closed e. as range 40
        //DEBUG: t.Pos: 5
        //DEBUG: t.ErrorList$a: 11
        //DEBUG: t.1: 34
        //DEBUG: e.Name: 36
        //DEBUG: e.Pattern: 38
        //DEBUG: e.: 40

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} # TkSemicolon/33 t.1/34 )/24 {REMOVED TILE} >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList$a/11 AsIs: (/15 } Tile{ HalfReuse: (/0 HalfReuse: # Spec/4 AsIs: t.Pos/5 AsIs: (/9 AsIs: e.Name/36 AsIs: )/10 } Tile{ AsIs: e.Pattern/38 } Tile{ AsIs: )/16 HalfReuse: )/23 } Tile{ AsIs: e./40 } Tile{ ]] }
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_ident(context[4], identifiers[ident_Spec]);
        refalrts::reinit_close_bracket(context[23]);
        refalrts::link_brackets( context[15], context[23] );
        refalrts::link_brackets( context[0], context[16] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[40], context[41] );
        res = refalrts::splice_evar( res, context[16], context[23] );
        res = refalrts::splice_evar( res, context[38], context[39] );
        res = refalrts::splice_evar( res, context[0], context[10] );
        res = refalrts::splice_evar( res, context[11], context[15] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Specialization$1=1/4 t.Pos/5 (/9 e.Name/36 )/10 t.ErrorList$a/11 (/15 e.Pattern/38 )/16 (/23 # TkError/33 t.1/34 e.2/40 )/24 e./42 >/1
        context[36] = context[25];
        context[37] = context[26];
        context[38] = context[27];
        context[39] = context[28];
        context[40] = context[31];
        context[41] = context[32];
        context[42] = context[29];
        context[43] = context[30];
        if( ! refalrts::ident_term( identifiers[ident_TkError], context[33] ) )
          continue;
        // closed e.Name as range 36
        // closed e.Pattern as range 38
        // closed e.2 as range 40
        // closed e. as range 42
        //DEBUG: t.Pos: 5
        //DEBUG: t.ErrorList$a: 11
        //DEBUG: t.1: 34
        //DEBUG: e.Name: 36
        //DEBUG: e.Pattern: 38
        //DEBUG: e.2: 40
        //DEBUG: e.: 42

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Specialization$1=2/4 AsIs: t.Pos/5 AsIs: (/9 AsIs: e.Name/36 AsIs: )/10 } Tile{ AsIs: (/15 } Tile{ AsIs: e.Pattern/38 } )/44 </45 & EL-AddErrorAt/46 Tile{ AsIs: t.ErrorList$a/11 } t.1/34/47 e.2/40/49 Tile{ HalfReuse: >/16 AsIs: (/23 AsIs: # TkError/33 AsIs: t.1/34 AsIs: e.2/40 AsIs: )/24 AsIs: e./42 AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[44]);
        refalrts::alloc_open_call(vm, context[45]);
        refalrts::alloc_name(vm, context[46], functions[efunc_ELm_AddErrorAt]);
        refalrts::copy_evar(vm, context[47], context[48], context[34], context[35]);
        refalrts::copy_evar(vm, context[49], context[50], context[40], context[41]);
        refalrts::update_name(context[4], functions[efunc_gen_Specialization_S1A2]);
        refalrts::reinit_close_call(context[16]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[23], context[24] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[45] );
        refalrts::link_brackets( context[15], context[44] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[16];
        res = refalrts::splice_evar( res, context[49], context[50] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[11], context[12] );
        res = refalrts::splice_evar( res, context[44], context[46] );
        res = refalrts::splice_evar( res, context[38], context[39] );
        res = refalrts::splice_elem( res, context[15] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Specialization$1=1/4 t.Pos/5 (/9 e.Name/36 )/10 t.ErrorList$a/11 (/15 e.Pattern/38 )/16 (/23 s.Type/33 t.1/34 e.2/40 )/24 e./42 >/1
      context[36] = context[25];
      context[37] = context[26];
      context[38] = context[27];
      context[39] = context[28];
      context[40] = context[31];
      context[41] = context[32];
      context[42] = context[29];
      context[43] = context[30];
      // closed e.Name as range 36
      // closed e.Pattern as range 38
      // closed e.2 as range 40
      // closed e. as range 42
      //DEBUG: t.Pos: 5
      //DEBUG: t.ErrorList$a: 11
      //DEBUG: t.1: 34
      //DEBUG: s.Type: 33
      //DEBUG: e.Name: 36
      //DEBUG: e.Pattern: 38
      //DEBUG: e.2: 40
      //DEBUG: e.: 42

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Specialization$1=2/4 AsIs: t.Pos/5 AsIs: (/9 AsIs: e.Name/36 AsIs: )/10 } Tile{ AsIs: (/15 } Tile{ AsIs: e.Pattern/38 } )/44 </45 & EL-AddErrorAt/46 Tile{ AsIs: t.ErrorList$a/11 } t.1/34/47"unexpected "/49 </51 & TokName/52 s.Type/33/53 >/54", expected missed semicolon"/55 Tile{ HalfReuse: >/16 AsIs: (/23 AsIs: s.Type/33 AsIs: t.1/34 AsIs: e.2/40 AsIs: )/24 AsIs: e./42 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[44]);
      refalrts::alloc_open_call(vm, context[45]);
      refalrts::alloc_name(vm, context[46], functions[efunc_ELm_AddErrorAt]);
      refalrts::copy_evar(vm, context[47], context[48], context[34], context[35]);
      refalrts::alloc_chars(vm, context[49], context[50], "unexpected ", 11);
      refalrts::alloc_open_call(vm, context[51]);
      refalrts::alloc_name(vm, context[52], functions[efunc_TokName]);
      refalrts::copy_stvar(vm, context[53], context[33]);
      refalrts::alloc_close_call(vm, context[54]);
      refalrts::alloc_chars(vm, context[55], context[56], ", expected missed semicolon", 27);
      refalrts::update_name(context[4], functions[efunc_gen_Specialization_S1A2]);
      refalrts::reinit_close_call(context[16]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[45] );
      refalrts::push_stack( vm, context[54] );
      refalrts::push_stack( vm, context[51] );
      refalrts::link_brackets( context[15], context[44] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[16];
      res = refalrts::splice_evar( res, context[47], context[56] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[44], context[46] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_elem( res, context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Specialization$1=1/4 t.Pos/5 (/9 e.Name/25 )/10 t.ErrorList$a/11 (/15 e.Pattern/27 )/16 t./23 e./29 >/1
    context[25] = context[17];
    context[26] = context[18];
    context[27] = context[19];
    context[28] = context[20];
    context[29] = context[21];
    context[30] = context[22];
    // closed e.Name as range 25
    // closed e.Pattern as range 27
    // closed e. as range 29
    //DEBUG: t.Pos: 5
    //DEBUG: t.ErrorList$a: 11
    //DEBUG: t.: 23
    //DEBUG: e.Name: 25
    //DEBUG: e.Pattern: 27
    //DEBUG: e.: 29

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Specialization$1=2/4 AsIs: t.Pos/5 AsIs: (/9 AsIs: e.Name/25 AsIs: )/10 } Tile{ AsIs: (/15 } Tile{ AsIs: e.Pattern/27 } )/31 </32 & UnexpectedToken*2/33 Tile{ AsIs: t.ErrorList$a/11 } t./23/34"missed semicolon"/36 Tile{ HalfReuse: >/16 AsIs: t./23 AsIs: e./29 AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[31]);
    refalrts::alloc_open_call(vm, context[32]);
    refalrts::alloc_name(vm, context[33], functions[efunc_gen_UnexpectedToken_D2]);
    refalrts::copy_evar(vm, context[34], context[35], context[23], context[24]);
    refalrts::alloc_chars(vm, context[36], context[37], "missed semicolon", 16);
    refalrts::update_name(context[4], functions[efunc_gen_Specialization_S1A2]);
    refalrts::reinit_close_call(context[16]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[32] );
    refalrts::link_brackets( context[15], context[31] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[16];
    res = refalrts::splice_evar( res, context[34], context[37] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[31], context[33] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[15] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Specialization$1=1/4 t.Pos/5 (/9 e.Name/7 )/10 t.ErrorList$a/11 (/15 e.Pattern/13 )/16 e.Tokens$a/2 >/1
  // closed e.Name as range 7
  // closed e.Pattern as range 13
  // closed e.Tokens$a as range 2
  //DEBUG: t.Pos: 5
  //DEBUG: t.ErrorList$a: 11
  //DEBUG: e.Name: 7
  //DEBUG: e.Pattern: 13
  //DEBUG: e.Tokens$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Specialization$1=2/4 AsIs: t.Pos/5 AsIs: (/9 AsIs: e.Name/7 AsIs: )/10 } Tile{ AsIs: (/15 AsIs: e.Pattern/13 AsIs: )/16 } </17 & Expect*2/18 Tile{ AsIs: t.ErrorList$a/11 } # TkSemicolon/19 (/20"missed semicolon"/21 )/23 Tile{ AsIs: e.Tokens$a/2 } >/24 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[17]);
  refalrts::alloc_name(vm, context[18], functions[efunc_gen_Expect_D2]);
  refalrts::alloc_ident(vm, context[19], identifiers[ident_TkSemicolon]);
  refalrts::alloc_open_bracket(vm, context[20]);
  refalrts::alloc_chars(vm, context[21], context[22], "missed semicolon", 16);
  refalrts::alloc_close_bracket(vm, context[23]);
  refalrts::alloc_close_call(vm, context[24]);
  refalrts::update_name(context[4], functions[efunc_gen_Specialization_S1A2]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[24] );
  refalrts::push_stack( vm, context[17] );
  refalrts::link_brackets( context[20], context[23] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[24] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[19], context[23] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Specialization_S1A1("Specialization$1=1", COOKIE1_, COOKIE2_, func_gen_Specialization_S1A1);


static refalrts::FnResult func_Specialization(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 30 elems
  refalrts::Iter context[30];
  refalrts::zeros( context, 30 );
  // </0 & Specialization/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Specialization/4 t.new1/5 s.new2/7 t.new3/8 t.new4/10 e.new5/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[9] = refalrts::tvar_left( context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  context[11] = refalrts::tvar_left( context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  // closed e.new5 as range 2
  do {
    // </0 & Specialization/4 t.new6/5 s.new7/7 t.new8/8 (/10 s.new9/16 t.new10/17 e.new11/14 )/11 e.new12/12 >/1
    context[12] = context[2];
    context[13] = context[3];
    context[14] = 0;
    context[15] = 0;
    if( ! refalrts::brackets_term( context[14], context[15], context[10] ) )
      continue;
    // closed e.new12 as range 12
    if( ! refalrts::svar_left( context[16], context[14], context[15] ) )
      continue;
    context[18] = refalrts::tvar_left( context[17], context[14], context[15] );
    if( ! context[18] )
      continue;
    // closed e.new11 as range 14
    do {
      // </0 & Specialization/4 t.ErrorList/5 s.Mode/7 t.Pos/8 (/10 # TkName/16 t.NamePos/17 e.Name/19 )/11 e.Tokens/21 >/1
      context[19] = context[14];
      context[20] = context[15];
      context[21] = context[12];
      context[22] = context[13];
      if( ! refalrts::ident_term( identifiers[ident_TkName], context[16] ) )
        continue;
      // closed e.Name as range 19
      // closed e.Tokens as range 21
      //DEBUG: t.ErrorList: 5
      //DEBUG: t.Pos: 8
      //DEBUG: t.NamePos: 17
      //DEBUG: s.Mode: 7
      //DEBUG: e.Name: 19
      //DEBUG: e.Tokens: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.NamePos/17 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </23 Tile{ HalfReuse: & Specialization$1=1/16 } Tile{ AsIs: t.Pos/8 AsIs: (/10 } Tile{ AsIs: e.Name/19 } Tile{ AsIs: )/11 } Tile{ AsIs: </0 Reuse: & Pattern/4 AsIs: t.ErrorList/5 AsIs: s.Mode/7 } Tile{ AsIs: e.Tokens/21 } >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::reinit_name(context[16], functions[efunc_gen_Specialization_S1A1]);
      refalrts::update_name(context[4], functions[efunc_Pattern]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[11] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[0], context[7] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[8], context[10] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_elem( res, context[23] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Specialization/4 t.ErrorList/5 s.Mode/7 t.Pos/8 (/10 # TkError/16 t.0/17 e.1/19 )/11 e.Tokens/21 >/1
      context[19] = context[14];
      context[20] = context[15];
      context[21] = context[12];
      context[22] = context[13];
      if( ! refalrts::ident_term( identifiers[ident_TkError], context[16] ) )
        continue;
      // closed e.1 as range 19
      // closed e.Tokens as range 21
      //DEBUG: t.ErrorList: 5
      //DEBUG: t.Pos: 8
      //DEBUG: t.0: 17
      //DEBUG: s.Mode: 7
      //DEBUG: e.1: 19
      //DEBUG: e.Tokens: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Mode/7 t.Pos/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList/5 } Tile{ AsIs: t.0/17 AsIs: e.1/19 HalfReuse: >/11 } Tile{ AsIs: (/10 HalfReuse: )/16 } Tile{ AsIs: e.Tokens/21 } Tile{ ]] }
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_close_call(context[11]);
      refalrts::reinit_close_bracket(context[16]);
      refalrts::link_brackets( context[10], context[16] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[10], context[16] );
      res = refalrts::splice_evar( res, context[17], context[11] );
      refalrts::splice_to_freelist_open( vm, context[6], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Specialization/4 t.ErrorList/5 s.Mode/7 t.Pos/8 (/10 s.Type/16 t.0/17 e.1/19 )/11 e.Tokens/21 >/1
    context[19] = context[14];
    context[20] = context[15];
    context[21] = context[12];
    context[22] = context[13];
    // closed e.1 as range 19
    // closed e.Tokens as range 21
    //DEBUG: t.ErrorList: 5
    //DEBUG: t.Pos: 8
    //DEBUG: t.0: 17
    //DEBUG: s.Mode: 7
    //DEBUG: s.Type: 16
    //DEBUG: e.1: 19
    //DEBUG: e.Tokens: 21

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Mode/7 t.Pos/8 {REMOVED TILE} {REMOVED TILE} e.1/19 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList/5 } Tile{ AsIs: t.0/17 }"unexpected "/23 </25 Tile{ HalfReuse: & TokName/10 AsIs: s.Type/16 } Tile{ AsIs: >/1 }", expected function name"/26 >/28 (/29 Tile{ AsIs: )/11 } Tile{ AsIs: e.Tokens/21 } Tile{ ]] }
    refalrts::alloc_chars(vm, context[23], context[24], "unexpected ", 11);
    refalrts::alloc_open_call(vm, context[25]);
    refalrts::alloc_chars(vm, context[26], context[27], ", expected function name", 24);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::alloc_open_bracket(vm, context[29]);
    refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
    refalrts::reinit_name(context[10], functions[efunc_TokName]);
    refalrts::link_brackets( context[29], context[11] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[25] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[26], context[29] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[10], context[16] );
    res = refalrts::splice_evar( res, context[23], context[25] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    refalrts::splice_to_freelist_open( vm, context[6], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Specialization/4 t.ErrorList/5 s.Mode/7 t.Pos/8 t.Unexpected/10 e.Tokens/2 >/1
  // closed e.Tokens as range 2
  //DEBUG: t.ErrorList: 5
  //DEBUG: t.Pos: 8
  //DEBUG: t.Unexpected: 10
  //DEBUG: s.Mode: 7
  //DEBUG: e.Tokens: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.Mode/7 t.Pos/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UnexpectedToken*2/4 AsIs: t.ErrorList/5 } Tile{ AsIs: t.Unexpected/10 }"function name"/12 Tile{ AsIs: >/1 } (/14 )/15 Tile{ AsIs: e.Tokens/2 } Tile{ ]] }
  refalrts::alloc_chars(vm, context[12], context[13], "function name", 13);
  refalrts::alloc_open_bracket(vm, context[14]);
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::update_name(context[4], functions[efunc_gen_UnexpectedToken_D2]);
  refalrts::link_brackets( context[14], context[15] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_elem( res, context[1] );
  res = refalrts::splice_evar( res, context[12], context[13] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  refalrts::splice_to_freelist_open( vm, context[6], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Specialization("Specialization", COOKIE1_, COOKIE2_, func_Specialization);


static refalrts::FnResult func_Expect(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 38 elems
  refalrts::Iter context[38];
  refalrts::zeros( context, 38 );
  // </0 & Expect/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Expect/4 t.new1/5 s.new2/7 (/10 e.new3/8 )/11 t.new4/12 e.new5/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[8] = 0;
  context[9] = 0;
  context[10] = refalrts::brackets_left( context[8], context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[10], context[11]);
  // closed e.new3 as range 8
  context[13] = refalrts::tvar_left( context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  // closed e.new5 as range 2
  do {
    // </0 & Expect/4 t.new6/5 s.new7/7 (/10 e.new12/14 )/11 (/12 s.new8/20 t.new9/21 e.new10/18 )/13 e.new11/16 >/1
    context[14] = context[8];
    context[15] = context[9];
    context[16] = context[2];
    context[17] = context[3];
    context[18] = 0;
    context[19] = 0;
    if( ! refalrts::brackets_term( context[18], context[19], context[12] ) )
      continue;
    // closed e.new12 as range 14
    // closed e.new11 as range 16
    if( ! refalrts::svar_left( context[20], context[18], context[19] ) )
      continue;
    context[22] = refalrts::tvar_left( context[21], context[18], context[19] );
    if( ! context[22] )
      continue;
    // closed e.new10 as range 18
    do {
      // </0 & Expect/4 t.ErrorList/5 s.Expected/7 (/10 e.ExpectedText/23 )/11 (/12 s.Expected/20 t.SrcPos/21 )/13 e.Tokens/25 >/1
      context[23] = context[14];
      context[24] = context[15];
      context[25] = context[16];
      context[26] = context[17];
      if( ! refalrts::repeated_stvar_term( vm, context[20], context[7] ) )
        continue;
      if( ! refalrts::empty_seq( context[18], context[19] ) )
        continue;
      // closed e.ExpectedText as range 23
      // closed e.Tokens as range 25
      //DEBUG: t.ErrorList: 5
      //DEBUG: t.SrcPos: 21
      //DEBUG: s.Expected: 7
      //DEBUG: e.ExpectedText: 23
      //DEBUG: e.Tokens: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Expect/4 {REMOVED TILE} s.Expected/7 (/10 e.ExpectedText/23 )/11 (/12 s.Expected/20 t.SrcPos/21 )/13 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList/5 } Tile{ AsIs: e.Tokens/25 } Tile{ ]] }
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Expect/4 t.ErrorList/5 s.Expected/7 (/10 e.ExpectedText/23 )/11 (/12 # TkError/20 t.0/21 e.1/25 )/13 e.Tokens/27 >/1
      context[23] = context[14];
      context[24] = context[15];
      context[25] = context[18];
      context[26] = context[19];
      context[27] = context[16];
      context[28] = context[17];
      if( ! refalrts::ident_term( identifiers[ident_TkError], context[20] ) )
        continue;
      // closed e.ExpectedText as range 23
      // closed e.1 as range 25
      // closed e.Tokens as range 27
      //DEBUG: t.ErrorList: 5
      //DEBUG: t.0: 21
      //DEBUG: s.Expected: 7
      //DEBUG: e.ExpectedText: 23
      //DEBUG: e.1: 25
      //DEBUG: e.Tokens: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Expected/7 (/10 e.ExpectedText/23 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList/5 } t.0/21/29 e.1/25/31 Tile{ HalfReuse: >/11 AsIs: (/12 AsIs: # TkError/20 AsIs: t.0/21 AsIs: e.1/25 AsIs: )/13 } Tile{ AsIs: e.Tokens/27 } Tile{ ]] }
      refalrts::copy_evar(vm, context[29], context[30], context[21], context[22]);
      refalrts::copy_evar(vm, context[31], context[32], context[25], context[26]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_close_call(context[11]);
      refalrts::link_brackets( context[12], context[13] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[11], context[13] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      refalrts::splice_to_freelist_open( vm, context[6], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Expect/4 t.ErrorList/5 s.Expected/7 (/10 e.ExpectedText/23 )/11 (/12 s.Type/20 t.0/21 e.1/25 )/13 e.Tokens/27 >/1
    context[23] = context[14];
    context[24] = context[15];
    context[25] = context[18];
    context[26] = context[19];
    context[27] = context[16];
    context[28] = context[17];
    // closed e.ExpectedText as range 23
    // closed e.1 as range 25
    // closed e.Tokens as range 27
    //DEBUG: t.ErrorList: 5
    //DEBUG: t.0: 21
    //DEBUG: s.Expected: 7
    //DEBUG: s.Type: 20
    //DEBUG: e.ExpectedText: 23
    //DEBUG: e.1: 25
    //DEBUG: e.Tokens: 27

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Expected/7 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList/5 } t.0/21/29"unexpected "/31 </33 & TokName/34 s.Type/20/35 Tile{ AsIs: >/1 }", expected"/36 Tile{ HalfReuse: ' '/10 AsIs: e.ExpectedText/23 HalfReuse: >/11 AsIs: (/12 AsIs: s.Type/20 AsIs: t.0/21 AsIs: e.1/25 AsIs: )/13 } Tile{ AsIs: e.Tokens/27 } Tile{ ]] }
    refalrts::copy_evar(vm, context[29], context[30], context[21], context[22]);
    refalrts::alloc_chars(vm, context[31], context[32], "unexpected ", 11);
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_TokName]);
    refalrts::copy_stvar(vm, context[35], context[20]);
    refalrts::alloc_chars(vm, context[36], context[37], ", expected", 10);
    refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
    refalrts::reinit_char(context[10], ' ');
    refalrts::reinit_close_call(context[11]);
    refalrts::link_brackets( context[12], context[13] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[33] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[10], context[13] );
    res = refalrts::splice_evar( res, context[36], context[37] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[29], context[35] );
    refalrts::splice_to_freelist_open( vm, context[6], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Expect/4 t.ErrorList/5 s.Expected/7 (/10 e.ExpectedText/8 )/11 t.Unexpected/12 e.Tokens/2 >/1
  // closed e.ExpectedText as range 8
  // closed e.Tokens as range 2
  //DEBUG: t.ErrorList: 5
  //DEBUG: t.Unexpected: 12
  //DEBUG: s.Expected: 7
  //DEBUG: e.ExpectedText: 8
  //DEBUG: e.Tokens: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.Expected/7 (/10 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UnexpectedToken*2/4 AsIs: t.ErrorList/5 } t.Unexpected/12/14 Tile{ AsIs: e.ExpectedText/8 } Tile{ HalfReuse: >/11 AsIs: t.Unexpected/12 } Tile{ AsIs: e.Tokens/2 } Tile{ ]] }
  refalrts::copy_evar(vm, context[14], context[15], context[12], context[13]);
  refalrts::update_name(context[4], functions[efunc_gen_UnexpectedToken_D2]);
  refalrts::reinit_close_call(context[11]);
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[11], context[13] );
  res = refalrts::splice_evar( res, context[8], context[9] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  refalrts::splice_to_freelist_open( vm, context[6], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Expect("Expect", COOKIE1_, COOKIE2_, func_Expect);


static refalrts::FnResult func_Function(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & Function/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Function/4 t.new1/5 s.new2/7 (/10 s.new3/12 t.new4/13 e.new5/8 )/11 e.new6/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[8] = 0;
  context[9] = 0;
  context[10] = refalrts::brackets_left( context[8], context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[10], context[11]);
  // closed e.new6 as range 2
  if( ! refalrts::svar_left( context[12], context[8], context[9] ) )
    return refalrts::cRecognitionImpossible;
  context[14] = refalrts::tvar_left( context[13], context[8], context[9] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  // closed e.new5 as range 8
  do {
    // </0 & Function/4 t.new7/5 s.new8/7 (/10 # TkEntry/12 t.new12/13 )/11 (/19 # TkName/21 t.new9/22 e.new10/17 )/20 e.new11/15 >/1
    context[15] = context[2];
    context[16] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_TkEntry], context[12] ) )
      continue;
    context[17] = 0;
    context[18] = 0;
    context[19] = refalrts::brackets_left( context[17], context[18], context[15], context[16] );
    if( ! context[19] )
      continue;
    refalrts::bracket_pointers(context[19], context[20]);
    context[21] = refalrts::ident_left( identifiers[ident_TkName], context[17], context[18] );
    if( ! context[21] )
      continue;
    if( ! refalrts::empty_seq( context[8], context[9] ) )
      continue;
    // closed e.new11 as range 15
    context[23] = refalrts::tvar_left( context[22], context[17], context[18] );
    if( ! context[23] )
      continue;
    // closed e.new10 as range 17
    do {
      // </0 & Function/4 t.ErrorList/5 s.Mode/7 (/10 # TkEntry/12 t.EntryPos/13 )/11 (/19 # TkName/21 t.NamePos/22 e.Name/24 )/20 (/30 s.Punctuation/32 t.PunctPos/33 )/31 e.Tokens/26 >/1
      context[24] = context[17];
      context[25] = context[18];
      context[26] = context[15];
      context[27] = context[16];
      context[28] = 0;
      context[29] = 0;
      context[30] = refalrts::brackets_left( context[28], context[29], context[26], context[27] );
      if( ! context[30] )
        continue;
      refalrts::bracket_pointers(context[30], context[31]);
      // closed e.Name as range 24
      // closed e.Tokens as range 26
      if( ! refalrts::svar_left( context[32], context[28], context[29] ) )
        continue;
      context[34] = refalrts::tvar_left( context[33], context[28], context[29] );
      if( ! context[34] )
        continue;
      if( ! refalrts::empty_seq( context[28], context[29] ) )
        continue;
      //DEBUG: t.ErrorList: 5
      //DEBUG: t.EntryPos: 13
      //DEBUG: t.NamePos: 22
      //DEBUG: s.Mode: 7
      //DEBUG: e.Name: 24
      //DEBUG: e.Tokens: 26
      //DEBUG: s.Punctuation: 32
      //DEBUG: t.PunctPos: 33
      //5: t.ErrorList
      //7: s.Mode
      //13: t.EntryPos
      //22: t.NamePos
      //24: e.Name
      //26: e.Tokens
      //32: s.Punctuation
      //33: t.PunctPos
      //40: s.Punctuation

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[35]);
      refalrts::alloc_name(vm, context[37], functions[efunc_gen_Function_S1C1]);
      refalrts::alloc_open_call(vm, context[38]);
      refalrts::alloc_name(vm, context[39], functions[efunc_gen_OneOf_Z1]);
      refalrts::copy_stvar(vm, context[40], context[32]);
      refalrts::alloc_ident(vm, context[41], identifiers[ident_TkComma]);
      refalrts::alloc_ident(vm, context[42], identifiers[ident_TkSemicolon]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::alloc_close_call(vm, context[36]);
      refalrts::push_stack( vm, context[36] );
      refalrts::push_stack( vm, context[35] );
      res = refalrts::splice_elem( res, context[36] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[38] );
      res = refalrts::splice_elem( res, context[43] );
      res = refalrts::splice_elem( res, context[42] );
      res = refalrts::splice_elem( res, context[41] );
      res = refalrts::splice_stvar( res, context[40] );
      res = refalrts::splice_elem( res, context[39] );
      res = refalrts::splice_elem( res, context[38] );
      res = refalrts::splice_elem( res, context[37] );
      res = refalrts::splice_elem( res, context[35] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </35 & Function$1?1/39 # True/40 >/36
        context[37] = 0;
        context[38] = 0;
        context[39] = refalrts::call_left( context[37], context[38], context[35], context[36] );
        context[40] = refalrts::ident_left( identifiers[ident_True], context[37], context[38] );
        if( ! context[40] )
          continue;
        if( ! refalrts::empty_seq( context[37], context[38] ) )
          continue;
        //DEBUG: t.ErrorList: 5
        //DEBUG: t.EntryPos: 13
        //DEBUG: t.NamePos: 22
        //DEBUG: s.Mode: 7
        //DEBUG: e.Name: 24
        //DEBUG: e.Tokens: 26
        //DEBUG: s.Punctuation: 32
        //DEBUG: t.PunctPos: 33

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} (/10 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} # True/40 >/36 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: </12 } Tile{ Reuse: & NameList/39 } Tile{ AsIs: </0 Reuse: & ClassicError@2/4 AsIs: t.ErrorList/5 AsIs: s.Mode/7 } Tile{ AsIs: t.EntryPos/13 } Tile{ AsIs: >/1 } Tile{ HalfReuse: # TkEntryL/11 AsIs: (/19 AsIs: # TkName/21 AsIs: t.NamePos/22 AsIs: e.Name/24 AsIs: )/20 AsIs: (/30 AsIs: s.Punctuation/32 AsIs: t.PunctPos/33 AsIs: )/31 AsIs: e.Tokens/26 HalfReuse: >/35 } Tile{ ]] }
        refalrts::reinit_open_call(context[12]);
        refalrts::update_name(context[39], functions[efunc_NameList]);
        refalrts::update_name(context[4], functions[efunc_gen_ClassicError_Z2]);
        refalrts::reinit_ident(context[11], identifiers[ident_TkEntryL]);
        refalrts::reinit_close_call(context[35]);
        refalrts::push_stack( vm, context[35] );
        refalrts::push_stack( vm, context[12] );
        refalrts::link_brackets( context[30], context[31] );
        refalrts::link_brackets( context[19], context[20] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[11], context[35] );
        res = refalrts::splice_elem( res, context[1] );
        res = refalrts::splice_evar( res, context[13], context[14] );
        res = refalrts::splice_evar( res, context[0], context[7] );
        res = refalrts::splice_elem( res, context[39] );
        res = refalrts::splice_elem( res, context[12] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[35], context[36]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Function/4 t.ErrorList/5 s.Mode/7 (/10 # TkEntry/12 t.EntryPos/13 )/11 (/19 # TkName/21 t.NamePos/22 e.Name/24 )/20 e.Tokens/26 >/1
    context[24] = context[17];
    context[25] = context[18];
    context[26] = context[15];
    context[27] = context[16];
    // closed e.Name as range 24
    // closed e.Tokens as range 26
    //DEBUG: t.ErrorList: 5
    //DEBUG: t.EntryPos: 13
    //DEBUG: t.NamePos: 22
    //DEBUG: s.Mode: 7
    //DEBUG: e.Name: 24
    //DEBUG: e.Tokens: 26

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.NamePos/22 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </10 HalfReuse: & Function-AfterBlock/12 AsIs: t.EntryPos/13 HalfReuse: (/11 } Tile{ AsIs: e.Name/24 } Tile{ HalfReuse: )/19 Reuse: # GN-Entry/21 } Tile{ AsIs: </0 Reuse: & Block/4 AsIs: t.ErrorList/5 AsIs: s.Mode/7 } Tile{ AsIs: e.Tokens/26 } Tile{ HalfReuse: >/20 } Tile{ AsIs: >/1 ]] }
    refalrts::reinit_open_call(context[10]);
    refalrts::reinit_name(context[12], functions[efunc_Functionm_AfterBlock]);
    refalrts::reinit_open_bracket(context[11]);
    refalrts::reinit_close_bracket(context[19]);
    refalrts::update_ident(context[21], identifiers[ident_GNm_Entry]);
    refalrts::update_name(context[4], functions[efunc_Block]);
    refalrts::reinit_close_call(context[20]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[20] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[19] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_evar( res, context[0], context[7] );
    res = refalrts::splice_evar( res, context[19], context[21] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Function/4 t.ErrorList/5 s.Mode/7 (/10 # TkName/12 t.Pos/13 e.Name/15 )/11 e.Tokens/17 >/1
    context[15] = context[8];
    context[16] = context[9];
    context[17] = context[2];
    context[18] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_TkName], context[12] ) )
      continue;
    // closed e.Name as range 15
    // closed e.Tokens as range 17
    //DEBUG: t.ErrorList: 5
    //DEBUG: t.Pos: 13
    //DEBUG: s.Mode: 7
    //DEBUG: e.Name: 15
    //DEBUG: e.Tokens: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </10 HalfReuse: & Function-AfterBlock/12 AsIs: t.Pos/13 } (/19 Tile{ AsIs: e.Name/15 } Tile{ AsIs: )/11 } # GN-Local/20 Tile{ AsIs: </0 Reuse: & Block/4 AsIs: t.ErrorList/5 AsIs: s.Mode/7 } Tile{ AsIs: e.Tokens/17 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::alloc_ident(vm, context[20], identifiers[ident_GNm_Local]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::reinit_open_call(context[10]);
    refalrts::reinit_name(context[12], functions[efunc_Functionm_AfterBlock]);
    refalrts::update_name(context[4], functions[efunc_Block]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[19], context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[0], context[7] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[10], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Function/4 t.new7/5 s.new8/7 (/10 # TkEntry/12 t.new10/13 )/11 e.new9/2 >/1
  if( ! refalrts::ident_term( identifiers[ident_TkEntry], context[12] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[8], context[9] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new9 as range 2
  do {
    // </0 & Function/4 t.ErrorList/5 s.Mode/7 (/10 # TkEntry/12 t.EntryPos/13 )/11 (/19 # TkRefal5Mode/21 t.ModePos/22 s.NewMode/24 )/20 e.Tokens/15 >/1
    context[15] = context[2];
    context[16] = context[3];
    context[17] = 0;
    context[18] = 0;
    context[19] = refalrts::brackets_left( context[17], context[18], context[15], context[16] );
    if( ! context[19] )
      continue;
    refalrts::bracket_pointers(context[19], context[20]);
    context[21] = refalrts::ident_left( identifiers[ident_TkRefal5Mode], context[17], context[18] );
    if( ! context[21] )
      continue;
    // closed e.Tokens as range 15
    context[23] = refalrts::tvar_left( context[22], context[17], context[18] );
    if( ! context[23] )
      continue;
    if( ! refalrts::svar_left( context[24], context[17], context[18] ) )
      continue;
    if( ! refalrts::empty_seq( context[17], context[18] ) )
      continue;
    //DEBUG: t.ErrorList: 5
    //DEBUG: t.EntryPos: 13
    //DEBUG: s.Mode: 7
    //DEBUG: e.Tokens: 15
    //DEBUG: t.ModePos: 22
    //DEBUG: s.NewMode: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Mode/7 {REMOVED TILE} )/11 (/19 # TkRefal5Mode/21 t.ModePos/22 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Function/4 AsIs: t.ErrorList/5 } Tile{ AsIs: s.NewMode/24 } Tile{ AsIs: (/10 AsIs: # TkEntry/12 AsIs: t.EntryPos/13 } Tile{ AsIs: )/20 AsIs: e.Tokens/15 AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[10], context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[20];
    res = refalrts::splice_evar( res, context[10], context[14] );
    res = refalrts::splice_elem( res, context[24] );
    refalrts::splice_to_freelist_open( vm, context[6], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Function/4 t.ErrorList/5 s.Mode/7 (/10 # TkEntry/12 t.Pos/13 )/11 e.Tokens/2 >/1
  // closed e.Tokens as range 2
  //DEBUG: t.ErrorList: 5
  //DEBUG: t.Pos: 13
  //DEBUG: s.Mode: 7
  //DEBUG: e.Tokens: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.Mode/7 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList/5 } Tile{ AsIs: t.Pos/13 HalfReuse: '$'/11 }"ENTRY without the function name, skipped"/15 Tile{ AsIs: >/1 } Tile{ AsIs: (/10 HalfReuse: )/12 } Tile{ AsIs: e.Tokens/2 } Tile{ ]] }
  refalrts::alloc_chars(vm, context[15], context[16], "ENTRY without the function name, skipped", 40);
  refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
  refalrts::reinit_char(context[11], '$');
  refalrts::reinit_close_bracket(context[12]);
  refalrts::link_brackets( context[10], context[12] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[10], context[12] );
  res = refalrts::splice_elem( res, context[1] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[13], context[11] );
  refalrts::splice_to_freelist_open( vm, context[6], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Function("Function", COOKIE1_, COOKIE2_, func_Function);


static refalrts::FnResult func_Functionm_AfterBlock(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & Function-AfterBlock/4 t.Pos/5 (/9 e.Name/7 )/10 s.Scope/11 t.ErrorList/12 (/16 e.Body/14 )/17 e.Tokens/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Name as range 7
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[13] = refalrts::tvar_left( context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.Body as range 14
  // closed e.Tokens as range 2
  //DEBUG: t.Pos: 5
  //DEBUG: e.Name: 7
  //DEBUG: s.Scope: 11
  //DEBUG: t.ErrorList: 12
  //DEBUG: e.Body: 14
  //DEBUG: e.Tokens: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList/12 AsIs: (/16 } Tile{ HalfReuse: (/0 HalfReuse: # Function/4 AsIs: t.Pos/5 } Tile{ AsIs: s.Scope/11 } Tile{ AsIs: (/9 AsIs: e.Name/7 AsIs: )/10 } Tile{ AsIs: e.Body/14 } Tile{ HalfReuse: )/1 } Tile{ AsIs: )/17 } Tile{ AsIs: e.Tokens/2 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Function]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[0], context[1] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_elem( res, context[1] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[0], context[6] );
  res = refalrts::splice_evar( res, context[12], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Functionm_AfterBlock("Function-AfterBlock", COOKIE1_, COOKIE2_, func_Functionm_AfterBlock);


static refalrts::FnResult func_gen_Block_S2A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 28 elems
  refalrts::Iter context[28];
  refalrts::zeros( context, 28 );
  // </0 & Block$2=1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Block$2=1/4 s.new1/5 t.new2/6 (/10 e.new3/8 )/11 (/14 e.new4/12 )/15 t.new5/16 e.new6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = refalrts::tvar_left( context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  context[8] = 0;
  context[9] = 0;
  context[10] = refalrts::brackets_left( context[8], context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[10], context[11]);
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  // closed e.new3 as range 8
  // closed e.new4 as range 12
  context[17] = refalrts::tvar_left( context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  // closed e.new6 as range 2
  do {
    // </0 & Block$2=1/4 # Classic/5 t.NativePos/6 (/10 e.Code/18 )/11 (/14 e.Tokens/20 )/15 t.ErrorList$a/16 e.NextToken/22 >/1
    context[18] = context[8];
    context[19] = context[9];
    context[20] = context[12];
    context[21] = context[13];
    context[22] = context[2];
    context[23] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Classic], context[5] ) )
      continue;
    // closed e.Code as range 18
    // closed e.Tokens as range 20
    // closed e.NextToken as range 22
    //DEBUG: t.NativePos: 6
    //DEBUG: t.ErrorList$a: 16
    //DEBUG: e.Code: 18
    //DEBUG: e.Tokens: 20
    //DEBUG: e.NextToken: 22

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 } Tile{ AsIs: t.ErrorList$a/16 } t.NativePos/6/24 Tile{ HalfReuse: 'N'/1 } Tile{ HalfReuse: 'a'/10 }"tive code insertion is an extension"/26 Tile{ HalfReuse: >/11 AsIs: (/14 } Tile{ Reuse: # NativeBody/5 AsIs: t.NativePos/6 } Tile{ AsIs: e.Code/18 } Tile{ AsIs: )/15 } Tile{ AsIs: e.NextToken/22 } Tile{ AsIs: e.Tokens/20 } Tile{ ]] }
    refalrts::copy_evar(vm, context[24], context[25], context[6], context[7]);
    refalrts::alloc_chars(vm, context[26], context[27], "tive code insertion is an extension", 35);
    refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
    refalrts::reinit_char(context[1], 'N');
    refalrts::reinit_char(context[10], 'a');
    refalrts::reinit_close_call(context[11]);
    refalrts::update_ident(context[5], identifiers[ident_NativeBody]);
    refalrts::link_brackets( context[14], context[15] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_elem( res, context[15] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[5], context[7] );
    res = refalrts::splice_evar( res, context[11], context[14] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Block$2=1/4 # Extended/5 t.NativePos/6 (/10 e.Code/18 )/11 (/14 e.Tokens/20 )/15 t.ErrorList$a/16 e.NextToken/22 >/1
    context[18] = context[8];
    context[19] = context[9];
    context[20] = context[12];
    context[21] = context[13];
    context[22] = context[2];
    context[23] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Extended], context[5] ) )
      continue;
    // closed e.Code as range 18
    // closed e.Tokens as range 20
    // closed e.NextToken as range 22
    //DEBUG: t.NativePos: 6
    //DEBUG: t.ErrorList$a: 16
    //DEBUG: e.Code: 18
    //DEBUG: e.Tokens: 20
    //DEBUG: e.NextToken: 22

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE} (/10 {REMOVED TILE} )/11 (/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList$a/16 } Tile{ HalfReuse: (/4 Reuse: # NativeBody/5 AsIs: t.NativePos/6 } Tile{ AsIs: e.Code/18 } Tile{ AsIs: )/15 } Tile{ AsIs: e.NextToken/22 } Tile{ AsIs: e.Tokens/20 } Tile{ ]] }
    refalrts::reinit_open_bracket(context[4]);
    refalrts::update_ident(context[5], identifiers[ident_NativeBody]);
    refalrts::link_brackets( context[4], context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_elem( res, context[15] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[4], context[7] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Block$2=1/4 s.Mode/5 t.NativePos/6 (/10 e.Code/8 )/11 (/14 e.Tokens/12 )/15 t.ErrorList$a/16 e.NextToken/2 >/1
  // closed e.Code as range 8
  // closed e.Tokens as range 12
  // closed e.NextToken as range 2
  //DEBUG: t.NativePos: 6
  //DEBUG: t.ErrorList$a: 16
  //DEBUG: s.Mode: 5
  //DEBUG: e.Code: 8
  //DEBUG: e.Tokens: 12
  //DEBUG: e.NextToken: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ClassicError*2/4 } Tile{ AsIs: t.ErrorList$a/16 } Tile{ AsIs: s.Mode/5 AsIs: t.NativePos/6 HalfReuse: 'N'/10 } Tile{ HalfReuse: 'a'/1 }"tive code insertion is an extension"/18 Tile{ HalfReuse: >/11 AsIs: (/14 } # NativeBody/20 t.NativePos/6/21 Tile{ AsIs: e.Code/8 } Tile{ AsIs: )/15 } Tile{ AsIs: e.NextToken/2 } Tile{ AsIs: e.Tokens/12 } Tile{ ]] }
  refalrts::alloc_chars(vm, context[18], context[19], "tive code insertion is an extension", 35);
  refalrts::alloc_ident(vm, context[20], identifiers[ident_NativeBody]);
  refalrts::copy_evar(vm, context[21], context[22], context[6], context[7]);
  refalrts::update_name(context[4], functions[efunc_gen_ClassicError_D2]);
  refalrts::reinit_char(context[10], 'N');
  refalrts::reinit_char(context[1], 'a');
  refalrts::reinit_close_call(context[11]);
  refalrts::link_brackets( context[14], context[15] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[12], context[13] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[8], context[9] );
  res = refalrts::splice_evar( res, context[20], context[22] );
  res = refalrts::splice_evar( res, context[11], context[14] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_elem( res, context[1] );
  res = refalrts::splice_evar( res, context[5], context[10] );
  res = refalrts::splice_evar( res, context[16], context[17] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Block_S2A1("Block$2=1", COOKIE1_, COOKIE2_, func_gen_Block_S2A1);


static refalrts::FnResult func_Block(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 61 elems
  refalrts::Iter context[61];
  refalrts::zeros( context, 61 );
  // </0 & Block/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Block/4 t.new1/5 s.new2/7 t.new3/8 e.new4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[9] = refalrts::tvar_left( context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  // closed e.new4 as range 2
  do {
    // </0 & Block/4 t.new5/5 s.new6/7 (/8 s.new7/14 t.new8/15 e.new9/12 )/9 e.new10/10 >/1
    context[10] = context[2];
    context[11] = context[3];
    context[12] = 0;
    context[13] = 0;
    if( ! refalrts::brackets_term( context[12], context[13], context[8] ) )
      continue;
    // closed e.new10 as range 10
    if( ! refalrts::svar_left( context[14], context[12], context[13] ) )
      continue;
    context[16] = refalrts::tvar_left( context[15], context[12], context[13] );
    if( ! context[16] )
      continue;
    // closed e.new9 as range 12
    do {
      // </0 & Block/4 t.new11/5 s.new12/7 (/8 # TkOpenBlock/14 t.new13/15 )/9 e.new14/17 >/1
      context[17] = context[10];
      context[18] = context[11];
      if( ! refalrts::ident_term( identifiers[ident_TkOpenBlock], context[14] ) )
        continue;
      if( ! refalrts::empty_seq( context[12], context[13] ) )
        continue;
      // closed e.new14 as range 17
      do {
        // </0 & Block/4 t.new15/5 s.new16/7 (/8 # TkOpenBlock/14 t.new17/15 )/9 (/23 s.new18/25 t.new19/26 e.new20/21 )/24 e.new21/19 >/1
        context[19] = context[17];
        context[20] = context[18];
        context[21] = 0;
        context[22] = 0;
        context[23] = refalrts::brackets_left( context[21], context[22], context[19], context[20] );
        if( ! context[23] )
          continue;
        refalrts::bracket_pointers(context[23], context[24]);
        // closed e.new21 as range 19
        if( ! refalrts::svar_left( context[25], context[21], context[22] ) )
          continue;
        context[27] = refalrts::tvar_left( context[26], context[21], context[22] );
        if( ! context[27] )
          continue;
        // closed e.new20 as range 21
        do {
          // </0 & Block/4 t.new22/5 s.new23/7 (/8 # TkOpenBlock/14 t.new24/15 )/9 (/23 # TkCloseBlock/25 t.new26/26 )/24 e.new25/28 >/1
          context[28] = context[19];
          context[29] = context[20];
          if( ! refalrts::ident_term( identifiers[ident_TkCloseBlock], context[25] ) )
            continue;
          if( ! refalrts::empty_seq( context[21], context[22] ) )
            continue;
          // closed e.new25 as range 28
          do {
            // </0 & Block/4 t.ErrorList/5 # Classic/7 (/8 # TkOpenBlock/14 t.OpenPos/15 )/9 (/23 # TkCloseBlock/25 t.ClosePos/26 )/24 e.Tokens/30 >/1
            context[30] = context[28];
            context[31] = context[29];
            if( ! refalrts::ident_term( identifiers[ident_Classic], context[7] ) )
              continue;
            // closed e.Tokens as range 30
            //DEBUG: t.ErrorList: 5
            //DEBUG: t.OpenPos: 15
            //DEBUG: t.ClosePos: 26
            //DEBUG: e.Tokens: 30

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.ClosePos/26 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList/5 } Tile{ AsIs: t.OpenPos/15 HalfReuse: 'E'/9 HalfReuse: 'm'/23 HalfReuse: 'p'/25 }"ty "/32 Tile{ HalfReuse: 'f'/1 }"unction block"/34 Tile{ HalfReuse: >/7 AsIs: (/8 Reuse: # Sentences/14 } Tile{ AsIs: )/24 } Tile{ AsIs: e.Tokens/30 } Tile{ ]] }
            refalrts::alloc_chars(vm, context[32], context[33], "ty ", 3);
            refalrts::alloc_chars(vm, context[34], context[35], "unction block", 13);
            refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
            refalrts::reinit_char(context[9], 'E');
            refalrts::reinit_char(context[23], 'm');
            refalrts::reinit_char(context[25], 'p');
            refalrts::reinit_char(context[1], 'f');
            refalrts::reinit_close_call(context[7]);
            refalrts::update_ident(context[14], identifiers[ident_Sentences]);
            refalrts::link_brackets( context[8], context[24] );
            refalrts::push_stack( vm, context[7] );
            refalrts::push_stack( vm, context[0] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[30], context[31] );
            res = refalrts::splice_elem( res, context[24] );
            res = refalrts::splice_evar( res, context[7], context[14] );
            res = refalrts::splice_evar( res, context[34], context[35] );
            res = refalrts::splice_elem( res, context[1] );
            res = refalrts::splice_evar( res, context[32], context[33] );
            res = refalrts::splice_evar( res, context[15], context[25] );
            refalrts::splice_to_freelist_open( vm, context[6], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & Block/4 t.ErrorList/5 # Extended/7 (/8 # TkOpenBlock/14 t.OpenPos/15 )/9 (/23 # TkCloseBlock/25 t.ClosePos/26 )/24 e.Tokens/30 >/1
            context[30] = context[28];
            context[31] = context[29];
            if( ! refalrts::ident_term( identifiers[ident_Extended], context[7] ) )
              continue;
            // closed e.Tokens as range 30
            //DEBUG: t.ErrorList: 5
            //DEBUG: t.OpenPos: 15
            //DEBUG: t.ClosePos: 26
            //DEBUG: e.Tokens: 30

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} </0 & Block/4 {REMOVED TILE} t.OpenPos/15 )/9 (/23 # TkCloseBlock/25 t.ClosePos/26 )/24 {REMOVED TILE} >/1 {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList/5 HalfReuse: (/7 HalfReuse: # Sentences/8 HalfReuse: )/14 } Tile{ AsIs: e.Tokens/30 } Tile{ ]] }
            refalrts::reinit_open_bracket(context[7]);
            refalrts::reinit_ident(context[8], identifiers[ident_Sentences]);
            refalrts::reinit_close_bracket(context[14]);
            refalrts::link_brackets( context[7], context[14] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[30], context[31] );
            res = refalrts::splice_evar( res, context[5], context[14] );
            refalrts::splice_to_freelist_open( vm, trash_prev, res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & Block/4 t.ErrorList/5 s.Mode/7 (/8 # TkOpenBlock/14 t.OpenPos/15 )/9 (/23 # TkCloseBlock/25 t.ClosePos/26 )/24 e.Tokens/30 >/1
          context[30] = context[28];
          context[31] = context[29];
          // closed e.Tokens as range 30
          //DEBUG: t.ErrorList: 5
          //DEBUG: t.OpenPos: 15
          //DEBUG: t.ClosePos: 26
          //DEBUG: s.Mode: 7
          //DEBUG: e.Tokens: 30

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.ClosePos/26 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & ClassicError*2/4 AsIs: t.ErrorList/5 AsIs: s.Mode/7 } Tile{ AsIs: t.OpenPos/15 HalfReuse: 'E'/9 HalfReuse: 'm'/23 HalfReuse: 'p'/25 }"ty function block"/32 Tile{ AsIs: >/1 } Tile{ AsIs: (/8 Reuse: # Sentences/14 } Tile{ AsIs: )/24 } Tile{ AsIs: e.Tokens/30 } Tile{ ]] }
          refalrts::alloc_chars(vm, context[32], context[33], "ty function block", 17);
          refalrts::update_name(context[4], functions[efunc_gen_ClassicError_D2]);
          refalrts::reinit_char(context[9], 'E');
          refalrts::reinit_char(context[23], 'm');
          refalrts::reinit_char(context[25], 'p');
          refalrts::update_ident(context[14], identifiers[ident_Sentences]);
          refalrts::link_brackets( context[8], context[24] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[30], context[31] );
          res = refalrts::splice_elem( res, context[24] );
          res = refalrts::splice_evar( res, context[8], context[14] );
          res = refalrts::splice_elem( res, context[1] );
          res = refalrts::splice_evar( res, context[32], context[33] );
          res = refalrts::splice_evar( res, context[15], context[25] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Block/4 t.new22/5 s.new23/7 (/8 # TkOpenBlock/14 t.new24/15 )/9 (/23 # TkNativeCode/25 t.new27/26 e.new28/28 )/24 t.new25/32 e.new26/30 >/1
        context[28] = context[21];
        context[29] = context[22];
        context[30] = context[19];
        context[31] = context[20];
        if( ! refalrts::ident_term( identifiers[ident_TkNativeCode], context[25] ) )
          continue;
        // closed e.new28 as range 28
        context[33] = refalrts::tvar_left( context[32], context[30], context[31] );
        if( ! context[33] )
          continue;
        // closed e.new26 as range 30
        do {
          // </0 & Block/4 t.new29/5 s.new30/7 (/8 # TkOpenBlock/14 t.new31/15 )/9 (/23 # TkNativeCode/25 t.new36/26 e.new37/34 )/24 (/32 s.new32/40 t.new33/41 e.new34/38 )/33 e.new35/36 >/1
          context[34] = context[28];
          context[35] = context[29];
          context[36] = context[30];
          context[37] = context[31];
          context[38] = 0;
          context[39] = 0;
          if( ! refalrts::brackets_term( context[38], context[39], context[32] ) )
            continue;
          // closed e.new37 as range 34
          // closed e.new35 as range 36
          if( ! refalrts::svar_left( context[40], context[38], context[39] ) )
            continue;
          context[42] = refalrts::tvar_left( context[41], context[38], context[39] );
          if( ! context[42] )
            continue;
          // closed e.new34 as range 38
          do {
            // </0 & Block/4 t.new38/5 s.new39/7 (/8 # TkOpenBlock/14 t.new40/15 )/9 (/23 # TkNativeCode/25 t.new43/26 e.new44/43 )/24 (/32 # TkCloseBlock/40 t.new41/41 )/33 e.new42/45 >/1
            context[43] = context[34];
            context[44] = context[35];
            context[45] = context[36];
            context[46] = context[37];
            if( ! refalrts::ident_term( identifiers[ident_TkCloseBlock], context[40] ) )
              continue;
            if( ! refalrts::empty_seq( context[38], context[39] ) )
              continue;
            // closed e.new44 as range 43
            // closed e.new42 as range 45
            do {
              // </0 & Block/4 t.ErrorList/5 # Classic/7 (/8 # TkOpenBlock/14 t.OpenPos/15 )/9 (/23 # TkNativeCode/25 t.NativePos/26 e.Code/47 )/24 (/32 # TkCloseBlock/40 t.0/41 )/33 e.Tokens/49 >/1
              context[47] = context[43];
              context[48] = context[44];
              context[49] = context[45];
              context[50] = context[46];
              if( ! refalrts::ident_term( identifiers[ident_Classic], context[7] ) )
                continue;
              // closed e.Code as range 47
              // closed e.Tokens as range 49
              //DEBUG: t.ErrorList: 5
              //DEBUG: t.OpenPos: 15
              //DEBUG: t.NativePos: 26
              //DEBUG: t.0: 41
              //DEBUG: e.Code: 47
              //DEBUG: e.Tokens: 49

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} t.OpenPos/15 {REMOVED TILE} {REMOVED TILE} t.0/41 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList/5 } t.NativePos/26/51 'N'/53 Tile{ HalfReuse: 'a'/7 HalfReuse: 't'/8 HalfReuse: 'i'/14 } Tile{ HalfReuse: 'v'/33 } Tile{ HalfReuse: 'e'/1 } Tile{ HalfReuse: ' '/32 HalfReuse: 'c'/40 }"ode insertion is an extension"/54 Tile{ HalfReuse: >/9 AsIs: (/23 Reuse: # NativeBody/25 AsIs: t.NativePos/26 AsIs: e.Code/47 AsIs: )/24 } Tile{ AsIs: e.Tokens/49 } Tile{ ]] }
              refalrts::copy_evar(vm, context[51], context[52], context[26], context[27]);
              refalrts::alloc_char(vm, context[53], 'N');
              refalrts::alloc_chars(vm, context[54], context[55], "ode insertion is an extension", 29);
              refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
              refalrts::reinit_char(context[7], 'a');
              refalrts::reinit_char(context[8], 't');
              refalrts::reinit_char(context[14], 'i');
              refalrts::reinit_char(context[33], 'v');
              refalrts::reinit_char(context[1], 'e');
              refalrts::reinit_char(context[32], ' ');
              refalrts::reinit_char(context[40], 'c');
              refalrts::reinit_close_call(context[9]);
              refalrts::update_ident(context[25], identifiers[ident_NativeBody]);
              refalrts::link_brackets( context[23], context[24] );
              refalrts::push_stack( vm, context[9] );
              refalrts::push_stack( vm, context[0] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = arg_end->next;
              res = refalrts::splice_evar( res, context[49], context[50] );
              res = refalrts::splice_evar( res, context[9], context[24] );
              res = refalrts::splice_evar( res, context[54], context[55] );
              res = refalrts::splice_evar( res, context[32], context[40] );
              res = refalrts::splice_elem( res, context[1] );
              res = refalrts::splice_elem( res, context[33] );
              res = refalrts::splice_evar( res, context[7], context[14] );
              res = refalrts::splice_evar( res, context[51], context[53] );
              refalrts::splice_to_freelist_open( vm, context[6], res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            do {
              // </0 & Block/4 t.ErrorList/5 # Extended/7 (/8 # TkOpenBlock/14 t.OpenPos/15 )/9 (/23 # TkNativeCode/25 t.NativePos/26 e.Code/47 )/24 (/32 # TkCloseBlock/40 t.0/41 )/33 e.Tokens/49 >/1
              context[47] = context[43];
              context[48] = context[44];
              context[49] = context[45];
              context[50] = context[46];
              if( ! refalrts::ident_term( identifiers[ident_Extended], context[7] ) )
                continue;
              // closed e.Code as range 47
              // closed e.Tokens as range 49
              //DEBUG: t.ErrorList: 5
              //DEBUG: t.OpenPos: 15
              //DEBUG: t.NativePos: 26
              //DEBUG: t.0: 41
              //DEBUG: e.Code: 47
              //DEBUG: e.Tokens: 49

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} </0 & Block/4 {REMOVED TILE} # Extended/7 (/8 # TkOpenBlock/14 t.OpenPos/15 )/9 {REMOVED TILE} (/32 # TkCloseBlock/40 t.0/41 )/33 {REMOVED TILE} >/1 {REMOVED TILE}
              //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList/5 } Tile{ AsIs: (/23 Reuse: # NativeBody/25 AsIs: t.NativePos/26 AsIs: e.Code/47 AsIs: )/24 } Tile{ AsIs: e.Tokens/49 } Tile{ ]] }
              refalrts::update_ident(context[25], identifiers[ident_NativeBody]);
              refalrts::link_brackets( context[23], context[24] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = arg_end->next;
              res = refalrts::splice_evar( res, context[49], context[50] );
              res = refalrts::splice_evar( res, context[23], context[24] );
              res = refalrts::splice_evar( res, context[5], context[6] );
              refalrts::splice_to_freelist_open( vm, trash_prev, res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            // </0 & Block/4 t.ErrorList/5 s.Mode/7 (/8 # TkOpenBlock/14 t.OpenPos/15 )/9 (/23 # TkNativeCode/25 t.NativePos/26 e.Code/47 )/24 (/32 # TkCloseBlock/40 t.0/41 )/33 e.Tokens/49 >/1
            context[47] = context[43];
            context[48] = context[44];
            context[49] = context[45];
            context[50] = context[46];
            // closed e.Code as range 47
            // closed e.Tokens as range 49
            //DEBUG: t.ErrorList: 5
            //DEBUG: t.OpenPos: 15
            //DEBUG: t.NativePos: 26
            //DEBUG: t.0: 41
            //DEBUG: s.Mode: 7
            //DEBUG: e.Code: 47
            //DEBUG: e.Tokens: 49

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} t.OpenPos/15 {REMOVED TILE} {REMOVED TILE} t.0/41 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & ClassicError*2/4 AsIs: t.ErrorList/5 AsIs: s.Mode/7 } t.NativePos/26/51 Tile{ HalfReuse: 'N'/8 HalfReuse: 'a'/14 } Tile{ HalfReuse: 't'/33 } Tile{ HalfReuse: 'i'/32 HalfReuse: 'v'/40 } Tile{ HalfReuse: 'e'/1 }" code insertion is an extension"/53 Tile{ HalfReuse: >/9 AsIs: (/23 Reuse: # NativeBody/25 AsIs: t.NativePos/26 AsIs: e.Code/47 AsIs: )/24 } Tile{ AsIs: e.Tokens/49 } Tile{ ]] }
            refalrts::copy_evar(vm, context[51], context[52], context[26], context[27]);
            refalrts::alloc_chars(vm, context[53], context[54], " code insertion is an extension", 31);
            refalrts::update_name(context[4], functions[efunc_gen_ClassicError_D2]);
            refalrts::reinit_char(context[8], 'N');
            refalrts::reinit_char(context[14], 'a');
            refalrts::reinit_char(context[33], 't');
            refalrts::reinit_char(context[32], 'i');
            refalrts::reinit_char(context[40], 'v');
            refalrts::reinit_char(context[1], 'e');
            refalrts::reinit_close_call(context[9]);
            refalrts::update_ident(context[25], identifiers[ident_NativeBody]);
            refalrts::link_brackets( context[23], context[24] );
            refalrts::push_stack( vm, context[9] );
            refalrts::push_stack( vm, context[0] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[49], context[50] );
            res = refalrts::splice_evar( res, context[9], context[24] );
            res = refalrts::splice_evar( res, context[53], context[54] );
            res = refalrts::splice_elem( res, context[1] );
            res = refalrts::splice_evar( res, context[32], context[40] );
            res = refalrts::splice_elem( res, context[33] );
            res = refalrts::splice_evar( res, context[8], context[14] );
            res = refalrts::splice_evar( res, context[51], context[52] );
            refalrts::splice_to_freelist_open( vm, context[7], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & Block/4 t.ErrorList/5 s.Mode/7 (/8 # TkOpenBlock/14 t.OpenPos/15 )/9 (/23 # TkNativeCode/25 t.NativePos/26 e.Code/43 )/24 (/32 # TkError/40 t.0/41 e.1/45 )/33 e.Tokens/47 >/1
            context[43] = context[34];
            context[44] = context[35];
            context[45] = context[38];
            context[46] = context[39];
            context[47] = context[36];
            context[48] = context[37];
            if( ! refalrts::ident_term( identifiers[ident_TkError], context[40] ) )
              continue;
            // closed e.Code as range 43
            // closed e.1 as range 45
            // closed e.Tokens as range 47
            //DEBUG: t.ErrorList: 5
            //DEBUG: t.OpenPos: 15
            //DEBUG: t.NativePos: 26
            //DEBUG: t.0: 41
            //DEBUG: s.Mode: 7
            //DEBUG: e.Code: 43
            //DEBUG: e.1: 45
            //DEBUG: e.Tokens: 47

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} s.Mode/7 {REMOVED TILE} {REMOVED TILE} t.OpenPos/15 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & Block$2=1/4 } Tile{ HalfReuse: s.Mode7 /25 AsIs: t.NativePos/26 } Tile{ AsIs: (/8 } Tile{ AsIs: e.Code/43 } Tile{ AsIs: )/9 AsIs: (/23 } Tile{ AsIs: e.Tokens/47 } )/49 Tile{ HalfReuse: </14 } & EL-AddErrorAt/50 Tile{ AsIs: t.ErrorList/5 } t.0/41/51 e.1/45/53 Tile{ HalfReuse: >/24 AsIs: (/32 AsIs: # TkError/40 AsIs: t.0/41 AsIs: e.1/45 AsIs: )/33 } Tile{ AsIs: >/1 ]] }
            refalrts::alloc_close_bracket(vm, context[49]);
            refalrts::alloc_name(vm, context[50], functions[efunc_ELm_AddErrorAt]);
            refalrts::copy_evar(vm, context[51], context[52], context[41], context[42]);
            refalrts::copy_evar(vm, context[53], context[54], context[45], context[46]);
            refalrts::update_name(context[4], functions[efunc_gen_Block_S2A1]);
            refalrts::reinit_svar( context[25], context[7] );
            refalrts::reinit_open_call(context[14]);
            refalrts::reinit_close_call(context[24]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[32], context[33] );
            refalrts::push_stack( vm, context[24] );
            refalrts::push_stack( vm, context[14] );
            refalrts::link_brackets( context[23], context[49] );
            refalrts::link_brackets( context[8], context[9] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[24], context[33] );
            res = refalrts::splice_evar( res, context[53], context[54] );
            res = refalrts::splice_evar( res, context[51], context[52] );
            res = refalrts::splice_evar( res, context[5], context[6] );
            res = refalrts::splice_elem( res, context[50] );
            res = refalrts::splice_elem( res, context[14] );
            res = refalrts::splice_elem( res, context[49] );
            res = refalrts::splice_evar( res, context[47], context[48] );
            res = refalrts::splice_evar( res, context[9], context[23] );
            res = refalrts::splice_evar( res, context[43], context[44] );
            res = refalrts::splice_elem( res, context[8] );
            res = refalrts::splice_evar( res, context[25], context[27] );
            refalrts::splice_to_freelist_open( vm, context[4], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & Block/4 t.ErrorList/5 s.Mode/7 (/8 # TkOpenBlock/14 t.OpenPos/15 )/9 (/23 # TkNativeCode/25 t.NativePos/26 e.Code/43 )/24 (/32 s.Type/40 t.0/41 e.1/45 )/33 e.Tokens/47 >/1
          context[43] = context[34];
          context[44] = context[35];
          context[45] = context[38];
          context[46] = context[39];
          context[47] = context[36];
          context[48] = context[37];
          // closed e.Code as range 43
          // closed e.1 as range 45
          // closed e.Tokens as range 47
          //DEBUG: t.ErrorList: 5
          //DEBUG: t.OpenPos: 15
          //DEBUG: t.NativePos: 26
          //DEBUG: t.0: 41
          //DEBUG: s.Mode: 7
          //DEBUG: s.Type: 40
          //DEBUG: e.Code: 43
          //DEBUG: e.1: 45
          //DEBUG: e.Tokens: 47

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.Mode/7 {REMOVED TILE} {REMOVED TILE} t.OpenPos/15 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: </9 HalfReuse: & Block$2=1/23 HalfReuse: s.Mode7 /25 AsIs: t.NativePos/26 } Tile{ AsIs: (/8 } Tile{ AsIs: e.Code/43 } )/49 (/50 Tile{ AsIs: e.Tokens/47 } Tile{ HalfReuse: )/14 } Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList/5 } t.0/41/51"unexpected "/53 </55 & TokName/56 s.Type/40/57 >/58", expected \'}\'"/59 Tile{ HalfReuse: >/24 AsIs: (/32 AsIs: s.Type/40 AsIs: t.0/41 AsIs: e.1/45 AsIs: )/33 } Tile{ AsIs: >/1 ]] }
          refalrts::alloc_close_bracket(vm, context[49]);
          refalrts::alloc_open_bracket(vm, context[50]);
          refalrts::copy_evar(vm, context[51], context[52], context[41], context[42]);
          refalrts::alloc_chars(vm, context[53], context[54], "unexpected ", 11);
          refalrts::alloc_open_call(vm, context[55]);
          refalrts::alloc_name(vm, context[56], functions[efunc_TokName]);
          refalrts::copy_stvar(vm, context[57], context[40]);
          refalrts::alloc_close_call(vm, context[58]);
          refalrts::alloc_chars(vm, context[59], context[60], ", expected \'}\'", 14);
          refalrts::reinit_open_call(context[9]);
          refalrts::reinit_name(context[23], functions[efunc_gen_Block_S2A1]);
          refalrts::reinit_svar( context[25], context[7] );
          refalrts::reinit_close_bracket(context[14]);
          refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
          refalrts::reinit_close_call(context[24]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[9] );
          refalrts::link_brackets( context[32], context[33] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[58] );
          refalrts::push_stack( vm, context[55] );
          refalrts::link_brackets( context[50], context[14] );
          refalrts::link_brackets( context[8], context[49] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[24], context[33] );
          res = refalrts::splice_evar( res, context[51], context[60] );
          res = refalrts::splice_evar( res, context[0], context[6] );
          res = refalrts::splice_elem( res, context[14] );
          res = refalrts::splice_evar( res, context[47], context[48] );
          res = refalrts::splice_evar( res, context[49], context[50] );
          res = refalrts::splice_evar( res, context[43], context[44] );
          res = refalrts::splice_elem( res, context[8] );
          res = refalrts::splice_evar( res, context[9], context[27] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Block/4 t.ErrorList/5 s.Mode/7 (/8 # TkOpenBlock/14 t.OpenPos/15 )/9 (/23 # TkNativeCode/25 t.NativePos/26 e.Code/34 )/24 t.CloseBlock/32 e.Tokens/36 >/1
        context[34] = context[28];
        context[35] = context[29];
        context[36] = context[30];
        context[37] = context[31];
        // closed e.Code as range 34
        // closed e.Tokens as range 36
        //DEBUG: t.ErrorList: 5
        //DEBUG: t.OpenPos: 15
        //DEBUG: t.NativePos: 26
        //DEBUG: t.CloseBlock: 32
        //DEBUG: s.Mode: 7
        //DEBUG: e.Code: 34
        //DEBUG: e.Tokens: 36

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.Mode/7 {REMOVED TILE} {REMOVED TILE} t.OpenPos/15 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Block$2=1/4 } Tile{ HalfReuse: s.Mode7 /25 AsIs: t.NativePos/26 } Tile{ AsIs: (/8 } Tile{ AsIs: e.Code/34 } Tile{ AsIs: )/9 AsIs: (/23 } Tile{ AsIs: e.Tokens/36 } Tile{ HalfReuse: )/14 } </38 & UnexpectedToken*2/39 Tile{ AsIs: t.ErrorList/5 } t.CloseBlock/32/40"\'}\'"/42 Tile{ HalfReuse: >/24 AsIs: t.CloseBlock/32 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[38]);
        refalrts::alloc_name(vm, context[39], functions[efunc_gen_UnexpectedToken_D2]);
        refalrts::copy_evar(vm, context[40], context[41], context[32], context[33]);
        refalrts::alloc_chars(vm, context[42], context[43], "\'}\'", 3);
        refalrts::update_name(context[4], functions[efunc_gen_Block_S2A1]);
        refalrts::reinit_svar( context[25], context[7] );
        refalrts::reinit_close_bracket(context[14]);
        refalrts::reinit_close_call(context[24]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[38] );
        refalrts::link_brackets( context[23], context[14] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[24], context[33] );
        res = refalrts::splice_evar( res, context[40], context[43] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[38], context[39] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_evar( res, context[9], context[23] );
        res = refalrts::splice_evar( res, context[34], context[35] );
        res = refalrts::splice_elem( res, context[8] );
        res = refalrts::splice_evar( res, context[25], context[27] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Block/4 t.ErrorList/5 s.Mode/7 (/8 # TkOpenBlock/14 t.Pos/15 )/9 e.Tokens/19 >/1
      context[19] = context[17];
      context[20] = context[18];
      // closed e.Tokens as range 19
      //DEBUG: t.ErrorList: 5
      //DEBUG: t.Pos: 15
      //DEBUG: s.Mode: 7
      //DEBUG: e.Tokens: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.Pos/15 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </9 } & Block-AfterSentence/21 s.Mode/7/22 Tile{ AsIs: (/8 HalfReuse: )/14 } Tile{ AsIs: </0 Reuse: & Sentence/4 AsIs: t.ErrorList/5 AsIs: s.Mode/7 } Tile{ AsIs: e.Tokens/19 } >/23 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[21], functions[efunc_Blockm_AfterSentence]);
      refalrts::copy_stvar(vm, context[22], context[7]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::reinit_open_call(context[9]);
      refalrts::reinit_close_bracket(context[14]);
      refalrts::update_name(context[4], functions[efunc_Sentence]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[9] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[8], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[0], context[7] );
      res = refalrts::splice_evar( res, context[8], context[14] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_elem( res, context[9] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Block/4 t.ErrorList/5 s.Mode/7 (/8 # TkRefal5Mode/14 t.Pos/15 s.NewMode/21 )/9 e.Tokens/19 >/1
      context[17] = context[12];
      context[18] = context[13];
      context[19] = context[10];
      context[20] = context[11];
      if( ! refalrts::ident_term( identifiers[ident_TkRefal5Mode], context[14] ) )
        continue;
      // closed e.Tokens as range 19
      if( ! refalrts::svar_left( context[21], context[17], context[18] ) )
        continue;
      if( ! refalrts::empty_seq( context[17], context[18] ) )
        continue;
      //DEBUG: t.ErrorList: 5
      //DEBUG: t.Pos: 15
      //DEBUG: s.Mode: 7
      //DEBUG: e.Tokens: 19
      //DEBUG: s.NewMode: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Mode/7 (/8 # TkRefal5Mode/14 t.Pos/15 s.NewMode/21 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Block/4 AsIs: t.ErrorList/5 } Tile{ HalfReuse: s.NewMode21 /9 AsIs: e.Tokens/19 AsIs: >/1 ]] }
      refalrts::reinit_svar( context[9], context[21] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[9];
      refalrts::splice_to_freelist_open( vm, context[6], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Block/4 t.ErrorList/5 s.Mode/7 (/8 # TkError/14 t.0/15 e.1/17 )/9 e.Tokens/19 >/1
      context[17] = context[12];
      context[18] = context[13];
      context[19] = context[10];
      context[20] = context[11];
      if( ! refalrts::ident_term( identifiers[ident_TkError], context[14] ) )
        continue;
      // closed e.1 as range 17
      // closed e.Tokens as range 19
      //DEBUG: t.ErrorList: 5
      //DEBUG: t.0: 15
      //DEBUG: s.Mode: 7
      //DEBUG: e.1: 17
      //DEBUG: e.Tokens: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Mode/7 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList/5 } t.0/15/21 e.1/17/23 Tile{ AsIs: >/1 } (/25 # Sentences/26 )/27 Tile{ AsIs: (/8 AsIs: # TkError/14 AsIs: t.0/15 AsIs: e.1/17 AsIs: )/9 } Tile{ AsIs: e.Tokens/19 } Tile{ ]] }
      refalrts::copy_evar(vm, context[21], context[22], context[15], context[16]);
      refalrts::copy_evar(vm, context[23], context[24], context[17], context[18]);
      refalrts::alloc_open_bracket(vm, context[25]);
      refalrts::alloc_ident(vm, context[26], identifiers[ident_Sentences]);
      refalrts::alloc_close_bracket(vm, context[27]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::link_brackets( context[8], context[9] );
      refalrts::link_brackets( context[25], context[27] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[8], context[9] );
      res = refalrts::splice_evar( res, context[25], context[27] );
      res = refalrts::splice_elem( res, context[1] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      refalrts::splice_to_freelist_open( vm, context[6], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Block/4 t.ErrorList/5 s.Mode/7 (/8 s.Type/14 t.0/15 e.1/17 )/9 e.Tokens/19 >/1
    context[17] = context[12];
    context[18] = context[13];
    context[19] = context[10];
    context[20] = context[11];
    // closed e.1 as range 17
    // closed e.Tokens as range 19
    //DEBUG: t.ErrorList: 5
    //DEBUG: t.0: 15
    //DEBUG: s.Mode: 7
    //DEBUG: s.Type: 14
    //DEBUG: e.1: 17
    //DEBUG: e.Tokens: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Mode/7 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList/5 } t.0/15/21"unexpected "/23 </25 & TokName/26 s.Type/14/27 Tile{ AsIs: >/1 }", expected \'{\'"/28 >/30 (/31 # Sentences/32 )/33 Tile{ AsIs: (/8 AsIs: s.Type/14 AsIs: t.0/15 AsIs: e.1/17 AsIs: )/9 } Tile{ AsIs: e.Tokens/19 } Tile{ ]] }
    refalrts::copy_evar(vm, context[21], context[22], context[15], context[16]);
    refalrts::alloc_chars(vm, context[23], context[24], "unexpected ", 11);
    refalrts::alloc_open_call(vm, context[25]);
    refalrts::alloc_name(vm, context[26], functions[efunc_TokName]);
    refalrts::copy_stvar(vm, context[27], context[14]);
    refalrts::alloc_chars(vm, context[28], context[29], ", expected \'{\'", 14);
    refalrts::alloc_close_call(vm, context[30]);
    refalrts::alloc_open_bracket(vm, context[31]);
    refalrts::alloc_ident(vm, context[32], identifiers[ident_Sentences]);
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[31], context[33] );
    refalrts::push_stack( vm, context[30] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[25] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    res = refalrts::splice_evar( res, context[28], context[33] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[21], context[27] );
    refalrts::splice_to_freelist_open( vm, context[6], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Block/4 t.ErrorList/5 s.Mode/7 t.Unexpected/8 e.Tokens/2 >/1
  // closed e.Tokens as range 2
  //DEBUG: t.ErrorList: 5
  //DEBUG: t.Unexpected: 8
  //DEBUG: s.Mode: 7
  //DEBUG: e.Tokens: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.Mode/7 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UnexpectedToken*2/4 AsIs: t.ErrorList/5 } Tile{ AsIs: t.Unexpected/8 }"\'{\'"/10 Tile{ AsIs: >/1 } (/12 # Sentences/13 )/14 t.Unexpected/8/15 Tile{ AsIs: e.Tokens/2 } Tile{ ]] }
  refalrts::alloc_chars(vm, context[10], context[11], "\'{\'", 3);
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_Sentences]);
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::copy_evar(vm, context[15], context[16], context[8], context[9]);
  refalrts::update_name(context[4], functions[efunc_gen_UnexpectedToken_D2]);
  refalrts::link_brackets( context[12], context[14] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[12], context[16] );
  res = refalrts::splice_elem( res, context[1] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_evar( res, context[8], context[9] );
  refalrts::splice_to_freelist_open( vm, context[6], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Block("Block", COOKIE1_, COOKIE2_, func_Block);


static refalrts::FnResult func_gen_Blockm_AfterSentence_S1B1S6A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & Block-AfterSentence$1:1$6=1/4 s.Mode/5 (/8 e.Sentences/6 )/9 t.NextSentence/10 t.Token2/12 (/16 e.Tokens/14 )/17 t.ErrorList$a/18 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.Sentences as range 6
  context[11] = refalrts::tvar_left( context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  context[13] = refalrts::tvar_left( context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.Tokens as range 14
  context[19] = refalrts::tvar_left( context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Mode: 5
  //DEBUG: e.Sentences: 6
  //DEBUG: t.NextSentence: 10
  //DEBUG: t.Token2: 12
  //DEBUG: e.Tokens: 14
  //DEBUG: t.ErrorList$a: 18

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Block-AfterSentence/4 AsIs: s.Mode/5 AsIs: (/8 } Tile{ AsIs: e.Sentences/6 } Tile{ AsIs: t.NextSentence/10 } Tile{ AsIs: )/9 } </20 Tile{ HalfReuse: & Sentence/17 AsIs: t.ErrorList$a/18 } Tile{ HalfReuse: s.Mode5 /16 } Tile{ AsIs: t.Token2/12 } Tile{ AsIs: e.Tokens/14 } >/21 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[20]);
  refalrts::alloc_close_call(vm, context[21]);
  refalrts::update_name(context[4], functions[efunc_Blockm_AfterSentence]);
  refalrts::reinit_name(context[17], functions[efunc_Sentence]);
  refalrts::reinit_svar( context[16], context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[21] );
  refalrts::push_stack( vm, context[20] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[21] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[12], context[13] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[17], context[19] );
  res = refalrts::splice_elem( res, context[20] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Blockm_AfterSentence_S1B1S6A1("Block-AfterSentence$1:1$6=1", COOKIE1_, COOKIE2_, func_gen_Blockm_AfterSentence_S1B1S6A1);


static refalrts::FnResult func_Blockm_AfterSentence(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 47 elems
  refalrts::Iter context[47];
  refalrts::zeros( context, 47 );
  // </0 & Block-AfterSentence/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Block-AfterSentence/4 s.new1/5 (/8 e.new2/6 )/9 t.new3/10 t.new4/12 t.new5/14 e.new6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new2 as range 6
  context[11] = refalrts::tvar_left( context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  context[13] = refalrts::tvar_left( context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  context[15] = refalrts::tvar_left( context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  // closed e.new6 as range 2
  do {
    // </0 & Block-AfterSentence/4 s.new7/5 (/8 e.new13/16 )/9 t.new8/10 t.new9/12 t.new10/14 t.new11/20 e.new12/18 >/1
    context[16] = context[6];
    context[17] = context[7];
    context[18] = context[2];
    context[19] = context[3];
    // closed e.new13 as range 16
    context[21] = refalrts::tvar_left( context[20], context[18], context[19] );
    if( ! context[21] )
      continue;
    // closed e.new12 as range 18
    do {
      // </0 & Block-AfterSentence/4 s.new14/5 (/8 e.new22/22 )/9 t.new15/10 t.new16/12 (/14 s.new17/28 t.new18/29 e.new19/26 )/15 t.new20/20 e.new21/24 >/1
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = 0;
      context[27] = 0;
      if( ! refalrts::brackets_term( context[26], context[27], context[14] ) )
        continue;
      // closed e.new22 as range 22
      // closed e.new21 as range 24
      if( ! refalrts::svar_left( context[28], context[26], context[27] ) )
        continue;
      context[30] = refalrts::tvar_left( context[29], context[26], context[27] );
      if( ! context[30] )
        continue;
      // closed e.new19 as range 26
      do {
        // </0 & Block-AfterSentence/4 s.Mode/5 (/8 e.Sentences/31 )/9 t.ErrorList/10 t.NextSentence/12 (/14 # TkSemicolon/28 t.0/29 )/15 (/20 # TkRefal5Mode/37 t.2/38 s.NewMode/40 )/21 e.Tokens/33 >/1
        context[31] = context[22];
        context[32] = context[23];
        context[33] = context[24];
        context[34] = context[25];
        context[35] = 0;
        context[36] = 0;
        if( ! refalrts::brackets_term( context[35], context[36], context[20] ) )
          continue;
        if( ! refalrts::ident_term( identifiers[ident_TkSemicolon], context[28] ) )
          continue;
        context[37] = refalrts::ident_left( identifiers[ident_TkRefal5Mode], context[35], context[36] );
        if( ! context[37] )
          continue;
        if( ! refalrts::empty_seq( context[26], context[27] ) )
          continue;
        // closed e.Sentences as range 31
        // closed e.Tokens as range 33
        context[39] = refalrts::tvar_left( context[38], context[35], context[36] );
        if( ! context[39] )
          continue;
        if( ! refalrts::svar_left( context[40], context[35], context[36] ) )
          continue;
        if( ! refalrts::empty_seq( context[35], context[36] ) )
          continue;
        //DEBUG: t.ErrorList: 10
        //DEBUG: t.NextSentence: 12
        //DEBUG: t.0: 29
        //DEBUG: s.Mode: 5
        //DEBUG: e.Sentences: 31
        //DEBUG: e.Tokens: 33
        //DEBUG: t.2: 38
        //DEBUG: s.NewMode: 40

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Mode/5 {REMOVED TILE} (/20 # TkRefal5Mode/37 t.2/38 {REMOVED TILE} )/21 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Block-AfterSentence/4 } Tile{ AsIs: s.NewMode/40 } Tile{ AsIs: (/8 AsIs: e.Sentences/31 AsIs: )/9 AsIs: t.ErrorList/10 AsIs: t.NextSentence/12 AsIs: (/14 AsIs: # TkSemicolon/28 AsIs: t.0/29 AsIs: )/15 } Tile{ AsIs: e.Tokens/33 } Tile{ AsIs: >/1 ]] }
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[14], context[15] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[8], context[15] );
        res = refalrts::splice_elem( res, context[40] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Block-AfterSentence/4 s.Mode/5 (/8 e.Sentences/31 )/9 t.ErrorList/10 t.NextSentence/12 (/14 # TkRefal5Mode/28 t.0/29 s.NewMode/37 )/15 t.Token2/20 e.Tokens/35 >/1
        context[31] = context[22];
        context[32] = context[23];
        context[33] = context[26];
        context[34] = context[27];
        context[35] = context[24];
        context[36] = context[25];
        if( ! refalrts::ident_term( identifiers[ident_TkRefal5Mode], context[28] ) )
          continue;
        // closed e.Sentences as range 31
        // closed e.Tokens as range 35
        if( ! refalrts::svar_left( context[37], context[33], context[34] ) )
          continue;
        if( ! refalrts::empty_seq( context[33], context[34] ) )
          continue;
        //DEBUG: t.ErrorList: 10
        //DEBUG: t.NextSentence: 12
        //DEBUG: t.0: 29
        //DEBUG: t.Token2: 20
        //DEBUG: s.Mode: 5
        //DEBUG: e.Sentences: 31
        //DEBUG: e.Tokens: 35
        //DEBUG: s.NewMode: 37

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Mode/5 {REMOVED TILE} (/14 # TkRefal5Mode/28 t.0/29 {REMOVED TILE} )/15 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Block-AfterSentence/4 } Tile{ AsIs: s.NewMode/37 } Tile{ AsIs: (/8 AsIs: e.Sentences/31 AsIs: )/9 AsIs: t.ErrorList/10 AsIs: t.NextSentence/12 } Tile{ AsIs: t.Token2/20 AsIs: e.Tokens/35 AsIs: >/1 ]] }
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[20];
        res = refalrts::splice_evar( res, context[8], context[13] );
        res = refalrts::splice_elem( res, context[37] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Block-AfterSentence/4 s.new23/5 (/8 e.new30/31 )/9 t.new24/10 t.new25/12 (/14 s.new26/28 t.new27/29 )/15 t.new28/20 e.new29/33 >/1
        context[31] = context[22];
        context[32] = context[23];
        context[33] = context[24];
        context[34] = context[25];
        if( ! refalrts::empty_seq( context[26], context[27] ) )
          continue;
        // closed e.new30 as range 31
        // closed e.new29 as range 33
        do {
          // </0 & Block-AfterSentence/4 s.Mode/5 (/8 e.Sentences/35 )/9 t.ErrorList/10 t.NextSentence/12 (/14 # TkSemicolon/28 t.0/29 )/15 (/20 # TkCloseBlock/41 t.2/42 )/21 e.Tokens/37 >/1
          context[35] = context[31];
          context[36] = context[32];
          context[37] = context[33];
          context[38] = context[34];
          context[39] = 0;
          context[40] = 0;
          if( ! refalrts::brackets_term( context[39], context[40], context[20] ) )
            continue;
          if( ! refalrts::ident_term( identifiers[ident_TkSemicolon], context[28] ) )
            continue;
          context[41] = refalrts::ident_left( identifiers[ident_TkCloseBlock], context[39], context[40] );
          if( ! context[41] )
            continue;
          // closed e.Sentences as range 35
          // closed e.Tokens as range 37
          context[43] = refalrts::tvar_left( context[42], context[39], context[40] );
          if( ! context[43] )
            continue;
          if( ! refalrts::empty_seq( context[39], context[40] ) )
            continue;
          //DEBUG: t.ErrorList: 10
          //DEBUG: t.NextSentence: 12
          //DEBUG: t.0: 29
          //DEBUG: s.Mode: 5
          //DEBUG: e.Sentences: 35
          //DEBUG: e.Tokens: 37
          //DEBUG: t.2: 42

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & Block-AfterSentence/4 s.Mode/5 (/8 {REMOVED TILE} )/9 {REMOVED TILE} {REMOVED TILE} # TkSemicolon/28 t.0/29 )/15 {REMOVED TILE} t.2/42 )/21 {REMOVED TILE} >/1 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList/10 } Tile{ AsIs: (/20 Reuse: # Sentences/41 } Tile{ AsIs: e.Sentences/35 } Tile{ AsIs: t.NextSentence/12 HalfReuse: )/14 } Tile{ AsIs: e.Tokens/37 } Tile{ ]] }
          refalrts::update_ident(context[41], identifiers[ident_Sentences]);
          refalrts::reinit_close_bracket(context[14]);
          refalrts::link_brackets( context[20], context[14] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[37], context[38] );
          res = refalrts::splice_evar( res, context[12], context[14] );
          res = refalrts::splice_evar( res, context[35], context[36] );
          res = refalrts::splice_evar( res, context[20], context[41] );
          res = refalrts::splice_evar( res, context[10], context[11] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Block-AfterSentence/4 s.Mode/5 (/8 e.Sentences/35 )/9 t.ErrorList/10 t.NextSentence/12 (/14 # TkCloseBlock/28 t.0/29 )/15 t.Token2/20 e.Tokens/37 >/1
          context[35] = context[31];
          context[36] = context[32];
          context[37] = context[33];
          context[38] = context[34];
          if( ! refalrts::ident_term( identifiers[ident_TkCloseBlock], context[28] ) )
            continue;
          // closed e.Sentences as range 35
          // closed e.Tokens as range 37
          //DEBUG: t.ErrorList: 10
          //DEBUG: t.NextSentence: 12
          //DEBUG: t.0: 29
          //DEBUG: t.Token2: 20
          //DEBUG: s.Mode: 5
          //DEBUG: e.Sentences: 35
          //DEBUG: e.Tokens: 37

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & Block-AfterSentence/4 s.Mode/5 (/8 {REMOVED TILE} )/9 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.0/29 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList/10 } Tile{ AsIs: (/14 Reuse: # Sentences/28 } Tile{ AsIs: e.Sentences/35 } Tile{ AsIs: t.NextSentence/12 } Tile{ AsIs: )/15 AsIs: t.Token2/20 } Tile{ AsIs: e.Tokens/37 } Tile{ ]] }
          refalrts::update_ident(context[28], identifiers[ident_Sentences]);
          refalrts::link_brackets( context[14], context[15] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[37], context[38] );
          res = refalrts::splice_evar( res, context[15], context[21] );
          res = refalrts::splice_evar( res, context[12], context[13] );
          res = refalrts::splice_evar( res, context[35], context[36] );
          res = refalrts::splice_evar( res, context[14], context[28] );
          res = refalrts::splice_evar( res, context[10], context[11] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Block-AfterSentence/4 s.Mode/5 (/8 e.Sentences/35 )/9 t.ErrorList/10 t.NextSentence/12 (/14 # TkSemicolon/28 t.0/29 )/15 t.Token2/20 e.Tokens/37 >/1
        context[35] = context[31];
        context[36] = context[32];
        context[37] = context[33];
        context[38] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_TkSemicolon], context[28] ) )
          continue;
        // closed e.Sentences as range 35
        // closed e.Tokens as range 37
        //DEBUG: t.ErrorList: 10
        //DEBUG: t.NextSentence: 12
        //DEBUG: t.0: 29
        //DEBUG: t.Token2: 20
        //DEBUG: s.Mode: 5
        //DEBUG: e.Sentences: 35
        //DEBUG: e.Tokens: 37

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.0/29 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Block-AfterSentence/4 AsIs: s.Mode/5 AsIs: (/8 } Tile{ AsIs: e.Sentences/35 } Tile{ AsIs: t.NextSentence/12 HalfReuse: )/14 HalfReuse: </28 } Tile{ HalfReuse: & Sentence/9 AsIs: t.ErrorList/10 } Tile{ HalfReuse: s.Mode5 /15 AsIs: t.Token2/20 AsIs: e.Tokens/37 AsIs: >/1 } >/39 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[39]);
        refalrts::reinit_close_bracket(context[14]);
        refalrts::reinit_open_call(context[28]);
        refalrts::reinit_name(context[9], functions[efunc_Sentence]);
        refalrts::reinit_svar( context[15], context[5] );
        refalrts::push_stack( vm, context[39] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[28] );
        refalrts::link_brackets( context[8], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[39] );
        res = refalrts::splice_evar( res, context[15], context[1] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        res = refalrts::splice_evar( res, context[12], context[28] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Block-AfterSentence/4 s.Mode/5 (/8 e.Sentences/31 )/9 t.ErrorList/10 t.NextSentence/12 (/14 # TkError/28 t.0/29 e.1/33 )/15 t.Token2/20 e.Tokens/35 >/1
        context[31] = context[22];
        context[32] = context[23];
        context[33] = context[26];
        context[34] = context[27];
        context[35] = context[24];
        context[36] = context[25];
        if( ! refalrts::ident_term( identifiers[ident_TkError], context[28] ) )
          continue;
        // closed e.Sentences as range 31
        // closed e.1 as range 33
        // closed e.Tokens as range 35
        //DEBUG: t.ErrorList: 10
        //DEBUG: t.NextSentence: 12
        //DEBUG: t.0: 29
        //DEBUG: t.Token2: 20
        //DEBUG: s.Mode: 5
        //DEBUG: e.Sentences: 31
        //DEBUG: e.1: 33
        //DEBUG: e.Tokens: 35

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Block-AfterSentence$1:1$6=1/4 AsIs: s.Mode/5 AsIs: (/8 AsIs: e.Sentences/31 AsIs: )/9 } Tile{ AsIs: t.NextSentence/12 } Tile{ AsIs: t.Token2/20 } Tile{ AsIs: (/14 } Tile{ AsIs: e.Tokens/35 } )/37 </38 Tile{ HalfReuse: & EL-AddErrorAt/28 } Tile{ AsIs: t.ErrorList/10 } Tile{ AsIs: t.0/29 AsIs: e.1/33 HalfReuse: >/15 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[37]);
        refalrts::alloc_open_call(vm, context[38]);
        refalrts::update_name(context[4], functions[efunc_gen_Blockm_AfterSentence_S1B1S6A1]);
        refalrts::reinit_name(context[28], functions[efunc_ELm_AddErrorAt]);
        refalrts::reinit_close_call(context[15]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[38] );
        refalrts::link_brackets( context[14], context[37] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[29], context[15] );
        res = refalrts::splice_evar( res, context[10], context[11] );
        res = refalrts::splice_elem( res, context[28] );
        res = refalrts::splice_evar( res, context[37], context[38] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[20], context[21] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Block-AfterSentence/4 s.Mode/5 (/8 e.Sentences/31 )/9 t.ErrorList/10 t.NextSentence/12 (/14 s.Type/28 t.0/29 e.1/33 )/15 t.Token2/20 e.Tokens/35 >/1
      context[31] = context[22];
      context[32] = context[23];
      context[33] = context[26];
      context[34] = context[27];
      context[35] = context[24];
      context[36] = context[25];
      // closed e.Sentences as range 31
      // closed e.1 as range 33
      // closed e.Tokens as range 35
      //DEBUG: t.ErrorList: 10
      //DEBUG: t.NextSentence: 12
      //DEBUG: t.0: 29
      //DEBUG: t.Token2: 20
      //DEBUG: s.Mode: 5
      //DEBUG: s.Type: 28
      //DEBUG: e.Sentences: 31
      //DEBUG: e.1: 33
      //DEBUG: e.Tokens: 35

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.1/33 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Block-AfterSentence$1:1$6=1/4 AsIs: s.Mode/5 AsIs: (/8 AsIs: e.Sentences/31 AsIs: )/9 } Tile{ AsIs: t.NextSentence/12 } Tile{ AsIs: t.Token2/20 } (/37 Tile{ AsIs: e.Tokens/35 } Tile{ AsIs: )/15 } </38 & EL-AddErrorAt/39 Tile{ AsIs: t.ErrorList/10 } Tile{ AsIs: t.0/29 }"unexpected "/40 </42 Tile{ HalfReuse: & TokName/14 AsIs: s.Type/28 } >/43", expected \';\' or \'}\', skipped"/44 >/46 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::alloc_open_call(vm, context[38]);
      refalrts::alloc_name(vm, context[39], functions[efunc_ELm_AddErrorAt]);
      refalrts::alloc_chars(vm, context[40], context[41], "unexpected ", 11);
      refalrts::alloc_open_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::alloc_chars(vm, context[44], context[45], ", expected \';\' or \'}\', skipped", 30);
      refalrts::alloc_close_call(vm, context[46]);
      refalrts::update_name(context[4], functions[efunc_gen_Blockm_AfterSentence_S1B1S6A1]);
      refalrts::reinit_name(context[14], functions[efunc_TokName]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[46] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[42] );
      refalrts::link_brackets( context[37], context[15] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[43], context[46] );
      res = refalrts::splice_evar( res, context[14], context[28] );
      res = refalrts::splice_evar( res, context[40], context[42] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_elem( res, context[15] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_elem( res, context[37] );
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[12], context[13] );
      refalrts::splice_to_freelist_open( vm, context[9], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Block-AfterSentence/4 s.Mode/5 (/8 e.Sentences/22 )/9 t.ErrorList/10 t.NextSentence/12 t.Token1/14 t.Token2/20 e.Tokens/24 >/1
    context[22] = context[16];
    context[23] = context[17];
    context[24] = context[18];
    context[25] = context[19];
    // closed e.Sentences as range 22
    // closed e.Tokens as range 24
    //DEBUG: t.ErrorList: 10
    //DEBUG: t.NextSentence: 12
    //DEBUG: t.Token1: 14
    //DEBUG: t.Token2: 20
    //DEBUG: s.Mode: 5
    //DEBUG: e.Sentences: 22
    //DEBUG: e.Tokens: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Block-AfterSentence$1:1$6=1/4 AsIs: s.Mode/5 AsIs: (/8 AsIs: e.Sentences/22 AsIs: )/9 } Tile{ AsIs: t.NextSentence/12 } Tile{ AsIs: t.Token2/20 } (/26 Tile{ AsIs: e.Tokens/24 } )/27 </28 & UnexpectedToken*2/29 Tile{ AsIs: t.ErrorList/10 } Tile{ AsIs: t.Token1/14 }"\';\' or \'}\', skipped"/30 >/32 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[26]);
    refalrts::alloc_close_bracket(vm, context[27]);
    refalrts::alloc_open_call(vm, context[28]);
    refalrts::alloc_name(vm, context[29], functions[efunc_gen_UnexpectedToken_D2]);
    refalrts::alloc_chars(vm, context[30], context[31], "\';\' or \'}\', skipped", 19);
    refalrts::alloc_close_call(vm, context[32]);
    refalrts::update_name(context[4], functions[efunc_gen_Blockm_AfterSentence_S1B1S6A1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[32] );
    refalrts::push_stack( vm, context[28] );
    refalrts::link_brackets( context[26], context[27] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[30], context[32] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[27], context[29] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_elem( res, context[26] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Block-AfterSentence/4 s.Mode/5 (/8 e.Sentences/6 )/9 t.ErrorList/10 t.NextSentence/12 (/14 # TkEOF/18 t.Pos/19 )/15 >/1
  context[16] = 0;
  context[17] = 0;
  if( ! refalrts::brackets_term( context[16], context[17], context[14] ) )
    return refalrts::cRecognitionImpossible;
  context[18] = refalrts::ident_left( identifiers[ident_TkEOF], context[16], context[17] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Sentences as range 6
  context[20] = refalrts::tvar_left( context[19], context[16], context[17] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[16], context[17] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.ErrorList: 10
  //DEBUG: t.NextSentence: 12
  //DEBUG: s.Mode: 5
  //DEBUG: e.Sentences: 6
  //DEBUG: t.Pos: 19

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.Mode/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 } Tile{ AsIs: t.ErrorList/10 } t.Pos/19/21"unexpected "/23 </25 & TokName/26 # TkEOF/27 Tile{ AsIs: >/1 }", expected \';\' or \'}\'"/28 >/30 Tile{ AsIs: (/8 } # Sentences/31 Tile{ AsIs: e.Sentences/6 } Tile{ AsIs: t.NextSentence/12 } Tile{ AsIs: )/9 } Tile{ AsIs: (/14 AsIs: # TkEOF/18 AsIs: t.Pos/19 AsIs: )/15 } Tile{ ]] }
  refalrts::copy_evar(vm, context[21], context[22], context[19], context[20]);
  refalrts::alloc_chars(vm, context[23], context[24], "unexpected ", 11);
  refalrts::alloc_open_call(vm, context[25]);
  refalrts::alloc_name(vm, context[26], functions[efunc_TokName]);
  refalrts::alloc_ident(vm, context[27], identifiers[ident_TkEOF]);
  refalrts::alloc_chars(vm, context[28], context[29], ", expected \';\' or \'}\'", 21);
  refalrts::alloc_close_call(vm, context[30]);
  refalrts::alloc_ident(vm, context[31], identifiers[ident_Sentences]);
  refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
  refalrts::link_brackets( context[14], context[15] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::push_stack( vm, context[30] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[25] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_evar( res, context[12], context[13] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_elem( res, context[31] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[28], context[30] );
  res = refalrts::splice_elem( res, context[1] );
  res = refalrts::splice_evar( res, context[21], context[27] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Blockm_AfterSentence("Block-AfterSentence", COOKIE1_, COOKIE2_, func_Blockm_AfterSentence);


static refalrts::FnResult func_Sentence(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & Sentence/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Sentence/4 t.new1/5 s.new2/7 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & Sentence/4 t.ErrorList/5 s.Mode/7 (/12 # TkRefal5Mode/14 t.Pos/15 s.NewMode/17 )/13 e.Tokens/8 >/1
    context[8] = context[2];
    context[9] = context[3];
    context[10] = 0;
    context[11] = 0;
    context[12] = refalrts::brackets_left( context[10], context[11], context[8], context[9] );
    if( ! context[12] )
      continue;
    refalrts::bracket_pointers(context[12], context[13]);
    context[14] = refalrts::ident_left( identifiers[ident_TkRefal5Mode], context[10], context[11] );
    if( ! context[14] )
      continue;
    // closed e.Tokens as range 8
    context[16] = refalrts::tvar_left( context[15], context[10], context[11] );
    if( ! context[16] )
      continue;
    if( ! refalrts::svar_left( context[17], context[10], context[11] ) )
      continue;
    if( ! refalrts::empty_seq( context[10], context[11] ) )
      continue;
    //DEBUG: t.ErrorList: 5
    //DEBUG: s.Mode: 7
    //DEBUG: e.Tokens: 8
    //DEBUG: t.Pos: 15
    //DEBUG: s.NewMode: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Mode/7 (/12 # TkRefal5Mode/14 t.Pos/15 s.NewMode/17 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Sentence/4 AsIs: t.ErrorList/5 } Tile{ HalfReuse: s.NewMode17 /13 AsIs: e.Tokens/8 AsIs: >/1 ]] }
    refalrts::reinit_svar( context[13], context[17] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[13];
    refalrts::splice_to_freelist_open( vm, context[6], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Sentence/4 t.ErrorList/5 s.Mode/7 e.Tokens/2 >/1
  // closed e.Tokens as range 2
  //DEBUG: t.ErrorList: 5
  //DEBUG: s.Mode: 7
  //DEBUG: e.Tokens: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </8 & SentenceTail/9 s.Mode/7/10 </11 & SentencePart-AfterPattern/12 s.Mode/7/13 Tile{ AsIs: </0 Reuse: & Pattern/4 AsIs: t.ErrorList/5 AsIs: s.Mode/7 AsIs: e.Tokens/2 AsIs: >/1 } >/14 >/15 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[8]);
  refalrts::alloc_name(vm, context[9], functions[efunc_SentenceTail]);
  refalrts::copy_stvar(vm, context[10], context[7]);
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_SentencePartm_AfterPattern]);
  refalrts::copy_stvar(vm, context[13], context[7]);
  refalrts::alloc_close_call(vm, context[14]);
  refalrts::alloc_close_call(vm, context[15]);
  refalrts::update_name(context[4], functions[efunc_Pattern]);
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[8], context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Sentence("Sentence", COOKIE1_, COOKIE2_, func_Sentence);


static refalrts::FnResult func_gen_SentenceTail_S1A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 32 elems
  refalrts::Iter context[32];
  refalrts::zeros( context, 32 );
  // </0 & SentenceTail$1=3/4 t.FirstPattern/5 s.PartType/7 t.FirstResult/8 (/12 e.FirstBlocks$a/10 )/13 t.NextPattern/14 (/18 e.ConditionsAndAssignments/16 )/19 t.LastResult/20 (/24 e.LastBlocks/22 )/25 (/28 e.Tokens$a/26 )/29 t.ErrorList$c/30 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[9] = refalrts::tvar_left( context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  // closed e.FirstBlocks$a as range 10
  context[15] = refalrts::tvar_left( context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  context[16] = 0;
  context[17] = 0;
  context[18] = refalrts::brackets_left( context[16], context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[18], context[19]);
  // closed e.ConditionsAndAssignments as range 16
  context[21] = refalrts::tvar_left( context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_left( context[26], context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  // closed e.LastBlocks as range 22
  // closed e.Tokens$a as range 26
  context[31] = refalrts::tvar_left( context[30], context[2], context[3] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.FirstPattern: 5
  //DEBUG: s.PartType: 7
  //DEBUG: t.FirstResult: 8
  //DEBUG: e.FirstBlocks$a: 10
  //DEBUG: t.NextPattern: 14
  //DEBUG: e.ConditionsAndAssignments: 16
  //DEBUG: t.LastResult: 20
  //DEBUG: e.LastBlocks: 22
  //DEBUG: e.Tokens$a: 26
  //DEBUG: t.ErrorList$c: 30

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & SentenceTail$1=3/4 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/29 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList$c/30 HalfReuse: (/1 } Tile{ AsIs: t.FirstPattern/5 } Tile{ HalfReuse: (/19 } Tile{ AsIs: s.PartType/7 AsIs: t.FirstResult/8 AsIs: (/12 AsIs: e.FirstBlocks$a/10 AsIs: )/13 AsIs: t.NextPattern/14 HalfReuse: )/18 } Tile{ AsIs: e.ConditionsAndAssignments/16 } Tile{ AsIs: t.LastResult/20 AsIs: (/24 AsIs: e.LastBlocks/22 AsIs: )/25 HalfReuse: )/28 } Tile{ AsIs: e.Tokens$a/26 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[1]);
  refalrts::reinit_open_bracket(context[19]);
  refalrts::reinit_close_bracket(context[18]);
  refalrts::reinit_close_bracket(context[28]);
  refalrts::link_brackets( context[1], context[28] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[19], context[18] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[26], context[27] );
  res = refalrts::splice_evar( res, context[20], context[28] );
  res = refalrts::splice_evar( res, context[16], context[17] );
  res = refalrts::splice_evar( res, context[7], context[18] );
  res = refalrts::splice_elem( res, context[19] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[30], context[1] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_SentenceTail_S1A3("SentenceTail$1=3", COOKIE1_, COOKIE2_, func_gen_SentenceTail_S1A3);


static refalrts::FnResult func_gen_SentenceTail_S1A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & SentenceTail$1=2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & SentenceTail$1=2/4 t.new1/5 s.new2/7 t.new3/8 t.new4/10 (/14 e.new5/12 )/15 t.new6/16 (/20 e.new7/18 )/21 (/24 e.new8/22 )/25 s.new9/26 t.new10/27 t.new11/29 e.new12/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[9] = refalrts::tvar_left( context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  context[11] = refalrts::tvar_left( context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  // closed e.new5 as range 12
  context[17] = refalrts::tvar_left( context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  // closed e.new7 as range 18
  // closed e.new8 as range 22
  if( ! refalrts::svar_left( context[26], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[28] = refalrts::tvar_left( context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  context[30] = refalrts::tvar_left( context[29], context[2], context[3] );
  if( ! context[30] )
    return refalrts::cRecognitionImpossible;
  // closed e.new12 as range 2
  do {
    // </0 & SentenceTail$1=2/4 t.FirstPattern/5 # Assign/7 t.FirstResult/8 t.NextPattern/10 (/14 e.ConditionsAndAssignments/31 )/15 t.LastResult/16 (/20 e.LastBlocks/33 )/21 (/24 e.Tokens$a/35 )/25 # Classic/26 t.Pos/27 t.ErrorList$b/29 e.FirstBlocks$a/37 >/1
    context[31] = context[12];
    context[32] = context[13];
    context[33] = context[18];
    context[34] = context[19];
    context[35] = context[22];
    context[36] = context[23];
    context[37] = context[2];
    context[38] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Assign], context[7] ) )
      continue;
    if( ! refalrts::ident_term( identifiers[ident_Classic], context[26] ) )
      continue;
    // closed e.ConditionsAndAssignments as range 31
    // closed e.LastBlocks as range 33
    // closed e.Tokens$a as range 35
    // closed e.FirstBlocks$a as range 37
    //DEBUG: t.FirstPattern: 5
    //DEBUG: t.FirstResult: 8
    //DEBUG: t.NextPattern: 10
    //DEBUG: t.LastResult: 16
    //DEBUG: t.Pos: 27
    //DEBUG: t.ErrorList$b: 29
    //DEBUG: e.ConditionsAndAssignments: 31
    //DEBUG: e.LastBlocks: 33
    //DEBUG: e.Tokens$a: 35
    //DEBUG: e.FirstBlocks$a: 37

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & SentenceTail$1=3@1/4 AsIs: t.FirstPattern/5 } Tile{ AsIs: t.FirstResult/8 } Tile{ HalfReuse: (/7 } Tile{ AsIs: e.FirstBlocks$a/37 } )/39 Tile{ AsIs: t.NextPattern/10 AsIs: (/14 AsIs: e.ConditionsAndAssignments/31 AsIs: )/15 AsIs: t.LastResult/16 AsIs: (/20 AsIs: e.LastBlocks/33 AsIs: )/21 AsIs: (/24 AsIs: e.Tokens$a/35 AsIs: )/25 HalfReuse: </26 } & EL-AddErrorAt/40 Tile{ AsIs: t.ErrorList$b/29 } Tile{ AsIs: t.Pos/27 }"Assignment is not supported in the classic mode"/41 >/43 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[39]);
    refalrts::alloc_name(vm, context[40], functions[efunc_ELm_AddErrorAt]);
    refalrts::alloc_chars(vm, context[41], context[42], "Assignment is not supported in the classic mode", 47);
    refalrts::alloc_close_call(vm, context[43]);
    refalrts::update_name(context[4], functions[efunc_gen_SentenceTail_S1A3Z1]);
    refalrts::reinit_open_bracket(context[7]);
    refalrts::reinit_open_call(context[26]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[43] );
    refalrts::push_stack( vm, context[26] );
    refalrts::link_brackets( context[24], context[25] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[14], context[15] );
    refalrts::link_brackets( context[7], context[39] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[41], context[43] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_elem( res, context[40] );
    res = refalrts::splice_evar( res, context[10], context[26] );
    res = refalrts::splice_elem( res, context[39] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_elem( res, context[7] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & SentenceTail$1=2/4 t.FirstPattern/5 s.PartType/7 t.FirstResult/8 t.NextPattern/10 (/14 e.ConditionsAndAssignments/12 )/15 t.LastResult/16 (/20 e.LastBlocks/18 )/21 (/24 e.Tokens$a/22 )/25 s.Mode/26 t.Pos/27 t.ErrorList$b/29 e.FirstBlocks$a/2 >/1
  // closed e.ConditionsAndAssignments as range 12
  // closed e.LastBlocks as range 18
  // closed e.Tokens$a as range 22
  // closed e.FirstBlocks$a as range 2
  //DEBUG: t.FirstPattern: 5
  //DEBUG: t.FirstResult: 8
  //DEBUG: t.NextPattern: 10
  //DEBUG: t.LastResult: 16
  //DEBUG: t.Pos: 27
  //DEBUG: t.ErrorList$b: 29
  //DEBUG: s.PartType: 7
  //DEBUG: s.Mode: 26
  //DEBUG: e.ConditionsAndAssignments: 12
  //DEBUG: e.LastBlocks: 18
  //DEBUG: e.Tokens$a: 22
  //DEBUG: e.FirstBlocks$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Mode/26 t.Pos/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList$b/29 } Tile{ HalfReuse: (/4 AsIs: t.FirstPattern/5 } Tile{ HalfReuse: (/1 } Tile{ AsIs: s.PartType/7 AsIs: t.FirstResult/8 } Tile{ HalfReuse: (/25 } Tile{ AsIs: e.FirstBlocks$a/2 } Tile{ AsIs: )/15 } Tile{ AsIs: t.NextPattern/10 HalfReuse: )/14 } Tile{ AsIs: e.ConditionsAndAssignments/12 } Tile{ AsIs: t.LastResult/16 AsIs: (/20 AsIs: e.LastBlocks/18 AsIs: )/21 HalfReuse: )/24 } Tile{ AsIs: e.Tokens$a/22 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_open_bracket(context[1]);
  refalrts::reinit_open_bracket(context[25]);
  refalrts::reinit_close_bracket(context[14]);
  refalrts::reinit_close_bracket(context[24]);
  refalrts::link_brackets( context[4], context[24] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[1], context[14] );
  refalrts::link_brackets( context[25], context[15] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[22], context[23] );
  res = refalrts::splice_evar( res, context[16], context[24] );
  res = refalrts::splice_evar( res, context[12], context[13] );
  res = refalrts::splice_evar( res, context[10], context[14] );
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[25] );
  res = refalrts::splice_evar( res, context[7], context[9] );
  res = refalrts::splice_elem( res, context[1] );
  res = refalrts::splice_evar( res, context[4], context[6] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_SentenceTail_S1A2("SentenceTail$1=2", COOKIE1_, COOKIE2_, func_gen_SentenceTail_S1A2);


static refalrts::FnResult func_gen_SentenceTail_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 76 elems
  refalrts::Iter context[76];
  refalrts::zeros( context, 76 );
  // </0 & SentenceTail$1=1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & SentenceTail$1=1/4 t.new1/5 s.new2/7 t.new3/8 s.new4/10 t.new5/11 (/15 e.new6/13 )/16 t.new7/17 (/21 t.new8/27 e.new9/19 t.new10/29 (/25 e.new11/23 )/26 )/22 e.new12/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[9] = refalrts::tvar_left( context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new6 as range 13
  context[18] = refalrts::tvar_left( context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_right( context[23], context[24], context[19], context[20] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  // closed e.new11 as range 23
  // closed e.new12 as range 2
  context[28] = refalrts::tvar_left( context[27], context[19], context[20] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  context[30] = refalrts::tvar_right( context[29], context[19], context[20] );
  if( ! context[30] )
    return refalrts::cRecognitionImpossible;
  // closed e.new9 as range 19
  do {
    // </0 & SentenceTail$1=1/4 t.new13/5 s.new14/7 t.new15/8 s.new16/10 t.new17/11 (/15 (/41 t.new20/43 e.new21/39 )/42 e.new22/31 )/16 t.new18/17 (/21 t.new23/27 e.new25/33 t.new24/29 (/25 e.new26/35 )/26 )/22 e.new19/37 >/1
    context[31] = context[13];
    context[32] = context[14];
    context[33] = context[19];
    context[34] = context[20];
    context[35] = context[23];
    context[36] = context[24];
    context[37] = context[2];
    context[38] = context[3];
    context[39] = 0;
    context[40] = 0;
    context[41] = refalrts::brackets_left( context[39], context[40], context[31], context[32] );
    if( ! context[41] )
      continue;
    refalrts::bracket_pointers(context[41], context[42]);
    // closed e.new22 as range 31
    // closed e.new25 as range 33
    // closed e.new26 as range 35
    // closed e.new19 as range 37
    context[44] = refalrts::tvar_left( context[43], context[39], context[40] );
    if( ! context[44] )
      continue;
    // closed e.new21 as range 39
    do {
      // </0 & SentenceTail$1=1/4 t.FirstPattern/5 s.PartType/7 t.FirstResult/8 # Classic/10 t.Pos/11 (/15 (/41 t.0/43 e.1/45 )/42 e./47 )/16 t.ErrorList$a/17 (/21 t.NextPattern/27 e.ConditionsAndAssignments/49 t.LastResult/29 (/25 e.LastBlocks/51 )/26 )/22 e.Tokens$a/53 >/1
      context[45] = context[39];
      context[46] = context[40];
      context[47] = context[31];
      context[48] = context[32];
      context[49] = context[33];
      context[50] = context[34];
      context[51] = context[35];
      context[52] = context[36];
      context[53] = context[37];
      context[54] = context[38];
      if( ! refalrts::ident_term( identifiers[ident_Classic], context[10] ) )
        continue;
      // closed e.1 as range 45
      // closed e. as range 47
      // closed e.ConditionsAndAssignments as range 49
      // closed e.LastBlocks as range 51
      // closed e.Tokens$a as range 53
      //DEBUG: t.FirstPattern: 5
      //DEBUG: t.FirstResult: 8
      //DEBUG: t.Pos: 11
      //DEBUG: t.0: 43
      //DEBUG: t.ErrorList$a: 17
      //DEBUG: t.NextPattern: 27
      //DEBUG: t.LastResult: 29
      //DEBUG: s.PartType: 7
      //DEBUG: e.1: 45
      //DEBUG: e.: 47
      //DEBUG: e.ConditionsAndAssignments: 49
      //DEBUG: e.LastBlocks: 51
      //DEBUG: e.Tokens$a: 53

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & SentenceTail$1=2/4 AsIs: t.FirstPattern/5 AsIs: s.PartType/7 AsIs: t.FirstResult/8 } Tile{ AsIs: t.NextPattern/27 } Tile{ AsIs: (/21 } Tile{ AsIs: e.ConditionsAndAssignments/49 } )/55 Tile{ AsIs: t.LastResult/29 AsIs: (/25 AsIs: e.LastBlocks/51 AsIs: )/26 HalfReuse: (/22 AsIs: e.Tokens$a/53 HalfReuse: )/1 } Tile{ AsIs: # Classic/10 AsIs: t.Pos/11 HalfReuse: </15 HalfReuse: & DoCheckExceedBlocks/41 } # Classic/56 </57 & EL-AddErrorAt/58 Tile{ AsIs: t.ErrorList$a/17 } Tile{ AsIs: t.0/43 }"Exceed block in this position"/59 >/61 (/62 (/63 Tile{ AsIs: e.1/45 } )/64 Tile{ AsIs: )/42 AsIs: e./47 HalfReuse: >/16 } >/65 Tile{ ]] }
      refalrts::alloc_close_bracket(vm, context[55]);
      refalrts::alloc_ident(vm, context[56], identifiers[ident_Classic]);
      refalrts::alloc_open_call(vm, context[57]);
      refalrts::alloc_name(vm, context[58], functions[efunc_ELm_AddErrorAt]);
      refalrts::alloc_chars(vm, context[59], context[60], "Exceed block in this position", 29);
      refalrts::alloc_close_call(vm, context[61]);
      refalrts::alloc_open_bracket(vm, context[62]);
      refalrts::alloc_open_bracket(vm, context[63]);
      refalrts::alloc_close_bracket(vm, context[64]);
      refalrts::alloc_close_call(vm, context[65]);
      refalrts::update_name(context[4], functions[efunc_gen_SentenceTail_S1A2]);
      refalrts::reinit_open_bracket(context[22]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::reinit_open_call(context[15]);
      refalrts::reinit_name(context[41], functions[efunc_DoCheckExceedBlocks]);
      refalrts::reinit_close_call(context[16]);
      refalrts::push_stack( vm, context[65] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[15] );
      refalrts::link_brackets( context[62], context[42] );
      refalrts::link_brackets( context[63], context[64] );
      refalrts::push_stack( vm, context[61] );
      refalrts::push_stack( vm, context[57] );
      refalrts::link_brackets( context[22], context[1] );
      refalrts::link_brackets( context[25], context[26] );
      refalrts::link_brackets( context[21], context[55] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[65] );
      res = refalrts::splice_evar( res, context[42], context[16] );
      res = refalrts::splice_elem( res, context[64] );
      res = refalrts::splice_evar( res, context[45], context[46] );
      res = refalrts::splice_evar( res, context[59], context[63] );
      res = refalrts::splice_evar( res, context[43], context[44] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[56], context[58] );
      res = refalrts::splice_evar( res, context[10], context[41] );
      res = refalrts::splice_evar( res, context[29], context[1] );
      res = refalrts::splice_elem( res, context[55] );
      res = refalrts::splice_evar( res, context[49], context[50] );
      res = refalrts::splice_elem( res, context[21] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & SentenceTail$1=1/4 t.new27/5 s.new28/7 t.new29/8 # Extended/10 t.new30/11 (/15 (/41 t.new34/43 e.new35/45 )/42 e.new33/47 )/16 t.new31/17 (/21 t.new36/27 e.new38/49 t.new37/29 (/25 e.new39/51 )/26 )/22 e.new32/53 >/1
      context[45] = context[39];
      context[46] = context[40];
      context[47] = context[31];
      context[48] = context[32];
      context[49] = context[33];
      context[50] = context[34];
      context[51] = context[35];
      context[52] = context[36];
      context[53] = context[37];
      context[54] = context[38];
      if( ! refalrts::ident_term( identifiers[ident_Extended], context[10] ) )
        continue;
      // closed e.new35 as range 45
      // closed e.new33 as range 47
      // closed e.new38 as range 49
      // closed e.new39 as range 51
      // closed e.new32 as range 53
      do {
        // </0 & SentenceTail$1=1/4 t.FirstPattern/5 s.PartType/7 t.FirstResult/8 # Extended/10 t.Pos/11 (/15 (/41 t.0/43 e.1/55 )/42 (/67 t.1/69 e.3/65 )/68 e.0/57 )/16 t.ErrorList$a/17 (/21 t.NextPattern/27 e.ConditionsAndAssignments/59 t.LastResult/29 (/25 e.LastBlocks/61 )/26 )/22 e.Tokens$a/63 >/1
        context[55] = context[45];
        context[56] = context[46];
        context[57] = context[47];
        context[58] = context[48];
        context[59] = context[49];
        context[60] = context[50];
        context[61] = context[51];
        context[62] = context[52];
        context[63] = context[53];
        context[64] = context[54];
        context[65] = 0;
        context[66] = 0;
        context[67] = refalrts::brackets_left( context[65], context[66], context[57], context[58] );
        if( ! context[67] )
          continue;
        refalrts::bracket_pointers(context[67], context[68]);
        // closed e.1 as range 55
        // closed e.0 as range 57
        // closed e.ConditionsAndAssignments as range 59
        // closed e.LastBlocks as range 61
        // closed e.Tokens$a as range 63
        context[70] = refalrts::tvar_left( context[69], context[65], context[66] );
        if( ! context[70] )
          continue;
        // closed e.3 as range 65
        //DEBUG: t.FirstPattern: 5
        //DEBUG: t.FirstResult: 8
        //DEBUG: t.Pos: 11
        //DEBUG: t.0: 43
        //DEBUG: t.ErrorList$a: 17
        //DEBUG: t.NextPattern: 27
        //DEBUG: t.LastResult: 29
        //DEBUG: s.PartType: 7
        //DEBUG: e.1: 55
        //DEBUG: e.0: 57
        //DEBUG: e.ConditionsAndAssignments: 59
        //DEBUG: e.LastBlocks: 61
        //DEBUG: e.Tokens$a: 63
        //DEBUG: t.1: 69
        //DEBUG: e.3: 65

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} t.0/43 {REMOVED TILE} {REMOVED TILE} t.1/69 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & SentenceTail$1=2/4 AsIs: t.FirstPattern/5 AsIs: s.PartType/7 AsIs: t.FirstResult/8 } Tile{ AsIs: t.NextPattern/27 } (/71 Tile{ AsIs: e.ConditionsAndAssignments/59 } )/72 Tile{ AsIs: t.LastResult/29 AsIs: (/25 AsIs: e.LastBlocks/61 AsIs: )/26 HalfReuse: (/22 AsIs: e.Tokens$a/63 HalfReuse: )/1 } Tile{ AsIs: # Extended/10 AsIs: t.Pos/11 HalfReuse: </15 HalfReuse: & DoCheckExceedBlocks@3/41 } Tile{ AsIs: t.ErrorList$a/17 AsIs: (/21 } (/73 Tile{ AsIs: e.1/55 } )/74 Tile{ AsIs: )/42 AsIs: (/67 } Tile{ AsIs: e.3/65 } Tile{ AsIs: )/68 AsIs: e.0/57 HalfReuse: >/16 } >/75 Tile{ ]] }
        refalrts::alloc_open_bracket(vm, context[71]);
        refalrts::alloc_close_bracket(vm, context[72]);
        refalrts::alloc_open_bracket(vm, context[73]);
        refalrts::alloc_close_bracket(vm, context[74]);
        refalrts::alloc_close_call(vm, context[75]);
        refalrts::update_name(context[4], functions[efunc_gen_SentenceTail_S1A2]);
        refalrts::reinit_open_bracket(context[22]);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[41], functions[efunc_gen_DoCheckExceedBlocks_Z3]);
        refalrts::reinit_close_call(context[16]);
        refalrts::push_stack( vm, context[75] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[67], context[68] );
        refalrts::link_brackets( context[21], context[42] );
        refalrts::link_brackets( context[73], context[74] );
        refalrts::link_brackets( context[22], context[1] );
        refalrts::link_brackets( context[25], context[26] );
        refalrts::link_brackets( context[71], context[72] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[75] );
        res = refalrts::splice_evar( res, context[68], context[16] );
        res = refalrts::splice_evar( res, context[65], context[66] );
        res = refalrts::splice_evar( res, context[42], context[67] );
        res = refalrts::splice_elem( res, context[74] );
        res = refalrts::splice_evar( res, context[55], context[56] );
        res = refalrts::splice_elem( res, context[73] );
        res = refalrts::splice_evar( res, context[17], context[21] );
        res = refalrts::splice_evar( res, context[10], context[41] );
        res = refalrts::splice_evar( res, context[29], context[1] );
        res = refalrts::splice_elem( res, context[72] );
        res = refalrts::splice_evar( res, context[59], context[60] );
        res = refalrts::splice_elem( res, context[71] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        refalrts::splice_to_freelist_open( vm, context[9], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & SentenceTail$1=1/4 t.FirstPattern/5 s.PartType/7 t.FirstResult/8 # Extended/10 t.Pos/11 (/15 (/41 t.0/43 e.1/55 )/42 )/16 t.ErrorList$a/17 (/21 t.NextPattern/27 e.ConditionsAndAssignments/57 t.LastResult/29 (/25 e.LastBlocks/59 )/26 )/22 e.Tokens$a/61 >/1
        context[55] = context[45];
        context[56] = context[46];
        context[57] = context[49];
        context[58] = context[50];
        context[59] = context[51];
        context[60] = context[52];
        context[61] = context[53];
        context[62] = context[54];
        if( ! refalrts::empty_seq( context[47], context[48] ) )
          continue;
        // closed e.1 as range 55
        // closed e.ConditionsAndAssignments as range 57
        // closed e.LastBlocks as range 59
        // closed e.Tokens$a as range 61
        //DEBUG: t.FirstPattern: 5
        //DEBUG: t.FirstResult: 8
        //DEBUG: t.Pos: 11
        //DEBUG: t.0: 43
        //DEBUG: t.ErrorList$a: 17
        //DEBUG: t.NextPattern: 27
        //DEBUG: t.LastResult: 29
        //DEBUG: s.PartType: 7
        //DEBUG: e.1: 55
        //DEBUG: e.ConditionsAndAssignments: 57
        //DEBUG: e.LastBlocks: 59
        //DEBUG: e.Tokens$a: 61

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & SentenceTail$1=1/4 {REMOVED TILE} {REMOVED TILE} t.Pos/11 {REMOVED TILE} {REMOVED TILE} t.0/43 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList$a/17 AsIs: (/21 } Tile{ AsIs: t.FirstPattern/5 } Tile{ AsIs: (/41 } Tile{ AsIs: s.PartType/7 AsIs: t.FirstResult/8 HalfReuse: (/10 } Tile{ AsIs: (/15 } Tile{ AsIs: e.1/55 } Tile{ AsIs: )/42 AsIs: )/16 } Tile{ AsIs: t.NextPattern/27 } Tile{ HalfReuse: )/1 } Tile{ AsIs: e.ConditionsAndAssignments/57 } Tile{ AsIs: t.LastResult/29 AsIs: (/25 AsIs: e.LastBlocks/59 AsIs: )/26 AsIs: )/22 } Tile{ AsIs: e.Tokens$a/61 } Tile{ ]] }
        refalrts::reinit_open_bracket(context[10]);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[21], context[22] );
        refalrts::link_brackets( context[25], context[26] );
        refalrts::link_brackets( context[41], context[1] );
        refalrts::link_brackets( context[10], context[16] );
        refalrts::link_brackets( context[15], context[42] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[61], context[62] );
        res = refalrts::splice_evar( res, context[29], context[22] );
        res = refalrts::splice_evar( res, context[57], context[58] );
        res = refalrts::splice_elem( res, context[1] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[42], context[16] );
        res = refalrts::splice_evar( res, context[55], context[56] );
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_evar( res, context[7], context[10] );
        res = refalrts::splice_elem( res, context[41] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[17], context[21] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & SentenceTail$1=1/4 t.FirstPattern/5 s.PartType/7 t.FirstResult/8 # Extended/10 t.Pos/11 (/15 (/41 t.0/43 e.1/55 )/42 e./57 )/16 t.ErrorList$a/17 (/21 t.NextPattern/27 e.ConditionsAndAssignments/59 t.LastResult/29 (/25 e.LastBlocks/61 )/26 )/22 e.Tokens$a/63 >/1
      context[55] = context[45];
      context[56] = context[46];
      context[57] = context[47];
      context[58] = context[48];
      context[59] = context[49];
      context[60] = context[50];
      context[61] = context[51];
      context[62] = context[52];
      context[63] = context[53];
      context[64] = context[54];
      // closed e.1 as range 55
      // closed e. as range 57
      // closed e.ConditionsAndAssignments as range 59
      // closed e.LastBlocks as range 61
      // closed e.Tokens$a as range 63
      //DEBUG: t.FirstPattern: 5
      //DEBUG: t.FirstResult: 8
      //DEBUG: t.Pos: 11
      //DEBUG: t.0: 43
      //DEBUG: t.ErrorList$a: 17
      //DEBUG: t.NextPattern: 27
      //DEBUG: t.LastResult: 29
      //DEBUG: s.PartType: 7
      //DEBUG: e.1: 55
      //DEBUG: e.: 57
      //DEBUG: e.ConditionsAndAssignments: 59
      //DEBUG: e.LastBlocks: 61
      //DEBUG: e.Tokens$a: 63

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} t.0/43 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & SentenceTail$1=2/4 AsIs: t.FirstPattern/5 AsIs: s.PartType/7 AsIs: t.FirstResult/8 } Tile{ AsIs: t.NextPattern/27 } (/65 Tile{ AsIs: e.ConditionsAndAssignments/59 } Tile{ AsIs: )/42 } Tile{ AsIs: t.LastResult/29 AsIs: (/25 AsIs: e.LastBlocks/61 AsIs: )/26 HalfReuse: (/22 AsIs: e.Tokens$a/63 HalfReuse: )/1 } Tile{ AsIs: # Extended/10 AsIs: t.Pos/11 HalfReuse: </15 HalfReuse: & DoCheckExceedBlocks@0/41 } Tile{ HalfReuse: # Extended/16 AsIs: t.ErrorList$a/17 AsIs: (/21 } (/66 Tile{ AsIs: e.1/55 } )/67 )/68 Tile{ AsIs: e./57 } >/69 >/70 Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[65]);
      refalrts::alloc_open_bracket(vm, context[66]);
      refalrts::alloc_close_bracket(vm, context[67]);
      refalrts::alloc_close_bracket(vm, context[68]);
      refalrts::alloc_close_call(vm, context[69]);
      refalrts::alloc_close_call(vm, context[70]);
      refalrts::update_name(context[4], functions[efunc_gen_SentenceTail_S1A2]);
      refalrts::reinit_open_bracket(context[22]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::reinit_open_call(context[15]);
      refalrts::reinit_name(context[41], functions[efunc_gen_DoCheckExceedBlocks_Z0]);
      refalrts::reinit_ident(context[16], identifiers[ident_Extended]);
      refalrts::push_stack( vm, context[70] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[69] );
      refalrts::push_stack( vm, context[15] );
      refalrts::link_brackets( context[21], context[68] );
      refalrts::link_brackets( context[66], context[67] );
      refalrts::link_brackets( context[22], context[1] );
      refalrts::link_brackets( context[25], context[26] );
      refalrts::link_brackets( context[65], context[42] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[69], context[70] );
      res = refalrts::splice_evar( res, context[57], context[58] );
      res = refalrts::splice_evar( res, context[67], context[68] );
      res = refalrts::splice_evar( res, context[55], context[56] );
      res = refalrts::splice_elem( res, context[66] );
      res = refalrts::splice_evar( res, context[16], context[21] );
      res = refalrts::splice_evar( res, context[10], context[41] );
      res = refalrts::splice_evar( res, context[29], context[1] );
      res = refalrts::splice_elem( res, context[42] );
      res = refalrts::splice_evar( res, context[59], context[60] );
      res = refalrts::splice_elem( res, context[65] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::splice_to_freelist_open( vm, context[9], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & SentenceTail$1=1/4 t.FirstPattern/5 s.PartType/7 t.FirstResult/8 s.Mode/10 t.Pos/11 (/15 (/41 t.0/43 e.1/45 )/42 e./47 )/16 t.ErrorList$a/17 (/21 t.NextPattern/27 e.ConditionsAndAssignments/49 t.LastResult/29 (/25 e.LastBlocks/51 )/26 )/22 e.Tokens$a/53 >/1
    context[45] = context[39];
    context[46] = context[40];
    context[47] = context[31];
    context[48] = context[32];
    context[49] = context[33];
    context[50] = context[34];
    context[51] = context[35];
    context[52] = context[36];
    context[53] = context[37];
    context[54] = context[38];
    // closed e.1 as range 45
    // closed e. as range 47
    // closed e.ConditionsAndAssignments as range 49
    // closed e.LastBlocks as range 51
    // closed e.Tokens$a as range 53
    //DEBUG: t.FirstPattern: 5
    //DEBUG: t.FirstResult: 8
    //DEBUG: t.Pos: 11
    //DEBUG: t.0: 43
    //DEBUG: t.ErrorList$a: 17
    //DEBUG: t.NextPattern: 27
    //DEBUG: t.LastResult: 29
    //DEBUG: s.PartType: 7
    //DEBUG: s.Mode: 10
    //DEBUG: e.1: 45
    //DEBUG: e.: 47
    //DEBUG: e.ConditionsAndAssignments: 49
    //DEBUG: e.LastBlocks: 51
    //DEBUG: e.Tokens$a: 53

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & SentenceTail$1=2/4 AsIs: t.FirstPattern/5 AsIs: s.PartType/7 AsIs: t.FirstResult/8 } Tile{ AsIs: t.NextPattern/27 } (/55 Tile{ AsIs: e.ConditionsAndAssignments/49 } )/56 Tile{ AsIs: t.LastResult/29 AsIs: (/25 AsIs: e.LastBlocks/51 AsIs: )/26 HalfReuse: (/22 AsIs: e.Tokens$a/53 HalfReuse: )/1 } Tile{ AsIs: s.Mode/10 AsIs: t.Pos/11 HalfReuse: </15 HalfReuse: & DoCheckExceedBlocks/41 } s.Mode/10/57 </58 & ClassicError*2/59 Tile{ AsIs: t.ErrorList$a/17 HalfReuse: s.Mode10 /21 } Tile{ AsIs: t.0/43 }"Exceed block in this position"/60 >/62 (/63 (/64 Tile{ AsIs: e.1/45 } )/65 Tile{ AsIs: )/42 AsIs: e./47 HalfReuse: >/16 } >/66 Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[55]);
    refalrts::alloc_close_bracket(vm, context[56]);
    refalrts::copy_stvar(vm, context[57], context[10]);
    refalrts::alloc_open_call(vm, context[58]);
    refalrts::alloc_name(vm, context[59], functions[efunc_gen_ClassicError_D2]);
    refalrts::alloc_chars(vm, context[60], context[61], "Exceed block in this position", 29);
    refalrts::alloc_close_call(vm, context[62]);
    refalrts::alloc_open_bracket(vm, context[63]);
    refalrts::alloc_open_bracket(vm, context[64]);
    refalrts::alloc_close_bracket(vm, context[65]);
    refalrts::alloc_close_call(vm, context[66]);
    refalrts::update_name(context[4], functions[efunc_gen_SentenceTail_S1A2]);
    refalrts::reinit_open_bracket(context[22]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::reinit_open_call(context[15]);
    refalrts::reinit_name(context[41], functions[efunc_DoCheckExceedBlocks]);
    refalrts::reinit_svar( context[21], context[10] );
    refalrts::reinit_close_call(context[16]);
    refalrts::push_stack( vm, context[66] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[15] );
    refalrts::link_brackets( context[63], context[42] );
    refalrts::link_brackets( context[64], context[65] );
    refalrts::push_stack( vm, context[62] );
    refalrts::push_stack( vm, context[58] );
    refalrts::link_brackets( context[22], context[1] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[55], context[56] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[66] );
    res = refalrts::splice_evar( res, context[42], context[16] );
    res = refalrts::splice_elem( res, context[65] );
    res = refalrts::splice_evar( res, context[45], context[46] );
    res = refalrts::splice_evar( res, context[60], context[64] );
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_evar( res, context[17], context[21] );
    res = refalrts::splice_evar( res, context[57], context[59] );
    res = refalrts::splice_evar( res, context[10], context[41] );
    res = refalrts::splice_evar( res, context[29], context[1] );
    res = refalrts::splice_elem( res, context[56] );
    res = refalrts::splice_evar( res, context[49], context[50] );
    res = refalrts::splice_elem( res, context[55] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & SentenceTail$1=1/4 t.new13/5 s.new14/7 t.new15/8 s.new16/10 t.new17/11 (/15 )/16 t.new18/17 (/21 t.new20/27 e.new22/31 t.new21/29 (/25 e.new23/33 )/26 )/22 e.new19/35 >/1
    context[31] = context[19];
    context[32] = context[20];
    context[33] = context[23];
    context[34] = context[24];
    context[35] = context[2];
    context[36] = context[3];
    if( ! refalrts::empty_seq( context[13], context[14] ) )
      continue;
    // closed e.new22 as range 31
    // closed e.new23 as range 33
    // closed e.new19 as range 35
    do {
      // </0 & SentenceTail$1=1/4 t.FirstPattern/5 # Assign/7 t.FirstResult/8 # Classic/10 t.Pos/11 (/15 )/16 t.ErrorList$a/17 (/21 t.NextPattern/27 e.ConditionsAndAssignments/37 t.LastResult/29 (/25 e.LastBlocks/39 )/26 )/22 e.Tokens$a/41 >/1
      context[37] = context[31];
      context[38] = context[32];
      context[39] = context[33];
      context[40] = context[34];
      context[41] = context[35];
      context[42] = context[36];
      if( ! refalrts::ident_term( identifiers[ident_Assign], context[7] ) )
        continue;
      if( ! refalrts::ident_term( identifiers[ident_Classic], context[10] ) )
        continue;
      // closed e.ConditionsAndAssignments as range 37
      // closed e.LastBlocks as range 39
      // closed e.Tokens$a as range 41
      //DEBUG: t.FirstPattern: 5
      //DEBUG: t.FirstResult: 8
      //DEBUG: t.Pos: 11
      //DEBUG: t.ErrorList$a: 17
      //DEBUG: t.NextPattern: 27
      //DEBUG: t.LastResult: 29
      //DEBUG: e.ConditionsAndAssignments: 37
      //DEBUG: e.LastBlocks: 39
      //DEBUG: e.Tokens$a: 41

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & SentenceTail$1=3/4 AsIs: t.FirstPattern/5 AsIs: # Assign/7 AsIs: t.FirstResult/8 HalfReuse: (/10 } Tile{ HalfReuse: )/21 AsIs: t.NextPattern/27 } (/43 Tile{ AsIs: e.ConditionsAndAssignments/37 } )/44 Tile{ AsIs: t.LastResult/29 AsIs: (/25 AsIs: e.LastBlocks/39 AsIs: )/26 HalfReuse: (/22 AsIs: e.Tokens$a/41 HalfReuse: )/1 } Tile{ HalfReuse: </15 HalfReuse: & EL-AddErrorAt/16 AsIs: t.ErrorList$a/17 } Tile{ AsIs: t.Pos/11 }"Assignment is not supported in the classic mode"/45 >/47 >/48 Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[43]);
      refalrts::alloc_close_bracket(vm, context[44]);
      refalrts::alloc_chars(vm, context[45], context[46], "Assignment is not supported in the classic mode", 47);
      refalrts::alloc_close_call(vm, context[47]);
      refalrts::alloc_close_call(vm, context[48]);
      refalrts::update_name(context[4], functions[efunc_gen_SentenceTail_S1A3]);
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_close_bracket(context[21]);
      refalrts::reinit_open_bracket(context[22]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::reinit_open_call(context[15]);
      refalrts::reinit_name(context[16], functions[efunc_ELm_AddErrorAt]);
      refalrts::push_stack( vm, context[48] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[47] );
      refalrts::push_stack( vm, context[15] );
      refalrts::link_brackets( context[22], context[1] );
      refalrts::link_brackets( context[25], context[26] );
      refalrts::link_brackets( context[43], context[44] );
      refalrts::link_brackets( context[10], context[21] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[45], context[48] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      res = refalrts::splice_evar( res, context[29], context[1] );
      res = refalrts::splice_elem( res, context[44] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_elem( res, context[43] );
      res = refalrts::splice_evar( res, context[21], context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & SentenceTail$1=1/4 t.FirstPattern/5 s.PartType/7 t.FirstResult/8 s.Mode/10 t.Pos/11 (/15 )/16 t.ErrorList$a/17 (/21 t.NextPattern/27 e.ConditionsAndAssignments/37 t.LastResult/29 (/25 e.LastBlocks/39 )/26 )/22 e.Tokens$a/41 >/1
    context[37] = context[31];
    context[38] = context[32];
    context[39] = context[33];
    context[40] = context[34];
    context[41] = context[35];
    context[42] = context[36];
    // closed e.ConditionsAndAssignments as range 37
    // closed e.LastBlocks as range 39
    // closed e.Tokens$a as range 41
    //DEBUG: t.FirstPattern: 5
    //DEBUG: t.FirstResult: 8
    //DEBUG: t.Pos: 11
    //DEBUG: t.ErrorList$a: 17
    //DEBUG: t.NextPattern: 27
    //DEBUG: t.LastResult: 29
    //DEBUG: s.PartType: 7
    //DEBUG: s.Mode: 10
    //DEBUG: e.ConditionsAndAssignments: 37
    //DEBUG: e.LastBlocks: 39
    //DEBUG: e.Tokens$a: 41

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Mode/10 t.Pos/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList$a/17 AsIs: (/21 } Tile{ AsIs: t.FirstPattern/5 } Tile{ HalfReuse: (/1 } Tile{ AsIs: s.PartType/7 AsIs: t.FirstResult/8 } Tile{ AsIs: (/15 AsIs: )/16 } Tile{ AsIs: t.NextPattern/27 } Tile{ HalfReuse: )/4 } Tile{ AsIs: e.ConditionsAndAssignments/37 } Tile{ AsIs: t.LastResult/29 AsIs: (/25 AsIs: e.LastBlocks/39 AsIs: )/26 AsIs: )/22 } Tile{ AsIs: e.Tokens$a/41 } Tile{ ]] }
    refalrts::reinit_open_bracket(context[1]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[1], context[4] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[29], context[22] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_elem( res, context[4] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[7], context[9] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[17], context[21] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & SentenceTail$1=1/4 t.FirstPattern/5 s.PartType/7 t.FirstResult/8 s.Mode/10 t.Pos/11 (/15 e.FirstBlocks/13 )/16 t.ErrorList$a/17 (/21 t.NextPattern/27 e.ConditionsAndAssignments/19 t.LastResult/29 (/25 e.LastBlocks/23 )/26 )/22 e.Tokens$a/2 >/1
  // closed e.FirstBlocks as range 13
  // closed e.ConditionsAndAssignments as range 19
  // closed e.LastBlocks as range 23
  // closed e.Tokens$a as range 2
  //DEBUG: t.FirstPattern: 5
  //DEBUG: t.FirstResult: 8
  //DEBUG: t.Pos: 11
  //DEBUG: t.ErrorList$a: 17
  //DEBUG: t.NextPattern: 27
  //DEBUG: t.LastResult: 29
  //DEBUG: s.PartType: 7
  //DEBUG: s.Mode: 10
  //DEBUG: e.FirstBlocks: 13
  //DEBUG: e.ConditionsAndAssignments: 19
  //DEBUG: e.LastBlocks: 23
  //DEBUG: e.Tokens$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & SentenceTail$1=2/4 AsIs: t.FirstPattern/5 AsIs: s.PartType/7 AsIs: t.FirstResult/8 } Tile{ AsIs: t.NextPattern/27 } (/31 Tile{ AsIs: e.ConditionsAndAssignments/19 } )/32 Tile{ AsIs: t.LastResult/29 AsIs: (/25 AsIs: e.LastBlocks/23 AsIs: )/26 HalfReuse: (/22 AsIs: e.Tokens$a/2 HalfReuse: )/1 } Tile{ AsIs: s.Mode/10 AsIs: t.Pos/11 HalfReuse: </15 } & DoCheckExceedBlocks@0/33 Tile{ HalfReuse: s.Mode10 /16 AsIs: t.ErrorList$a/17 AsIs: (/21 } )/34 Tile{ AsIs: e.FirstBlocks/13 } >/35 >/36 Tile{ ]] }
  refalrts::alloc_open_bracket(vm, context[31]);
  refalrts::alloc_close_bracket(vm, context[32]);
  refalrts::alloc_name(vm, context[33], functions[efunc_gen_DoCheckExceedBlocks_Z0]);
  refalrts::alloc_close_bracket(vm, context[34]);
  refalrts::alloc_close_call(vm, context[35]);
  refalrts::alloc_close_call(vm, context[36]);
  refalrts::update_name(context[4], functions[efunc_gen_SentenceTail_S1A2]);
  refalrts::reinit_open_bracket(context[22]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::reinit_open_call(context[15]);
  refalrts::reinit_svar( context[16], context[10] );
  refalrts::push_stack( vm, context[36] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[35] );
  refalrts::push_stack( vm, context[15] );
  refalrts::link_brackets( context[21], context[34] );
  refalrts::link_brackets( context[22], context[1] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[31], context[32] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[35], context[36] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_elem( res, context[34] );
  res = refalrts::splice_evar( res, context[16], context[21] );
  res = refalrts::splice_elem( res, context[33] );
  res = refalrts::splice_evar( res, context[10], context[15] );
  res = refalrts::splice_evar( res, context[29], context[1] );
  res = refalrts::splice_elem( res, context[32] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_elem( res, context[31] );
  res = refalrts::splice_evar( res, context[27], context[28] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_SentenceTail_S1A1("SentenceTail$1=1", COOKIE1_, COOKIE2_, func_gen_SentenceTail_S1A1);


static refalrts::FnResult func_gen_SentenceTail_S2A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & SentenceTail$2=1/4 t.Pattern/5 t.Result/7 (/11 e.Tokens/9 )/12 t.ErrorList$a/13 e.Blocks$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.Tokens as range 9
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  // closed e.Blocks$a as range 2
  //DEBUG: t.Pattern: 5
  //DEBUG: t.Result: 7
  //DEBUG: e.Tokens: 9
  //DEBUG: t.ErrorList$a: 13
  //DEBUG: e.Blocks$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList$a/13 } Tile{ HalfReuse: (/4 AsIs: t.Pattern/5 AsIs: t.Result/7 AsIs: (/11 } Tile{ AsIs: e.Blocks$a/2 } Tile{ AsIs: )/12 } Tile{ HalfReuse: )/1 } Tile{ AsIs: e.Tokens/9 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[4], context[1] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_elem( res, context[1] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[4], context[11] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_SentenceTail_S2A1("SentenceTail$2=1", COOKIE1_, COOKIE2_, func_gen_SentenceTail_S2A1);


static refalrts::FnResult func_SentenceTail(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 75 elems
  refalrts::Iter context[75];
  refalrts::zeros( context, 75 );
  // </0 & SentenceTail/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & SentenceTail/4 s.new1/5 t.new2/6 t.new3/8 s.new4/10 t.new5/11 t.new6/13 (/17 e.new7/15 )/18 e.new8/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = refalrts::tvar_left( context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  context[9] = refalrts::tvar_left( context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.new7 as range 15
  // closed e.new8 as range 2
  do {
    // </0 & SentenceTail/4 s.Mode/5 t.ErrorList/6 t.FirstPattern/8 s.PartType/10 t.Pos/11 t.FirstResult/13 (/17 e.FirstBlocks/19 )/18 (/25 # TkColon/27 t.ColonPos/28 )/26 e.Tokens/21 >/1
    context[19] = context[15];
    context[20] = context[16];
    context[21] = context[2];
    context[22] = context[3];
    context[23] = 0;
    context[24] = 0;
    context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
    if( ! context[25] )
      continue;
    refalrts::bracket_pointers(context[25], context[26]);
    context[27] = refalrts::ident_left( identifiers[ident_TkColon], context[23], context[24] );
    if( ! context[27] )
      continue;
    // closed e.FirstBlocks as range 19
    // closed e.Tokens as range 21
    context[29] = refalrts::tvar_left( context[28], context[23], context[24] );
    if( ! context[29] )
      continue;
    if( ! refalrts::empty_seq( context[23], context[24] ) )
      continue;
    //DEBUG: t.ErrorList: 6
    //DEBUG: t.FirstPattern: 8
    //DEBUG: t.Pos: 11
    //DEBUG: t.FirstResult: 13
    //DEBUG: s.Mode: 5
    //DEBUG: s.PartType: 10
    //DEBUG: e.FirstBlocks: 19
    //DEBUG: e.Tokens: 21
    //DEBUG: t.ColonPos: 28

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.ColonPos/28 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & SentenceTail$1=1/4 } Tile{ AsIs: t.FirstPattern/8 AsIs: s.PartType/10 } Tile{ AsIs: t.FirstResult/13 } Tile{ AsIs: s.Mode/5 } Tile{ AsIs: t.Pos/11 } Tile{ AsIs: (/17 AsIs: e.FirstBlocks/19 AsIs: )/18 HalfReuse: </25 HalfReuse: & SentenceTail/27 } s.Mode/5/30 </31 & SentencePart-AfterPattern/32 s.Mode/5/33 </34 & Pattern/35 Tile{ AsIs: t.ErrorList/6 } Tile{ HalfReuse: s.Mode5 /26 AsIs: e.Tokens/21 AsIs: >/1 } >/36 >/37 >/38 Tile{ ]] }
    refalrts::copy_stvar(vm, context[30], context[5]);
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_name(vm, context[32], functions[efunc_SentencePartm_AfterPattern]);
    refalrts::copy_stvar(vm, context[33], context[5]);
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_name(vm, context[35], functions[efunc_Pattern]);
    refalrts::alloc_close_call(vm, context[36]);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::update_name(context[4], functions[efunc_gen_SentenceTail_S1A1]);
    refalrts::reinit_open_call(context[25]);
    refalrts::reinit_name(context[27], functions[efunc_SentenceTail]);
    refalrts::reinit_svar( context[26], context[5] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[36] );
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[34] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[36], context[38] );
    res = refalrts::splice_evar( res, context[26], context[1] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_evar( res, context[30], context[35] );
    res = refalrts::splice_evar( res, context[17], context[27] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[5] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[8], context[10] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & SentenceTail/4 s.new9/5 t.new10/6 t.new11/8 s.new12/10 t.new13/11 t.new14/13 (/17 (/25 t.new16/27 e.new17/23 )/26 e.new18/19 )/18 e.new15/21 >/1
    context[19] = context[15];
    context[20] = context[16];
    context[21] = context[2];
    context[22] = context[3];
    context[23] = 0;
    context[24] = 0;
    context[25] = refalrts::brackets_left( context[23], context[24], context[19], context[20] );
    if( ! context[25] )
      continue;
    refalrts::bracket_pointers(context[25], context[26]);
    // closed e.new18 as range 19
    // closed e.new15 as range 21
    context[28] = refalrts::tvar_left( context[27], context[23], context[24] );
    if( ! context[28] )
      continue;
    // closed e.new17 as range 23
    do {
      // </0 & SentenceTail/4 s.new19/5 t.new20/6 t.new21/8 # Assign/10 t.new22/11 t.new23/13 (/17 (/25 t.new26/27 e.new27/29 )/26 e.new25/31 )/18 e.new24/33 >/1
      context[29] = context[23];
      context[30] = context[24];
      context[31] = context[19];
      context[32] = context[20];
      context[33] = context[21];
      context[34] = context[22];
      if( ! refalrts::ident_term( identifiers[ident_Assign], context[10] ) )
        continue;
      // closed e.new27 as range 29
      // closed e.new25 as range 31
      // closed e.new24 as range 33
      do {
        // </0 & SentenceTail/4 # Classic/5 t.ErrorList/6 t.Pattern/8 # Assign/10 t.Pos/11 t.Result/13 (/17 (/25 t.0/27 e.1/35 )/26 e./37 )/18 e.Tokens/39 >/1
        context[35] = context[29];
        context[36] = context[30];
        context[37] = context[31];
        context[38] = context[32];
        context[39] = context[33];
        context[40] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_Classic], context[5] ) )
          continue;
        // closed e.1 as range 35
        // closed e. as range 37
        // closed e.Tokens as range 39
        //DEBUG: t.ErrorList: 6
        //DEBUG: t.Pattern: 8
        //DEBUG: t.Pos: 11
        //DEBUG: t.Result: 13
        //DEBUG: t.0: 27
        //DEBUG: e.1: 35
        //DEBUG: e.: 37
        //DEBUG: e.Tokens: 39

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.0/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & SentenceTail$2=1/4 } Tile{ AsIs: t.Pattern/8 } Tile{ AsIs: t.Result/13 AsIs: (/17 } Tile{ AsIs: e.Tokens/39 } )/41 </42 & CheckSentenceEnd$1=1@1/43 Tile{ AsIs: (/25 } Tile{ AsIs: e.1/35 } Tile{ HalfReuse: )/10 } Tile{ HalfReuse: (/26 AsIs: e./37 AsIs: )/18 } </44 Tile{ HalfReuse: & EL-AddErrorAt/5 AsIs: t.ErrorList/6 } Tile{ AsIs: t.Pos/11 }"Mistaken \'=\' for \',\' in the classic mode"/45 >/47 >/48 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[41]);
        refalrts::alloc_open_call(vm, context[42]);
        refalrts::alloc_name(vm, context[43], functions[efunc_gen_CheckSentenceEnd_S1A1Z1]);
        refalrts::alloc_open_call(vm, context[44]);
        refalrts::alloc_chars(vm, context[45], context[46], "Mistaken \'=\' for \',\' in the classic mode", 40);
        refalrts::alloc_close_call(vm, context[47]);
        refalrts::alloc_close_call(vm, context[48]);
        refalrts::update_name(context[4], functions[efunc_gen_SentenceTail_S2A1]);
        refalrts::reinit_close_bracket(context[10]);
        refalrts::reinit_open_bracket(context[26]);
        refalrts::reinit_name(context[5], functions[efunc_ELm_AddErrorAt]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[42] );
        refalrts::push_stack( vm, context[47] );
        refalrts::push_stack( vm, context[44] );
        refalrts::link_brackets( context[26], context[18] );
        refalrts::link_brackets( context[25], context[10] );
        refalrts::link_brackets( context[17], context[41] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[45], context[48] );
        res = refalrts::splice_evar( res, context[11], context[12] );
        res = refalrts::splice_evar( res, context[5], context[7] );
        res = refalrts::splice_elem( res, context[44] );
        res = refalrts::splice_evar( res, context[26], context[18] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_elem( res, context[25] );
        res = refalrts::splice_evar( res, context[41], context[43] );
        res = refalrts::splice_evar( res, context[39], context[40] );
        res = refalrts::splice_evar( res, context[13], context[17] );
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & SentenceTail/4 # Extended/5 t.new28/6 t.new29/8 # Assign/10 t.new30/11 t.new31/13 (/17 (/25 t.new34/27 e.new35/35 )/26 e.new33/37 )/18 e.new32/39 >/1
        context[35] = context[29];
        context[36] = context[30];
        context[37] = context[31];
        context[38] = context[32];
        context[39] = context[33];
        context[40] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_Extended], context[5] ) )
          continue;
        // closed e.new35 as range 35
        // closed e.new33 as range 37
        // closed e.new32 as range 39
        do {
          // </0 & SentenceTail/4 # Extended/5 t.new36/6 t.new37/8 # Assign/10 t.new38/11 t.new39/13 (/17 (/25 t.new44/27 e.new45/41 )/26 (/49 t.new41/51 e.new42/47 )/50 e.new43/43 )/18 e.new40/45 >/1
          context[41] = context[35];
          context[42] = context[36];
          context[43] = context[37];
          context[44] = context[38];
          context[45] = context[39];
          context[46] = context[40];
          context[47] = 0;
          context[48] = 0;
          context[49] = refalrts::brackets_left( context[47], context[48], context[43], context[44] );
          if( ! context[49] )
            continue;
          refalrts::bracket_pointers(context[49], context[50]);
          // closed e.new45 as range 41
          // closed e.new43 as range 43
          // closed e.new40 as range 45
          context[52] = refalrts::tvar_left( context[51], context[47], context[48] );
          if( ! context[52] )
            continue;
          // closed e.new42 as range 47
          do {
            // </0 & SentenceTail/4 # Extended/5 t.ErrorList/6 t.Pattern/8 # Assign/10 t.Pos/11 t.Result/13 (/17 (/25 t.0/27 e.1/53 )/26 (/49 t.1/51 e.3/55 )/50 (/63 t.2/65 e.4/61 )/64 e./57 )/18 e.Tokens/59 >/1
            context[53] = context[41];
            context[54] = context[42];
            context[55] = context[47];
            context[56] = context[48];
            context[57] = context[43];
            context[58] = context[44];
            context[59] = context[45];
            context[60] = context[46];
            context[61] = 0;
            context[62] = 0;
            context[63] = refalrts::brackets_left( context[61], context[62], context[57], context[58] );
            if( ! context[63] )
              continue;
            refalrts::bracket_pointers(context[63], context[64]);
            // closed e.1 as range 53
            // closed e.3 as range 55
            // closed e. as range 57
            // closed e.Tokens as range 59
            context[66] = refalrts::tvar_left( context[65], context[61], context[62] );
            if( ! context[66] )
              continue;
            // closed e.4 as range 61
            //DEBUG: t.ErrorList: 6
            //DEBUG: t.Pattern: 8
            //DEBUG: t.Pos: 11
            //DEBUG: t.Result: 13
            //DEBUG: t.0: 27
            //DEBUG: t.1: 51
            //DEBUG: e.1: 53
            //DEBUG: e.3: 55
            //DEBUG: e.: 57
            //DEBUG: e.Tokens: 59
            //DEBUG: t.2: 65
            //DEBUG: e.4: 61

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.Pos/11 {REMOVED TILE} {REMOVED TILE} t.0/27 {REMOVED TILE} {REMOVED TILE} t.1/51 {REMOVED TILE} {REMOVED TILE} t.2/65 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & SentenceTail$2=1/4 } Tile{ AsIs: t.Pattern/8 } Tile{ AsIs: t.Result/13 AsIs: (/17 } Tile{ AsIs: e.Tokens/59 } )/67 </68 Tile{ HalfReuse: & CheckSentenceEnd$1=2/26 AsIs: (/49 } Tile{ AsIs: e.1/53 } Tile{ HalfReuse: )/10 } </69 Tile{ HalfReuse: & DoCheckExceedBlocks@3/5 AsIs: t.ErrorList/6 } Tile{ AsIs: (/25 } (/70 Tile{ AsIs: e.3/55 } )/71 Tile{ AsIs: )/50 AsIs: (/63 } Tile{ AsIs: e.4/61 } Tile{ AsIs: )/64 AsIs: e./57 HalfReuse: >/18 } >/72 Tile{ AsIs: >/1 ]] }
            refalrts::alloc_close_bracket(vm, context[67]);
            refalrts::alloc_open_call(vm, context[68]);
            refalrts::alloc_open_call(vm, context[69]);
            refalrts::alloc_open_bracket(vm, context[70]);
            refalrts::alloc_close_bracket(vm, context[71]);
            refalrts::alloc_close_call(vm, context[72]);
            refalrts::update_name(context[4], functions[efunc_gen_SentenceTail_S2A1]);
            refalrts::reinit_name(context[26], functions[efunc_gen_CheckSentenceEnd_S1A2]);
            refalrts::reinit_close_bracket(context[10]);
            refalrts::reinit_name(context[5], functions[efunc_gen_DoCheckExceedBlocks_Z3]);
            refalrts::reinit_close_call(context[18]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[72] );
            refalrts::push_stack( vm, context[68] );
            refalrts::push_stack( vm, context[18] );
            refalrts::push_stack( vm, context[69] );
            refalrts::link_brackets( context[63], context[64] );
            refalrts::link_brackets( context[25], context[50] );
            refalrts::link_brackets( context[70], context[71] );
            refalrts::link_brackets( context[49], context[10] );
            refalrts::link_brackets( context[17], context[67] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_elem( res, context[72] );
            res = refalrts::splice_evar( res, context[64], context[18] );
            res = refalrts::splice_evar( res, context[61], context[62] );
            res = refalrts::splice_evar( res, context[50], context[63] );
            res = refalrts::splice_elem( res, context[71] );
            res = refalrts::splice_evar( res, context[55], context[56] );
            res = refalrts::splice_elem( res, context[70] );
            res = refalrts::splice_elem( res, context[25] );
            res = refalrts::splice_evar( res, context[5], context[7] );
            res = refalrts::splice_elem( res, context[69] );
            res = refalrts::splice_elem( res, context[10] );
            res = refalrts::splice_evar( res, context[53], context[54] );
            res = refalrts::splice_evar( res, context[26], context[49] );
            res = refalrts::splice_evar( res, context[67], context[68] );
            res = refalrts::splice_evar( res, context[59], context[60] );
            res = refalrts::splice_evar( res, context[13], context[17] );
            res = refalrts::splice_evar( res, context[8], context[9] );
            refalrts::splice_to_freelist_open( vm, context[4], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & SentenceTail/4 # Extended/5 t.ErrorList/6 t.Pattern/8 # Assign/10 t.Pos/11 t.Result/13 (/17 (/25 t.0/27 e.1/53 )/26 (/49 t.1/51 e.3/55 )/50 )/18 e.Tokens/57 >/1
            context[53] = context[41];
            context[54] = context[42];
            context[55] = context[47];
            context[56] = context[48];
            context[57] = context[45];
            context[58] = context[46];
            if( ! refalrts::empty_seq( context[43], context[44] ) )
              continue;
            // closed e.1 as range 53
            // closed e.3 as range 55
            // closed e.Tokens as range 57
            //DEBUG: t.ErrorList: 6
            //DEBUG: t.Pattern: 8
            //DEBUG: t.Pos: 11
            //DEBUG: t.Result: 13
            //DEBUG: t.0: 27
            //DEBUG: t.1: 51
            //DEBUG: e.1: 53
            //DEBUG: e.3: 55
            //DEBUG: e.Tokens: 57

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} </0 & SentenceTail/4 # Extended/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.Pos/11 {REMOVED TILE} t.0/27 {REMOVED TILE} {REMOVED TILE} t.1/51 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList/6 } Tile{ HalfReuse: (/1 } Tile{ AsIs: t.Pattern/8 } Tile{ AsIs: t.Result/13 AsIs: (/17 AsIs: (/25 } Tile{ AsIs: e.1/53 } Tile{ AsIs: )/26 AsIs: (/49 } Tile{ AsIs: e.3/55 } Tile{ HalfReuse: )/10 } Tile{ AsIs: )/50 AsIs: )/18 } Tile{ AsIs: e.Tokens/57 } Tile{ ]] }
            refalrts::reinit_open_bracket(context[1]);
            refalrts::reinit_close_bracket(context[10]);
            refalrts::link_brackets( context[1], context[18] );
            refalrts::link_brackets( context[17], context[50] );
            refalrts::link_brackets( context[49], context[10] );
            refalrts::link_brackets( context[25], context[26] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[57], context[58] );
            res = refalrts::splice_evar( res, context[50], context[18] );
            res = refalrts::splice_elem( res, context[10] );
            res = refalrts::splice_evar( res, context[55], context[56] );
            res = refalrts::splice_evar( res, context[26], context[49] );
            res = refalrts::splice_evar( res, context[53], context[54] );
            res = refalrts::splice_evar( res, context[13], context[25] );
            res = refalrts::splice_evar( res, context[8], context[9] );
            res = refalrts::splice_elem( res, context[1] );
            res = refalrts::splice_evar( res, context[6], context[7] );
            refalrts::splice_to_freelist_open( vm, trash_prev, res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & SentenceTail/4 # Extended/5 t.ErrorList/6 t.Pattern/8 # Assign/10 t.Pos/11 t.Result/13 (/17 (/25 t.0/27 e.1/53 )/26 (/49 t.1/51 e.3/55 )/50 e.0/57 )/18 e.Tokens/59 >/1
          context[53] = context[41];
          context[54] = context[42];
          context[55] = context[47];
          context[56] = context[48];
          context[57] = context[43];
          context[58] = context[44];
          context[59] = context[45];
          context[60] = context[46];
          // closed e.1 as range 53
          // closed e.3 as range 55
          // closed e.0 as range 57
          // closed e.Tokens as range 59
          //DEBUG: t.ErrorList: 6
          //DEBUG: t.Pattern: 8
          //DEBUG: t.Pos: 11
          //DEBUG: t.Result: 13
          //DEBUG: t.0: 27
          //DEBUG: t.1: 51
          //DEBUG: e.1: 53
          //DEBUG: e.3: 55
          //DEBUG: e.0: 57
          //DEBUG: e.Tokens: 59

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.Pos/11 {REMOVED TILE} {REMOVED TILE} t.0/27 {REMOVED TILE} {REMOVED TILE} t.1/51 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } </61 & SentenceTail$2=1/62 Tile{ AsIs: t.Pattern/8 } Tile{ AsIs: t.Result/13 AsIs: (/17 } Tile{ AsIs: e.Tokens/59 } )/63 Tile{ HalfReuse: </10 } & CheckSentenceEnd$1=2/64 Tile{ AsIs: (/25 } Tile{ AsIs: e.1/53 } )/65 Tile{ AsIs: </0 Reuse: & DoCheckExceedBlocks@0/4 AsIs: # Extended/5 AsIs: t.ErrorList/6 } Tile{ HalfReuse: (/26 AsIs: (/49 } Tile{ AsIs: e.3/55 } )/66 Tile{ AsIs: )/50 AsIs: e.0/57 HalfReuse: >/18 } >/67 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[61]);
          refalrts::alloc_name(vm, context[62], functions[efunc_gen_SentenceTail_S2A1]);
          refalrts::alloc_close_bracket(vm, context[63]);
          refalrts::alloc_name(vm, context[64], functions[efunc_gen_CheckSentenceEnd_S1A2]);
          refalrts::alloc_close_bracket(vm, context[65]);
          refalrts::alloc_close_bracket(vm, context[66]);
          refalrts::alloc_close_call(vm, context[67]);
          refalrts::reinit_open_call(context[10]);
          refalrts::update_name(context[4], functions[efunc_gen_DoCheckExceedBlocks_Z0]);
          refalrts::reinit_open_bracket(context[26]);
          refalrts::reinit_close_call(context[18]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[61] );
          refalrts::push_stack( vm, context[67] );
          refalrts::push_stack( vm, context[10] );
          refalrts::push_stack( vm, context[18] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[26], context[50] );
          refalrts::link_brackets( context[49], context[66] );
          refalrts::link_brackets( context[25], context[65] );
          refalrts::link_brackets( context[17], context[63] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_elem( res, context[67] );
          res = refalrts::splice_evar( res, context[50], context[18] );
          res = refalrts::splice_elem( res, context[66] );
          res = refalrts::splice_evar( res, context[55], context[56] );
          res = refalrts::splice_evar( res, context[26], context[49] );
          res = refalrts::splice_evar( res, context[0], context[7] );
          res = refalrts::splice_elem( res, context[65] );
          res = refalrts::splice_evar( res, context[53], context[54] );
          res = refalrts::splice_elem( res, context[25] );
          res = refalrts::splice_elem( res, context[64] );
          res = refalrts::splice_elem( res, context[10] );
          res = refalrts::splice_elem( res, context[63] );
          res = refalrts::splice_evar( res, context[59], context[60] );
          res = refalrts::splice_evar( res, context[13], context[17] );
          res = refalrts::splice_evar( res, context[8], context[9] );
          res = refalrts::splice_evar( res, context[61], context[62] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & SentenceTail/4 # Extended/5 t.ErrorList/6 t.Pattern/8 # Assign/10 t.Pos/11 t.Result/13 (/17 (/25 t.0/27 e.1/41 )/26 )/18 e.Tokens/43 >/1
          context[41] = context[35];
          context[42] = context[36];
          context[43] = context[39];
          context[44] = context[40];
          if( ! refalrts::empty_seq( context[37], context[38] ) )
            continue;
          // closed e.1 as range 41
          // closed e.Tokens as range 43
          //DEBUG: t.ErrorList: 6
          //DEBUG: t.Pattern: 8
          //DEBUG: t.Pos: 11
          //DEBUG: t.Result: 13
          //DEBUG: t.0: 27
          //DEBUG: e.1: 41
          //DEBUG: e.Tokens: 43

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & SentenceTail/4 # Extended/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.Pos/11 {REMOVED TILE} t.0/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList/6 } Tile{ HalfReuse: (/10 } Tile{ AsIs: t.Pattern/8 } Tile{ AsIs: t.Result/13 AsIs: (/17 AsIs: (/25 } Tile{ AsIs: e.1/41 } Tile{ AsIs: )/26 AsIs: )/18 } Tile{ HalfReuse: )/1 } Tile{ AsIs: e.Tokens/43 } Tile{ ]] }
          refalrts::reinit_open_bracket(context[10]);
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[10], context[1] );
          refalrts::link_brackets( context[17], context[18] );
          refalrts::link_brackets( context[25], context[26] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[43], context[44] );
          res = refalrts::splice_elem( res, context[1] );
          res = refalrts::splice_evar( res, context[26], context[18] );
          res = refalrts::splice_evar( res, context[41], context[42] );
          res = refalrts::splice_evar( res, context[13], context[25] );
          res = refalrts::splice_evar( res, context[8], context[9] );
          res = refalrts::splice_elem( res, context[10] );
          res = refalrts::splice_evar( res, context[6], context[7] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & SentenceTail/4 # Extended/5 t.ErrorList/6 t.Pattern/8 # Assign/10 t.Pos/11 t.Result/13 (/17 (/25 t.0/27 e.1/41 )/26 e./43 )/18 e.Tokens/45 >/1
        context[41] = context[35];
        context[42] = context[36];
        context[43] = context[37];
        context[44] = context[38];
        context[45] = context[39];
        context[46] = context[40];
        // closed e.1 as range 41
        // closed e. as range 43
        // closed e.Tokens as range 45
        //DEBUG: t.ErrorList: 6
        //DEBUG: t.Pattern: 8
        //DEBUG: t.Pos: 11
        //DEBUG: t.Result: 13
        //DEBUG: t.0: 27
        //DEBUG: e.1: 41
        //DEBUG: e.: 43
        //DEBUG: e.Tokens: 45

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.Pos/11 {REMOVED TILE} {REMOVED TILE} t.0/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </47 & SentenceTail$2=1/48 Tile{ AsIs: t.Pattern/8 } Tile{ AsIs: t.Result/13 AsIs: (/17 } Tile{ AsIs: e.Tokens/45 } Tile{ HalfReuse: )/10 } </49 & CheckSentenceEnd$1=2/50 Tile{ AsIs: (/25 } Tile{ AsIs: e.1/41 } )/51 Tile{ AsIs: </0 Reuse: & DoCheckExceedBlocks@0/4 AsIs: # Extended/5 AsIs: t.ErrorList/6 } (/52 Tile{ AsIs: )/26 AsIs: e./43 HalfReuse: >/18 } >/53 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[47]);
        refalrts::alloc_name(vm, context[48], functions[efunc_gen_SentenceTail_S2A1]);
        refalrts::alloc_open_call(vm, context[49]);
        refalrts::alloc_name(vm, context[50], functions[efunc_gen_CheckSentenceEnd_S1A2]);
        refalrts::alloc_close_bracket(vm, context[51]);
        refalrts::alloc_open_bracket(vm, context[52]);
        refalrts::alloc_close_call(vm, context[53]);
        refalrts::reinit_close_bracket(context[10]);
        refalrts::update_name(context[4], functions[efunc_gen_DoCheckExceedBlocks_Z0]);
        refalrts::reinit_close_call(context[18]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[47] );
        refalrts::push_stack( vm, context[53] );
        refalrts::push_stack( vm, context[49] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[52], context[26] );
        refalrts::link_brackets( context[25], context[51] );
        refalrts::link_brackets( context[17], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[53] );
        res = refalrts::splice_evar( res, context[26], context[18] );
        res = refalrts::splice_elem( res, context[52] );
        res = refalrts::splice_evar( res, context[0], context[7] );
        res = refalrts::splice_elem( res, context[51] );
        res = refalrts::splice_evar( res, context[41], context[42] );
        res = refalrts::splice_elem( res, context[25] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_evar( res, context[13], context[17] );
        res = refalrts::splice_evar( res, context[8], context[9] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & SentenceTail/4 s.Mode/5 t.ErrorList/6 t.Pattern/8 # Assign/10 t.Pos/11 t.Result/13 (/17 (/25 t.0/27 e.1/35 )/26 e./37 )/18 e.Tokens/39 >/1
      context[35] = context[29];
      context[36] = context[30];
      context[37] = context[31];
      context[38] = context[32];
      context[39] = context[33];
      context[40] = context[34];
      // closed e.1 as range 35
      // closed e. as range 37
      // closed e.Tokens as range 39
      //DEBUG: t.ErrorList: 6
      //DEBUG: t.Pattern: 8
      //DEBUG: t.Pos: 11
      //DEBUG: t.Result: 13
      //DEBUG: t.0: 27
      //DEBUG: s.Mode: 5
      //DEBUG: e.1: 35
      //DEBUG: e.: 37
      //DEBUG: e.Tokens: 39

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.0/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & SentenceTail$2=1/4 } Tile{ AsIs: t.Pattern/8 } Tile{ AsIs: t.Result/13 AsIs: (/17 } Tile{ AsIs: e.Tokens/39 } )/41 </42 & CheckSentenceEnd$1=1/43 Tile{ AsIs: (/25 } Tile{ AsIs: e.1/35 } )/44 Tile{ AsIs: s.Mode/5 } Tile{ HalfReuse: (/26 AsIs: e./37 AsIs: )/18 } </45 & ClassicError*2/46 Tile{ AsIs: t.ErrorList/6 } Tile{ HalfReuse: s.Mode5 /10 AsIs: t.Pos/11 }"Mistaken \'=\' for \',\' in the classic mode"/47 >/49 >/50 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[41]);
      refalrts::alloc_open_call(vm, context[42]);
      refalrts::alloc_name(vm, context[43], functions[efunc_gen_CheckSentenceEnd_S1A1]);
      refalrts::alloc_close_bracket(vm, context[44]);
      refalrts::alloc_open_call(vm, context[45]);
      refalrts::alloc_name(vm, context[46], functions[efunc_gen_ClassicError_D2]);
      refalrts::alloc_chars(vm, context[47], context[48], "Mistaken \'=\' for \',\' in the classic mode", 40);
      refalrts::alloc_close_call(vm, context[49]);
      refalrts::alloc_close_call(vm, context[50]);
      refalrts::update_name(context[4], functions[efunc_gen_SentenceTail_S2A1]);
      refalrts::reinit_open_bracket(context[26]);
      refalrts::reinit_svar( context[10], context[5] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[50] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[49] );
      refalrts::push_stack( vm, context[45] );
      refalrts::link_brackets( context[26], context[18] );
      refalrts::link_brackets( context[25], context[44] );
      refalrts::link_brackets( context[17], context[41] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[47], context[50] );
      res = refalrts::splice_evar( res, context[10], context[12] );
      res = refalrts::splice_evar( res, context[6], context[7] );
      res = refalrts::splice_evar( res, context[45], context[46] );
      res = refalrts::splice_evar( res, context[26], context[18] );
      res = refalrts::splice_elem( res, context[5] );
      res = refalrts::splice_elem( res, context[44] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_evar( res, context[41], context[43] );
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_evar( res, context[13], context[17] );
      res = refalrts::splice_evar( res, context[8], context[9] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & SentenceTail/4 s.new19/5 t.new20/6 t.new21/8 # Condition/10 t.new22/11 t.new23/13 (/17 (/25 t.new26/27 e.new27/29 )/26 e.new25/31 )/18 e.new24/33 >/1
      context[29] = context[23];
      context[30] = context[24];
      context[31] = context[19];
      context[32] = context[20];
      context[33] = context[21];
      context[34] = context[22];
      if( ! refalrts::ident_term( identifiers[ident_Condition], context[10] ) )
        continue;
      // closed e.new27 as range 29
      // closed e.new25 as range 31
      // closed e.new24 as range 33
      do {
        // </0 & SentenceTail/4 s.new28/5 t.new29/6 t.new30/8 # Condition/10 t.new31/11 t.new32/13 (/17 (/25 t.new37/27 e.new38/35 )/26 (/43 t.new34/45 e.new35/41 )/44 e.new36/37 )/18 e.new33/39 >/1
        context[35] = context[29];
        context[36] = context[30];
        context[37] = context[31];
        context[38] = context[32];
        context[39] = context[33];
        context[40] = context[34];
        context[41] = 0;
        context[42] = 0;
        context[43] = refalrts::brackets_left( context[41], context[42], context[37], context[38] );
        if( ! context[43] )
          continue;
        refalrts::bracket_pointers(context[43], context[44]);
        // closed e.new38 as range 35
        // closed e.new36 as range 37
        // closed e.new33 as range 39
        context[46] = refalrts::tvar_left( context[45], context[41], context[42] );
        if( ! context[46] )
          continue;
        // closed e.new35 as range 41
        do {
          // </0 & SentenceTail/4 # Classic/5 t.ErrorList/6 t.Pattern/8 # Condition/10 t.Pos/11 t.Result/13 (/17 (/25 t.0/27 e.1/47 )/26 (/43 t.1/45 e.3/49 )/44 e.0/51 )/18 e.Tokens/53 >/1
          context[47] = context[35];
          context[48] = context[36];
          context[49] = context[41];
          context[50] = context[42];
          context[51] = context[37];
          context[52] = context[38];
          context[53] = context[39];
          context[54] = context[40];
          if( ! refalrts::ident_term( identifiers[ident_Classic], context[5] ) )
            continue;
          // closed e.1 as range 47
          // closed e.3 as range 49
          // closed e.0 as range 51
          // closed e.Tokens as range 53
          //DEBUG: t.ErrorList: 6
          //DEBUG: t.Pattern: 8
          //DEBUG: t.Pos: 11
          //DEBUG: t.Result: 13
          //DEBUG: t.0: 27
          //DEBUG: t.1: 45
          //DEBUG: e.1: 47
          //DEBUG: e.3: 49
          //DEBUG: e.0: 51
          //DEBUG: e.Tokens: 53

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.Pos/11 {REMOVED TILE} {REMOVED TILE} t.0/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & SentenceTail$2=1/4 } Tile{ AsIs: t.Pattern/8 } Tile{ AsIs: t.Result/13 AsIs: (/17 } Tile{ AsIs: e.Tokens/53 } )/55 </56 & CheckSentenceEnd$1=2/57 Tile{ AsIs: (/25 } Tile{ AsIs: e.1/47 } Tile{ AsIs: )/26 HalfReuse: </43 } & DoCheckExceedBlocks/58 Tile{ Reuse: # Classic/10 } </59 Tile{ HalfReuse: & EL-AddErrorAt/5 AsIs: t.ErrorList/6 } Tile{ AsIs: t.1/45 }"Exceed block in this position"/60 >/62 (/63 (/64 Tile{ AsIs: e.3/49 } )/65 Tile{ AsIs: )/44 AsIs: e.0/51 HalfReuse: >/18 } >/66 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_close_bracket(vm, context[55]);
          refalrts::alloc_open_call(vm, context[56]);
          refalrts::alloc_name(vm, context[57], functions[efunc_gen_CheckSentenceEnd_S1A2]);
          refalrts::alloc_name(vm, context[58], functions[efunc_DoCheckExceedBlocks]);
          refalrts::alloc_open_call(vm, context[59]);
          refalrts::alloc_chars(vm, context[60], context[61], "Exceed block in this position", 29);
          refalrts::alloc_close_call(vm, context[62]);
          refalrts::alloc_open_bracket(vm, context[63]);
          refalrts::alloc_open_bracket(vm, context[64]);
          refalrts::alloc_close_bracket(vm, context[65]);
          refalrts::alloc_close_call(vm, context[66]);
          refalrts::update_name(context[4], functions[efunc_gen_SentenceTail_S2A1]);
          refalrts::reinit_open_call(context[43]);
          refalrts::update_ident(context[10], identifiers[ident_Classic]);
          refalrts::reinit_name(context[5], functions[efunc_ELm_AddErrorAt]);
          refalrts::reinit_close_call(context[18]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[66] );
          refalrts::push_stack( vm, context[56] );
          refalrts::push_stack( vm, context[18] );
          refalrts::push_stack( vm, context[43] );
          refalrts::link_brackets( context[63], context[44] );
          refalrts::link_brackets( context[64], context[65] );
          refalrts::push_stack( vm, context[62] );
          refalrts::push_stack( vm, context[59] );
          refalrts::link_brackets( context[25], context[26] );
          refalrts::link_brackets( context[17], context[55] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_elem( res, context[66] );
          res = refalrts::splice_evar( res, context[44], context[18] );
          res = refalrts::splice_elem( res, context[65] );
          res = refalrts::splice_evar( res, context[49], context[50] );
          res = refalrts::splice_evar( res, context[60], context[64] );
          res = refalrts::splice_evar( res, context[45], context[46] );
          res = refalrts::splice_evar( res, context[5], context[7] );
          res = refalrts::splice_elem( res, context[59] );
          res = refalrts::splice_elem( res, context[10] );
          res = refalrts::splice_elem( res, context[58] );
          res = refalrts::splice_evar( res, context[26], context[43] );
          res = refalrts::splice_evar( res, context[47], context[48] );
          res = refalrts::splice_elem( res, context[25] );
          res = refalrts::splice_evar( res, context[55], context[57] );
          res = refalrts::splice_evar( res, context[53], context[54] );
          res = refalrts::splice_evar( res, context[13], context[17] );
          res = refalrts::splice_evar( res, context[8], context[9] );
          refalrts::splice_to_freelist_open( vm, context[4], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & SentenceTail/4 # Extended/5 t.new39/6 t.new40/8 # Condition/10 t.new41/11 t.new42/13 (/17 (/25 t.new47/27 e.new48/47 )/26 (/43 t.new45/45 e.new46/49 )/44 e.new44/51 )/18 e.new43/53 >/1
          context[47] = context[35];
          context[48] = context[36];
          context[49] = context[41];
          context[50] = context[42];
          context[51] = context[37];
          context[52] = context[38];
          context[53] = context[39];
          context[54] = context[40];
          if( ! refalrts::ident_term( identifiers[ident_Extended], context[5] ) )
            continue;
          // closed e.new48 as range 47
          // closed e.new46 as range 49
          // closed e.new44 as range 51
          // closed e.new43 as range 53
          do {
            // </0 & SentenceTail/4 # Extended/5 t.ErrorList/6 t.Pattern/8 # Condition/10 t.Pos/11 t.Result/13 (/17 (/25 t.0/27 e.1/55 )/26 (/43 t.1/45 e.3/57 )/44 (/65 t.2/67 e.4/63 )/66 e./59 )/18 e.Tokens/61 >/1
            context[55] = context[47];
            context[56] = context[48];
            context[57] = context[49];
            context[58] = context[50];
            context[59] = context[51];
            context[60] = context[52];
            context[61] = context[53];
            context[62] = context[54];
            context[63] = 0;
            context[64] = 0;
            context[65] = refalrts::brackets_left( context[63], context[64], context[59], context[60] );
            if( ! context[65] )
              continue;
            refalrts::bracket_pointers(context[65], context[66]);
            // closed e.1 as range 55
            // closed e.3 as range 57
            // closed e. as range 59
            // closed e.Tokens as range 61
            context[68] = refalrts::tvar_left( context[67], context[63], context[64] );
            if( ! context[68] )
              continue;
            // closed e.4 as range 63
            //DEBUG: t.ErrorList: 6
            //DEBUG: t.Pattern: 8
            //DEBUG: t.Pos: 11
            //DEBUG: t.Result: 13
            //DEBUG: t.0: 27
            //DEBUG: t.1: 45
            //DEBUG: e.1: 55
            //DEBUG: e.3: 57
            //DEBUG: e.: 59
            //DEBUG: e.Tokens: 61
            //DEBUG: t.2: 67
            //DEBUG: e.4: 63

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.Pos/11 {REMOVED TILE} {REMOVED TILE} t.0/27 {REMOVED TILE} {REMOVED TILE} t.1/45 {REMOVED TILE} {REMOVED TILE} t.2/67 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & SentenceTail$2=1/4 } Tile{ AsIs: t.Pattern/8 } Tile{ AsIs: t.Result/13 AsIs: (/17 } Tile{ AsIs: e.Tokens/61 } )/69 </70 Tile{ HalfReuse: & CheckSentenceEnd$1=2/26 AsIs: (/43 } Tile{ AsIs: e.1/55 } Tile{ HalfReuse: )/10 } </71 Tile{ HalfReuse: & DoCheckExceedBlocks@3/5 AsIs: t.ErrorList/6 } Tile{ AsIs: (/25 } (/72 Tile{ AsIs: e.3/57 } )/73 Tile{ AsIs: )/44 AsIs: (/65 } Tile{ AsIs: e.4/63 } Tile{ AsIs: )/66 AsIs: e./59 HalfReuse: >/18 } >/74 Tile{ AsIs: >/1 ]] }
            refalrts::alloc_close_bracket(vm, context[69]);
            refalrts::alloc_open_call(vm, context[70]);
            refalrts::alloc_open_call(vm, context[71]);
            refalrts::alloc_open_bracket(vm, context[72]);
            refalrts::alloc_close_bracket(vm, context[73]);
            refalrts::alloc_close_call(vm, context[74]);
            refalrts::update_name(context[4], functions[efunc_gen_SentenceTail_S2A1]);
            refalrts::reinit_name(context[26], functions[efunc_gen_CheckSentenceEnd_S1A2]);
            refalrts::reinit_close_bracket(context[10]);
            refalrts::reinit_name(context[5], functions[efunc_gen_DoCheckExceedBlocks_Z3]);
            refalrts::reinit_close_call(context[18]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[74] );
            refalrts::push_stack( vm, context[70] );
            refalrts::push_stack( vm, context[18] );
            refalrts::push_stack( vm, context[71] );
            refalrts::link_brackets( context[65], context[66] );
            refalrts::link_brackets( context[25], context[44] );
            refalrts::link_brackets( context[72], context[73] );
            refalrts::link_brackets( context[43], context[10] );
            refalrts::link_brackets( context[17], context[69] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_elem( res, context[74] );
            res = refalrts::splice_evar( res, context[66], context[18] );
            res = refalrts::splice_evar( res, context[63], context[64] );
            res = refalrts::splice_evar( res, context[44], context[65] );
            res = refalrts::splice_elem( res, context[73] );
            res = refalrts::splice_evar( res, context[57], context[58] );
            res = refalrts::splice_elem( res, context[72] );
            res = refalrts::splice_elem( res, context[25] );
            res = refalrts::splice_evar( res, context[5], context[7] );
            res = refalrts::splice_elem( res, context[71] );
            res = refalrts::splice_elem( res, context[10] );
            res = refalrts::splice_evar( res, context[55], context[56] );
            res = refalrts::splice_evar( res, context[26], context[43] );
            res = refalrts::splice_evar( res, context[69], context[70] );
            res = refalrts::splice_evar( res, context[61], context[62] );
            res = refalrts::splice_evar( res, context[13], context[17] );
            res = refalrts::splice_evar( res, context[8], context[9] );
            refalrts::splice_to_freelist_open( vm, context[4], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & SentenceTail/4 # Extended/5 t.ErrorList/6 t.Pattern/8 # Condition/10 t.Pos/11 t.Result/13 (/17 (/25 t.0/27 e.1/55 )/26 (/43 t.1/45 e.3/57 )/44 )/18 e.Tokens/59 >/1
            context[55] = context[47];
            context[56] = context[48];
            context[57] = context[49];
            context[58] = context[50];
            context[59] = context[53];
            context[60] = context[54];
            if( ! refalrts::empty_seq( context[51], context[52] ) )
              continue;
            // closed e.1 as range 55
            // closed e.3 as range 57
            // closed e.Tokens as range 59
            //DEBUG: t.ErrorList: 6
            //DEBUG: t.Pattern: 8
            //DEBUG: t.Pos: 11
            //DEBUG: t.Result: 13
            //DEBUG: t.0: 27
            //DEBUG: t.1: 45
            //DEBUG: e.1: 55
            //DEBUG: e.3: 57
            //DEBUG: e.Tokens: 59

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} </0 & SentenceTail/4 # Extended/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.Pos/11 {REMOVED TILE} t.0/27 {REMOVED TILE} {REMOVED TILE} t.1/45 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList/6 } Tile{ HalfReuse: (/1 } Tile{ AsIs: t.Pattern/8 } Tile{ AsIs: t.Result/13 AsIs: (/17 AsIs: (/25 } Tile{ AsIs: e.1/55 } Tile{ AsIs: )/26 AsIs: (/43 } Tile{ AsIs: e.3/57 } Tile{ HalfReuse: )/10 } Tile{ AsIs: )/44 AsIs: )/18 } Tile{ AsIs: e.Tokens/59 } Tile{ ]] }
            refalrts::reinit_open_bracket(context[1]);
            refalrts::reinit_close_bracket(context[10]);
            refalrts::link_brackets( context[1], context[18] );
            refalrts::link_brackets( context[17], context[44] );
            refalrts::link_brackets( context[43], context[10] );
            refalrts::link_brackets( context[25], context[26] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[59], context[60] );
            res = refalrts::splice_evar( res, context[44], context[18] );
            res = refalrts::splice_elem( res, context[10] );
            res = refalrts::splice_evar( res, context[57], context[58] );
            res = refalrts::splice_evar( res, context[26], context[43] );
            res = refalrts::splice_evar( res, context[55], context[56] );
            res = refalrts::splice_evar( res, context[13], context[25] );
            res = refalrts::splice_evar( res, context[8], context[9] );
            res = refalrts::splice_elem( res, context[1] );
            res = refalrts::splice_evar( res, context[6], context[7] );
            refalrts::splice_to_freelist_open( vm, trash_prev, res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & SentenceTail/4 # Extended/5 t.ErrorList/6 t.Pattern/8 # Condition/10 t.Pos/11 t.Result/13 (/17 (/25 t.0/27 e.1/55 )/26 (/43 t.1/45 e.3/57 )/44 e.0/59 )/18 e.Tokens/61 >/1
          context[55] = context[47];
          context[56] = context[48];
          context[57] = context[49];
          context[58] = context[50];
          context[59] = context[51];
          context[60] = context[52];
          context[61] = context[53];
          context[62] = context[54];
          // closed e.1 as range 55
          // closed e.3 as range 57
          // closed e.0 as range 59
          // closed e.Tokens as range 61
          //DEBUG: t.ErrorList: 6
          //DEBUG: t.Pattern: 8
          //DEBUG: t.Pos: 11
          //DEBUG: t.Result: 13
          //DEBUG: t.0: 27
          //DEBUG: t.1: 45
          //DEBUG: e.1: 55
          //DEBUG: e.3: 57
          //DEBUG: e.0: 59
          //DEBUG: e.Tokens: 61

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.Pos/11 {REMOVED TILE} {REMOVED TILE} t.0/27 {REMOVED TILE} {REMOVED TILE} t.1/45 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } </63 & SentenceTail$2=1/64 Tile{ AsIs: t.Pattern/8 } Tile{ AsIs: t.Result/13 AsIs: (/17 } Tile{ AsIs: e.Tokens/61 } )/65 Tile{ HalfReuse: </10 } & CheckSentenceEnd$1=2/66 Tile{ AsIs: (/25 } Tile{ AsIs: e.1/55 } )/67 Tile{ AsIs: </0 Reuse: & DoCheckExceedBlocks@0/4 AsIs: # Extended/5 AsIs: t.ErrorList/6 } Tile{ HalfReuse: (/26 AsIs: (/43 } Tile{ AsIs: e.3/57 } )/68 Tile{ AsIs: )/44 AsIs: e.0/59 HalfReuse: >/18 } >/69 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[63]);
          refalrts::alloc_name(vm, context[64], functions[efunc_gen_SentenceTail_S2A1]);
          refalrts::alloc_close_bracket(vm, context[65]);
          refalrts::alloc_name(vm, context[66], functions[efunc_gen_CheckSentenceEnd_S1A2]);
          refalrts::alloc_close_bracket(vm, context[67]);
          refalrts::alloc_close_bracket(vm, context[68]);
          refalrts::alloc_close_call(vm, context[69]);
          refalrts::reinit_open_call(context[10]);
          refalrts::update_name(context[4], functions[efunc_gen_DoCheckExceedBlocks_Z0]);
          refalrts::reinit_open_bracket(context[26]);
          refalrts::reinit_close_call(context[18]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[63] );
          refalrts::push_stack( vm, context[69] );
          refalrts::push_stack( vm, context[10] );
          refalrts::push_stack( vm, context[18] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[26], context[44] );
          refalrts::link_brackets( context[43], context[68] );
          refalrts::link_brackets( context[25], context[67] );
          refalrts::link_brackets( context[17], context[65] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_elem( res, context[69] );
          res = refalrts::splice_evar( res, context[44], context[18] );
          res = refalrts::splice_elem( res, context[68] );
          res = refalrts::splice_evar( res, context[57], context[58] );
          res = refalrts::splice_evar( res, context[26], context[43] );
          res = refalrts::splice_evar( res, context[0], context[7] );
          res = refalrts::splice_elem( res, context[67] );
          res = refalrts::splice_evar( res, context[55], context[56] );
          res = refalrts::splice_elem( res, context[25] );
          res = refalrts::splice_elem( res, context[66] );
          res = refalrts::splice_elem( res, context[10] );
          res = refalrts::splice_elem( res, context[65] );
          res = refalrts::splice_evar( res, context[61], context[62] );
          res = refalrts::splice_evar( res, context[13], context[17] );
          res = refalrts::splice_evar( res, context[8], context[9] );
          res = refalrts::splice_evar( res, context[63], context[64] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & SentenceTail/4 s.Mode/5 t.ErrorList/6 t.Pattern/8 # Condition/10 t.Pos/11 t.Result/13 (/17 (/25 t.0/27 e.1/47 )/26 (/43 t.1/45 e.3/49 )/44 e.0/51 )/18 e.Tokens/53 >/1
        context[47] = context[35];
        context[48] = context[36];
        context[49] = context[41];
        context[50] = context[42];
        context[51] = context[37];
        context[52] = context[38];
        context[53] = context[39];
        context[54] = context[40];
        // closed e.1 as range 47
        // closed e.3 as range 49
        // closed e.0 as range 51
        // closed e.Tokens as range 53
        //DEBUG: t.ErrorList: 6
        //DEBUG: t.Pattern: 8
        //DEBUG: t.Pos: 11
        //DEBUG: t.Result: 13
        //DEBUG: t.0: 27
        //DEBUG: t.1: 45
        //DEBUG: s.Mode: 5
        //DEBUG: e.1: 47
        //DEBUG: e.3: 49
        //DEBUG: e.0: 51
        //DEBUG: e.Tokens: 53

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.Pos/11 {REMOVED TILE} {REMOVED TILE} t.0/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & SentenceTail$2=1/4 } Tile{ AsIs: t.Pattern/8 } Tile{ AsIs: t.Result/13 AsIs: (/17 } Tile{ AsIs: e.Tokens/53 } )/55 </56 & CheckSentenceEnd$1=2/57 Tile{ AsIs: (/25 } Tile{ AsIs: e.1/47 } Tile{ AsIs: )/26 HalfReuse: </43 } Tile{ HalfReuse: & DoCheckExceedBlocks/10 } Tile{ AsIs: s.Mode/5 } </58 & ClassicError*2/59 Tile{ AsIs: t.ErrorList/6 } s.Mode/5/60 Tile{ AsIs: t.1/45 }"Exceed block in this position"/61 >/63 (/64 (/65 Tile{ AsIs: e.3/49 } )/66 Tile{ AsIs: )/44 AsIs: e.0/51 HalfReuse: >/18 } >/67 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[55]);
        refalrts::alloc_open_call(vm, context[56]);
        refalrts::alloc_name(vm, context[57], functions[efunc_gen_CheckSentenceEnd_S1A2]);
        refalrts::alloc_open_call(vm, context[58]);
        refalrts::alloc_name(vm, context[59], functions[efunc_gen_ClassicError_D2]);
        refalrts::copy_stvar(vm, context[60], context[5]);
        refalrts::alloc_chars(vm, context[61], context[62], "Exceed block in this position", 29);
        refalrts::alloc_close_call(vm, context[63]);
        refalrts::alloc_open_bracket(vm, context[64]);
        refalrts::alloc_open_bracket(vm, context[65]);
        refalrts::alloc_close_bracket(vm, context[66]);
        refalrts::alloc_close_call(vm, context[67]);
        refalrts::update_name(context[4], functions[efunc_gen_SentenceTail_S2A1]);
        refalrts::reinit_open_call(context[43]);
        refalrts::reinit_name(context[10], functions[efunc_DoCheckExceedBlocks]);
        refalrts::reinit_close_call(context[18]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[67] );
        refalrts::push_stack( vm, context[56] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[43] );
        refalrts::link_brackets( context[64], context[44] );
        refalrts::link_brackets( context[65], context[66] );
        refalrts::push_stack( vm, context[63] );
        refalrts::push_stack( vm, context[58] );
        refalrts::link_brackets( context[25], context[26] );
        refalrts::link_brackets( context[17], context[55] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[67] );
        res = refalrts::splice_evar( res, context[44], context[18] );
        res = refalrts::splice_elem( res, context[66] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        res = refalrts::splice_evar( res, context[61], context[65] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_elem( res, context[60] );
        res = refalrts::splice_evar( res, context[6], context[7] );
        res = refalrts::splice_evar( res, context[58], context[59] );
        res = refalrts::splice_elem( res, context[5] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[26], context[43] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_elem( res, context[25] );
        res = refalrts::splice_evar( res, context[55], context[57] );
        res = refalrts::splice_evar( res, context[53], context[54] );
        res = refalrts::splice_evar( res, context[13], context[17] );
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & SentenceTail/4 s.Mode/5 t.ErrorList/6 t.Pattern/8 # Condition/10 t.Pos/11 t.Result/13 (/17 (/25 t.0/27 e.1/35 )/26 )/18 e.Tokens/37 >/1
        context[35] = context[29];
        context[36] = context[30];
        context[37] = context[33];
        context[38] = context[34];
        if( ! refalrts::empty_seq( context[31], context[32] ) )
          continue;
        // closed e.1 as range 35
        // closed e.Tokens as range 37
        //DEBUG: t.ErrorList: 6
        //DEBUG: t.Pattern: 8
        //DEBUG: t.Pos: 11
        //DEBUG: t.Result: 13
        //DEBUG: t.0: 27
        //DEBUG: s.Mode: 5
        //DEBUG: e.1: 35
        //DEBUG: e.Tokens: 37

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & SentenceTail/4 s.Mode/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.Pos/11 {REMOVED TILE} t.0/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList/6 } Tile{ HalfReuse: (/10 } Tile{ AsIs: t.Pattern/8 } Tile{ AsIs: t.Result/13 AsIs: (/17 AsIs: (/25 } Tile{ AsIs: e.1/35 } Tile{ AsIs: )/26 AsIs: )/18 } Tile{ HalfReuse: )/1 } Tile{ AsIs: e.Tokens/37 } Tile{ ]] }
        refalrts::reinit_open_bracket(context[10]);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[10], context[1] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[25], context[26] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[37], context[38] );
        res = refalrts::splice_elem( res, context[1] );
        res = refalrts::splice_evar( res, context[26], context[18] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_evar( res, context[13], context[25] );
        res = refalrts::splice_evar( res, context[8], context[9] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[6], context[7] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & SentenceTail/4 s.Mode/5 t.ErrorList/6 t.Pattern/8 # Condition/10 t.Pos/11 t.Result/13 (/17 (/25 t.0/27 e.1/35 )/26 e./37 )/18 e.Tokens/39 >/1
      context[35] = context[29];
      context[36] = context[30];
      context[37] = context[31];
      context[38] = context[32];
      context[39] = context[33];
      context[40] = context[34];
      // closed e.1 as range 35
      // closed e. as range 37
      // closed e.Tokens as range 39
      //DEBUG: t.ErrorList: 6
      //DEBUG: t.Pattern: 8
      //DEBUG: t.Pos: 11
      //DEBUG: t.Result: 13
      //DEBUG: t.0: 27
      //DEBUG: s.Mode: 5
      //DEBUG: e.1: 35
      //DEBUG: e.: 37
      //DEBUG: e.Tokens: 39

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.Pos/11 {REMOVED TILE} {REMOVED TILE} t.0/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </41 & SentenceTail$2=1/42 Tile{ AsIs: t.Pattern/8 } Tile{ AsIs: t.Result/13 AsIs: (/17 } Tile{ AsIs: e.Tokens/39 } Tile{ HalfReuse: )/10 } </43 & CheckSentenceEnd$1=2/44 Tile{ AsIs: (/25 } Tile{ AsIs: e.1/35 } )/45 Tile{ AsIs: </0 Reuse: & DoCheckExceedBlocks@0/4 AsIs: s.Mode/5 AsIs: t.ErrorList/6 } (/46 Tile{ AsIs: )/26 AsIs: e./37 HalfReuse: >/18 } >/47 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[41]);
      refalrts::alloc_name(vm, context[42], functions[efunc_gen_SentenceTail_S2A1]);
      refalrts::alloc_open_call(vm, context[43]);
      refalrts::alloc_name(vm, context[44], functions[efunc_gen_CheckSentenceEnd_S1A2]);
      refalrts::alloc_close_bracket(vm, context[45]);
      refalrts::alloc_open_bracket(vm, context[46]);
      refalrts::alloc_close_call(vm, context[47]);
      refalrts::reinit_close_bracket(context[10]);
      refalrts::update_name(context[4], functions[efunc_gen_DoCheckExceedBlocks_Z0]);
      refalrts::reinit_close_call(context[18]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[41] );
      refalrts::push_stack( vm, context[47] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[46], context[26] );
      refalrts::link_brackets( context[25], context[45] );
      refalrts::link_brackets( context[17], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[47] );
      res = refalrts::splice_evar( res, context[26], context[18] );
      res = refalrts::splice_elem( res, context[46] );
      res = refalrts::splice_evar( res, context[0], context[7] );
      res = refalrts::splice_elem( res, context[45] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_evar( res, context[43], context[44] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_evar( res, context[13], context[17] );
      res = refalrts::splice_evar( res, context[8], context[9] );
      res = refalrts::splice_evar( res, context[41], context[42] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & SentenceTail/4 s.Mode/5 t.ErrorList/6 t.Pattern/8 s.PartType/10 t.Pos/11 t.Result/13 (/17 (/25 t.0/27 e.1/29 )/26 e./31 )/18 e.Tokens/33 >/1
    context[29] = context[23];
    context[30] = context[24];
    context[31] = context[19];
    context[32] = context[20];
    context[33] = context[21];
    context[34] = context[22];
    // closed e.1 as range 29
    // closed e. as range 31
    // closed e.Tokens as range 33
    //DEBUG: t.ErrorList: 6
    //DEBUG: t.Pattern: 8
    //DEBUG: t.Pos: 11
    //DEBUG: t.Result: 13
    //DEBUG: t.0: 27
    //DEBUG: s.Mode: 5
    //DEBUG: s.PartType: 10
    //DEBUG: e.1: 29
    //DEBUG: e.: 31
    //DEBUG: e.Tokens: 33

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.0/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & SentenceTail$2=1/4 } Tile{ AsIs: t.Pattern/8 } Tile{ AsIs: t.Result/13 AsIs: (/17 } Tile{ AsIs: e.Tokens/33 } )/35 </36 & CheckSentenceEnd$1=1/37 Tile{ AsIs: (/25 } Tile{ AsIs: e.1/29 } )/38 Tile{ AsIs: s.Mode/5 } Tile{ HalfReuse: (/26 AsIs: e./31 AsIs: )/18 } </39 & CheckMistakenAssign*2/40 Tile{ AsIs: t.ErrorList/6 } s.Mode/5/41 Tile{ AsIs: s.PartType/10 AsIs: t.Pos/11 } >/42 >/43 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[35]);
    refalrts::alloc_open_call(vm, context[36]);
    refalrts::alloc_name(vm, context[37], functions[efunc_gen_CheckSentenceEnd_S1A1]);
    refalrts::alloc_close_bracket(vm, context[38]);
    refalrts::alloc_open_call(vm, context[39]);
    refalrts::alloc_name(vm, context[40], functions[efunc_gen_CheckMistakenAssign_D2]);
    refalrts::copy_stvar(vm, context[41], context[5]);
    refalrts::alloc_close_call(vm, context[42]);
    refalrts::alloc_close_call(vm, context[43]);
    refalrts::update_name(context[4], functions[efunc_gen_SentenceTail_S2A1]);
    refalrts::reinit_open_bracket(context[26]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[43] );
    refalrts::push_stack( vm, context[36] );
    refalrts::push_stack( vm, context[42] );
    refalrts::push_stack( vm, context[39] );
    refalrts::link_brackets( context[26], context[18] );
    refalrts::link_brackets( context[25], context[38] );
    refalrts::link_brackets( context[17], context[35] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[42], context[43] );
    res = refalrts::splice_evar( res, context[10], context[12] );
    res = refalrts::splice_elem( res, context[41] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[26], context[18] );
    res = refalrts::splice_elem( res, context[5] );
    res = refalrts::splice_elem( res, context[38] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[35], context[37] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[13], context[17] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & SentenceTail/4 s.new9/5 t.new10/6 t.new11/8 s.new12/10 t.new13/11 t.new14/13 (/17 )/18 e.new15/19 >/1
    context[19] = context[2];
    context[20] = context[3];
    if( ! refalrts::empty_seq( context[15], context[16] ) )
      continue;
    // closed e.new15 as range 19
    do {
      // </0 & SentenceTail/4 s.Mode/5 t.ErrorList/6 t.Pattern/8 # Condition/10 t.Pos/11 t.Result/13 (/17 )/18 e.Tokens/21 >/1
      context[21] = context[19];
      context[22] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_Condition], context[10] ) )
        continue;
      // closed e.Tokens as range 21
      //DEBUG: t.ErrorList: 6
      //DEBUG: t.Pattern: 8
      //DEBUG: t.Pos: 11
      //DEBUG: t.Result: 13
      //DEBUG: s.Mode: 5
      //DEBUG: e.Tokens: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Mode/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & SentenceTail$2=1/4 } Tile{ AsIs: t.Pattern/8 } Tile{ AsIs: t.Result/13 AsIs: (/17 } Tile{ AsIs: e.Tokens/21 } Tile{ AsIs: )/18 } Tile{ HalfReuse: </10 } & EL-AddErrorAt/23 Tile{ AsIs: t.ErrorList/6 } Tile{ AsIs: t.Pos/11 }"Mistaken \',\' for \'=\'"/24 >/26 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[23], functions[efunc_ELm_AddErrorAt]);
      refalrts::alloc_chars(vm, context[24], context[25], "Mistaken \',\' for \'=\'", 20);
      refalrts::alloc_close_call(vm, context[26]);
      refalrts::update_name(context[4], functions[efunc_gen_SentenceTail_S2A1]);
      refalrts::reinit_open_call(context[10]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[10] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[24], context[26] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[6], context[7] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[13], context[17] );
      res = refalrts::splice_evar( res, context[8], context[9] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & SentenceTail/4 s.Mode/5 t.ErrorList/6 t.Pattern/8 # Assign/10 t.Pos/11 t.Result/13 (/17 )/18 e.Tokens/21 >/1
    context[21] = context[19];
    context[22] = context[20];
    if( ! refalrts::ident_term( identifiers[ident_Assign], context[10] ) )
      continue;
    // closed e.Tokens as range 21
    //DEBUG: t.ErrorList: 6
    //DEBUG: t.Pattern: 8
    //DEBUG: t.Pos: 11
    //DEBUG: t.Result: 13
    //DEBUG: s.Mode: 5
    //DEBUG: e.Tokens: 21

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & SentenceTail/4 s.Mode/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.Pos/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList/6 } Tile{ HalfReuse: (/10 } Tile{ AsIs: t.Pattern/8 } Tile{ AsIs: t.Result/13 AsIs: (/17 AsIs: )/18 } Tile{ HalfReuse: )/1 } Tile{ AsIs: e.Tokens/21 } Tile{ ]] }
    refalrts::reinit_open_bracket(context[10]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[10], context[1] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[13], context[18] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & SentenceTail/4 s.Mode/5 t.ErrorList/6 t.Pattern/8 s.PartType/10 t.Pos/11 t.Result/13 (/17 e.Blocks/15 )/18 e.Tokens/2 >/1
  // closed e.Blocks as range 15
  // closed e.Tokens as range 2
  //DEBUG: t.ErrorList: 6
  //DEBUG: t.Pattern: 8
  //DEBUG: t.Pos: 11
  //DEBUG: t.Result: 13
  //DEBUG: s.Mode: 5
  //DEBUG: s.PartType: 10
  //DEBUG: e.Blocks: 15
  //DEBUG: e.Tokens: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & SentenceTail$2=1/4 } Tile{ AsIs: t.Pattern/8 } Tile{ AsIs: t.Result/13 AsIs: (/17 } Tile{ AsIs: e.Tokens/2 } Tile{ AsIs: )/18 } </19 & CheckSentenceEnd*3/20 Tile{ AsIs: t.ErrorList/6 } Tile{ AsIs: s.Mode/5 } Tile{ AsIs: s.PartType/10 AsIs: t.Pos/11 } Tile{ AsIs: e.Blocks/15 } >/21 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[19]);
  refalrts::alloc_name(vm, context[20], functions[efunc_gen_CheckSentenceEnd_D3]);
  refalrts::alloc_close_call(vm, context[21]);
  refalrts::update_name(context[4], functions[efunc_gen_SentenceTail_S2A1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[21] );
  refalrts::push_stack( vm, context[19] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[21] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[10], context[12] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_elem( res, context[18] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[13], context[17] );
  res = refalrts::splice_evar( res, context[8], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_SentenceTail("SentenceTail", COOKIE1_, COOKIE2_, func_SentenceTail);


static refalrts::FnResult func_CheckExceedBlocks(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & CheckExceedBlocks/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckExceedBlocks/4 t.new1/5 s.new2/7 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & CheckExceedBlocks/4 t.new4/5 s.new5/7 (/12 t.new6/14 e.new7/10 )/13 e.new8/8 >/1
    context[8] = context[2];
    context[9] = context[3];
    context[10] = 0;
    context[11] = 0;
    context[12] = refalrts::brackets_left( context[10], context[11], context[8], context[9] );
    if( ! context[12] )
      continue;
    refalrts::bracket_pointers(context[12], context[13]);
    // closed e.new8 as range 8
    context[15] = refalrts::tvar_left( context[14], context[10], context[11] );
    if( ! context[15] )
      continue;
    // closed e.new7 as range 10
    do {
      // </0 & CheckExceedBlocks/4 t.ErrorList/5 # Classic/7 (/12 t.0/14 e.1/16 )/13 e./18 >/1
      context[16] = context[10];
      context[17] = context[11];
      context[18] = context[8];
      context[19] = context[9];
      if( ! refalrts::ident_term( identifiers[ident_Classic], context[7] ) )
        continue;
      // closed e.1 as range 16
      // closed e. as range 18
      //DEBUG: t.ErrorList: 5
      //DEBUG: t.0: 14
      //DEBUG: e.1: 16
      //DEBUG: e.: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </20 & DoCheckExceedBlocks/21 # Classic/22 Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList/5 } Tile{ AsIs: t.0/14 }"Exceed block in this position"/23 Tile{ HalfReuse: >/7 AsIs: (/12 } (/25 Tile{ AsIs: e.1/16 } )/26 Tile{ AsIs: )/13 AsIs: e./18 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[20]);
      refalrts::alloc_name(vm, context[21], functions[efunc_DoCheckExceedBlocks]);
      refalrts::alloc_ident(vm, context[22], identifiers[ident_Classic]);
      refalrts::alloc_chars(vm, context[23], context[24], "Exceed block in this position", 29);
      refalrts::alloc_open_bracket(vm, context[25]);
      refalrts::alloc_close_bracket(vm, context[26]);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_close_call(context[7]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[25], context[26] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[13];
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_evar( res, context[7], context[12] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      res = refalrts::splice_evar( res, context[0], context[6] );
      res = refalrts::splice_evar( res, context[20], context[22] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & CheckExceedBlocks/4 t.new9/5 # Extended/7 (/12 t.new11/14 e.new12/16 )/13 e.new10/18 >/1
      context[16] = context[10];
      context[17] = context[11];
      context[18] = context[8];
      context[19] = context[9];
      if( ! refalrts::ident_term( identifiers[ident_Extended], context[7] ) )
        continue;
      // closed e.new12 as range 16
      // closed e.new10 as range 18
      do {
        // </0 & CheckExceedBlocks/4 t.ErrorList/5 # Extended/7 (/12 t.0/14 e.1/20 )/13 (/26 t.1/28 e.3/24 )/27 e.0/22 >/1
        context[20] = context[16];
        context[21] = context[17];
        context[22] = context[18];
        context[23] = context[19];
        context[24] = 0;
        context[25] = 0;
        context[26] = refalrts::brackets_left( context[24], context[25], context[22], context[23] );
        if( ! context[26] )
          continue;
        refalrts::bracket_pointers(context[26], context[27]);
        // closed e.1 as range 20
        // closed e.0 as range 22
        context[29] = refalrts::tvar_left( context[28], context[24], context[25] );
        if( ! context[29] )
          continue;
        // closed e.3 as range 24
        //DEBUG: t.ErrorList: 5
        //DEBUG: t.0: 14
        //DEBUG: e.1: 20
        //DEBUG: e.0: 22
        //DEBUG: t.1: 28
        //DEBUG: e.3: 24

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} t.0/14 {REMOVED TILE} {REMOVED TILE} t.1/28 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoCheckExceedBlocks@3/4 AsIs: t.ErrorList/5 HalfReuse: (/7 AsIs: (/12 } Tile{ AsIs: e.1/20 } )/30 Tile{ AsIs: )/13 AsIs: (/26 } Tile{ AsIs: e.3/24 } Tile{ AsIs: )/27 AsIs: e.0/22 AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[30]);
        refalrts::update_name(context[4], functions[efunc_gen_DoCheckExceedBlocks_Z3]);
        refalrts::reinit_open_bracket(context[7]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[26], context[27] );
        refalrts::link_brackets( context[7], context[13] );
        refalrts::link_brackets( context[12], context[30] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[27];
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[13], context[26] );
        res = refalrts::splice_elem( res, context[30] );
        res = refalrts::splice_evar( res, context[20], context[21] );
        refalrts::splice_to_freelist_open( vm, context[12], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & CheckExceedBlocks/4 t.ErrorList/5 # Extended/7 (/12 t.0/14 e.1/20 )/13 >/1
        context[20] = context[16];
        context[21] = context[17];
        if( ! refalrts::empty_seq( context[18], context[19] ) )
          continue;
        // closed e.1 as range 20
        //DEBUG: t.ErrorList: 5
        //DEBUG: t.0: 14
        //DEBUG: e.1: 20

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & CheckExceedBlocks/4 {REMOVED TILE} (/12 t.0/14 {REMOVED TILE} )/13 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList/5 HalfReuse: (/7 } Tile{ AsIs: e.1/20 } Tile{ HalfReuse: )/1 ]] }
        refalrts::reinit_open_bracket(context[7]);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[7], context[1] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[20], context[21] );
        res = refalrts::splice_evar( res, context[5], context[7] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & CheckExceedBlocks/4 t.ErrorList/5 # Extended/7 (/12 t.0/14 e.1/20 )/13 e./22 >/1
      context[20] = context[16];
      context[21] = context[17];
      context[22] = context[18];
      context[23] = context[19];
      // closed e.1 as range 20
      // closed e. as range 22
      //DEBUG: t.ErrorList: 5
      //DEBUG: t.0: 14
      //DEBUG: e.1: 20
      //DEBUG: e.: 22

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} t.0/14 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </24 Tile{ HalfReuse: & DoCheckExceedBlocks@0/0 HalfReuse: # Extended/4 AsIs: t.ErrorList/5 HalfReuse: (/7 AsIs: (/12 } Tile{ AsIs: e.1/20 } )/25 Tile{ AsIs: )/13 AsIs: e./22 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[24]);
      refalrts::alloc_close_bracket(vm, context[25]);
      refalrts::reinit_name(context[0], functions[efunc_gen_DoCheckExceedBlocks_Z0]);
      refalrts::reinit_ident(context[4], identifiers[ident_Extended]);
      refalrts::reinit_open_bracket(context[7]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[24] );
      refalrts::link_brackets( context[7], context[13] );
      refalrts::link_brackets( context[12], context[25] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[13];
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[0], context[12] );
      res = refalrts::splice_elem( res, context[24] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & CheckExceedBlocks/4 t.ErrorList/5 s.Mode/7 (/12 t.0/14 e.1/16 )/13 e./18 >/1
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[8];
    context[19] = context[9];
    // closed e.1 as range 16
    // closed e. as range 18
    //DEBUG: t.ErrorList: 5
    //DEBUG: t.0: 14
    //DEBUG: s.Mode: 7
    //DEBUG: e.1: 16
    //DEBUG: e.: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </20 & DoCheckExceedBlocks/21 s.Mode/7/22 Tile{ AsIs: </0 Reuse: & ClassicError*2/4 AsIs: t.ErrorList/5 AsIs: s.Mode/7 } Tile{ AsIs: t.0/14 }"Exceed block in this position"/23 >/25 Tile{ AsIs: (/12 } (/26 Tile{ AsIs: e.1/16 } )/27 Tile{ AsIs: )/13 AsIs: e./18 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[20]);
    refalrts::alloc_name(vm, context[21], functions[efunc_DoCheckExceedBlocks]);
    refalrts::copy_stvar(vm, context[22], context[7]);
    refalrts::alloc_chars(vm, context[23], context[24], "Exceed block in this position", 29);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::alloc_open_bracket(vm, context[26]);
    refalrts::alloc_close_bracket(vm, context[27]);
    refalrts::update_name(context[4], functions[efunc_gen_ClassicError_D2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[20] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[26], context[27] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[13];
    res = refalrts::splice_elem( res, context[27] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_elem( res, context[26] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[23], context[25] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[0], context[7] );
    res = refalrts::splice_evar( res, context[20], context[22] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CheckExceedBlocks/4 t.ErrorList/5 s.Mode/7 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.ErrorList: 5
    //DEBUG: s.Mode: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CheckExceedBlocks/4 {REMOVED TILE} s.Mode/7 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckExceedBlocks/4 t.ErrorList/5 s.Mode/7 e.ExceedBlocks/2 >/1
  // closed e.ExceedBlocks as range 2
  //DEBUG: t.ErrorList: 5
  //DEBUG: s.Mode: 7
  //DEBUG: e.ExceedBlocks: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoCheckExceedBlocks@0/4 } Tile{ AsIs: s.Mode/7 } Tile{ AsIs: t.ErrorList/5 } (/8 )/9 Tile{ AsIs: e.ExceedBlocks/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[8]);
  refalrts::alloc_close_bracket(vm, context[9]);
  refalrts::update_name(context[4], functions[efunc_gen_DoCheckExceedBlocks_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[8], context[9] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_elem( res, context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CheckExceedBlocks("CheckExceedBlocks", COOKIE1_, COOKIE2_, func_CheckExceedBlocks);


static refalrts::FnResult func_DoCheckExceedBlocks(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 34 elems
  refalrts::Iter context[34];
  refalrts::zeros( context, 34 );
  // </0 & DoCheckExceedBlocks/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoCheckExceedBlocks/4 s.new1/5 t.new2/6 (/10 e.new3/8 )/11 e.new4/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = refalrts::tvar_left( context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  context[8] = 0;
  context[9] = 0;
  context[10] = refalrts::brackets_left( context[8], context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[10], context[11]);
  // closed e.new3 as range 8
  // closed e.new4 as range 2
  do {
    // </0 & DoCheckExceedBlocks/4 s.new5/5 t.new6/6 (/10 e.new10/12 )/11 (/18 t.new7/20 e.new8/16 )/19 e.new9/14 >/1
    context[12] = context[8];
    context[13] = context[9];
    context[14] = context[2];
    context[15] = context[3];
    context[16] = 0;
    context[17] = 0;
    context[18] = refalrts::brackets_left( context[16], context[17], context[14], context[15] );
    if( ! context[18] )
      continue;
    refalrts::bracket_pointers(context[18], context[19]);
    // closed e.new10 as range 12
    // closed e.new9 as range 14
    context[21] = refalrts::tvar_left( context[20], context[16], context[17] );
    if( ! context[21] )
      continue;
    // closed e.new8 as range 16
    do {
      // </0 & DoCheckExceedBlocks/4 # Classic/5 t.ErrorList/6 (/10 e.ScannedBlocks/22 )/11 (/18 t.Pos/20 e.Body/24 )/19 e.RestBlocks/26 >/1
      context[22] = context[12];
      context[23] = context[13];
      context[24] = context[16];
      context[25] = context[17];
      context[26] = context[14];
      context[27] = context[15];
      if( ! refalrts::ident_term( identifiers[ident_Classic], context[5] ) )
        continue;
      // closed e.ScannedBlocks as range 22
      // closed e.Body as range 24
      // closed e.RestBlocks as range 26
      //DEBUG: t.ErrorList: 6
      //DEBUG: t.Pos: 20
      //DEBUG: e.ScannedBlocks: 22
      //DEBUG: e.Body: 24
      //DEBUG: e.RestBlocks: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoCheckExceedBlocks/4 AsIs: # Classic/5 } </28 Tile{ HalfReuse: & EL-AddErrorAt/18 } Tile{ AsIs: t.ErrorList/6 } Tile{ AsIs: t.Pos/20 }"Exceed block in this position"/29 >/31 Tile{ AsIs: (/10 AsIs: e.ScannedBlocks/22 HalfReuse: (/11 } Tile{ AsIs: e.Body/24 } )/32 Tile{ AsIs: )/19 AsIs: e.RestBlocks/26 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[28]);
      refalrts::alloc_chars(vm, context[29], context[30], "Exceed block in this position", 29);
      refalrts::alloc_close_call(vm, context[31]);
      refalrts::alloc_close_bracket(vm, context[32]);
      refalrts::reinit_name(context[18], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_open_bracket(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[19] );
      refalrts::link_brackets( context[11], context[32] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[28] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[19];
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      res = refalrts::splice_evar( res, context[29], context[31] );
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[6], context[7] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_elem( res, context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoCheckExceedBlocks/4 # Extended/5 t.ErrorList/6 (/10 e.ScannedBlocks/22 )/11 (/18 t.Pos/20 e.Body/24 )/19 e.RestBlocks/26 >/1
      context[22] = context[12];
      context[23] = context[13];
      context[24] = context[16];
      context[25] = context[17];
      context[26] = context[14];
      context[27] = context[15];
      if( ! refalrts::ident_term( identifiers[ident_Extended], context[5] ) )
        continue;
      // closed e.ScannedBlocks as range 22
      // closed e.Body as range 24
      // closed e.RestBlocks as range 26
      //DEBUG: t.ErrorList: 6
      //DEBUG: t.Pos: 20
      //DEBUG: e.ScannedBlocks: 22
      //DEBUG: e.Body: 24
      //DEBUG: e.RestBlocks: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE} t.Pos/20 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoCheckExceedBlocks@3/5 AsIs: t.ErrorList/6 AsIs: (/10 AsIs: e.ScannedBlocks/22 AsIs: )/11 AsIs: (/18 } Tile{ AsIs: e.Body/24 } Tile{ AsIs: )/19 AsIs: e.RestBlocks/26 AsIs: >/1 ]] }
      refalrts::reinit_open_call(context[4]);
      refalrts::reinit_name(context[5], functions[efunc_gen_DoCheckExceedBlocks_Z3]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[4] );
      refalrts::link_brackets( context[18], context[19] );
      refalrts::link_brackets( context[10], context[11] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[19];
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[4], context[18] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoCheckExceedBlocks/4 s.Mode/5 t.ErrorList/6 (/10 e.ScannedBlocks/22 )/11 (/18 t.Pos/20 e.Body/24 )/19 e.RestBlocks/26 >/1
    context[22] = context[12];
    context[23] = context[13];
    context[24] = context[16];
    context[25] = context[17];
    context[26] = context[14];
    context[27] = context[15];
    // closed e.ScannedBlocks as range 22
    // closed e.Body as range 24
    // closed e.RestBlocks as range 26
    //DEBUG: t.ErrorList: 6
    //DEBUG: t.Pos: 20
    //DEBUG: s.Mode: 5
    //DEBUG: e.ScannedBlocks: 22
    //DEBUG: e.Body: 24
    //DEBUG: e.RestBlocks: 26

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoCheckExceedBlocks/4 AsIs: s.Mode/5 } </28 & ClassicError*2/29 Tile{ AsIs: t.ErrorList/6 } Tile{ HalfReuse: s.Mode5 /18 AsIs: t.Pos/20 }"Exceed block in this position"/30 >/32 Tile{ AsIs: (/10 AsIs: e.ScannedBlocks/22 HalfReuse: (/11 } Tile{ AsIs: e.Body/24 } )/33 Tile{ AsIs: )/19 AsIs: e.RestBlocks/26 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[28]);
    refalrts::alloc_name(vm, context[29], functions[efunc_gen_ClassicError_D2]);
    refalrts::alloc_chars(vm, context[30], context[31], "Exceed block in this position", 29);
    refalrts::alloc_close_call(vm, context[32]);
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::reinit_svar( context[18], context[5] );
    refalrts::reinit_open_bracket(context[11]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[10], context[19] );
    refalrts::link_brackets( context[11], context[33] );
    refalrts::push_stack( vm, context[32] );
    refalrts::push_stack( vm, context[28] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[19];
    res = refalrts::splice_elem( res, context[33] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[30], context[32] );
    res = refalrts::splice_evar( res, context[18], context[21] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_evar( res, context[28], context[29] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoCheckExceedBlocks/4 s.Mode/5 t.ErrorList/6 (/10 e.ScannedBlocks/8 )/11 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.ScannedBlocks as range 8
  //DEBUG: t.ErrorList: 6
  //DEBUG: s.Mode: 5
  //DEBUG: e.ScannedBlocks: 8

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DoCheckExceedBlocks/4 s.Mode/5 {REMOVED TILE} (/10 {REMOVED TILE} )/11 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList/6 } Tile{ AsIs: e.ScannedBlocks/8 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[8], context[9] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoCheckExceedBlocks("DoCheckExceedBlocks", COOKIE1_, COOKIE2_, func_DoCheckExceedBlocks);


static refalrts::FnResult func_AssignmentError(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & AssignmentError/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & AssignmentError/4 t.new1/5 s.new2/7 s.new3/8 t.new4/9 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[8], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & AssignmentError/4 t.ErrorList/5 # Classic/7 # Assign/8 t.Pos/9 >/1
    if( ! refalrts::ident_term( identifiers[ident_Classic], context[7] ) )
      continue;
    if( ! refalrts::ident_term( identifiers[ident_Assign], context[8] ) )
      continue;
    //DEBUG: t.ErrorList: 5
    //DEBUG: t.Pos: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList/5 } Tile{ AsIs: t.Pos/9 } 'A'/11 Tile{ HalfReuse: 's'/7 HalfReuse: 's'/8 }"ignment is not supported in the classic mode"/12 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_char(vm, context[11], 'A');
    refalrts::alloc_chars(vm, context[12], context[13], "ignment is not supported in the classic mode", 44);
    refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
    refalrts::reinit_char(context[7], 's');
    refalrts::reinit_char(context[8], 's');
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & AssignmentError/4 t.ErrorList/5 s.Mode/7 s.Type/8 t.Pos/9 >/1
  //DEBUG: t.ErrorList: 5
  //DEBUG: t.Pos: 9
  //DEBUG: s.Mode: 7
  //DEBUG: s.Type: 8

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & AssignmentError/4 {REMOVED TILE} s.Mode/7 s.Type/8 t.Pos/9 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList/5 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_AssignmentError("AssignmentError", COOKIE1_, COOKIE2_, func_AssignmentError);


static refalrts::FnResult func_gen_CheckSentenceEnd_S1A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & CheckSentenceEnd$1=2/4 (/7 e.Body/5 )/8 t.ErrorList$b/9 e.ExceedBlocks$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Body as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.ExceedBlocks$a as range 2
  //DEBUG: e.Body: 5
  //DEBUG: t.ErrorList$b: 9
  //DEBUG: e.ExceedBlocks$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CheckSentenceEnd$1=2/4 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList$b/9 } Tile{ AsIs: (/7 AsIs: e.Body/5 AsIs: )/8 } Tile{ AsIs: e.ExceedBlocks$a/2 } Tile{ ]] }
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSentenceEnd_S1A2("CheckSentenceEnd$1=2", COOKIE1_, COOKIE2_, func_gen_CheckSentenceEnd_S1A2);


static refalrts::FnResult func_gen_CheckSentenceEnd_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 46 elems
  refalrts::Iter context[46];
  refalrts::zeros( context, 46 );
  // </0 & CheckSentenceEnd$1=1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckSentenceEnd$1=1/4 (/7 e.new1/5 )/8 s.new2/9 (/12 e.new3/10 )/13 t.new4/14 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  // closed e.new3 as range 10
  context[15] = refalrts::tvar_left( context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & CheckSentenceEnd$1=1/4 (/7 e.new7/16 )/8 s.new5/9 (/12 (/22 t.new8/24 e.new9/20 )/23 e.new10/18 )/13 t.new6/14 >/1
    context[16] = context[5];
    context[17] = context[6];
    context[18] = context[10];
    context[19] = context[11];
    context[20] = 0;
    context[21] = 0;
    context[22] = refalrts::brackets_left( context[20], context[21], context[18], context[19] );
    if( ! context[22] )
      continue;
    refalrts::bracket_pointers(context[22], context[23]);
    // closed e.new7 as range 16
    // closed e.new10 as range 18
    context[25] = refalrts::tvar_left( context[24], context[20], context[21] );
    if( ! context[25] )
      continue;
    // closed e.new9 as range 20
    do {
      // </0 & CheckSentenceEnd$1=1/4 (/7 e.Body/26 )/8 # Classic/9 (/12 (/22 t.0/24 e.1/28 )/23 e./30 )/13 t.ErrorList$a/14 >/1
      context[26] = context[16];
      context[27] = context[17];
      context[28] = context[20];
      context[29] = context[21];
      context[30] = context[18];
      context[31] = context[19];
      if( ! refalrts::ident_term( identifiers[ident_Classic], context[9] ) )
        continue;
      // closed e.Body as range 26
      // closed e.1 as range 28
      // closed e. as range 30
      //DEBUG: t.0: 24
      //DEBUG: t.ErrorList$a: 14
      //DEBUG: e.Body: 26
      //DEBUG: e.1: 28
      //DEBUG: e.: 30

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentenceEnd$1=2/4 AsIs: (/7 AsIs: e.Body/26 AsIs: )/8 HalfReuse: </9 HalfReuse: & DoCheckExceedBlocks/12 HalfReuse: # Classic/22 } </32 & EL-AddErrorAt/33 Tile{ AsIs: t.ErrorList$a/14 } Tile{ AsIs: t.0/24 }"Exceed block in this position"/34 >/36 (/37 (/38 Tile{ AsIs: e.1/28 } )/39 Tile{ AsIs: )/23 AsIs: e./30 HalfReuse: >/13 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[32]);
      refalrts::alloc_name(vm, context[33], functions[efunc_ELm_AddErrorAt]);
      refalrts::alloc_chars(vm, context[34], context[35], "Exceed block in this position", 29);
      refalrts::alloc_close_call(vm, context[36]);
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::alloc_open_bracket(vm, context[38]);
      refalrts::alloc_close_bracket(vm, context[39]);
      refalrts::update_name(context[4], functions[efunc_gen_CheckSentenceEnd_S1A2]);
      refalrts::reinit_open_call(context[9]);
      refalrts::reinit_name(context[12], functions[efunc_DoCheckExceedBlocks]);
      refalrts::reinit_ident(context[22], identifiers[ident_Classic]);
      refalrts::reinit_close_call(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[9] );
      refalrts::link_brackets( context[37], context[23] );
      refalrts::link_brackets( context[38], context[39] );
      refalrts::push_stack( vm, context[36] );
      refalrts::push_stack( vm, context[32] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[13] );
      res = refalrts::splice_elem( res, context[39] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[34], context[38] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & CheckSentenceEnd$1=1/4 (/7 e.new12/26 )/8 # Extended/9 (/12 (/22 t.new14/24 e.new15/28 )/23 e.new13/30 )/13 t.new11/14 >/1
      context[26] = context[16];
      context[27] = context[17];
      context[28] = context[20];
      context[29] = context[21];
      context[30] = context[18];
      context[31] = context[19];
      if( ! refalrts::ident_term( identifiers[ident_Extended], context[9] ) )
        continue;
      // closed e.new12 as range 26
      // closed e.new15 as range 28
      // closed e.new13 as range 30
      do {
        // </0 & CheckSentenceEnd$1=1/4 (/7 e.Body/32 )/8 # Extended/9 (/12 (/22 t.0/24 e.1/34 )/23 (/40 t.1/42 e.3/38 )/41 e.0/36 )/13 t.ErrorList$a/14 >/1
        context[32] = context[26];
        context[33] = context[27];
        context[34] = context[28];
        context[35] = context[29];
        context[36] = context[30];
        context[37] = context[31];
        context[38] = 0;
        context[39] = 0;
        context[40] = refalrts::brackets_left( context[38], context[39], context[36], context[37] );
        if( ! context[40] )
          continue;
        refalrts::bracket_pointers(context[40], context[41]);
        // closed e.Body as range 32
        // closed e.1 as range 34
        // closed e.0 as range 36
        context[43] = refalrts::tvar_left( context[42], context[38], context[39] );
        if( ! context[43] )
          continue;
        // closed e.3 as range 38
        //DEBUG: t.0: 24
        //DEBUG: t.ErrorList$a: 14
        //DEBUG: e.Body: 32
        //DEBUG: e.1: 34
        //DEBUG: e.0: 36
        //DEBUG: t.1: 42
        //DEBUG: e.3: 38

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} t.0/24 {REMOVED TILE} {REMOVED TILE} t.1/42 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentenceEnd$1=2/4 AsIs: (/7 AsIs: e.Body/32 AsIs: )/8 HalfReuse: </9 HalfReuse: & DoCheckExceedBlocks@3/12 } Tile{ AsIs: t.ErrorList$a/14 } Tile{ AsIs: (/22 } (/44 Tile{ AsIs: e.1/34 } )/45 Tile{ AsIs: )/23 AsIs: (/40 } Tile{ AsIs: e.3/38 } Tile{ AsIs: )/41 AsIs: e.0/36 HalfReuse: >/13 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[44]);
        refalrts::alloc_close_bracket(vm, context[45]);
        refalrts::update_name(context[4], functions[efunc_gen_CheckSentenceEnd_S1A2]);
        refalrts::reinit_open_call(context[9]);
        refalrts::reinit_name(context[12], functions[efunc_gen_DoCheckExceedBlocks_Z3]);
        refalrts::reinit_close_call(context[13]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[13] );
        refalrts::push_stack( vm, context[9] );
        refalrts::link_brackets( context[40], context[41] );
        refalrts::link_brackets( context[22], context[23] );
        refalrts::link_brackets( context[44], context[45] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[41], context[13] );
        res = refalrts::splice_evar( res, context[38], context[39] );
        res = refalrts::splice_evar( res, context[23], context[40] );
        res = refalrts::splice_elem( res, context[45] );
        res = refalrts::splice_evar( res, context[34], context[35] );
        res = refalrts::splice_elem( res, context[44] );
        res = refalrts::splice_elem( res, context[22] );
        res = refalrts::splice_evar( res, context[14], context[15] );
        refalrts::splice_to_freelist_open( vm, context[12], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & CheckSentenceEnd$1=1/4 (/7 e.Body/32 )/8 # Extended/9 (/12 (/22 t.0/24 e.1/34 )/23 )/13 t.ErrorList$a/14 >/1
        context[32] = context[26];
        context[33] = context[27];
        context[34] = context[28];
        context[35] = context[29];
        if( ! refalrts::empty_seq( context[30], context[31] ) )
          continue;
        // closed e.Body as range 32
        // closed e.1 as range 34
        //DEBUG: t.0: 24
        //DEBUG: t.ErrorList$a: 14
        //DEBUG: e.Body: 32
        //DEBUG: e.1: 34

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & CheckSentenceEnd$1=1/4 {REMOVED TILE} (/12 (/22 t.0/24 {REMOVED TILE} )/23 )/13 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList$a/14 } Tile{ AsIs: (/7 AsIs: e.Body/32 AsIs: )/8 HalfReuse: (/9 } Tile{ AsIs: e.1/34 } Tile{ HalfReuse: )/1 ]] }
        refalrts::reinit_open_bracket(context[9]);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[9], context[1] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[34], context[35] );
        res = refalrts::splice_evar( res, context[7], context[9] );
        res = refalrts::splice_evar( res, context[14], context[15] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & CheckSentenceEnd$1=1/4 (/7 e.Body/32 )/8 # Extended/9 (/12 (/22 t.0/24 e.1/34 )/23 e./36 )/13 t.ErrorList$a/14 >/1
      context[32] = context[26];
      context[33] = context[27];
      context[34] = context[28];
      context[35] = context[29];
      context[36] = context[30];
      context[37] = context[31];
      // closed e.Body as range 32
      // closed e.1 as range 34
      // closed e. as range 36
      //DEBUG: t.0: 24
      //DEBUG: t.ErrorList$a: 14
      //DEBUG: e.Body: 32
      //DEBUG: e.1: 34
      //DEBUG: e.: 36

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} t.0/24 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentenceEnd$1=2/4 AsIs: (/7 AsIs: e.Body/32 AsIs: )/8 HalfReuse: </9 HalfReuse: & DoCheckExceedBlocks@0/12 HalfReuse: # Extended/22 } Tile{ AsIs: t.ErrorList$a/14 } (/38 (/39 Tile{ AsIs: e.1/34 } )/40 Tile{ AsIs: )/23 AsIs: e./36 HalfReuse: >/13 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[38]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::update_name(context[4], functions[efunc_gen_CheckSentenceEnd_S1A2]);
      refalrts::reinit_open_call(context[9]);
      refalrts::reinit_name(context[12], functions[efunc_gen_DoCheckExceedBlocks_Z0]);
      refalrts::reinit_ident(context[22], identifiers[ident_Extended]);
      refalrts::reinit_close_call(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[9] );
      refalrts::link_brackets( context[38], context[23] );
      refalrts::link_brackets( context[39], context[40] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[13] );
      res = refalrts::splice_elem( res, context[40] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      refalrts::splice_to_freelist_open( vm, context[22], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & CheckSentenceEnd$1=1/4 (/7 e.Body/26 )/8 s.Mode/9 (/12 (/22 t.0/24 e.1/28 )/23 e./30 )/13 t.ErrorList$a/14 >/1
    context[26] = context[16];
    context[27] = context[17];
    context[28] = context[20];
    context[29] = context[21];
    context[30] = context[18];
    context[31] = context[19];
    // closed e.Body as range 26
    // closed e.1 as range 28
    // closed e. as range 30
    //DEBUG: t.0: 24
    //DEBUG: t.ErrorList$a: 14
    //DEBUG: s.Mode: 9
    //DEBUG: e.Body: 26
    //DEBUG: e.1: 28
    //DEBUG: e.: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentenceEnd$1=2/4 AsIs: (/7 AsIs: e.Body/26 AsIs: )/8 } </32 & DoCheckExceedBlocks/33 s.Mode/9/34 </35 & ClassicError*2/36 Tile{ AsIs: t.ErrorList$a/14 } Tile{ AsIs: s.Mode/9 } Tile{ AsIs: t.0/24 }"Exceed block in this position"/37 >/39 Tile{ AsIs: (/12 AsIs: (/22 } Tile{ AsIs: e.1/28 } )/40 Tile{ AsIs: )/23 AsIs: e./30 HalfReuse: >/13 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[32]);
    refalrts::alloc_name(vm, context[33], functions[efunc_DoCheckExceedBlocks]);
    refalrts::copy_stvar(vm, context[34], context[9]);
    refalrts::alloc_open_call(vm, context[35]);
    refalrts::alloc_name(vm, context[36], functions[efunc_gen_ClassicError_D2]);
    refalrts::alloc_chars(vm, context[37], context[38], "Exceed block in this position", 29);
    refalrts::alloc_close_call(vm, context[39]);
    refalrts::alloc_close_bracket(vm, context[40]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckSentenceEnd_S1A2]);
    refalrts::reinit_close_call(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[32] );
    refalrts::link_brackets( context[12], context[23] );
    refalrts::link_brackets( context[22], context[40] );
    refalrts::push_stack( vm, context[39] );
    refalrts::push_stack( vm, context[35] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[23], context[13] );
    res = refalrts::splice_elem( res, context[40] );
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_evar( res, context[12], context[22] );
    res = refalrts::splice_evar( res, context[37], context[39] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[32], context[36] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CheckSentenceEnd$1=1/4 (/7 e.Body/16 )/8 s.Mode/9 (/12 )/13 t.ErrorList$a/14 >/1
    context[16] = context[5];
    context[17] = context[6];
    if( ! refalrts::empty_seq( context[10], context[11] ) )
      continue;
    // closed e.Body as range 16
    //DEBUG: t.ErrorList$a: 14
    //DEBUG: s.Mode: 9
    //DEBUG: e.Body: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CheckSentenceEnd$1=1/4 {REMOVED TILE} s.Mode/9 (/12 )/13 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList$a/14 } Tile{ AsIs: (/7 AsIs: e.Body/16 AsIs: )/8 } Tile{ ]] }
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSentenceEnd$1=1/4 (/7 e.Body/5 )/8 s.Mode/9 (/12 e.ExceedBlocks/10 )/13 t.ErrorList$a/14 >/1
  // closed e.Body as range 5
  // closed e.ExceedBlocks as range 10
  //DEBUG: t.ErrorList$a: 14
  //DEBUG: s.Mode: 9
  //DEBUG: e.Body: 5
  //DEBUG: e.ExceedBlocks: 10

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentenceEnd$1=2/4 AsIs: (/7 AsIs: e.Body/5 AsIs: )/8 } </16 & DoCheckExceedBlocks@0/17 Tile{ AsIs: s.Mode/9 } Tile{ AsIs: t.ErrorList$a/14 } (/18 Tile{ HalfReuse: )/12 AsIs: e.ExceedBlocks/10 HalfReuse: >/13 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[16]);
  refalrts::alloc_name(vm, context[17], functions[efunc_gen_DoCheckExceedBlocks_Z0]);
  refalrts::alloc_open_bracket(vm, context[18]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentenceEnd_S1A2]);
  refalrts::reinit_close_bracket(context[12]);
  refalrts::reinit_close_call(context[13]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[16] );
  refalrts::link_brackets( context[18], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[12], context[13] );
  res = refalrts::splice_elem( res, context[18] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_evar( res, context[16], context[17] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSentenceEnd_S1A1("CheckSentenceEnd$1=1", COOKIE1_, COOKIE2_, func_gen_CheckSentenceEnd_S1A1);


static refalrts::FnResult func_CheckSentenceEnd(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 54 elems
  refalrts::Iter context[54];
  refalrts::zeros( context, 54 );
  // </0 & CheckSentenceEnd/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckSentenceEnd/4 t.new1/5 s.new2/7 s.new3/8 t.new4/9 e.new5/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[8], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.new5 as range 2
  do {
    // </0 & CheckSentenceEnd/4 t.new6/5 s.new7/7 s.new8/8 t.new9/9 (/15 t.new10/17 e.new11/13 )/16 e.new12/11 >/1
    context[11] = context[2];
    context[12] = context[3];
    context[13] = 0;
    context[14] = 0;
    context[15] = refalrts::brackets_left( context[13], context[14], context[11], context[12] );
    if( ! context[15] )
      continue;
    refalrts::bracket_pointers(context[15], context[16]);
    // closed e.new12 as range 11
    context[18] = refalrts::tvar_left( context[17], context[13], context[14] );
    if( ! context[18] )
      continue;
    // closed e.new11 as range 13
    do {
      // </0 & CheckSentenceEnd/4 t.new13/5 s.new14/7 # Assign/8 t.new15/9 (/15 t.new17/17 e.new18/19 )/16 e.new16/21 >/1
      context[19] = context[13];
      context[20] = context[14];
      context[21] = context[11];
      context[22] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_Assign], context[8] ) )
        continue;
      // closed e.new18 as range 19
      // closed e.new16 as range 21
      do {
        // </0 & CheckSentenceEnd/4 t.ErrorList/5 # Classic/7 # Assign/8 t.Pos/9 (/15 t.BodyPos/17 e.Body/23 )/16 e.ExceedBlocks/25 >/1
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        context[26] = context[22];
        if( ! refalrts::ident_term( identifiers[ident_Classic], context[7] ) )
          continue;
        // closed e.Body as range 23
        // closed e.ExceedBlocks as range 25
        //DEBUG: t.ErrorList: 5
        //DEBUG: t.Pos: 9
        //DEBUG: t.BodyPos: 17
        //DEBUG: e.Body: 23
        //DEBUG: e.ExceedBlocks: 25

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.BodyPos/17 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentenceEnd$1=1@1/4 } (/27 Tile{ AsIs: e.Body/23 } Tile{ HalfReuse: )/7 HalfReuse: (/8 } Tile{ AsIs: e.ExceedBlocks/25 } Tile{ AsIs: )/16 } </28 & EL-AddErrorAt/29 Tile{ AsIs: t.ErrorList/5 } Tile{ AsIs: t.Pos/9 HalfReuse: 'M'/15 }"istaken \'=\' for \',\' in the classic mode"/30 >/32 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[27]);
        refalrts::alloc_open_call(vm, context[28]);
        refalrts::alloc_name(vm, context[29], functions[efunc_ELm_AddErrorAt]);
        refalrts::alloc_chars(vm, context[30], context[31], "istaken \'=\' for \',\' in the classic mode", 39);
        refalrts::alloc_close_call(vm, context[32]);
        refalrts::update_name(context[4], functions[efunc_gen_CheckSentenceEnd_S1A1Z1]);
        refalrts::reinit_close_bracket(context[7]);
        refalrts::reinit_open_bracket(context[8]);
        refalrts::reinit_char(context[15], 'M');
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[32] );
        refalrts::push_stack( vm, context[28] );
        refalrts::link_brackets( context[8], context[16] );
        refalrts::link_brackets( context[27], context[7] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[30], context[32] );
        res = refalrts::splice_evar( res, context[9], context[15] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[28], context[29] );
        res = refalrts::splice_elem( res, context[16] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_evar( res, context[7], context[8] );
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_elem( res, context[27] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & CheckSentenceEnd/4 t.new19/5 # Extended/7 # Assign/8 t.new20/9 (/15 t.new22/17 e.new23/23 )/16 e.new21/25 >/1
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        context[26] = context[22];
        if( ! refalrts::ident_term( identifiers[ident_Extended], context[7] ) )
          continue;
        // closed e.new23 as range 23
        // closed e.new21 as range 25
        do {
          // </0 & CheckSentenceEnd/4 t.new24/5 # Extended/7 # Assign/8 t.new25/9 (/15 t.new29/17 e.new30/27 )/16 (/33 t.new26/35 e.new27/31 )/34 e.new28/29 >/1
          context[27] = context[23];
          context[28] = context[24];
          context[29] = context[25];
          context[30] = context[26];
          context[31] = 0;
          context[32] = 0;
          context[33] = refalrts::brackets_left( context[31], context[32], context[29], context[30] );
          if( ! context[33] )
            continue;
          refalrts::bracket_pointers(context[33], context[34]);
          // closed e.new30 as range 27
          // closed e.new28 as range 29
          context[36] = refalrts::tvar_left( context[35], context[31], context[32] );
          if( ! context[36] )
            continue;
          // closed e.new27 as range 31
          do {
            // </0 & CheckSentenceEnd/4 t.ErrorList/5 # Extended/7 # Assign/8 t.Pos/9 (/15 t.BodyPos/17 e.Body/37 )/16 (/33 t.0/35 e.1/39 )/34 (/45 t.1/47 e.3/43 )/46 e.0/41 >/1
            context[37] = context[27];
            context[38] = context[28];
            context[39] = context[31];
            context[40] = context[32];
            context[41] = context[29];
            context[42] = context[30];
            context[43] = 0;
            context[44] = 0;
            context[45] = refalrts::brackets_left( context[43], context[44], context[41], context[42] );
            if( ! context[45] )
              continue;
            refalrts::bracket_pointers(context[45], context[46]);
            // closed e.Body as range 37
            // closed e.1 as range 39
            // closed e.0 as range 41
            context[48] = refalrts::tvar_left( context[47], context[43], context[44] );
            if( ! context[48] )
              continue;
            // closed e.3 as range 43
            //DEBUG: t.ErrorList: 5
            //DEBUG: t.Pos: 9
            //DEBUG: t.BodyPos: 17
            //DEBUG: t.0: 35
            //DEBUG: e.Body: 37
            //DEBUG: e.1: 39
            //DEBUG: e.0: 41
            //DEBUG: t.1: 47
            //DEBUG: e.3: 43

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} t.Pos/9 {REMOVED TILE} t.BodyPos/17 {REMOVED TILE} {REMOVED TILE} t.0/35 {REMOVED TILE} {REMOVED TILE} t.1/47 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ } </49 Tile{ HalfReuse: & CheckSentenceEnd$1=2/34 AsIs: (/45 } Tile{ AsIs: e.Body/37 } Tile{ HalfReuse: )/15 } Tile{ AsIs: </0 Reuse: & DoCheckExceedBlocks@3/4 AsIs: t.ErrorList/5 HalfReuse: (/7 HalfReuse: (/8 } Tile{ AsIs: e.1/39 } )/50 Tile{ AsIs: )/16 AsIs: (/33 } Tile{ AsIs: e.3/43 } Tile{ AsIs: )/46 AsIs: e.0/41 AsIs: >/1 } >/51 Tile{ ]] }
            refalrts::alloc_open_call(vm, context[49]);
            refalrts::alloc_close_bracket(vm, context[50]);
            refalrts::alloc_close_call(vm, context[51]);
            refalrts::reinit_name(context[34], functions[efunc_gen_CheckSentenceEnd_S1A2]);
            refalrts::reinit_close_bracket(context[15]);
            refalrts::update_name(context[4], functions[efunc_gen_DoCheckExceedBlocks_Z3]);
            refalrts::reinit_open_bracket(context[7]);
            refalrts::reinit_open_bracket(context[8]);
            refalrts::push_stack( vm, context[51] );
            refalrts::push_stack( vm, context[49] );
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[33], context[46] );
            refalrts::link_brackets( context[7], context[16] );
            refalrts::link_brackets( context[8], context[50] );
            refalrts::link_brackets( context[45], context[15] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_elem( res, context[51] );
            res = refalrts::splice_evar( res, context[46], context[1] );
            res = refalrts::splice_evar( res, context[43], context[44] );
            res = refalrts::splice_evar( res, context[16], context[33] );
            res = refalrts::splice_elem( res, context[50] );
            res = refalrts::splice_evar( res, context[39], context[40] );
            res = refalrts::splice_evar( res, context[0], context[8] );
            res = refalrts::splice_elem( res, context[15] );
            res = refalrts::splice_evar( res, context[37], context[38] );
            res = refalrts::splice_evar( res, context[34], context[45] );
            res = refalrts::splice_elem( res, context[49] );
            refalrts::splice_to_freelist_open( vm, trash_prev, res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & CheckSentenceEnd/4 t.ErrorList/5 # Extended/7 # Assign/8 t.Pos/9 (/15 t.BodyPos/17 e.Body/37 )/16 (/33 t.0/35 e.1/39 )/34 >/1
            context[37] = context[27];
            context[38] = context[28];
            context[39] = context[31];
            context[40] = context[32];
            if( ! refalrts::empty_seq( context[29], context[30] ) )
              continue;
            // closed e.Body as range 37
            // closed e.1 as range 39
            //DEBUG: t.ErrorList: 5
            //DEBUG: t.Pos: 9
            //DEBUG: t.BodyPos: 17
            //DEBUG: t.0: 35
            //DEBUG: e.Body: 37
            //DEBUG: e.1: 39

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} </0 & CheckSentenceEnd/4 {REMOVED TILE} # Assign/8 t.Pos/9 (/15 t.BodyPos/17 {REMOVED TILE} {REMOVED TILE} t.0/35 {REMOVED TILE} )/34 {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList/5 HalfReuse: (/7 } Tile{ AsIs: e.Body/37 } Tile{ AsIs: )/16 AsIs: (/33 } Tile{ AsIs: e.1/39 } Tile{ HalfReuse: )/1 ]] }
            refalrts::reinit_open_bracket(context[7]);
            refalrts::reinit_close_bracket(context[1]);
            refalrts::link_brackets( context[33], context[1] );
            refalrts::link_brackets( context[7], context[16] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[39], context[40] );
            res = refalrts::splice_evar( res, context[16], context[33] );
            res = refalrts::splice_evar( res, context[37], context[38] );
            res = refalrts::splice_evar( res, context[5], context[7] );
            refalrts::splice_to_freelist_open( vm, trash_prev, res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & CheckSentenceEnd/4 t.ErrorList/5 # Extended/7 # Assign/8 t.Pos/9 (/15 t.BodyPos/17 e.Body/37 )/16 (/33 t.0/35 e.1/39 )/34 e./41 >/1
          context[37] = context[27];
          context[38] = context[28];
          context[39] = context[31];
          context[40] = context[32];
          context[41] = context[29];
          context[42] = context[30];
          // closed e.Body as range 37
          // closed e.1 as range 39
          // closed e. as range 41
          //DEBUG: t.ErrorList: 5
          //DEBUG: t.Pos: 9
          //DEBUG: t.BodyPos: 17
          //DEBUG: t.0: 35
          //DEBUG: e.Body: 37
          //DEBUG: e.1: 39
          //DEBUG: e.: 41

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} t.Pos/9 {REMOVED TILE} t.BodyPos/17 {REMOVED TILE} {REMOVED TILE} t.0/35 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentenceEnd$1=2/4 } Tile{ AsIs: (/15 } Tile{ AsIs: e.Body/37 } Tile{ AsIs: )/16 HalfReuse: </33 } & DoCheckExceedBlocks@0/43 # Extended/44 Tile{ AsIs: t.ErrorList/5 HalfReuse: (/7 HalfReuse: (/8 } Tile{ AsIs: e.1/39 } )/45 Tile{ AsIs: )/34 AsIs: e./41 AsIs: >/1 } >/46 Tile{ ]] }
          refalrts::alloc_name(vm, context[43], functions[efunc_gen_DoCheckExceedBlocks_Z0]);
          refalrts::alloc_ident(vm, context[44], identifiers[ident_Extended]);
          refalrts::alloc_close_bracket(vm, context[45]);
          refalrts::alloc_close_call(vm, context[46]);
          refalrts::update_name(context[4], functions[efunc_gen_CheckSentenceEnd_S1A2]);
          refalrts::reinit_open_call(context[33]);
          refalrts::reinit_open_bracket(context[7]);
          refalrts::reinit_open_bracket(context[8]);
          refalrts::push_stack( vm, context[46] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[33] );
          refalrts::link_brackets( context[7], context[34] );
          refalrts::link_brackets( context[8], context[45] );
          refalrts::link_brackets( context[15], context[16] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_elem( res, context[46] );
          res = refalrts::splice_evar( res, context[34], context[1] );
          res = refalrts::splice_elem( res, context[45] );
          res = refalrts::splice_evar( res, context[39], context[40] );
          res = refalrts::splice_evar( res, context[5], context[8] );
          res = refalrts::splice_evar( res, context[43], context[44] );
          res = refalrts::splice_evar( res, context[16], context[33] );
          res = refalrts::splice_evar( res, context[37], context[38] );
          res = refalrts::splice_elem( res, context[15] );
          refalrts::splice_to_freelist_open( vm, context[4], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & CheckSentenceEnd/4 t.ErrorList/5 # Extended/7 # Assign/8 t.Pos/9 (/15 t.BodyPos/17 e.Body/27 )/16 >/1
          context[27] = context[23];
          context[28] = context[24];
          if( ! refalrts::empty_seq( context[25], context[26] ) )
            continue;
          // closed e.Body as range 27
          //DEBUG: t.ErrorList: 5
          //DEBUG: t.Pos: 9
          //DEBUG: t.BodyPos: 17
          //DEBUG: e.Body: 27

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & CheckSentenceEnd/4 {REMOVED TILE} # Assign/8 t.Pos/9 (/15 t.BodyPos/17 {REMOVED TILE} )/16 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList/5 HalfReuse: (/7 } Tile{ AsIs: e.Body/27 } Tile{ HalfReuse: )/1 ]] }
          refalrts::reinit_open_bracket(context[7]);
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[7], context[1] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[27], context[28] );
          res = refalrts::splice_evar( res, context[5], context[7] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & CheckSentenceEnd/4 t.ErrorList/5 # Extended/7 # Assign/8 t.Pos/9 (/15 t.BodyPos/17 e.Body/27 )/16 e.ExceedBlocks/29 >/1
        context[27] = context[23];
        context[28] = context[24];
        context[29] = context[25];
        context[30] = context[26];
        // closed e.Body as range 27
        // closed e.ExceedBlocks as range 29
        //DEBUG: t.ErrorList: 5
        //DEBUG: t.Pos: 9
        //DEBUG: t.BodyPos: 17
        //DEBUG: e.Body: 27
        //DEBUG: e.ExceedBlocks: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.Pos/9 {REMOVED TILE} t.BodyPos/17 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentenceEnd$1=2/4 } Tile{ AsIs: (/15 } Tile{ AsIs: e.Body/27 } )/31 </32 & DoCheckExceedBlocks@0/33 Tile{ Reuse: # Extended/8 } Tile{ AsIs: t.ErrorList/5 HalfReuse: (/7 } Tile{ AsIs: )/16 AsIs: e.ExceedBlocks/29 AsIs: >/1 } >/34 Tile{ ]] }
        refalrts::alloc_close_bracket(vm, context[31]);
        refalrts::alloc_open_call(vm, context[32]);
        refalrts::alloc_name(vm, context[33], functions[efunc_gen_DoCheckExceedBlocks_Z0]);
        refalrts::alloc_close_call(vm, context[34]);
        refalrts::update_name(context[4], functions[efunc_gen_CheckSentenceEnd_S1A2]);
        refalrts::update_ident(context[8], identifiers[ident_Extended]);
        refalrts::reinit_open_bracket(context[7]);
        refalrts::push_stack( vm, context[34] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[32] );
        refalrts::link_brackets( context[7], context[16] );
        refalrts::link_brackets( context[15], context[31] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[34] );
        res = refalrts::splice_evar( res, context[16], context[1] );
        res = refalrts::splice_evar( res, context[5], context[7] );
        res = refalrts::splice_elem( res, context[8] );
        res = refalrts::splice_evar( res, context[31], context[33] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_elem( res, context[15] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & CheckSentenceEnd/4 t.ErrorList/5 s.Mode/7 # Assign/8 t.Pos/9 (/15 t.BodyPos/17 e.Body/23 )/16 e.ExceedBlocks/25 >/1
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      context[26] = context[22];
      // closed e.Body as range 23
      // closed e.ExceedBlocks as range 25
      //DEBUG: t.ErrorList: 5
      //DEBUG: t.Pos: 9
      //DEBUG: t.BodyPos: 17
      //DEBUG: s.Mode: 7
      //DEBUG: e.Body: 23
      //DEBUG: e.ExceedBlocks: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.BodyPos/17 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </27 & CheckSentenceEnd$1=1/28 Tile{ HalfReuse: (/8 } Tile{ AsIs: e.Body/23 } )/29 s.Mode/7/30 (/31 Tile{ AsIs: e.ExceedBlocks/25 } Tile{ AsIs: )/16 } Tile{ AsIs: </0 Reuse: & ClassicError*2/4 AsIs: t.ErrorList/5 AsIs: s.Mode/7 } Tile{ AsIs: t.Pos/9 HalfReuse: 'M'/15 }"istaken \'=\' for \',\' in the classic mode"/32 >/34 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[27]);
      refalrts::alloc_name(vm, context[28], functions[efunc_gen_CheckSentenceEnd_S1A1]);
      refalrts::alloc_close_bracket(vm, context[29]);
      refalrts::copy_stvar(vm, context[30], context[7]);
      refalrts::alloc_open_bracket(vm, context[31]);
      refalrts::alloc_chars(vm, context[32], context[33], "istaken \'=\' for \',\' in the classic mode", 39);
      refalrts::alloc_close_call(vm, context[34]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::update_name(context[4], functions[efunc_gen_ClassicError_D2]);
      refalrts::reinit_char(context[15], 'M');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[27] );
      refalrts::push_stack( vm, context[34] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[31], context[16] );
      refalrts::link_brackets( context[8], context[29] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[32], context[34] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      res = refalrts::splice_evar( res, context[0], context[7] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[29], context[31] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & CheckSentenceEnd/4 t.new13/5 s.new14/7 # Condition/8 t.new15/9 (/15 t.new17/17 e.new18/19 )/16 e.new16/21 >/1
      context[19] = context[13];
      context[20] = context[14];
      context[21] = context[11];
      context[22] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_Condition], context[8] ) )
        continue;
      // closed e.new18 as range 19
      // closed e.new16 as range 21
      do {
        // </0 & CheckSentenceEnd/4 t.new19/5 s.new20/7 # Condition/8 t.new21/9 (/15 t.new25/17 e.new26/23 )/16 (/29 t.new22/31 e.new23/27 )/30 e.new24/25 >/1
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        context[26] = context[22];
        context[27] = 0;
        context[28] = 0;
        context[29] = refalrts::brackets_left( context[27], context[28], context[25], context[26] );
        if( ! context[29] )
          continue;
        refalrts::bracket_pointers(context[29], context[30]);
        // closed e.new26 as range 23
        // closed e.new24 as range 25
        context[32] = refalrts::tvar_left( context[31], context[27], context[28] );
        if( ! context[32] )
          continue;
        // closed e.new23 as range 27
        do {
          // </0 & CheckSentenceEnd/4 t.ErrorList/5 # Classic/7 # Condition/8 t.Pos/9 (/15 t.BodyPos/17 e.Body/33 )/16 (/29 t.0/31 e.1/35 )/30 e./37 >/1
          context[33] = context[23];
          context[34] = context[24];
          context[35] = context[27];
          context[36] = context[28];
          context[37] = context[25];
          context[38] = context[26];
          if( ! refalrts::ident_term( identifiers[ident_Classic], context[7] ) )
            continue;
          // closed e.Body as range 33
          // closed e.1 as range 35
          // closed e. as range 37
          //DEBUG: t.ErrorList: 5
          //DEBUG: t.Pos: 9
          //DEBUG: t.BodyPos: 17
          //DEBUG: t.0: 31
          //DEBUG: e.Body: 33
          //DEBUG: e.1: 35
          //DEBUG: e.: 37

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.Pos/9 {REMOVED TILE} t.BodyPos/17 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } </39 Tile{ HalfReuse: & CheckSentenceEnd$1=2/16 AsIs: (/29 } Tile{ AsIs: e.Body/33 } )/40 </41 Tile{ HalfReuse: & DoCheckExceedBlocks/7 Reuse: # Classic/8 } Tile{ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList/5 } Tile{ AsIs: t.0/31 }"Exceed block in this position"/42 >/44 Tile{ AsIs: (/15 } (/45 Tile{ AsIs: e.1/35 } )/46 Tile{ AsIs: )/30 AsIs: e./37 AsIs: >/1 } >/47 Tile{ ]] }
          refalrts::alloc_open_call(vm, context[39]);
          refalrts::alloc_close_bracket(vm, context[40]);
          refalrts::alloc_open_call(vm, context[41]);
          refalrts::alloc_chars(vm, context[42], context[43], "Exceed block in this position", 29);
          refalrts::alloc_close_call(vm, context[44]);
          refalrts::alloc_open_bracket(vm, context[45]);
          refalrts::alloc_close_bracket(vm, context[46]);
          refalrts::alloc_close_call(vm, context[47]);
          refalrts::reinit_name(context[16], functions[efunc_gen_CheckSentenceEnd_S1A2]);
          refalrts::reinit_name(context[7], functions[efunc_DoCheckExceedBlocks]);
          refalrts::update_ident(context[8], identifiers[ident_Classic]);
          refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
          refalrts::push_stack( vm, context[47] );
          refalrts::push_stack( vm, context[39] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[41] );
          refalrts::link_brackets( context[15], context[30] );
          refalrts::link_brackets( context[45], context[46] );
          refalrts::push_stack( vm, context[44] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[29], context[40] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_elem( res, context[47] );
          res = refalrts::splice_evar( res, context[30], context[1] );
          res = refalrts::splice_elem( res, context[46] );
          res = refalrts::splice_evar( res, context[35], context[36] );
          res = refalrts::splice_elem( res, context[45] );
          res = refalrts::splice_elem( res, context[15] );
          res = refalrts::splice_evar( res, context[42], context[44] );
          res = refalrts::splice_evar( res, context[31], context[32] );
          res = refalrts::splice_evar( res, context[0], context[6] );
          res = refalrts::splice_evar( res, context[7], context[8] );
          res = refalrts::splice_evar( res, context[40], context[41] );
          res = refalrts::splice_evar( res, context[33], context[34] );
          res = refalrts::splice_evar( res, context[16], context[29] );
          res = refalrts::splice_elem( res, context[39] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & CheckSentenceEnd/4 t.new27/5 # Extended/7 # Condition/8 t.new28/9 (/15 t.new32/17 e.new33/33 )/16 (/29 t.new30/31 e.new31/35 )/30 e.new29/37 >/1
          context[33] = context[23];
          context[34] = context[24];
          context[35] = context[27];
          context[36] = context[28];
          context[37] = context[25];
          context[38] = context[26];
          if( ! refalrts::ident_term( identifiers[ident_Extended], context[7] ) )
            continue;
          // closed e.new33 as range 33
          // closed e.new31 as range 35
          // closed e.new29 as range 37
          do {
            // </0 & CheckSentenceEnd/4 t.ErrorList/5 # Extended/7 # Condition/8 t.Pos/9 (/15 t.BodyPos/17 e.Body/39 )/16 (/29 t.0/31 e.1/41 )/30 (/47 t.1/49 e.3/45 )/48 e.0/43 >/1
            context[39] = context[33];
            context[40] = context[34];
            context[41] = context[35];
            context[42] = context[36];
            context[43] = context[37];
            context[44] = context[38];
            context[45] = 0;
            context[46] = 0;
            context[47] = refalrts::brackets_left( context[45], context[46], context[43], context[44] );
            if( ! context[47] )
              continue;
            refalrts::bracket_pointers(context[47], context[48]);
            // closed e.Body as range 39
            // closed e.1 as range 41
            // closed e.0 as range 43
            context[50] = refalrts::tvar_left( context[49], context[45], context[46] );
            if( ! context[50] )
              continue;
            // closed e.3 as range 45
            //DEBUG: t.ErrorList: 5
            //DEBUG: t.Pos: 9
            //DEBUG: t.BodyPos: 17
            //DEBUG: t.0: 31
            //DEBUG: e.Body: 39
            //DEBUG: e.1: 41
            //DEBUG: e.0: 43
            //DEBUG: t.1: 49
            //DEBUG: e.3: 45

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} t.Pos/9 {REMOVED TILE} t.BodyPos/17 {REMOVED TILE} {REMOVED TILE} t.0/31 {REMOVED TILE} {REMOVED TILE} t.1/49 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ } </51 Tile{ HalfReuse: & CheckSentenceEnd$1=2/30 AsIs: (/47 } Tile{ AsIs: e.Body/39 } Tile{ HalfReuse: )/15 } Tile{ AsIs: </0 Reuse: & DoCheckExceedBlocks@3/4 AsIs: t.ErrorList/5 HalfReuse: (/7 HalfReuse: (/8 } Tile{ AsIs: e.1/41 } )/52 Tile{ AsIs: )/16 AsIs: (/29 } Tile{ AsIs: e.3/45 } Tile{ AsIs: )/48 AsIs: e.0/43 AsIs: >/1 } >/53 Tile{ ]] }
            refalrts::alloc_open_call(vm, context[51]);
            refalrts::alloc_close_bracket(vm, context[52]);
            refalrts::alloc_close_call(vm, context[53]);
            refalrts::reinit_name(context[30], functions[efunc_gen_CheckSentenceEnd_S1A2]);
            refalrts::reinit_close_bracket(context[15]);
            refalrts::update_name(context[4], functions[efunc_gen_DoCheckExceedBlocks_Z3]);
            refalrts::reinit_open_bracket(context[7]);
            refalrts::reinit_open_bracket(context[8]);
            refalrts::push_stack( vm, context[53] );
            refalrts::push_stack( vm, context[51] );
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[29], context[48] );
            refalrts::link_brackets( context[7], context[16] );
            refalrts::link_brackets( context[8], context[52] );
            refalrts::link_brackets( context[47], context[15] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_elem( res, context[53] );
            res = refalrts::splice_evar( res, context[48], context[1] );
            res = refalrts::splice_evar( res, context[45], context[46] );
            res = refalrts::splice_evar( res, context[16], context[29] );
            res = refalrts::splice_elem( res, context[52] );
            res = refalrts::splice_evar( res, context[41], context[42] );
            res = refalrts::splice_evar( res, context[0], context[8] );
            res = refalrts::splice_elem( res, context[15] );
            res = refalrts::splice_evar( res, context[39], context[40] );
            res = refalrts::splice_evar( res, context[30], context[47] );
            res = refalrts::splice_elem( res, context[51] );
            refalrts::splice_to_freelist_open( vm, trash_prev, res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & CheckSentenceEnd/4 t.ErrorList/5 # Extended/7 # Condition/8 t.Pos/9 (/15 t.BodyPos/17 e.Body/39 )/16 (/29 t.0/31 e.1/41 )/30 >/1
            context[39] = context[33];
            context[40] = context[34];
            context[41] = context[35];
            context[42] = context[36];
            if( ! refalrts::empty_seq( context[37], context[38] ) )
              continue;
            // closed e.Body as range 39
            // closed e.1 as range 41
            //DEBUG: t.ErrorList: 5
            //DEBUG: t.Pos: 9
            //DEBUG: t.BodyPos: 17
            //DEBUG: t.0: 31
            //DEBUG: e.Body: 39
            //DEBUG: e.1: 41

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} </0 & CheckSentenceEnd/4 {REMOVED TILE} # Condition/8 t.Pos/9 (/15 t.BodyPos/17 {REMOVED TILE} {REMOVED TILE} t.0/31 {REMOVED TILE} )/30 {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList/5 HalfReuse: (/7 } Tile{ AsIs: e.Body/39 } Tile{ AsIs: )/16 AsIs: (/29 } Tile{ AsIs: e.1/41 } Tile{ HalfReuse: )/1 ]] }
            refalrts::reinit_open_bracket(context[7]);
            refalrts::reinit_close_bracket(context[1]);
            refalrts::link_brackets( context[29], context[1] );
            refalrts::link_brackets( context[7], context[16] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[41], context[42] );
            res = refalrts::splice_evar( res, context[16], context[29] );
            res = refalrts::splice_evar( res, context[39], context[40] );
            res = refalrts::splice_evar( res, context[5], context[7] );
            refalrts::splice_to_freelist_open( vm, trash_prev, res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & CheckSentenceEnd/4 t.ErrorList/5 # Extended/7 # Condition/8 t.Pos/9 (/15 t.BodyPos/17 e.Body/39 )/16 (/29 t.0/31 e.1/41 )/30 e./43 >/1
          context[39] = context[33];
          context[40] = context[34];
          context[41] = context[35];
          context[42] = context[36];
          context[43] = context[37];
          context[44] = context[38];
          // closed e.Body as range 39
          // closed e.1 as range 41
          // closed e. as range 43
          //DEBUG: t.ErrorList: 5
          //DEBUG: t.Pos: 9
          //DEBUG: t.BodyPos: 17
          //DEBUG: t.0: 31
          //DEBUG: e.Body: 39
          //DEBUG: e.1: 41
          //DEBUG: e.: 43

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} t.Pos/9 {REMOVED TILE} t.BodyPos/17 {REMOVED TILE} {REMOVED TILE} t.0/31 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentenceEnd$1=2/4 } Tile{ AsIs: (/15 } Tile{ AsIs: e.Body/39 } Tile{ AsIs: )/16 HalfReuse: </29 } & DoCheckExceedBlocks@0/45 # Extended/46 Tile{ AsIs: t.ErrorList/5 HalfReuse: (/7 HalfReuse: (/8 } Tile{ AsIs: e.1/41 } )/47 Tile{ AsIs: )/30 AsIs: e./43 AsIs: >/1 } >/48 Tile{ ]] }
          refalrts::alloc_name(vm, context[45], functions[efunc_gen_DoCheckExceedBlocks_Z0]);
          refalrts::alloc_ident(vm, context[46], identifiers[ident_Extended]);
          refalrts::alloc_close_bracket(vm, context[47]);
          refalrts::alloc_close_call(vm, context[48]);
          refalrts::update_name(context[4], functions[efunc_gen_CheckSentenceEnd_S1A2]);
          refalrts::reinit_open_call(context[29]);
          refalrts::reinit_open_bracket(context[7]);
          refalrts::reinit_open_bracket(context[8]);
          refalrts::push_stack( vm, context[48] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[29] );
          refalrts::link_brackets( context[7], context[30] );
          refalrts::link_brackets( context[8], context[47] );
          refalrts::link_brackets( context[15], context[16] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_elem( res, context[48] );
          res = refalrts::splice_evar( res, context[30], context[1] );
          res = refalrts::splice_elem( res, context[47] );
          res = refalrts::splice_evar( res, context[41], context[42] );
          res = refalrts::splice_evar( res, context[5], context[8] );
          res = refalrts::splice_evar( res, context[45], context[46] );
          res = refalrts::splice_evar( res, context[16], context[29] );
          res = refalrts::splice_evar( res, context[39], context[40] );
          res = refalrts::splice_elem( res, context[15] );
          refalrts::splice_to_freelist_open( vm, context[4], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & CheckSentenceEnd/4 t.ErrorList/5 s.Mode/7 # Condition/8 t.Pos/9 (/15 t.BodyPos/17 e.Body/33 )/16 (/29 t.0/31 e.1/35 )/30 e./37 >/1
        context[33] = context[23];
        context[34] = context[24];
        context[35] = context[27];
        context[36] = context[28];
        context[37] = context[25];
        context[38] = context[26];
        // closed e.Body as range 33
        // closed e.1 as range 35
        // closed e. as range 37
        //DEBUG: t.ErrorList: 5
        //DEBUG: t.Pos: 9
        //DEBUG: t.BodyPos: 17
        //DEBUG: t.0: 31
        //DEBUG: s.Mode: 7
        //DEBUG: e.Body: 33
        //DEBUG: e.1: 35
        //DEBUG: e.: 37

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.Pos/9 {REMOVED TILE} t.BodyPos/17 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </39 Tile{ HalfReuse: & CheckSentenceEnd$1=2/16 AsIs: (/29 } Tile{ AsIs: e.Body/33 } )/40 Tile{ HalfReuse: </8 } & DoCheckExceedBlocks/41 s.Mode/7/42 Tile{ AsIs: </0 Reuse: & ClassicError*2/4 AsIs: t.ErrorList/5 AsIs: s.Mode/7 } Tile{ AsIs: t.0/31 }"Exceed block in this position"/43 >/45 Tile{ AsIs: (/15 } (/46 Tile{ AsIs: e.1/35 } )/47 Tile{ AsIs: )/30 AsIs: e./37 AsIs: >/1 } >/48 Tile{ ]] }
        refalrts::alloc_open_call(vm, context[39]);
        refalrts::alloc_close_bracket(vm, context[40]);
        refalrts::alloc_name(vm, context[41], functions[efunc_DoCheckExceedBlocks]);
        refalrts::copy_stvar(vm, context[42], context[7]);
        refalrts::alloc_chars(vm, context[43], context[44], "Exceed block in this position", 29);
        refalrts::alloc_close_call(vm, context[45]);
        refalrts::alloc_open_bracket(vm, context[46]);
        refalrts::alloc_close_bracket(vm, context[47]);
        refalrts::alloc_close_call(vm, context[48]);
        refalrts::reinit_name(context[16], functions[efunc_gen_CheckSentenceEnd_S1A2]);
        refalrts::reinit_open_call(context[8]);
        refalrts::update_name(context[4], functions[efunc_gen_ClassicError_D2]);
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[39] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[8] );
        refalrts::link_brackets( context[15], context[30] );
        refalrts::link_brackets( context[46], context[47] );
        refalrts::push_stack( vm, context[45] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[29], context[40] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[48] );
        res = refalrts::splice_evar( res, context[30], context[1] );
        res = refalrts::splice_elem( res, context[47] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_elem( res, context[46] );
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_evar( res, context[43], context[45] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[0], context[7] );
        res = refalrts::splice_evar( res, context[41], context[42] );
        res = refalrts::splice_elem( res, context[8] );
        res = refalrts::splice_elem( res, context[40] );
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[16], context[29] );
        res = refalrts::splice_elem( res, context[39] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & CheckSentenceEnd/4 t.ErrorList/5 s.Mode/7 # Condition/8 t.Pos/9 (/15 t.BodyPos/17 e.Body/23 )/16 >/1
        context[23] = context[19];
        context[24] = context[20];
        if( ! refalrts::empty_seq( context[21], context[22] ) )
          continue;
        // closed e.Body as range 23
        //DEBUG: t.ErrorList: 5
        //DEBUG: t.Pos: 9
        //DEBUG: t.BodyPos: 17
        //DEBUG: s.Mode: 7
        //DEBUG: e.Body: 23

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & CheckSentenceEnd/4 {REMOVED TILE} s.Mode/7 # Condition/8 t.Pos/9 {REMOVED TILE} t.BodyPos/17 {REMOVED TILE} )/16 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList/5 } Tile{ AsIs: (/15 } Tile{ AsIs: e.Body/23 } Tile{ HalfReuse: )/1 ]] }
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[15], context[1] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & CheckSentenceEnd/4 t.ErrorList/5 s.Mode/7 # Condition/8 t.Pos/9 (/15 t.BodyPos/17 e.Body/23 )/16 e.ExceedBlocks/25 >/1
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      context[26] = context[22];
      // closed e.Body as range 23
      // closed e.ExceedBlocks as range 25
      //DEBUG: t.ErrorList: 5
      //DEBUG: t.Pos: 9
      //DEBUG: t.BodyPos: 17
      //DEBUG: s.Mode: 7
      //DEBUG: e.Body: 23
      //DEBUG: e.ExceedBlocks: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.Pos/9 {REMOVED TILE} t.BodyPos/17 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentenceEnd$1=2/4 } Tile{ AsIs: (/15 } Tile{ AsIs: e.Body/23 } Tile{ HalfReuse: )/8 } </27 & DoCheckExceedBlocks@0/28 Tile{ AsIs: s.Mode/7 } Tile{ AsIs: t.ErrorList/5 } (/29 Tile{ AsIs: )/16 AsIs: e.ExceedBlocks/25 AsIs: >/1 } >/30 Tile{ ]] }
      refalrts::alloc_open_call(vm, context[27]);
      refalrts::alloc_name(vm, context[28], functions[efunc_gen_DoCheckExceedBlocks_Z0]);
      refalrts::alloc_open_bracket(vm, context[29]);
      refalrts::alloc_close_call(vm, context[30]);
      refalrts::update_name(context[4], functions[efunc_gen_CheckSentenceEnd_S1A2]);
      refalrts::reinit_close_bracket(context[8]);
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[27] );
      refalrts::link_brackets( context[29], context[16] );
      refalrts::link_brackets( context[15], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_evar( res, context[16], context[1] );
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[15] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & CheckSentenceEnd/4 t.ErrorList/5 s.Mode/7 s.PartType/8 t.Pos/9 (/15 t.BodyPos/17 e.Body/19 )/16 e.ExceedBlocks/21 >/1
    context[19] = context[13];
    context[20] = context[14];
    context[21] = context[11];
    context[22] = context[12];
    // closed e.Body as range 19
    // closed e.ExceedBlocks as range 21
    //DEBUG: t.ErrorList: 5
    //DEBUG: t.Pos: 9
    //DEBUG: t.BodyPos: 17
    //DEBUG: s.Mode: 7
    //DEBUG: s.PartType: 8
    //DEBUG: e.Body: 19
    //DEBUG: e.ExceedBlocks: 21

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} t.BodyPos/17 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </23 & CheckSentenceEnd$1=1/24 (/25 Tile{ AsIs: e.Body/19 } )/26 s.Mode/7/27 (/28 Tile{ AsIs: e.ExceedBlocks/21 } Tile{ AsIs: )/16 } Tile{ AsIs: </0 Reuse: & CheckMistakenAssign*2/4 AsIs: t.ErrorList/5 AsIs: s.Mode/7 AsIs: s.PartType/8 AsIs: t.Pos/9 HalfReuse: >/15 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_CheckSentenceEnd_S1A1]);
    refalrts::alloc_open_bracket(vm, context[25]);
    refalrts::alloc_close_bracket(vm, context[26]);
    refalrts::copy_stvar(vm, context[27], context[7]);
    refalrts::alloc_open_bracket(vm, context[28]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckMistakenAssign_D2]);
    refalrts::reinit_close_call(context[15]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[28], context[16] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[0], context[15] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[26], context[28] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[23], context[25] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSentenceEnd/4 t.new6/5 s.new7/7 s.new8/8 t.new9/9 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & CheckSentenceEnd/4 t.ErrorList/5 s.Mode/7 # Condition/8 t.Pos/9 >/1
    if( ! refalrts::ident_term( identifiers[ident_Condition], context[8] ) )
      continue;
    //DEBUG: t.ErrorList: 5
    //DEBUG: t.Pos: 9
    //DEBUG: s.Mode: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Mode/7 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList/5 } Tile{ AsIs: t.Pos/9 } 'M'/11 Tile{ HalfReuse: 'i'/8 }"staken \',\' for \'=\'"/12 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_char(vm, context[11], 'M');
    refalrts::alloc_chars(vm, context[12], context[13], "staken \',\' for \'=\'", 18);
    refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
    refalrts::reinit_char(context[8], 'i');
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::splice_to_freelist_open( vm, context[6], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSentenceEnd/4 t.ErrorList/5 s.Mode/7 # Assign/8 t.Pos/9 >/1
  if( ! refalrts::ident_term( identifiers[ident_Assign], context[8] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.ErrorList: 5
  //DEBUG: t.Pos: 9
  //DEBUG: s.Mode: 7

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CheckSentenceEnd/4 {REMOVED TILE} s.Mode/7 # Assign/8 t.Pos/9 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList/5 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CheckSentenceEnd("CheckSentenceEnd", COOKIE1_, COOKIE2_, func_CheckSentenceEnd);


static refalrts::FnResult func_CheckMistakenAssign(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & CheckMistakenAssign/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckMistakenAssign/4 t.new1/5 s.new2/7 s.new3/8 t.new4/9 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[8], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & CheckMistakenAssign/4 t.new5/5 s.new6/7 # Assign/8 t.new7/9 >/1
    if( ! refalrts::ident_term( identifiers[ident_Assign], context[8] ) )
      continue;
    do {
      // </0 & CheckMistakenAssign/4 t.ErrorList/5 # Classic/7 # Assign/8 t.Pos/9 >/1
      if( ! refalrts::ident_term( identifiers[ident_Classic], context[7] ) )
        continue;
      //DEBUG: t.ErrorList: 5
      //DEBUG: t.Pos: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList/5 } Tile{ AsIs: t.Pos/9 } 'M'/11 Tile{ HalfReuse: 'i'/7 HalfReuse: 's'/8 }"taken \'=\' for \',\' in the classic mode"/12 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_char(vm, context[11], 'M');
      refalrts::alloc_chars(vm, context[12], context[13], "taken \'=\' for \',\' in the classic mode", 37);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_char(context[7], 'i');
      refalrts::reinit_char(context[8], 's');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[12], context[13] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & CheckMistakenAssign/4 t.ErrorList/5 # Extended/7 # Assign/8 t.Pos/9 >/1
      if( ! refalrts::ident_term( identifiers[ident_Extended], context[7] ) )
        continue;
      //DEBUG: t.ErrorList: 5
      //DEBUG: t.Pos: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & CheckMistakenAssign/4 {REMOVED TILE} # Extended/7 # Assign/8 t.Pos/9 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList/5 } Tile{ ]] }
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[5], context[6] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & CheckMistakenAssign/4 t.ErrorList/5 s.Mode/7 # Assign/8 t.Pos/9 >/1
    //DEBUG: t.ErrorList: 5
    //DEBUG: t.Pos: 9
    //DEBUG: s.Mode: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ClassicError*2/4 AsIs: t.ErrorList/5 AsIs: s.Mode/7 } Tile{ AsIs: t.Pos/9 } 'M'/11 Tile{ HalfReuse: 'i'/8 }"staken \'=\' for \',\' in the classic mode"/12 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_char(vm, context[11], 'M');
    refalrts::alloc_chars(vm, context[12], context[13], "staken \'=\' for \',\' in the classic mode", 38);
    refalrts::update_name(context[4], functions[efunc_gen_ClassicError_D2]);
    refalrts::reinit_char(context[8], 'i');
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckMistakenAssign/4 t.ErrorList/5 s.Mode/7 # Condition/8 t.Pos/9 >/1
  if( ! refalrts::ident_term( identifiers[ident_Condition], context[8] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.ErrorList: 5
  //DEBUG: t.Pos: 9
  //DEBUG: s.Mode: 7

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CheckMistakenAssign/4 {REMOVED TILE} s.Mode/7 # Condition/8 t.Pos/9 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList/5 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CheckMistakenAssign("CheckMistakenAssign", COOKIE1_, COOKIE2_, func_CheckMistakenAssign);


static refalrts::FnResult func_SentencePart(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & SentencePart/4 t.ErrorList/5 s.Mode/7 e.Tokens/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Tokens as range 2
  //DEBUG: t.ErrorList: 5
  //DEBUG: s.Mode: 7
  //DEBUG: e.Tokens: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </8 & SentencePart-AfterPattern/9 s.Mode/7/10 Tile{ AsIs: </0 Reuse: & Pattern/4 AsIs: t.ErrorList/5 AsIs: s.Mode/7 AsIs: e.Tokens/2 AsIs: >/1 } >/11 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[8]);
  refalrts::alloc_name(vm, context[9], functions[efunc_SentencePartm_AfterPattern]);
  refalrts::copy_stvar(vm, context[10], context[7]);
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_Pattern]);
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[8], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_SentencePart("SentencePart", COOKIE1_, COOKIE2_, func_SentencePart);


static refalrts::FnResult func_gen_SentencePartm_AfterPattern_B1S1A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & SentencePart-AfterPattern:1$1=2/4 t.Pattern/5 s.PartType/7 t.Pos/8 t.ErrorList$a/10 t.Result/12 (/16 e.Blocks/14 )/17 e.Tokens$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[9] = refalrts::tvar_left( context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  context[11] = refalrts::tvar_left( context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  context[13] = refalrts::tvar_left( context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.Blocks as range 14
  // closed e.Tokens$a as range 2
  //DEBUG: t.Pattern: 5
  //DEBUG: s.PartType: 7
  //DEBUG: t.Pos: 8
  //DEBUG: t.ErrorList$a: 10
  //DEBUG: t.Result: 12
  //DEBUG: e.Blocks: 14
  //DEBUG: e.Tokens$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & SentencePart-AfterPattern:1$1=2/4 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList$a/10 } Tile{ AsIs: t.Pattern/5 AsIs: s.PartType/7 AsIs: t.Pos/8 } Tile{ AsIs: t.Result/12 AsIs: (/16 AsIs: e.Blocks/14 AsIs: )/17 } Tile{ AsIs: e.Tokens$a/2 } Tile{ ]] }
  refalrts::link_brackets( context[16], context[17] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[12], context[17] );
  res = refalrts::splice_evar( res, context[5], context[9] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_SentencePartm_AfterPattern_B1S1A2("SentencePart-AfterPattern:1$1=2", COOKIE1_, COOKIE2_, func_gen_SentencePartm_AfterPattern_B1S1A2);


static refalrts::FnResult func_gen_SentencePartm_AfterPattern_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 42 elems
  refalrts::Iter context[42];
  refalrts::zeros( context, 42 );
  // </0 & SentencePart-AfterPattern:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & SentencePart-AfterPattern:1/4 t.new1/10 t.new2/12 s.new3/14 (/17 e.new4/15 )/18 t.new5/19 (/7 s.new6/9 t.new7/21 e.new8/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::svar_left( context[9], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  context[11] = refalrts::tvar_left( context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  context[13] = refalrts::tvar_left( context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[14], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.new4 as range 15
  context[20] = refalrts::tvar_left( context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[22] = refalrts::tvar_left( context[21], context[5], context[6] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  // closed e.new8 as range 5
  do {
    // </0 & SentencePart-AfterPattern:1/4 t.new9/10 t.new10/12 s.new11/14 (/17 e.new13/23 )/18 t.new12/19 (/7 s.new14/9 t.new15/21 )/8 >/1
    context[23] = context[15];
    context[24] = context[16];
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    // closed e.new13 as range 23
    do {
      // </0 & SentencePart-AfterPattern:1/4 t.Pattern/10 t.ErrorList/12 s.Mode/14 (/17 e.Tokens/25 )/18 t.NextToken/19 (/7 s.PartToken/9 t.Pos/21 )/8 >/1
      context[25] = context[23];
      context[26] = context[24];
      // closed e.Tokens as range 25
      //DEBUG: t.Pattern: 10
      //DEBUG: t.ErrorList: 12
      //DEBUG: t.NextToken: 19
      //DEBUG: t.Pos: 21
      //DEBUG: s.Mode: 14
      //DEBUG: s.PartToken: 9
      //DEBUG: e.Tokens: 25
      //9: s.PartToken
      //10: t.Pattern
      //12: t.ErrorList
      //14: s.Mode
      //19: t.NextToken
      //21: t.Pos
      //25: e.Tokens

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[27]);
      refalrts::alloc_name(vm, context[29], functions[efunc_gen_SentencePartm_AfterPattern_B1S1C1]);
      refalrts::alloc_open_bracket(vm, context[30]);
      refalrts::alloc_ident(vm, context[31], identifiers[ident_TkComma]);
      refalrts::alloc_ident(vm, context[32], identifiers[ident_Condition]);
      refalrts::alloc_close_bracket(vm, context[33]);
      refalrts::alloc_open_bracket(vm, context[34]);
      refalrts::alloc_ident(vm, context[35], identifiers[ident_TkAssign]);
      refalrts::alloc_ident(vm, context[36], identifiers[ident_Assign]);
      refalrts::alloc_close_bracket(vm, context[37]);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[27] );
      res = refalrts::splice_elem( res, context[28] );
      refalrts::link_brackets( context[34], context[37] );
      res = refalrts::splice_elem( res, context[37] );
      res = refalrts::splice_elem( res, context[36] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_elem( res, context[34] );
      refalrts::link_brackets( context[30], context[33] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[27] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </27 & SentencePart-AfterPattern:1$1?1/31 e.Types-B/32 (/38 s.PartToken/40 s.PartType/41 )/39 e.Types-E/34 >/28
        context[29] = 0;
        context[30] = 0;
        context[31] = refalrts::call_left( context[29], context[30], context[27], context[28] );
        context[32] = 0;
        context[33] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[34] = context[29];
          context[35] = context[30];
          context[36] = 0;
          context[37] = 0;
          context[38] = refalrts::brackets_left( context[36], context[37], context[34], context[35] );
          if( ! context[38] )
            continue;
          refalrts::bracket_pointers(context[38], context[39]);
          if( ! refalrts::repeated_stvar_left( vm, context[40], context[9], context[36], context[37] ) )
            continue;
          // closed e.Types-E as range 34
          if( ! refalrts::svar_left( context[41], context[36], context[37] ) )
            continue;
          if( ! refalrts::empty_seq( context[36], context[37] ) )
            continue;
          //DEBUG: t.Pattern: 10
          //DEBUG: t.ErrorList: 12
          //DEBUG: t.NextToken: 19
          //DEBUG: t.Pos: 21
          //DEBUG: s.Mode: 14
          //DEBUG: s.PartToken: 9
          //DEBUG: e.Tokens: 25
          //DEBUG: e.Types-B: 32
          //DEBUG: e.Types-E: 34
          //DEBUG: s.PartType: 41

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} (/17 {REMOVED TILE} )/18 t.NextToken/19 (/7 s.PartToken/9 {REMOVED TILE} )/8 {REMOVED TILE} e.Types-B/32 (/38 s.PartToken/40 {REMOVED TILE} )/39 e.Types-E/34 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & SentencePart-AfterPattern:1$1=2/4 AsIs: t.Pattern/10 } Tile{ AsIs: s.PartType/41 } Tile{ AsIs: t.Pos/21 } Tile{ AsIs: </27 Reuse: & Result/31 } Tile{ AsIs: t.ErrorList/12 AsIs: s.Mode/14 } Tile{ AsIs: e.Tokens/25 } Tile{ AsIs: >/28 AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_gen_SentencePartm_AfterPattern_B1S1A2]);
          refalrts::update_name(context[31], functions[efunc_Result]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[28] );
          refalrts::push_stack( vm, context[27] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[28];
          res = refalrts::splice_evar( res, context[25], context[26] );
          res = refalrts::splice_evar( res, context[12], context[14] );
          res = refalrts::splice_evar( res, context[27], context[31] );
          res = refalrts::splice_evar( res, context[21], context[22] );
          res = refalrts::splice_elem( res, context[41] );
          refalrts::splice_to_freelist_open( vm, context[11], res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[32], context[33], context[29], context[30] ) );
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[27], context[28]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & SentencePart-AfterPattern:1/4 t.Pattern/10 t.ErrorList/12 s.Mode/14 (/17 e.Tokens/25 )/18 t.NextToken/19 (/7 s.EndOfPart/9 t.Pos/21 )/8 >/1
    context[25] = context[23];
    context[26] = context[24];
    // closed e.Tokens as range 25
    //DEBUG: t.Pattern: 10
    //DEBUG: t.ErrorList: 12
    //DEBUG: t.NextToken: 19
    //DEBUG: t.Pos: 21
    //DEBUG: s.Mode: 14
    //DEBUG: s.EndOfPart: 9
    //DEBUG: e.Tokens: 25
    //9: s.EndOfPart
    //10: t.Pattern
    //12: t.ErrorList
    //14: s.Mode
    //19: t.NextToken
    //21: t.Pos
    //25: e.Tokens
    //32: s.EndOfPart

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[27]);
    refalrts::alloc_name(vm, context[29], functions[efunc_gen_SentencePartm_AfterPattern_B1S2C1]);
    refalrts::alloc_open_call(vm, context[30]);
    refalrts::alloc_name(vm, context[31], functions[efunc_gen_OneOf_Z1]);
    refalrts::copy_stvar(vm, context[32], context[9]);
    refalrts::alloc_ident(vm, context[33], identifiers[ident_TkColon]);
    refalrts::alloc_ident(vm, context[34], identifiers[ident_TkSemicolon]);
    refalrts::alloc_close_call(vm, context[35]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[27] );
    res = refalrts::splice_elem( res, context[28] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[30] );
    res = refalrts::splice_elem( res, context[35] );
    res = refalrts::splice_elem( res, context[34] );
    res = refalrts::splice_elem( res, context[33] );
    res = refalrts::splice_stvar( res, context[32] );
    res = refalrts::splice_elem( res, context[31] );
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_elem( res, context[27] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </27 & SentencePart-AfterPattern:1$2?1/31 # True/32 >/28
      context[29] = 0;
      context[30] = 0;
      context[31] = refalrts::call_left( context[29], context[30], context[27], context[28] );
      context[32] = refalrts::ident_left( identifiers[ident_True], context[29], context[30] );
      if( ! context[32] )
        continue;
      if( ! refalrts::empty_seq( context[29], context[30] ) )
        continue;
      //DEBUG: t.Pattern: 10
      //DEBUG: t.ErrorList: 12
      //DEBUG: t.NextToken: 19
      //DEBUG: t.Pos: 21
      //DEBUG: s.Mode: 14
      //DEBUG: s.EndOfPart: 9
      //DEBUG: e.Tokens: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Mode/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.NextToken/19 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: </27 Reuse: & SentencePart-AfterPattern/31 HalfReuse: s.Mode14 /32 HalfReuse: </28 HalfReuse: & EL-AddErrorAt/1 } Tile{ AsIs: t.ErrorList/12 } t.Pos/21/33"Missed \',\' or \'="/35 Tile{ HalfReuse: '\''/0 HalfReuse: >/4 AsIs: t.Pattern/10 } Tile{ AsIs: (/17 } # TkComma/37 t.Pos/21/38 Tile{ AsIs: )/18 } Tile{ AsIs: (/7 AsIs: s.EndOfPart/9 AsIs: t.Pos/21 AsIs: )/8 } Tile{ AsIs: e.Tokens/25 } >/40 Tile{ ]] }
      refalrts::copy_evar(vm, context[33], context[34], context[21], context[22]);
      refalrts::alloc_chars(vm, context[35], context[36], "Missed \',\' or \'=", 16);
      refalrts::alloc_ident(vm, context[37], identifiers[ident_TkComma]);
      refalrts::copy_evar(vm, context[38], context[39], context[21], context[22]);
      refalrts::alloc_close_call(vm, context[40]);
      refalrts::update_name(context[31], functions[efunc_SentencePartm_AfterPattern]);
      refalrts::reinit_svar( context[32], context[14] );
      refalrts::reinit_open_call(context[28]);
      refalrts::reinit_name(context[1], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_char(context[0], '\'');
      refalrts::reinit_close_call(context[4]);
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[27] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::push_stack( vm, context[4] );
      refalrts::push_stack( vm, context[28] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[40] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_evar( res, context[37], context[39] );
      res = refalrts::splice_elem( res, context[17] );
      res = refalrts::splice_evar( res, context[0], context[11] );
      res = refalrts::splice_evar( res, context[33], context[36] );
      res = refalrts::splice_evar( res, context[12], context[13] );
      res = refalrts::splice_evar( res, context[27], context[1] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[27], context[28]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & SentencePart-AfterPattern:1/4 t.Pattern/10 t.ErrorList/12 s.Mode/14 (/17 e.Tokens/23 )/18 t.NextToken/19 (/7 # TkError/9 t.Pos/21 e.Info/25 )/8 >/1
    context[23] = context[15];
    context[24] = context[16];
    context[25] = context[5];
    context[26] = context[6];
    if( ! refalrts::ident_term( identifiers[ident_TkError], context[9] ) )
      continue;
    // closed e.Tokens as range 23
    // closed e.Info as range 25
    //DEBUG: t.Pattern: 10
    //DEBUG: t.ErrorList: 12
    //DEBUG: t.NextToken: 19
    //DEBUG: t.Pos: 21
    //DEBUG: s.Mode: 14
    //DEBUG: e.Tokens: 23
    //DEBUG: e.Info: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Mode/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 } Tile{ AsIs: t.ErrorList/12 } Tile{ AsIs: t.Pos/21 AsIs: e.Info/25 HalfReuse: >/8 } Tile{ AsIs: t.Pattern/10 } Tile{ HalfReuse: # Assign/1 } t.Pos/21/27 Tile{ AsIs: (/7 HalfReuse: )/9 } Tile{ AsIs: (/17 } Tile{ AsIs: )/18 AsIs: t.NextToken/19 } Tile{ AsIs: e.Tokens/23 } Tile{ ]] }
    refalrts::copy_evar(vm, context[27], context[28], context[21], context[22]);
    refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
    refalrts::reinit_close_call(context[8]);
    refalrts::reinit_ident(context[1], identifiers[ident_Assign]);
    refalrts::reinit_close_bracket(context[9]);
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[7], context[9] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[18], context[20] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[7], context[9] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[21], context[8] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & SentencePart-AfterPattern:1/4 t.Pattern/10 t.ErrorList/12 s.Mode/14 (/17 e.Tokens/15 )/18 t.NextToken/19 (/7 s.Unexpected/9 t.Pos/21 e.Info/5 )/8 >/1
  // closed e.Tokens as range 15
  // closed e.Info as range 5
  //DEBUG: t.Pattern: 10
  //DEBUG: t.ErrorList: 12
  //DEBUG: t.NextToken: 19
  //DEBUG: t.Pos: 21
  //DEBUG: s.Mode: 14
  //DEBUG: s.Unexpected: 9
  //DEBUG: e.Tokens: 15
  //DEBUG: e.Info: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Mode/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Info/5 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 } Tile{ AsIs: t.ErrorList/12 } Tile{ AsIs: t.Pos/21 }"unexpected "/23 </25 Tile{ HalfReuse: & TokName/7 AsIs: s.Unexpected/9 } >/26", expected valid Refal expression, \'=\', \',\', \':\' or \';"/27 Tile{ HalfReuse: '\''/8 AsIs: >/1 } Tile{ AsIs: t.Pattern/10 } # Assign/29 t.Pos/21/30 Tile{ AsIs: (/17 } )/32 (/33 Tile{ AsIs: )/18 AsIs: t.NextToken/19 } Tile{ AsIs: e.Tokens/15 } Tile{ ]] }
  refalrts::alloc_chars(vm, context[23], context[24], "unexpected ", 11);
  refalrts::alloc_open_call(vm, context[25]);
  refalrts::alloc_close_call(vm, context[26]);
  refalrts::alloc_chars(vm, context[27], context[28], ", expected valid Refal expression, \'=\', \',\', \':\' or \';", 54);
  refalrts::alloc_ident(vm, context[29], identifiers[ident_Assign]);
  refalrts::copy_evar(vm, context[30], context[31], context[21], context[22]);
  refalrts::alloc_close_bracket(vm, context[32]);
  refalrts::alloc_open_bracket(vm, context[33]);
  refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
  refalrts::reinit_name(context[7], functions[efunc_TokName]);
  refalrts::reinit_char(context[8], '\'');
  refalrts::link_brackets( context[33], context[18] );
  refalrts::link_brackets( context[17], context[32] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[26] );
  refalrts::push_stack( vm, context[25] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[18], context[20] );
  res = refalrts::splice_evar( res, context[32], context[33] );
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[29], context[31] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_evar( res, context[8], context[1] );
  res = refalrts::splice_evar( res, context[26], context[28] );
  res = refalrts::splice_evar( res, context[7], context[9] );
  res = refalrts::splice_evar( res, context[23], context[25] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[12], context[13] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_SentencePartm_AfterPattern_B1("SentencePart-AfterPattern:1", COOKIE1_, COOKIE2_, func_gen_SentencePartm_AfterPattern_B1);


static refalrts::FnResult func_SentencePartm_AfterPattern(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & SentencePart-AfterPattern/4 s.Mode/5 t.ErrorList/6 t.Pattern/8 t.NextToken/10 e.Tokens/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = refalrts::tvar_left( context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  context[9] = refalrts::tvar_left( context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  context[11] = refalrts::tvar_left( context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tokens as range 2
  //DEBUG: s.Mode: 5
  //DEBUG: t.ErrorList: 6
  //DEBUG: t.Pattern: 8
  //DEBUG: t.NextToken: 10
  //DEBUG: e.Tokens: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & SentencePart-AfterPattern:1/4 } Tile{ AsIs: t.Pattern/8 } Tile{ AsIs: t.ErrorList/6 } Tile{ AsIs: s.Mode/5 } (/12 Tile{ AsIs: e.Tokens/2 } )/13 Tile{ AsIs: t.NextToken/10 } t.NextToken/10/14 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::copy_evar(vm, context[14], context[15], context[10], context[11]);
  refalrts::update_name(context[4], functions[efunc_gen_SentencePartm_AfterPattern_B1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[8], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_SentencePartm_AfterPattern("SentencePart-AfterPattern", COOKIE1_, COOKIE2_, func_SentencePartm_AfterPattern);


static refalrts::FnResult func_Pattern(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Pattern/4 t.ErrorList/5 s.Mode/7 e.Tokens/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Tokens as range 2
  //DEBUG: t.ErrorList: 5
  //DEBUG: s.Mode: 7
  //DEBUG: e.Tokens: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Expression-CheckBrackets/4 } s.Mode/7/8 # Pattern/9 </10 & DoTokenChain/11 Tile{ AsIs: s.Mode/7 } # Pattern/12 Tile{ AsIs: t.ErrorList/5 } (/13 )/14 Tile{ AsIs: e.Tokens/2 } >/15 Tile{ AsIs: >/1 ]] }
  refalrts::copy_stvar(vm, context[8], context[7]);
  refalrts::alloc_ident(vm, context[9], identifiers[ident_Pattern]);
  refalrts::alloc_open_call(vm, context[10]);
  refalrts::alloc_name(vm, context[11], functions[efunc_DoTokenChain]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Pattern]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::alloc_close_call(vm, context[15]);
  refalrts::update_name(context[4], functions[efunc_Expressionm_CheckBrackets]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[10] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[8], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Pattern("Pattern", COOKIE1_, COOKIE2_, func_Pattern);


static refalrts::FnResult func_Result(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & Result/4 t.ErrorList/5 s.Mode/7 e.Tokens/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Tokens as range 2
  //DEBUG: t.ErrorList: 5
  //DEBUG: s.Mode: 7
  //DEBUG: e.Tokens: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Result-Blocks/4 } s.Mode/7/8 (/9 )/10 </11 & Expression-CheckBrackets/12 Tile{ AsIs: s.Mode/7 } # Result/13 </14 & DoTokenChain/15 s.Mode/7/16 # Result/17 Tile{ AsIs: t.ErrorList/5 } (/18 )/19 Tile{ AsIs: e.Tokens/2 } >/20 >/21 Tile{ AsIs: >/1 ]] }
  refalrts::copy_stvar(vm, context[8], context[7]);
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_Expressionm_CheckBrackets]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_Result]);
  refalrts::alloc_open_call(vm, context[14]);
  refalrts::alloc_name(vm, context[15], functions[efunc_DoTokenChain]);
  refalrts::copy_stvar(vm, context[16], context[7]);
  refalrts::alloc_ident(vm, context[17], identifiers[ident_Result]);
  refalrts::alloc_open_bracket(vm, context[18]);
  refalrts::alloc_close_bracket(vm, context[19]);
  refalrts::alloc_close_call(vm, context[20]);
  refalrts::alloc_close_call(vm, context[21]);
  refalrts::update_name(context[4], functions[efunc_Resultm_Blocks]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[21] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[20] );
  refalrts::push_stack( vm, context[14] );
  refalrts::link_brackets( context[18], context[19] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[20], context[21] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[13], context[17] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[8], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Result("Result", COOKIE1_, COOKIE2_, func_Result);


static refalrts::FnResult func_gen_Resultm_Blocks_S3A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & Result-Blocks$3=1/4 s.Mode/5 (/8 e.Blocks/6 )/9 t.ColonPos/10 t.Result/12 t.ErrorList$a/14 (/18 e.Body/16 )/19 e.Tokens$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.Blocks as range 6
  context[11] = refalrts::tvar_left( context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  context[13] = refalrts::tvar_left( context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  context[15] = refalrts::tvar_left( context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  context[16] = 0;
  context[17] = 0;
  context[18] = refalrts::brackets_left( context[16], context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[18], context[19]);
  // closed e.Body as range 16
  // closed e.Tokens$a as range 2
  //DEBUG: s.Mode: 5
  //DEBUG: e.Blocks: 6
  //DEBUG: t.ColonPos: 10
  //DEBUG: t.Result: 12
  //DEBUG: t.ErrorList$a: 14
  //DEBUG: e.Body: 16
  //DEBUG: e.Tokens$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Result-Blocks@1/4 AsIs: s.Mode/5 AsIs: (/8 AsIs: e.Blocks/6 AsIs: )/9 AsIs: t.ColonPos/10 } Tile{ AsIs: (/18 AsIs: e.Body/16 AsIs: )/19 } Tile{ AsIs: t.ErrorList$a/14 } Tile{ AsIs: t.Result/12 } Tile{ AsIs: e.Tokens$a/2 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Resultm_Blocks_Z1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[18], context[19] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[12], context[13] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Resultm_Blocks_S3A1("Result-Blocks$3=1", COOKIE1_, COOKIE2_, func_gen_Resultm_Blocks_S3A1);


static refalrts::FnResult func_Resultm_Blocks(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 48 elems
  refalrts::Iter context[48];
  refalrts::zeros( context, 48 );
  // </0 & Result-Blocks/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Result-Blocks/4 s.new1/5 (/8 e.new2/6 )/9 t.new3/10 t.new4/12 e.new5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new2 as range 6
  context[11] = refalrts::tvar_left( context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  context[13] = refalrts::tvar_left( context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  // closed e.new5 as range 2
  do {
    // </0 & Result-Blocks/4 s.new6/5 (/8 e.new13/14 )/9 t.new7/10 t.new8/12 (/20 s.new9/22 e.new10/18 t.new11/23 )/21 e.new12/16 >/1
    context[14] = context[6];
    context[15] = context[7];
    context[16] = context[2];
    context[17] = context[3];
    context[18] = 0;
    context[19] = 0;
    context[20] = refalrts::brackets_left( context[18], context[19], context[16], context[17] );
    if( ! context[20] )
      continue;
    refalrts::bracket_pointers(context[20], context[21]);
    // closed e.new13 as range 14
    // closed e.new12 as range 16
    if( ! refalrts::svar_left( context[22], context[18], context[19] ) )
      continue;
    context[24] = refalrts::tvar_right( context[23], context[18], context[19] );
    if( ! context[24] )
      continue;
    // closed e.new10 as range 18
    do {
      // </0 & Result-Blocks/4 s.Mode/5 (/8 e.Blocks/25 )/9 t.ErrorList/10 t.Result/12 (/20 # TkRefal5Mode/22 t.ModePos/31 s.NewMode/23 )/21 e.Tokens/29 >/1
      context[25] = context[14];
      context[26] = context[15];
      context[27] = context[18];
      context[28] = context[19];
      context[29] = context[16];
      context[30] = context[17];
      if( ! refalrts::svar_term( context[23], context[23] ) )
        continue;
      if( ! refalrts::ident_term( identifiers[ident_TkRefal5Mode], context[22] ) )
        continue;
      // closed e.Blocks as range 25
      // closed e.Tokens as range 29
      context[32] = refalrts::tvar_left( context[31], context[27], context[28] );
      if( ! context[32] )
        continue;
      if( ! refalrts::empty_seq( context[27], context[28] ) )
        continue;
      //DEBUG: t.ErrorList: 10
      //DEBUG: t.Result: 12
      //DEBUG: s.NewMode: 23
      //DEBUG: s.Mode: 5
      //DEBUG: e.Blocks: 25
      //DEBUG: e.Tokens: 29
      //DEBUG: t.ModePos: 31

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Mode/5 {REMOVED TILE} (/20 # TkRefal5Mode/22 t.ModePos/31 {REMOVED TILE} )/21 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Result-Blocks/4 } Tile{ AsIs: s.NewMode/23 } Tile{ AsIs: (/8 AsIs: e.Blocks/25 AsIs: )/9 AsIs: t.ErrorList/10 AsIs: t.Result/12 } Tile{ AsIs: e.Tokens/29 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[8], context[13] );
      res = refalrts::splice_elem( res, context[23] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Result-Blocks/4 s.new14/5 (/8 e.new20/25 )/9 t.new15/10 t.new16/12 (/20 s.new18/22 t.new19/23 )/21 e.new17/27 >/1
    context[25] = context[14];
    context[26] = context[15];
    context[27] = context[16];
    context[28] = context[17];
    if( ! refalrts::empty_seq( context[18], context[19] ) )
      continue;
    // closed e.new20 as range 25
    // closed e.new17 as range 27
    do {
      // </0 & Result-Blocks/4 s.new21/5 (/8 e.new29/29 )/9 t.new22/10 t.new23/12 (/20 # TkColon/22 t.new28/23 )/21 (/35 s.new24/37 e.new25/33 t.new26/38 )/36 e.new27/31 >/1
      context[29] = context[25];
      context[30] = context[26];
      context[31] = context[27];
      context[32] = context[28];
      if( ! refalrts::ident_term( identifiers[ident_TkColon], context[22] ) )
        continue;
      context[33] = 0;
      context[34] = 0;
      context[35] = refalrts::brackets_left( context[33], context[34], context[31], context[32] );
      if( ! context[35] )
        continue;
      refalrts::bracket_pointers(context[35], context[36]);
      // closed e.new29 as range 29
      // closed e.new27 as range 31
      if( ! refalrts::svar_left( context[37], context[33], context[34] ) )
        continue;
      context[39] = refalrts::tvar_right( context[38], context[33], context[34] );
      if( ! context[39] )
        continue;
      // closed e.new25 as range 33
      do {
        // </0 & Result-Blocks/4 s.Mode/5 (/8 e.Blocks/40 )/9 t.ErrorList/10 t.Result/12 (/20 # TkColon/22 t.ColonPos/23 )/21 (/35 # TkRefal5Mode/37 t.ModePos/46 s.NewMode/38 )/36 e.Tokens/44 >/1
        context[40] = context[29];
        context[41] = context[30];
        context[42] = context[33];
        context[43] = context[34];
        context[44] = context[31];
        context[45] = context[32];
        if( ! refalrts::svar_term( context[38], context[38] ) )
          continue;
        if( ! refalrts::ident_term( identifiers[ident_TkRefal5Mode], context[37] ) )
          continue;
        // closed e.Blocks as range 40
        // closed e.Tokens as range 44
        context[47] = refalrts::tvar_left( context[46], context[42], context[43] );
        if( ! context[47] )
          continue;
        if( ! refalrts::empty_seq( context[42], context[43] ) )
          continue;
        //DEBUG: t.ErrorList: 10
        //DEBUG: t.Result: 12
        //DEBUG: t.ColonPos: 23
        //DEBUG: s.NewMode: 38
        //DEBUG: s.Mode: 5
        //DEBUG: e.Blocks: 40
        //DEBUG: e.Tokens: 44
        //DEBUG: t.ModePos: 46

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Mode/5 {REMOVED TILE} (/35 # TkRefal5Mode/37 t.ModePos/46 {REMOVED TILE} )/36 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Result-Blocks/4 } Tile{ AsIs: s.NewMode/38 } Tile{ AsIs: (/8 AsIs: e.Blocks/40 AsIs: )/9 AsIs: t.ErrorList/10 AsIs: t.Result/12 AsIs: (/20 AsIs: # TkColon/22 AsIs: t.ColonPos/23 AsIs: )/21 } Tile{ AsIs: e.Tokens/44 } Tile{ AsIs: >/1 ]] }
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[20], context[21] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[44], context[45] );
        res = refalrts::splice_evar( res, context[8], context[21] );
        res = refalrts::splice_elem( res, context[38] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Result-Blocks/4 s.Mode/5 (/8 e.Blocks/40 )/9 t.ErrorList/10 t.Result/12 (/20 # TkColon/22 t.ColonPos/23 )/21 (/35 # TkOpenBlock/37 t.BlockPos/38 )/36 e.Tokens/42 >/1
      context[40] = context[29];
      context[41] = context[30];
      context[42] = context[31];
      context[43] = context[32];
      if( ! refalrts::ident_term( identifiers[ident_TkOpenBlock], context[37] ) )
        continue;
      if( ! refalrts::empty_seq( context[33], context[34] ) )
        continue;
      // closed e.Blocks as range 40
      // closed e.Tokens as range 42
      //DEBUG: t.ErrorList: 10
      //DEBUG: t.Result: 12
      //DEBUG: t.ColonPos: 23
      //DEBUG: t.BlockPos: 38
      //DEBUG: s.Mode: 5
      //DEBUG: e.Blocks: 40
      //DEBUG: e.Tokens: 42

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Result-Blocks$3=1/4 AsIs: s.Mode/5 AsIs: (/8 AsIs: e.Blocks/40 AsIs: )/9 } Tile{ AsIs: t.ColonPos/23 } Tile{ AsIs: t.Result/12 HalfReuse: </20 HalfReuse: & Block/22 } Tile{ AsIs: t.ErrorList/10 } Tile{ HalfReuse: s.Mode5 /21 AsIs: (/35 AsIs: # TkOpenBlock/37 AsIs: t.BlockPos/38 AsIs: )/36 AsIs: e.Tokens/42 AsIs: >/1 } >/44 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[44]);
      refalrts::update_name(context[4], functions[efunc_gen_Resultm_Blocks_S3A1]);
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[22], functions[efunc_Block]);
      refalrts::reinit_svar( context[21], context[5] );
      refalrts::push_stack( vm, context[44] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[35], context[36] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[44] );
      res = refalrts::splice_evar( res, context[21], context[1] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      res = refalrts::splice_evar( res, context[12], context[22] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Result-Blocks/4 s.Mode/5 (/8 e.Blocks/29 )/9 t.ErrorList/10 t.Result/12 (/20 # TkOpenBlock/22 t.BlockPos/23 )/21 e.Tokens/31 >/1
    context[29] = context[25];
    context[30] = context[26];
    context[31] = context[27];
    context[32] = context[28];
    if( ! refalrts::ident_term( identifiers[ident_TkOpenBlock], context[22] ) )
      continue;
    // closed e.Blocks as range 29
    // closed e.Tokens as range 31
    //DEBUG: t.ErrorList: 10
    //DEBUG: t.Result: 12
    //DEBUG: t.BlockPos: 23
    //DEBUG: s.Mode: 5
    //DEBUG: e.Blocks: 29
    //DEBUG: e.Tokens: 31

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Result-Blocks/4 AsIs: s.Mode/5 AsIs: (/8 AsIs: e.Blocks/29 AsIs: )/9 } </33 & EL-AddErrorAt/34 Tile{ AsIs: t.ErrorList/10 } t.BlockPos/23/35"Missed \':\'"/37 >/39 Tile{ AsIs: t.Result/12 } (/40 # TkColon/41 t.BlockPos/23/42 )/44 Tile{ AsIs: (/20 AsIs: # TkOpenBlock/22 AsIs: t.BlockPos/23 AsIs: )/21 AsIs: e.Tokens/31 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_ELm_AddErrorAt]);
    refalrts::copy_evar(vm, context[35], context[36], context[23], context[24]);
    refalrts::alloc_chars(vm, context[37], context[38], "Missed \':\'", 10);
    refalrts::alloc_close_call(vm, context[39]);
    refalrts::alloc_open_bracket(vm, context[40]);
    refalrts::alloc_ident(vm, context[41], identifiers[ident_TkColon]);
    refalrts::copy_evar(vm, context[42], context[43], context[23], context[24]);
    refalrts::alloc_close_bracket(vm, context[44]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[40], context[44] );
    refalrts::push_stack( vm, context[39] );
    refalrts::push_stack( vm, context[33] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[20];
    res = refalrts::splice_evar( res, context[40], context[44] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_evar( res, context[35], context[39] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Result-Blocks/4 s.Mode/5 (/8 e.Blocks/6 )/9 t.ErrorList/10 t.Result/12 e.Tokens/2 >/1
  // closed e.Blocks as range 6
  // closed e.Tokens as range 2
  //DEBUG: t.ErrorList: 10
  //DEBUG: t.Result: 12
  //DEBUG: s.Mode: 5
  //DEBUG: e.Blocks: 6
  //DEBUG: e.Tokens: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Result-Blocks/4 s.Mode/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList/10 AsIs: t.Result/12 } Tile{ AsIs: (/8 AsIs: e.Blocks/6 AsIs: )/9 } Tile{ AsIs: e.Tokens/2 } Tile{ ]] }
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[8], context[9] );
  res = refalrts::splice_evar( res, context[10], context[13] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Resultm_Blocks("Result-Blocks", COOKIE1_, COOKIE2_, func_Resultm_Blocks);


static refalrts::FnResult func_Expression(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & Expression/4 t.ErrorList/5 s.Mode/7 s.Kind/8 e.Tokens/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[8], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Tokens as range 2
  //DEBUG: t.ErrorList: 5
  //DEBUG: s.Mode: 7
  //DEBUG: s.Kind: 8
  //DEBUG: e.Tokens: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Expression-CheckBrackets/10 s.Mode/7/11 s.Kind/8/12 Tile{ AsIs: </0 Reuse: & TokenChain/4 AsIs: t.ErrorList/5 AsIs: s.Mode/7 AsIs: s.Kind/8 AsIs: e.Tokens/2 AsIs: >/1 } >/13 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_Expressionm_CheckBrackets]);
  refalrts::copy_stvar(vm, context[11], context[7]);
  refalrts::copy_stvar(vm, context[12], context[8]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_TokenChain]);
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Expression("Expression", COOKIE1_, COOKIE2_, func_Expression);


static refalrts::FnResult func_TokenChain(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & TokenChain/4 t.ErrorList/5 s.Mode/7 s.Kind/8 e.Tokens/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[8], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Tokens as range 2
  //DEBUG: t.ErrorList: 5
  //DEBUG: s.Mode: 7
  //DEBUG: s.Kind: 8
  //DEBUG: e.Tokens: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 } Tile{ AsIs: s.Mode/7 AsIs: s.Kind/8 } Tile{ AsIs: t.ErrorList/5 } (/9 )/10 Tile{ AsIs: e.Tokens/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_TokenChain("TokenChain", COOKIE1_, COOKIE2_, func_TokenChain);


static refalrts::FnResult func_gen_DoTokenChain_B1S6A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & DoTokenChain:1$6=2/4 s.Mode/5 s.Kind/6 (/9 e.Collected/7 )/10 (/13 e.BracketTerms/11 )/14 t.ErrorList$b/15 e.Tokens$b/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.Collected as range 7
  // closed e.BracketTerms as range 11
  context[16] = refalrts::tvar_left( context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tokens$b as range 2
  //DEBUG: s.Mode: 5
  //DEBUG: s.Kind: 6
  //DEBUG: e.Collected: 7
  //DEBUG: e.BracketTerms: 11
  //DEBUG: t.ErrorList$b: 15
  //DEBUG: e.Tokens$b: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 AsIs: s.Mode/5 AsIs: s.Kind/6 } Tile{ AsIs: t.ErrorList$b/15 } Tile{ AsIs: (/9 AsIs: e.Collected/7 HalfReuse: (/10 HalfReuse: # Brackets/13 AsIs: e.BracketTerms/11 AsIs: )/14 } )/17 Tile{ AsIs: e.Tokens$b/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[17]);
  refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
  refalrts::reinit_open_bracket(context[10]);
  refalrts::reinit_ident(context[13], identifiers[ident_Brackets]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[17] );
  refalrts::link_brackets( context[10], context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[9], context[14] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoTokenChain_B1S6A2("DoTokenChain:1$6=2", COOKIE1_, COOKIE2_, func_gen_DoTokenChain_B1S6A2);


static refalrts::FnResult func_gen_DoTokenChain_B1S6A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 45 elems
  refalrts::Iter context[45];
  refalrts::zeros( context, 45 );
  // </0 & DoTokenChain:1$6=1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoTokenChain:1$6=1/4 s.new1/5 s.new2/6 (/9 e.new3/7 )/10 t.new4/11 (/15 e.new5/13 )/16 e.new6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new3 as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new5 as range 13
  // closed e.new6 as range 2
  do {
    // </0 & DoTokenChain:1$6=1/4 s.new7/5 s.new8/6 (/9 e.new14/17 )/10 t.new9/11 (/15 e.new15/19 )/16 (/25 s.new10/27 t.new11/28 e.new12/23 )/26 e.new13/21 >/1
    context[17] = context[7];
    context[18] = context[8];
    context[19] = context[13];
    context[20] = context[14];
    context[21] = context[2];
    context[22] = context[3];
    context[23] = 0;
    context[24] = 0;
    context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
    if( ! context[25] )
      continue;
    refalrts::bracket_pointers(context[25], context[26]);
    // closed e.new14 as range 17
    // closed e.new15 as range 19
    // closed e.new13 as range 21
    if( ! refalrts::svar_left( context[27], context[23], context[24] ) )
      continue;
    context[29] = refalrts::tvar_left( context[28], context[23], context[24] );
    if( ! context[29] )
      continue;
    // closed e.new12 as range 23
    do {
      // </0 & DoTokenChain:1$6=1/4 s.Mode/5 s.Kind/6 (/9 e.Collected/30 )/10 t.ErrorList$a/11 (/15 e.BracketTerms/32 )/16 (/25 # TkCloseBracket/27 t.1/28 )/26 e./34 >/1
      context[30] = context[17];
      context[31] = context[18];
      context[32] = context[19];
      context[33] = context[20];
      context[34] = context[21];
      context[35] = context[22];
      if( ! refalrts::ident_term( identifiers[ident_TkCloseBracket], context[27] ) )
        continue;
      if( ! refalrts::empty_seq( context[23], context[24] ) )
        continue;
      // closed e.Collected as range 30
      // closed e.BracketTerms as range 32
      // closed e. as range 34
      //DEBUG: t.ErrorList$a: 11
      //DEBUG: t.1: 28
      //DEBUG: s.Mode: 5
      //DEBUG: s.Kind: 6
      //DEBUG: e.Collected: 30
      //DEBUG: e.BracketTerms: 32
      //DEBUG: e.: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} (/25 # TkCloseBracket/27 t.1/28 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 AsIs: s.Mode/5 AsIs: s.Kind/6 } Tile{ AsIs: t.ErrorList$a/11 } Tile{ AsIs: (/9 AsIs: e.Collected/30 HalfReuse: (/10 } Tile{ HalfReuse: # Brackets/15 AsIs: e.BracketTerms/32 AsIs: )/16 } Tile{ AsIs: )/26 AsIs: e./34 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_ident(context[15], identifiers[ident_Brackets]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[26] );
      refalrts::link_brackets( context[10], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[26];
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      refalrts::splice_to_freelist_open( vm, context[6], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoTokenChain:1$6=1/4 s.Mode/5 s.Kind/6 (/9 e.Collected/30 )/10 t.ErrorList$a/11 (/15 e.BracketTerms/32 )/16 (/25 s.Type/27 t.1/28 e.2/34 )/26 e./36 >/1
    context[30] = context[17];
    context[31] = context[18];
    context[32] = context[19];
    context[33] = context[20];
    context[34] = context[23];
    context[35] = context[24];
    context[36] = context[21];
    context[37] = context[22];
    // closed e.Collected as range 30
    // closed e.BracketTerms as range 32
    // closed e.2 as range 34
    // closed e. as range 36
    //DEBUG: t.ErrorList$a: 11
    //DEBUG: t.1: 28
    //DEBUG: s.Mode: 5
    //DEBUG: s.Kind: 6
    //DEBUG: s.Type: 27
    //DEBUG: e.Collected: 30
    //DEBUG: e.BracketTerms: 32
    //DEBUG: e.2: 34
    //DEBUG: e.: 36

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain:1$6=2/4 AsIs: s.Mode/5 AsIs: s.Kind/6 AsIs: (/9 AsIs: e.Collected/30 AsIs: )/10 } Tile{ AsIs: (/15 } Tile{ AsIs: e.BracketTerms/32 } )/38 </39 & EL-AddErrorAt/40 Tile{ AsIs: t.ErrorList$a/11 } t.1/28/41"Missed \')\'"/43 Tile{ HalfReuse: >/16 AsIs: (/25 AsIs: s.Type/27 AsIs: t.1/28 AsIs: e.2/34 AsIs: )/26 AsIs: e./36 AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[38]);
    refalrts::alloc_open_call(vm, context[39]);
    refalrts::alloc_name(vm, context[40], functions[efunc_ELm_AddErrorAt]);
    refalrts::copy_evar(vm, context[41], context[42], context[28], context[29]);
    refalrts::alloc_chars(vm, context[43], context[44], "Missed \')\'", 10);
    refalrts::update_name(context[4], functions[efunc_gen_DoTokenChain_B1S6A2]);
    refalrts::reinit_close_call(context[16]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[39] );
    refalrts::link_brackets( context[15], context[38] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[16];
    res = refalrts::splice_evar( res, context[41], context[44] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[38], context[40] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_elem( res, context[15] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoTokenChain:1$6=1/4 s.Mode/5 s.Kind/6 (/9 e.Collected/7 )/10 t.ErrorList$a/11 (/15 e.BracketTerms/13 )/16 e.Tokens$a/2 >/1
  // closed e.Collected as range 7
  // closed e.BracketTerms as range 13
  // closed e.Tokens$a as range 2
  //DEBUG: t.ErrorList$a: 11
  //DEBUG: s.Mode: 5
  //DEBUG: s.Kind: 6
  //DEBUG: e.Collected: 7
  //DEBUG: e.BracketTerms: 13
  //DEBUG: e.Tokens$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain:1$6=2/4 AsIs: s.Mode/5 AsIs: s.Kind/6 AsIs: (/9 AsIs: e.Collected/7 AsIs: )/10 } Tile{ AsIs: (/15 AsIs: e.BracketTerms/13 AsIs: )/16 } </17 & DoTokenChain:1$6=2:1*2/18 Tile{ AsIs: t.ErrorList$a/11 } Tile{ AsIs: e.Tokens$a/2 } >/19 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[17]);
  refalrts::alloc_name(vm, context[18], functions[efunc_gen_DoTokenChain_B1S6A2B1D2]);
  refalrts::alloc_close_call(vm, context[19]);
  refalrts::update_name(context[4], functions[efunc_gen_DoTokenChain_B1S6A2]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[19] );
  refalrts::push_stack( vm, context[17] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[19] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoTokenChain_B1S6A1("DoTokenChain:1$6=1", COOKIE1_, COOKIE2_, func_gen_DoTokenChain_B1S6A1);


static refalrts::FnResult func_gen_DoTokenChain_B1S7A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & DoTokenChain:1$7=1/4 s.Mode/5 s.Kind/6 (/9 e.Collected/7 )/10 t.Pos/11 (/15 e.Tokens/13 )/16 t.ErrorList$a/17 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Collected as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.Tokens as range 13
  context[18] = refalrts::tvar_left( context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Mode: 5
  //DEBUG: s.Kind: 6
  //DEBUG: e.Collected: 7
  //DEBUG: t.Pos: 11
  //DEBUG: e.Tokens: 13
  //DEBUG: t.ErrorList$a: 17

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain-AfterCall/4 AsIs: s.Mode/5 AsIs: s.Kind/6 AsIs: (/9 AsIs: e.Collected/7 AsIs: )/10 AsIs: t.Pos/11 AsIs: (/15 } )/19 </20 Tile{ HalfReuse: & TokenChain/16 AsIs: t.ErrorList$a/17 } s.Mode/5/21 s.Kind/6/22 Tile{ AsIs: e.Tokens/13 } >/23 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[19]);
  refalrts::alloc_open_call(vm, context[20]);
  refalrts::copy_stvar(vm, context[21], context[5]);
  refalrts::copy_stvar(vm, context[22], context[6]);
  refalrts::alloc_close_call(vm, context[23]);
  refalrts::update_name(context[4], functions[efunc_DoTokenChainm_AfterCall]);
  refalrts::reinit_name(context[16], functions[efunc_TokenChain]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[23] );
  refalrts::push_stack( vm, context[20] );
  refalrts::link_brackets( context[15], context[19] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[23] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[16], context[18] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoTokenChain_B1S7A1("DoTokenChain:1$7=1", COOKIE1_, COOKIE2_, func_gen_DoTokenChain_B1S7A1);


static refalrts::FnResult func_gen_DoTokenChain_B1S9A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & DoTokenChain:1$9=3/4 s.Mode/5 s.Kind/6 (/9 e.Collected/7 )/10 t.OpenPos/11 (/15 e.FuncName/13 )/16 (/19 e.BracketTerms/17 )/20 t.ErrorList$c/21 e.Tokens$b/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Collected as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.FuncName as range 13
  // closed e.BracketTerms as range 17
  context[22] = refalrts::tvar_left( context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tokens$b as range 2
  //DEBUG: s.Mode: 5
  //DEBUG: s.Kind: 6
  //DEBUG: e.Collected: 7
  //DEBUG: t.OpenPos: 11
  //DEBUG: e.FuncName: 13
  //DEBUG: e.BracketTerms: 17
  //DEBUG: t.ErrorList$c: 21
  //DEBUG: e.Tokens$b: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 AsIs: s.Mode/5 AsIs: s.Kind/6 } Tile{ AsIs: t.ErrorList$c/21 } Tile{ AsIs: (/19 } Tile{ AsIs: e.Collected/7 } Tile{ AsIs: (/9 } Tile{ HalfReuse: # ADT-Brackets/10 AsIs: t.OpenPos/11 AsIs: (/15 AsIs: e.FuncName/13 AsIs: )/16 } Tile{ AsIs: e.BracketTerms/17 } Tile{ AsIs: )/20 } )/23 Tile{ AsIs: e.Tokens$b/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[23]);
  refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
  refalrts::reinit_ident(context[10], identifiers[ident_ADTm_Brackets]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[19], context[23] );
  refalrts::link_brackets( context[9], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[23] );
  res = refalrts::splice_elem( res, context[20] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[10], context[16] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_elem( res, context[19] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoTokenChain_B1S9A3("DoTokenChain:1$9=3", COOKIE1_, COOKIE2_, func_gen_DoTokenChain_B1S9A3);


static refalrts::FnResult func_gen_DoTokenChain_B1S9A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 55 elems
  refalrts::Iter context[55];
  refalrts::zeros( context, 55 );
  // </0 & DoTokenChain:1$9=2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoTokenChain:1$9=2/4 s.new1/5 s.new2/6 (/9 e.new3/7 )/10 t.new4/11 (/15 e.new5/13 )/16 t.new6/17 (/21 e.new7/19 )/22 e.new8/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new3 as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new5 as range 13
  context[18] = refalrts::tvar_left( context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.new7 as range 19
  // closed e.new8 as range 2
  do {
    // </0 & DoTokenChain:1$9=2/4 s.new9/5 s.new10/6 (/9 e.new17/23 )/10 t.new11/11 (/15 e.new18/25 )/16 t.new12/17 (/21 e.new19/27 )/22 (/33 s.new13/35 t.new14/36 e.new15/31 )/34 e.new16/29 >/1
    context[23] = context[7];
    context[24] = context[8];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[19];
    context[28] = context[20];
    context[29] = context[2];
    context[30] = context[3];
    context[31] = 0;
    context[32] = 0;
    context[33] = refalrts::brackets_left( context[31], context[32], context[29], context[30] );
    if( ! context[33] )
      continue;
    refalrts::bracket_pointers(context[33], context[34]);
    // closed e.new17 as range 23
    // closed e.new18 as range 25
    // closed e.new19 as range 27
    // closed e.new16 as range 29
    if( ! refalrts::svar_left( context[35], context[31], context[32] ) )
      continue;
    context[37] = refalrts::tvar_left( context[36], context[31], context[32] );
    if( ! context[37] )
      continue;
    // closed e.new15 as range 31
    do {
      // </0 & DoTokenChain:1$9=2/4 s.Mode/5 s.Kind/6 (/9 e.Collected/38 )/10 t.OpenPos/11 (/15 e.FuncName/40 )/16 t.ErrorList$b/17 (/21 e.BracketTerms/42 )/22 (/33 # TkCloseADT/35 t.1/36 )/34 e./44 >/1
      context[38] = context[23];
      context[39] = context[24];
      context[40] = context[25];
      context[41] = context[26];
      context[42] = context[27];
      context[43] = context[28];
      context[44] = context[29];
      context[45] = context[30];
      if( ! refalrts::ident_term( identifiers[ident_TkCloseADT], context[35] ) )
        continue;
      if( ! refalrts::empty_seq( context[31], context[32] ) )
        continue;
      // closed e.Collected as range 38
      // closed e.FuncName as range 40
      // closed e.BracketTerms as range 42
      // closed e. as range 44
      //DEBUG: t.OpenPos: 11
      //DEBUG: t.ErrorList$b: 17
      //DEBUG: t.1: 36
      //DEBUG: s.Mode: 5
      //DEBUG: s.Kind: 6
      //DEBUG: e.Collected: 38
      //DEBUG: e.FuncName: 40
      //DEBUG: e.BracketTerms: 42
      //DEBUG: e.: 44

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} (/9 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} # TkCloseADT/35 t.1/36 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 AsIs: s.Mode/5 AsIs: s.Kind/6 } Tile{ AsIs: t.ErrorList$b/17 AsIs: (/21 } Tile{ AsIs: e.Collected/38 } Tile{ AsIs: (/33 } Tile{ HalfReuse: # ADT-Brackets/10 AsIs: t.OpenPos/11 AsIs: (/15 AsIs: e.FuncName/40 AsIs: )/16 } Tile{ AsIs: e.BracketTerms/42 } Tile{ AsIs: )/22 } Tile{ AsIs: )/34 AsIs: e./44 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
      refalrts::reinit_ident(context[10], identifiers[ident_ADTm_Brackets]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[21], context[34] );
      refalrts::link_brackets( context[33], context[22] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[34];
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[10], context[16] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_evar( res, context[17], context[21] );
      refalrts::splice_to_freelist_open( vm, context[6], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoTokenChain:1$9=2/4 s.Mode/5 s.Kind/6 (/9 e.Collected/38 )/10 t.OpenPos/11 (/15 e.FuncName/40 )/16 t.ErrorList$b/17 (/21 e.BracketTerms/42 )/22 (/33 s.Type/35 t.1/36 e.2/44 )/34 e./46 >/1
    context[38] = context[23];
    context[39] = context[24];
    context[40] = context[25];
    context[41] = context[26];
    context[42] = context[27];
    context[43] = context[28];
    context[44] = context[31];
    context[45] = context[32];
    context[46] = context[29];
    context[47] = context[30];
    // closed e.Collected as range 38
    // closed e.FuncName as range 40
    // closed e.BracketTerms as range 42
    // closed e.2 as range 44
    // closed e. as range 46
    //DEBUG: t.OpenPos: 11
    //DEBUG: t.ErrorList$b: 17
    //DEBUG: t.1: 36
    //DEBUG: s.Mode: 5
    //DEBUG: s.Kind: 6
    //DEBUG: s.Type: 35
    //DEBUG: e.Collected: 38
    //DEBUG: e.FuncName: 40
    //DEBUG: e.BracketTerms: 42
    //DEBUG: e.2: 44
    //DEBUG: e.: 46

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain:1$9=3/4 AsIs: s.Mode/5 AsIs: s.Kind/6 AsIs: (/9 AsIs: e.Collected/38 AsIs: )/10 AsIs: t.OpenPos/11 AsIs: (/15 AsIs: e.FuncName/40 AsIs: )/16 } Tile{ AsIs: (/21 } Tile{ AsIs: e.BracketTerms/42 } )/48 </49 & EL-AddErrorAt/50 Tile{ AsIs: t.ErrorList$b/17 } t.1/36/51"Missed \']\'"/53 Tile{ HalfReuse: >/22 AsIs: (/33 AsIs: s.Type/35 AsIs: t.1/36 AsIs: e.2/44 AsIs: )/34 AsIs: e./46 AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[48]);
    refalrts::alloc_open_call(vm, context[49]);
    refalrts::alloc_name(vm, context[50], functions[efunc_ELm_AddErrorAt]);
    refalrts::copy_evar(vm, context[51], context[52], context[36], context[37]);
    refalrts::alloc_chars(vm, context[53], context[54], "Missed \']\'", 10);
    refalrts::update_name(context[4], functions[efunc_gen_DoTokenChain_B1S9A3]);
    refalrts::reinit_close_call(context[22]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[33], context[34] );
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[49] );
    refalrts::link_brackets( context[21], context[48] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[22];
    res = refalrts::splice_evar( res, context[51], context[54] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[48], context[50] );
    res = refalrts::splice_evar( res, context[42], context[43] );
    res = refalrts::splice_elem( res, context[21] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoTokenChain:1$9=2/4 s.Mode/5 s.Kind/6 (/9 e.Collected/7 )/10 t.OpenPos/11 (/15 e.FuncName/13 )/16 t.ErrorList$b/17 (/21 e.BracketTerms/19 )/22 e.Tokens$a/2 >/1
  // closed e.Collected as range 7
  // closed e.FuncName as range 13
  // closed e.BracketTerms as range 19
  // closed e.Tokens$a as range 2
  //DEBUG: t.OpenPos: 11
  //DEBUG: t.ErrorList$b: 17
  //DEBUG: s.Mode: 5
  //DEBUG: s.Kind: 6
  //DEBUG: e.Collected: 7
  //DEBUG: e.FuncName: 13
  //DEBUG: e.BracketTerms: 19
  //DEBUG: e.Tokens$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain:1$9=3/4 AsIs: s.Mode/5 AsIs: s.Kind/6 AsIs: (/9 AsIs: e.Collected/7 AsIs: )/10 AsIs: t.OpenPos/11 AsIs: (/15 AsIs: e.FuncName/13 AsIs: )/16 } Tile{ AsIs: (/21 AsIs: e.BracketTerms/19 AsIs: )/22 } </23 & DoTokenChain:1$9=3:1*2/24 Tile{ AsIs: t.ErrorList$b/17 } Tile{ AsIs: e.Tokens$a/2 } >/25 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[23]);
  refalrts::alloc_name(vm, context[24], functions[efunc_gen_DoTokenChain_B1S9A3B1D2]);
  refalrts::alloc_close_call(vm, context[25]);
  refalrts::update_name(context[4], functions[efunc_gen_DoTokenChain_B1S9A3]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[25] );
  refalrts::push_stack( vm, context[23] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[25] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoTokenChain_B1S9A2("DoTokenChain:1$9=2", COOKIE1_, COOKIE2_, func_gen_DoTokenChain_B1S9A2);


static refalrts::FnResult func_gen_DoTokenChain_B1S9A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & DoTokenChain:1$9=1/4 s.Mode/5 s.Kind/6 (/9 e.Collected/7 )/10 t.OpenPos/11 (/15 e.FuncName/13 )/16 (/19 e.Tokens/17 )/20 t.ErrorList$a/21 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Collected as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.FuncName as range 13
  // closed e.Tokens as range 17
  context[22] = refalrts::tvar_left( context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Mode: 5
  //DEBUG: s.Kind: 6
  //DEBUG: e.Collected: 7
  //DEBUG: t.OpenPos: 11
  //DEBUG: e.FuncName: 13
  //DEBUG: e.Tokens: 17
  //DEBUG: t.ErrorList$a: 21

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain:1$9=2/4 AsIs: s.Mode/5 AsIs: s.Kind/6 AsIs: (/9 AsIs: e.Collected/7 AsIs: )/10 AsIs: t.OpenPos/11 AsIs: (/15 AsIs: e.FuncName/13 AsIs: )/16 HalfReuse: </19 } Tile{ HalfReuse: & TokenChain/20 AsIs: t.ErrorList$a/21 } s.Mode/5/23 s.Kind/6/24 Tile{ AsIs: e.Tokens/17 } >/25 Tile{ AsIs: >/1 ]] }
  refalrts::copy_stvar(vm, context[23], context[5]);
  refalrts::copy_stvar(vm, context[24], context[6]);
  refalrts::alloc_close_call(vm, context[25]);
  refalrts::update_name(context[4], functions[efunc_gen_DoTokenChain_B1S9A2]);
  refalrts::reinit_open_call(context[19]);
  refalrts::reinit_name(context[20], functions[efunc_TokenChain]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[25] );
  refalrts::push_stack( vm, context[19] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[25] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[20], context[22] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoTokenChain_B1S9A1("DoTokenChain:1$9=1", COOKIE1_, COOKIE2_, func_gen_DoTokenChain_B1S9A1);


static refalrts::FnResult func_gen_DoTokenChain_B1S11A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & DoTokenChain:1$11=1/4 s.Mode/5 s.Kind/6 (/9 e.Collected/7 )/10 t.ErrorList$a/11 (/15 e.Term/13 )/16 e.Tokens$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Collected as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.Term as range 13
  // closed e.Tokens$a as range 2
  //DEBUG: s.Mode: 5
  //DEBUG: s.Kind: 6
  //DEBUG: e.Collected: 7
  //DEBUG: t.ErrorList$a: 11
  //DEBUG: e.Term: 13
  //DEBUG: e.Tokens$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/9 {REMOVED TILE} )/10 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 AsIs: s.Mode/5 AsIs: s.Kind/6 } Tile{ AsIs: t.ErrorList$a/11 AsIs: (/15 } Tile{ AsIs: e.Collected/7 } Tile{ AsIs: e.Term/13 } Tile{ AsIs: )/16 AsIs: e.Tokens$a/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[16];
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[11], context[15] );
  refalrts::splice_to_freelist_open( vm, context[6], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoTokenChain_B1S11A1("DoTokenChain:1$11=1", COOKIE1_, COOKIE2_, func_gen_DoTokenChain_B1S11A1);


static refalrts::FnResult func_gen_DoTokenChain_B1S11A1B1S2A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & DoTokenChain:1$11=1:1$2=1/4 t.ErrorList/5 t.Pos/7 (/11 e.Tokens$a/9 )/12 e.ErrorMessage/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.Tokens$a as range 9
  // closed e.ErrorMessage as range 2
  //DEBUG: t.ErrorList: 5
  //DEBUG: t.Pos: 7
  //DEBUG: e.Tokens$a: 9
  //DEBUG: e.ErrorMessage: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList/5 AsIs: t.Pos/7 } Tile{ AsIs: e.ErrorMessage/2 } Tile{ AsIs: >/1 } Tile{ AsIs: (/11 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tokens$a/9 } Tile{ ]] }
  refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
  refalrts::link_brackets( context[11], context[12] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_elem( res, context[1] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoTokenChain_B1S11A1B1S2A1("DoTokenChain:1$11=1:1$2=1", COOKIE1_, COOKIE2_, func_gen_DoTokenChain_B1S11A1B1S2A1);


static refalrts::FnResult func_gen_DoTokenChain_B1S12A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & DoTokenChain:1$12=3/4 s.Mode/5 (/8 e.Collected/6 )/9 t.ErrorList$b/10 (/14 e.Body/12 )/15 e.Tokens$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.Collected as range 6
  context[11] = refalrts::tvar_left( context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  // closed e.Body as range 12
  // closed e.Tokens$a as range 2
  //DEBUG: s.Mode: 5
  //DEBUG: e.Collected: 6
  //DEBUG: t.ErrorList$b: 10
  //DEBUG: e.Body: 12
  //DEBUG: e.Tokens$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 AsIs: s.Mode/5 HalfReuse: # Result/8 } Tile{ AsIs: t.ErrorList$b/10 AsIs: (/14 } Tile{ AsIs: e.Collected/6 } (/16 # Closure/17 Tile{ AsIs: e.Body/12 } Tile{ AsIs: )/9 } Tile{ AsIs: )/15 AsIs: e.Tokens$a/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[16]);
  refalrts::alloc_ident(vm, context[17], identifiers[ident_Closure]);
  refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
  refalrts::reinit_ident(context[8], identifiers[ident_Result]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[14], context[15] );
  refalrts::link_brackets( context[16], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[15];
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_evar( res, context[12], context[13] );
  res = refalrts::splice_evar( res, context[16], context[17] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[10], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoTokenChain_B1S12A3("DoTokenChain:1$12=3", COOKIE1_, COOKIE2_, func_gen_DoTokenChain_B1S12A3);


static refalrts::FnResult func_gen_DoTokenChain_B1S12A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  // </0 & DoTokenChain:1$12=2/4 s.Mode/5 (/8 e.Collected/6 )/9 t.Pos/10 (/14 e.Tokens/12 )/15 t.ErrorList$a/16 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.Collected as range 6
  context[11] = refalrts::tvar_left( context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  // closed e.Tokens as range 12
  context[17] = refalrts::tvar_left( context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Mode: 5
  //DEBUG: e.Collected: 6
  //DEBUG: t.Pos: 10
  //DEBUG: e.Tokens: 12
  //DEBUG: t.ErrorList$a: 16

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain:1$12=3/4 AsIs: s.Mode/5 AsIs: (/8 AsIs: e.Collected/6 AsIs: )/9 } </18 & Block/19 Tile{ AsIs: t.ErrorList$a/16 } s.Mode/5/20 (/21 # TkOpenBlock/22 Tile{ AsIs: t.Pos/10 HalfReuse: )/14 AsIs: e.Tokens/12 HalfReuse: >/15 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[18]);
  refalrts::alloc_name(vm, context[19], functions[efunc_Block]);
  refalrts::copy_stvar(vm, context[20], context[5]);
  refalrts::alloc_open_bracket(vm, context[21]);
  refalrts::alloc_ident(vm, context[22], identifiers[ident_TkOpenBlock]);
  refalrts::update_name(context[4], functions[efunc_gen_DoTokenChain_B1S12A3]);
  refalrts::reinit_close_bracket(context[14]);
  refalrts::reinit_close_call(context[15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[18] );
  refalrts::link_brackets( context[21], context[14] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[10], context[15] );
  res = refalrts::splice_evar( res, context[20], context[22] );
  res = refalrts::splice_evar( res, context[16], context[17] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoTokenChain_B1S12A2("DoTokenChain:1$12=2", COOKIE1_, COOKIE2_, func_gen_DoTokenChain_B1S12A2);


static refalrts::FnResult func_DoTokenChain(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 45 elems
  refalrts::Iter context[45];
  refalrts::zeros( context, 45 );
  // </0 & DoTokenChain/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoTokenChain/4 s.new1/5 s.new2/6 t.new3/7 (/11 e.new4/9 )/12 t.new5/13 e.new6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new4 as range 9
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  // closed e.new6 as range 2
  do {
    // </0 & DoTokenChain/4 s.new7/5 s.new8/6 t.new9/7 (/11 e.new14/15 )/12 (/13 s.new10/21 t.new11/22 e.new12/19 )/14 e.new13/17 >/1
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    context[19] = 0;
    context[20] = 0;
    if( ! refalrts::brackets_term( context[19], context[20], context[13] ) )
      continue;
    // closed e.new14 as range 15
    // closed e.new13 as range 17
    if( ! refalrts::svar_left( context[21], context[19], context[20] ) )
      continue;
    context[23] = refalrts::tvar_left( context[22], context[19], context[20] );
    if( ! context[23] )
      continue;
    // closed e.new12 as range 19
    do {
      // </0 & DoTokenChain/4 s.Mode/5 s.Kind/6 t.ErrorList/7 (/11 e.Collected/24 )/12 (/13 # TkName/21 t.0/22 e.1/26 )/14 e.Tokens/28 >/1
      context[24] = context[15];
      context[25] = context[16];
      context[26] = context[19];
      context[27] = context[20];
      context[28] = context[17];
      context[29] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_TkName], context[21] ) )
        continue;
      // closed e.Collected as range 24
      // closed e.1 as range 26
      // closed e.Tokens as range 28
      //DEBUG: t.ErrorList: 7
      //DEBUG: t.0: 22
      //DEBUG: s.Mode: 5
      //DEBUG: s.Kind: 6
      //DEBUG: e.Collected: 24
      //DEBUG: e.1: 26
      //DEBUG: e.Tokens: 28

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} t.0/22 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoTokenChain/4 AsIs: s.Mode/5 AsIs: s.Kind/6 AsIs: t.ErrorList/7 AsIs: (/11 AsIs: e.Collected/24 HalfReuse: (/12 HalfReuse: # Symbol/13 Reuse: # Identifier/21 } Tile{ AsIs: e.1/26 } )/30 Tile{ AsIs: )/14 AsIs: e.Tokens/28 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[30]);
      refalrts::reinit_open_bracket(context[12]);
      refalrts::reinit_ident(context[13], identifiers[ident_Symbol]);
      refalrts::update_ident(context[21], identifiers[ident_Identifier]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[11], context[14] );
      refalrts::link_brackets( context[12], context[30] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      refalrts::splice_to_freelist_open( vm, context[21], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoTokenChain/4 s.Mode/5 s.Kind/6 t.ErrorList/7 (/11 e.Collected/24 )/12 (/13 # TkCompound/21 t.0/22 e.1/26 )/14 e.Tokens/28 >/1
      context[24] = context[15];
      context[25] = context[16];
      context[26] = context[19];
      context[27] = context[20];
      context[28] = context[17];
      context[29] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_TkCompound], context[21] ) )
        continue;
      // closed e.Collected as range 24
      // closed e.1 as range 26
      // closed e.Tokens as range 28
      //DEBUG: t.ErrorList: 7
      //DEBUG: t.0: 22
      //DEBUG: s.Mode: 5
      //DEBUG: s.Kind: 6
      //DEBUG: e.Collected: 24
      //DEBUG: e.1: 26
      //DEBUG: e.Tokens: 28

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} t.0/22 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoTokenChain/4 AsIs: s.Mode/5 AsIs: s.Kind/6 AsIs: t.ErrorList/7 AsIs: (/11 AsIs: e.Collected/24 HalfReuse: (/12 HalfReuse: # Symbol/13 Reuse: # Identifier/21 } Tile{ AsIs: e.1/26 } )/30 Tile{ AsIs: )/14 AsIs: e.Tokens/28 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[30]);
      refalrts::reinit_open_bracket(context[12]);
      refalrts::reinit_ident(context[13], identifiers[ident_Symbol]);
      refalrts::update_ident(context[21], identifiers[ident_Identifier]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[11], context[14] );
      refalrts::link_brackets( context[12], context[30] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      refalrts::splice_to_freelist_open( vm, context[21], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoTokenChain/4 s.new15/5 s.new16/6 t.new17/7 (/11 e.new23/24 )/12 (/13 s.new18/21 t.new19/22 s.new20/30 e.new21/26 )/14 e.new22/28 >/1
      context[24] = context[15];
      context[25] = context[16];
      context[26] = context[19];
      context[27] = context[20];
      context[28] = context[17];
      context[29] = context[18];
      // closed e.new23 as range 24
      // closed e.new22 as range 28
      if( ! refalrts::svar_left( context[30], context[26], context[27] ) )
        continue;
      // closed e.new21 as range 26
      do {
        // </0 & DoTokenChain/4 s.new24/5 s.new25/6 t.new26/7 (/11 e.new31/31 )/12 (/13 s.new27/21 t.new28/22 s.new29/30 )/14 e.new30/33 >/1
        context[31] = context[24];
        context[32] = context[25];
        context[33] = context[28];
        context[34] = context[29];
        if( ! refalrts::empty_seq( context[26], context[27] ) )
          continue;
        // closed e.new31 as range 31
        // closed e.new30 as range 33
        do {
          // </0 & DoTokenChain/4 s.Mode/5 s.Kind/6 t.ErrorList/7 (/11 e.Collected/35 )/12 (/13 # TkMacroDigit/21 t.0/22 s.Number/30 )/14 e.Tokens/37 >/1
          context[35] = context[31];
          context[36] = context[32];
          context[37] = context[33];
          context[38] = context[34];
          if( ! refalrts::ident_term( identifiers[ident_TkMacroDigit], context[21] ) )
            continue;
          // closed e.Collected as range 35
          // closed e.Tokens as range 37
          //DEBUG: t.ErrorList: 7
          //DEBUG: t.0: 22
          //DEBUG: s.Mode: 5
          //DEBUG: s.Kind: 6
          //DEBUG: s.Number: 30
          //DEBUG: e.Collected: 35
          //DEBUG: e.Tokens: 37

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} t.0/22 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoTokenChain/4 AsIs: s.Mode/5 AsIs: s.Kind/6 AsIs: t.ErrorList/7 AsIs: (/11 AsIs: e.Collected/35 HalfReuse: (/12 HalfReuse: # Symbol/13 Reuse: # Number/21 } Tile{ AsIs: s.Number/30 } )/39 Tile{ AsIs: )/14 AsIs: e.Tokens/37 AsIs: >/1 ]] }
          refalrts::alloc_close_bracket(vm, context[39]);
          refalrts::reinit_open_bracket(context[12]);
          refalrts::reinit_ident(context[13], identifiers[ident_Symbol]);
          refalrts::update_ident(context[21], identifiers[ident_Number]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[11], context[14] );
          refalrts::link_brackets( context[12], context[39] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[14];
          res = refalrts::splice_elem( res, context[39] );
          res = refalrts::splice_elem( res, context[30] );
          refalrts::splice_to_freelist_open( vm, context[21], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoTokenChain/4 s.Mode/5 s.Kind/6 t.ErrorList/7 (/11 e.Collected/35 )/12 (/13 # TkChar/21 t.0/22 s.Char/30 )/14 e.Tokens/37 >/1
        context[35] = context[31];
        context[36] = context[32];
        context[37] = context[33];
        context[38] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_TkChar], context[21] ) )
          continue;
        // closed e.Collected as range 35
        // closed e.Tokens as range 37
        //DEBUG: t.ErrorList: 7
        //DEBUG: t.0: 22
        //DEBUG: s.Mode: 5
        //DEBUG: s.Kind: 6
        //DEBUG: s.Char: 30
        //DEBUG: e.Collected: 35
        //DEBUG: e.Tokens: 37

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} t.0/22 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoTokenChain/4 AsIs: s.Mode/5 AsIs: s.Kind/6 AsIs: t.ErrorList/7 AsIs: (/11 AsIs: e.Collected/35 HalfReuse: (/12 HalfReuse: # Symbol/13 Reuse: # Char/21 } Tile{ AsIs: s.Char/30 } )/39 Tile{ AsIs: )/14 AsIs: e.Tokens/37 AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[39]);
        refalrts::reinit_open_bracket(context[12]);
        refalrts::reinit_ident(context[13], identifiers[ident_Symbol]);
        refalrts::update_ident(context[21], identifiers[ident_Char]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[11], context[14] );
        refalrts::link_brackets( context[12], context[39] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_elem( res, context[39] );
        res = refalrts::splice_elem( res, context[30] );
        refalrts::splice_to_freelist_open( vm, context[21], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoTokenChain/4 s.Mode/5 s.Kind/6 t.ErrorList/7 (/11 e.Collected/31 )/12 (/13 # TkVariable/21 t.0/22 s.VarType/30 e.2/33 )/14 e.Tokens/35 >/1
      context[31] = context[24];
      context[32] = context[25];
      context[33] = context[26];
      context[34] = context[27];
      context[35] = context[28];
      context[36] = context[29];
      if( ! refalrts::ident_term( identifiers[ident_TkVariable], context[21] ) )
        continue;
      // closed e.Collected as range 31
      // closed e.2 as range 33
      // closed e.Tokens as range 35
      //DEBUG: t.ErrorList: 7
      //DEBUG: t.0: 22
      //DEBUG: s.Mode: 5
      //DEBUG: s.Kind: 6
      //DEBUG: s.VarType: 30
      //DEBUG: e.Collected: 31
      //DEBUG: e.2: 33
      //DEBUG: e.Tokens: 35

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoTokenChain/4 AsIs: s.Mode/5 AsIs: s.Kind/6 AsIs: t.ErrorList/7 AsIs: (/11 AsIs: e.Collected/31 HalfReuse: (/12 HalfReuse: # Var/13 } Tile{ AsIs: t.0/22 AsIs: s.VarType/30 AsIs: e.2/33 AsIs: )/14 } Tile{ HalfReuse: )/21 } Tile{ AsIs: e.Tokens/35 } Tile{ AsIs: >/1 ]] }
      refalrts::reinit_open_bracket(context[12]);
      refalrts::reinit_ident(context[13], identifiers[ident_Var]);
      refalrts::reinit_close_bracket(context[21]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[11], context[21] );
      refalrts::link_brackets( context[12], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_elem( res, context[21] );
      res = refalrts::splice_evar( res, context[22], context[14] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoTokenChain/4 s.new15/5 s.new16/6 t.new17/7 (/11 e.new21/24 )/12 (/13 s.new18/21 t.new19/22 )/14 e.new20/26 >/1
      context[24] = context[15];
      context[25] = context[16];
      context[26] = context[17];
      context[27] = context[18];
      if( ! refalrts::empty_seq( context[19], context[20] ) )
        continue;
      // closed e.new21 as range 24
      // closed e.new20 as range 26
      do {
        // </0 & DoTokenChain/4 s.Mode/5 s.Kind/6 t.ErrorList/7 (/11 e.Collected/28 )/12 (/13 # TkOpenBracket/21 t.0/22 )/14 e.Tokens/30 >/1
        context[28] = context[24];
        context[29] = context[25];
        context[30] = context[26];
        context[31] = context[27];
        if( ! refalrts::ident_term( identifiers[ident_TkOpenBracket], context[21] ) )
          continue;
        // closed e.Collected as range 28
        // closed e.Tokens as range 30
        //DEBUG: t.ErrorList: 7
        //DEBUG: t.0: 22
        //DEBUG: s.Mode: 5
        //DEBUG: s.Kind: 6
        //DEBUG: e.Collected: 28
        //DEBUG: e.Tokens: 30

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.0/22 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain:1$6=1/4 AsIs: s.Mode/5 AsIs: s.Kind/6 } Tile{ AsIs: (/11 AsIs: e.Collected/28 AsIs: )/12 HalfReuse: </13 HalfReuse: & TokenChain/21 } Tile{ AsIs: t.ErrorList/7 } s.Mode/5/32 Tile{ HalfReuse: s.Kind6 /14 AsIs: e.Tokens/30 AsIs: >/1 } >/33 Tile{ ]] }
        refalrts::copy_stvar(vm, context[32], context[5]);
        refalrts::alloc_close_call(vm, context[33]);
        refalrts::update_name(context[4], functions[efunc_gen_DoTokenChain_B1S6A1]);
        refalrts::reinit_open_call(context[13]);
        refalrts::reinit_name(context[21], functions[efunc_TokenChain]);
        refalrts::reinit_svar( context[14], context[6] );
        refalrts::push_stack( vm, context[33] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[13] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[33] );
        res = refalrts::splice_evar( res, context[14], context[1] );
        res = refalrts::splice_elem( res, context[32] );
        res = refalrts::splice_evar( res, context[7], context[8] );
        res = refalrts::splice_evar( res, context[11], context[21] );
        refalrts::splice_to_freelist_open( vm, context[6], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoTokenChain/4 s.new22/5 s.new23/6 t.new24/7 (/11 e.new27/28 )/12 (/13 # TkOpenCall/21 t.new25/22 )/14 e.new26/30 >/1
      context[28] = context[24];
      context[29] = context[25];
      context[30] = context[26];
      context[31] = context[27];
      if( ! refalrts::ident_term( identifiers[ident_TkOpenCall], context[21] ) )
        continue;
      // closed e.new27 as range 28
      // closed e.new26 as range 30
      do {
        // </0 & DoTokenChain/4 # Classic/5 s.Kind/6 t.ErrorList/7 (/11 e.Collected/32 )/12 (/13 # TkOpenCall/21 t.0/22 )/14 e.Tokens/34 >/1
        context[32] = context[28];
        context[33] = context[29];
        context[34] = context[30];
        context[35] = context[31];
        if( ! refalrts::ident_term( identifiers[ident_Classic], context[5] ) )
          continue;
        // closed e.Collected as range 32
        // closed e.Tokens as range 34
        //DEBUG: t.ErrorList: 7
        //DEBUG: t.0: 22
        //DEBUG: s.Kind: 6
        //DEBUG: e.Collected: 32
        //DEBUG: e.Tokens: 34

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Kind/6 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain:1$7=1@1/4 HalfReuse: s.Kind6 /5 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Collected/32 } Tile{ HalfReuse: )/21 AsIs: t.0/22 HalfReuse: (/14 AsIs: e.Tokens/34 HalfReuse: )/1 } Tile{ HalfReuse: </12 HalfReuse: & EL-AddErrorAt/13 } Tile{ AsIs: t.ErrorList/7 } t.0/22/36"Identifier expected after \'<\'"/38 >/40 >/41 Tile{ ]] }
        refalrts::copy_evar(vm, context[36], context[37], context[22], context[23]);
        refalrts::alloc_chars(vm, context[38], context[39], "Identifier expected after \'<\'", 29);
        refalrts::alloc_close_call(vm, context[40]);
        refalrts::alloc_close_call(vm, context[41]);
        refalrts::update_name(context[4], functions[efunc_gen_DoTokenChain_B1S7A1Z1]);
        refalrts::reinit_svar( context[5], context[6] );
        refalrts::reinit_close_bracket(context[21]);
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::reinit_open_call(context[12]);
        refalrts::reinit_name(context[13], functions[efunc_ELm_AddErrorAt]);
        refalrts::push_stack( vm, context[41] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[40] );
        refalrts::push_stack( vm, context[12] );
        refalrts::link_brackets( context[14], context[1] );
        refalrts::link_brackets( context[11], context[21] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[36], context[41] );
        res = refalrts::splice_evar( res, context[7], context[8] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        res = refalrts::splice_evar( res, context[21], context[1] );
        res = refalrts::splice_evar( res, context[32], context[33] );
        res = refalrts::splice_elem( res, context[11] );
        refalrts::splice_to_freelist_open( vm, context[5], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoTokenChain/4 # Extended/5 s.Kind/6 t.ErrorList/7 (/11 e.Collected/32 )/12 (/13 # TkOpenCall/21 t.0/22 )/14 e.Tokens/34 >/1
        context[32] = context[28];
        context[33] = context[29];
        context[34] = context[30];
        context[35] = context[31];
        if( ! refalrts::ident_term( identifiers[ident_Extended], context[5] ) )
          continue;
        // closed e.Collected as range 32
        // closed e.Tokens as range 34
        //DEBUG: t.ErrorList: 7
        //DEBUG: t.0: 22
        //DEBUG: s.Kind: 6
        //DEBUG: e.Collected: 32
        //DEBUG: e.Tokens: 34

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: </12 HalfReuse: & DoTokenChain-AfterCall/13 Reuse: # Extended/21 } s.Kind/6/36 (/37 Tile{ AsIs: e.Collected/32 } )/38 Tile{ AsIs: t.0/22 } (/39 )/40 Tile{ AsIs: </0 AsIs: & DoTokenChain/4 AsIs: # Extended/5 AsIs: s.Kind/6 AsIs: t.ErrorList/7 AsIs: (/11 } Tile{ AsIs: )/14 AsIs: e.Tokens/34 AsIs: >/1 } >/41 Tile{ ]] }
        refalrts::copy_stvar(vm, context[36], context[6]);
        refalrts::alloc_open_bracket(vm, context[37]);
        refalrts::alloc_close_bracket(vm, context[38]);
        refalrts::alloc_open_bracket(vm, context[39]);
        refalrts::alloc_close_bracket(vm, context[40]);
        refalrts::alloc_close_call(vm, context[41]);
        refalrts::reinit_open_call(context[12]);
        refalrts::reinit_name(context[13], functions[efunc_DoTokenChainm_AfterCall]);
        refalrts::update_ident(context[21], identifiers[ident_Extended]);
        refalrts::push_stack( vm, context[41] );
        refalrts::push_stack( vm, context[12] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[11], context[14] );
        refalrts::link_brackets( context[39], context[40] );
        refalrts::link_brackets( context[37], context[38] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[41] );
        res = refalrts::splice_evar( res, context[14], context[1] );
        res = refalrts::splice_evar( res, context[0], context[11] );
        res = refalrts::splice_evar( res, context[39], context[40] );
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_elem( res, context[38] );
        res = refalrts::splice_evar( res, context[32], context[33] );
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_evar( res, context[12], context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoTokenChain/4 s.Mode/5 s.Kind/6 t.ErrorList/7 (/11 e.Collected/32 )/12 (/13 # TkOpenCall/21 t.0/22 )/14 e.Tokens/34 >/1
      context[32] = context[28];
      context[33] = context[29];
      context[34] = context[30];
      context[35] = context[31];
      // closed e.Collected as range 32
      // closed e.Tokens as range 34
      //DEBUG: t.ErrorList: 7
      //DEBUG: t.0: 22
      //DEBUG: s.Mode: 5
      //DEBUG: s.Kind: 6
      //DEBUG: e.Collected: 32
      //DEBUG: e.Tokens: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain:1$7=1/4 AsIs: s.Mode/5 AsIs: s.Kind/6 } Tile{ AsIs: (/11 AsIs: e.Collected/32 AsIs: )/12 } Tile{ AsIs: t.0/22 HalfReuse: (/14 AsIs: e.Tokens/34 HalfReuse: )/1 } Tile{ HalfReuse: </13 HalfReuse: & ClassicError*2/21 } Tile{ AsIs: t.ErrorList/7 } s.Mode/5/36 t.0/22/37"Identifier expected after \'<\'"/39 >/41 >/42 Tile{ ]] }
      refalrts::copy_stvar(vm, context[36], context[5]);
      refalrts::copy_evar(vm, context[37], context[38], context[22], context[23]);
      refalrts::alloc_chars(vm, context[39], context[40], "Identifier expected after \'<\'", 29);
      refalrts::alloc_close_call(vm, context[41]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::update_name(context[4], functions[efunc_gen_DoTokenChain_B1S7A1]);
      refalrts::reinit_open_bracket(context[14]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::reinit_open_call(context[13]);
      refalrts::reinit_name(context[21], functions[efunc_gen_ClassicError_D2]);
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[41] );
      refalrts::push_stack( vm, context[13] );
      refalrts::link_brackets( context[14], context[1] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[36], context[42] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      res = refalrts::splice_evar( res, context[13], context[21] );
      res = refalrts::splice_evar( res, context[22], context[1] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoTokenChain/4 s.Mode/5 s.Kind/6 t.ErrorList/7 (/11 e.Collected/24 )/12 (/13 # TkOpenCall/21 t.0/22 e.1/26 )/14 e.Tokens/28 >/1
      context[24] = context[15];
      context[25] = context[16];
      context[26] = context[19];
      context[27] = context[20];
      context[28] = context[17];
      context[29] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_TkOpenCall], context[21] ) )
        continue;
      // closed e.Collected as range 24
      // closed e.1 as range 26
      // closed e.Tokens as range 28
      //DEBUG: t.ErrorList: 7
      //DEBUG: t.0: 22
      //DEBUG: s.Mode: 5
      //DEBUG: s.Kind: 6
      //DEBUG: e.Collected: 24
      //DEBUG: e.1: 26
      //DEBUG: e.Tokens: 28

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain-AfterCall/4 AsIs: s.Mode/5 AsIs: s.Kind/6 } (/30 Tile{ AsIs: e.Collected/24 } )/31 t.0/22/32 (/34 Tile{ HalfReuse: (/12 HalfReuse: # Symbol/13 Reuse: # Name/21 AsIs: t.0/22 AsIs: e.1/26 AsIs: )/14 } )/35 </36 & TokenChain/37 Tile{ AsIs: t.ErrorList/7 HalfReuse: s.Mode5 /11 } s.Kind/6/38 Tile{ AsIs: e.Tokens/28 } >/39 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[30]);
      refalrts::alloc_close_bracket(vm, context[31]);
      refalrts::copy_evar(vm, context[32], context[33], context[22], context[23]);
      refalrts::alloc_open_bracket(vm, context[34]);
      refalrts::alloc_close_bracket(vm, context[35]);
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_TokenChain]);
      refalrts::copy_stvar(vm, context[38], context[6]);
      refalrts::alloc_close_call(vm, context[39]);
      refalrts::update_name(context[4], functions[efunc_DoTokenChainm_AfterCall]);
      refalrts::reinit_open_bracket(context[12]);
      refalrts::reinit_ident(context[13], identifiers[ident_Symbol]);
      refalrts::update_ident(context[21], identifiers[ident_Name]);
      refalrts::reinit_svar( context[11], context[5] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[39] );
      refalrts::push_stack( vm, context[36] );
      refalrts::link_brackets( context[34], context[35] );
      refalrts::link_brackets( context[12], context[14] );
      refalrts::link_brackets( context[30], context[31] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[39] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_elem( res, context[38] );
      res = refalrts::splice_evar( res, context[7], context[11] );
      res = refalrts::splice_evar( res, context[35], context[37] );
      res = refalrts::splice_evar( res, context[12], context[14] );
      res = refalrts::splice_evar( res, context[31], context[34] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_elem( res, context[30] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoTokenChain/4 s.new15/5 s.new16/6 t.new17/7 (/11 e.new21/24 )/12 (/13 # TkOpenADT/21 t.new18/22 e.new19/26 )/14 e.new20/28 >/1
      context[24] = context[15];
      context[25] = context[16];
      context[26] = context[19];
      context[27] = context[20];
      context[28] = context[17];
      context[29] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_TkOpenADT], context[21] ) )
        continue;
      // closed e.new21 as range 24
      // closed e.new19 as range 26
      // closed e.new20 as range 28
      do {
        // </0 & DoTokenChain/4 # Classic/5 s.Kind/6 t.ErrorList/7 (/11 e.Collected/30 )/12 (/13 # TkOpenADT/21 t.0/22 e.1/32 )/14 e.Tokens/34 >/1
        context[30] = context[24];
        context[31] = context[25];
        context[32] = context[26];
        context[33] = context[27];
        context[34] = context[28];
        context[35] = context[29];
        if( ! refalrts::ident_term( identifiers[ident_Classic], context[5] ) )
          continue;
        // closed e.Collected as range 30
        // closed e.1 as range 32
        // closed e.Tokens as range 34
        //DEBUG: t.ErrorList: 7
        //DEBUG: t.0: 22
        //DEBUG: s.Kind: 6
        //DEBUG: e.Collected: 30
        //DEBUG: e.1: 32
        //DEBUG: e.Tokens: 34

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Kind/6 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain:1$9=1@1/4 HalfReuse: s.Kind6 /5 } Tile{ AsIs: (/11 AsIs: e.Collected/30 AsIs: )/12 } Tile{ AsIs: t.0/22 } Tile{ AsIs: (/13 } Tile{ AsIs: e.1/32 } Tile{ AsIs: )/14 } (/36 Tile{ AsIs: e.Tokens/34 } )/37 Tile{ HalfReuse: </21 } & EL-AddErrorAt/38 Tile{ AsIs: t.ErrorList/7 } t.0/22/39"Abstract data types are an extension"/41 >/43 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[36]);
        refalrts::alloc_close_bracket(vm, context[37]);
        refalrts::alloc_name(vm, context[38], functions[efunc_ELm_AddErrorAt]);
        refalrts::copy_evar(vm, context[39], context[40], context[22], context[23]);
        refalrts::alloc_chars(vm, context[41], context[42], "Abstract data types are an extension", 36);
        refalrts::alloc_close_call(vm, context[43]);
        refalrts::update_name(context[4], functions[efunc_gen_DoTokenChain_B1S9A1Z1]);
        refalrts::reinit_svar( context[5], context[6] );
        refalrts::reinit_open_call(context[21]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[43] );
        refalrts::push_stack( vm, context[21] );
        refalrts::link_brackets( context[36], context[37] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[39], context[43] );
        res = refalrts::splice_evar( res, context[7], context[8] );
        res = refalrts::splice_elem( res, context[38] );
        res = refalrts::splice_elem( res, context[21] );
        res = refalrts::splice_elem( res, context[37] );
        res = refalrts::splice_evar( res, context[34], context[35] );
        res = refalrts::splice_elem( res, context[36] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[32], context[33] );
        res = refalrts::splice_elem( res, context[13] );
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[11], context[12] );
        refalrts::splice_to_freelist_open( vm, context[5], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoTokenChain/4 # Extended/5 s.Kind/6 t.ErrorList/7 (/11 e.Collected/30 )/12 (/13 # TkOpenADT/21 t.0/22 e.1/32 )/14 e.Tokens/34 >/1
        context[30] = context[24];
        context[31] = context[25];
        context[32] = context[26];
        context[33] = context[27];
        context[34] = context[28];
        context[35] = context[29];
        if( ! refalrts::ident_term( identifiers[ident_Extended], context[5] ) )
          continue;
        // closed e.Collected as range 30
        // closed e.1 as range 32
        // closed e.Tokens as range 34
        //DEBUG: t.ErrorList: 7
        //DEBUG: t.0: 22
        //DEBUG: s.Kind: 6
        //DEBUG: e.Collected: 30
        //DEBUG: e.1: 32
        //DEBUG: e.Tokens: 34

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </36 & DoTokenChain:1$9=2@1/37 Tile{ HalfReuse: s.Kind6 /12 AsIs: (/13 } Tile{ AsIs: e.Collected/30 } Tile{ HalfReuse: )/21 AsIs: t.0/22 } (/38 Tile{ AsIs: e.1/32 } )/39 Tile{ AsIs: </0 AsIs: & DoTokenChain/4 AsIs: # Extended/5 AsIs: s.Kind/6 AsIs: t.ErrorList/7 AsIs: (/11 } Tile{ AsIs: )/14 AsIs: e.Tokens/34 AsIs: >/1 } >/40 Tile{ ]] }
        refalrts::alloc_open_call(vm, context[36]);
        refalrts::alloc_name(vm, context[37], functions[efunc_gen_DoTokenChain_B1S9A2Z1]);
        refalrts::alloc_open_bracket(vm, context[38]);
        refalrts::alloc_close_bracket(vm, context[39]);
        refalrts::alloc_close_call(vm, context[40]);
        refalrts::reinit_svar( context[12], context[6] );
        refalrts::reinit_close_bracket(context[21]);
        refalrts::push_stack( vm, context[40] );
        refalrts::push_stack( vm, context[36] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[11], context[14] );
        refalrts::link_brackets( context[38], context[39] );
        refalrts::link_brackets( context[13], context[21] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[40] );
        res = refalrts::splice_evar( res, context[14], context[1] );
        res = refalrts::splice_evar( res, context[0], context[11] );
        res = refalrts::splice_elem( res, context[39] );
        res = refalrts::splice_evar( res, context[32], context[33] );
        res = refalrts::splice_elem( res, context[38] );
        res = refalrts::splice_evar( res, context[21], context[23] );
        res = refalrts::splice_evar( res, context[30], context[31] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        res = refalrts::splice_evar( res, context[36], context[37] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoTokenChain/4 s.Mode/5 s.Kind/6 t.ErrorList/7 (/11 e.Collected/30 )/12 (/13 # TkOpenADT/21 t.0/22 e.1/32 )/14 e.Tokens/34 >/1
      context[30] = context[24];
      context[31] = context[25];
      context[32] = context[26];
      context[33] = context[27];
      context[34] = context[28];
      context[35] = context[29];
      // closed e.Collected as range 30
      // closed e.1 as range 32
      // closed e.Tokens as range 34
      //DEBUG: t.ErrorList: 7
      //DEBUG: t.0: 22
      //DEBUG: s.Mode: 5
      //DEBUG: s.Kind: 6
      //DEBUG: e.Collected: 30
      //DEBUG: e.1: 32
      //DEBUG: e.Tokens: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain:1$9=1/4 AsIs: s.Mode/5 AsIs: s.Kind/6 } Tile{ AsIs: (/11 AsIs: e.Collected/30 AsIs: )/12 } t.0/22/36 Tile{ AsIs: (/13 } Tile{ AsIs: e.1/32 } )/38 (/39 Tile{ AsIs: e.Tokens/34 } Tile{ AsIs: )/14 } </40 & ClassicError*2/41 Tile{ AsIs: t.ErrorList/7 } Tile{ HalfReuse: s.Mode5 /21 AsIs: t.0/22 }"Abstract data types are an extension"/42 >/44 Tile{ AsIs: >/1 ]] }
      refalrts::copy_evar(vm, context[36], context[37], context[22], context[23]);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_open_call(vm, context[40]);
      refalrts::alloc_name(vm, context[41], functions[efunc_gen_ClassicError_D2]);
      refalrts::alloc_chars(vm, context[42], context[43], "Abstract data types are an extension", 36);
      refalrts::alloc_close_call(vm, context[44]);
      refalrts::update_name(context[4], functions[efunc_gen_DoTokenChain_B1S9A1]);
      refalrts::reinit_svar( context[21], context[5] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[44] );
      refalrts::push_stack( vm, context[40] );
      refalrts::link_brackets( context[39], context[14] );
      refalrts::link_brackets( context[13], context[38] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[42], context[44] );
      res = refalrts::splice_evar( res, context[21], context[23] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoTokenChain/4 s.Mode/5 s.Kind/6 t.ErrorList/7 (/11 e.Collected/24 )/12 (/13 # TkRefal5Mode/21 t.0/22 s.NewMode/30 )/14 e.Tokens/28 >/1
      context[24] = context[15];
      context[25] = context[16];
      context[26] = context[19];
      context[27] = context[20];
      context[28] = context[17];
      context[29] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_TkRefal5Mode], context[21] ) )
        continue;
      // closed e.Collected as range 24
      // closed e.Tokens as range 28
      if( ! refalrts::svar_left( context[30], context[26], context[27] ) )
        continue;
      if( ! refalrts::empty_seq( context[26], context[27] ) )
        continue;
      //DEBUG: t.ErrorList: 7
      //DEBUG: t.0: 22
      //DEBUG: s.Mode: 5
      //DEBUG: s.Kind: 6
      //DEBUG: e.Collected: 24
      //DEBUG: e.Tokens: 28
      //DEBUG: s.NewMode: 30

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Mode/5 {REMOVED TILE} (/13 # TkRefal5Mode/21 t.0/22 {REMOVED TILE} )/14 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoTokenChain/4 } Tile{ AsIs: s.NewMode/30 } Tile{ AsIs: s.Kind/6 AsIs: t.ErrorList/7 AsIs: (/11 AsIs: e.Collected/24 AsIs: )/12 } Tile{ AsIs: e.Tokens/28 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[6], context[12] );
      res = refalrts::splice_elem( res, context[30] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoTokenChain/4 s.new15/5 s.new16/6 t.new17/7 (/11 e.new20/24 )/12 (/13 # TkAmpersand/21 t.new18/22 )/14 e.new19/26 >/1
    context[24] = context[15];
    context[25] = context[16];
    context[26] = context[17];
    context[27] = context[18];
    if( ! refalrts::ident_term( identifiers[ident_TkAmpersand], context[21] ) )
      continue;
    if( ! refalrts::empty_seq( context[19], context[20] ) )
      continue;
    // closed e.new20 as range 24
    // closed e.new19 as range 26
    do {
      // </0 & DoTokenChain/4 # Extended/5 s.Kind/6 t.ErrorList/7 (/11 e.Collected/28 )/12 (/13 # TkAmpersand/21 t.0/22 )/14 (/34 # TkName/36 t.2/37 e.2/32 )/35 e./30 >/1
      context[28] = context[24];
      context[29] = context[25];
      context[30] = context[26];
      context[31] = context[27];
      if( ! refalrts::ident_term( identifiers[ident_Extended], context[5] ) )
        continue;
      context[32] = 0;
      context[33] = 0;
      context[34] = refalrts::brackets_left( context[32], context[33], context[30], context[31] );
      if( ! context[34] )
        continue;
      refalrts::bracket_pointers(context[34], context[35]);
      context[36] = refalrts::ident_left( identifiers[ident_TkName], context[32], context[33] );
      if( ! context[36] )
        continue;
      // closed e.Collected as range 28
      // closed e. as range 30
      context[38] = refalrts::tvar_left( context[37], context[32], context[33] );
      if( ! context[38] )
        continue;
      // closed e.2 as range 32
      //DEBUG: t.ErrorList: 7
      //DEBUG: t.0: 22
      //DEBUG: s.Kind: 6
      //DEBUG: e.Collected: 28
      //DEBUG: e.: 30
      //DEBUG: t.2: 37
      //DEBUG: e.2: 32

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} t.0/22 {REMOVED TILE} (/34 # TkName/36 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoTokenChain/4 AsIs: # Extended/5 AsIs: s.Kind/6 AsIs: t.ErrorList/7 AsIs: (/11 AsIs: e.Collected/28 HalfReuse: (/12 HalfReuse: # Symbol/13 Reuse: # Name/21 } Tile{ AsIs: t.2/37 } Tile{ AsIs: e.2/32 } Tile{ AsIs: )/14 } Tile{ AsIs: )/35 AsIs: e./30 AsIs: >/1 ]] }
      refalrts::reinit_open_bracket(context[12]);
      refalrts::reinit_ident(context[13], identifiers[ident_Symbol]);
      refalrts::update_ident(context[21], identifiers[ident_Name]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[11], context[35] );
      refalrts::link_brackets( context[12], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[35];
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      refalrts::splice_to_freelist_open( vm, context[21], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoTokenChain/4 # Classic/5 s.Kind/6 t.ErrorList/7 (/11 e.Collected/28 )/12 (/13 # TkAmpersand/21 t.0/22 )/14 e.Tokens/30 >/1
      context[28] = context[24];
      context[29] = context[25];
      context[30] = context[26];
      context[31] = context[27];
      if( ! refalrts::ident_term( identifiers[ident_Classic], context[5] ) )
        continue;
      // closed e.Collected as range 28
      // closed e.Tokens as range 30
      //DEBUG: t.ErrorList: 7
      //DEBUG: t.0: 22
      //DEBUG: s.Kind: 6
      //DEBUG: e.Collected: 28
      //DEBUG: e.Tokens: 30

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Kind/6 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain:1$11=1@1/4 HalfReuse: s.Kind6 /5 } Tile{ AsIs: (/11 AsIs: e.Collected/28 AsIs: )/12 HalfReuse: </13 HalfReuse: & EL-AddErrorAt/21 } Tile{ AsIs: t.ErrorList/7 } Tile{ AsIs: t.0/22 }"\'&\' is not where-with sign"/32 >/34 (/35 Tile{ AsIs: )/14 AsIs: e.Tokens/30 AsIs: >/1 ]] }
      refalrts::alloc_chars(vm, context[32], context[33], "\'&\' is not where-with sign", 26);
      refalrts::alloc_close_call(vm, context[34]);
      refalrts::alloc_open_bracket(vm, context[35]);
      refalrts::update_name(context[4], functions[efunc_gen_DoTokenChain_B1S11A1Z1]);
      refalrts::reinit_svar( context[5], context[6] );
      refalrts::reinit_open_call(context[13]);
      refalrts::reinit_name(context[21], functions[efunc_ELm_AddErrorAt]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[35], context[14] );
      refalrts::push_stack( vm, context[34] );
      refalrts::push_stack( vm, context[13] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[32], context[35] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      res = refalrts::splice_evar( res, context[11], context[21] );
      refalrts::splice_to_freelist_open( vm, context[5], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoTokenChain/4 # Extended/5 s.Kind/6 t.ErrorList/7 (/11 e.Collected/28 )/12 (/13 # TkAmpersand/21 t.0/22 )/14 e.Tokens/30 >/1
      context[28] = context[24];
      context[29] = context[25];
      context[30] = context[26];
      context[31] = context[27];
      if( ! refalrts::ident_term( identifiers[ident_Extended], context[5] ) )
        continue;
      // closed e.Collected as range 28
      // closed e.Tokens as range 30
      //DEBUG: t.ErrorList: 7
      //DEBUG: t.0: 22
      //DEBUG: s.Kind: 6
      //DEBUG: e.Collected: 28
      //DEBUG: e.Tokens: 30

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Kind/6 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain:1$11=1@2/4 HalfReuse: s.Kind6 /5 } Tile{ AsIs: (/11 AsIs: e.Collected/28 AsIs: )/12 HalfReuse: </13 HalfReuse: & EL-AddErrorAt/21 } Tile{ AsIs: t.ErrorList/7 } Tile{ AsIs: t.0/22 }"Expected function name after \'&\'"/32 >/34 (/35 Tile{ AsIs: )/14 AsIs: e.Tokens/30 AsIs: >/1 ]] }
      refalrts::alloc_chars(vm, context[32], context[33], "Expected function name after \'&\'", 32);
      refalrts::alloc_close_call(vm, context[34]);
      refalrts::alloc_open_bracket(vm, context[35]);
      refalrts::update_name(context[4], functions[efunc_gen_DoTokenChain_B1S11A1Z2]);
      refalrts::reinit_svar( context[5], context[6] );
      refalrts::reinit_open_call(context[13]);
      refalrts::reinit_name(context[21], functions[efunc_ELm_AddErrorAt]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[35], context[14] );
      refalrts::push_stack( vm, context[34] );
      refalrts::push_stack( vm, context[13] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[32], context[35] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      res = refalrts::splice_evar( res, context[11], context[21] );
      refalrts::splice_to_freelist_open( vm, context[5], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoTokenChain/4 s.Mode/5 s.Kind/6 t.ErrorList/7 (/11 e.Collected/28 )/12 (/13 # TkAmpersand/21 t.0/22 )/14 e.Tokens/30 >/1
    context[28] = context[24];
    context[29] = context[25];
    context[30] = context[26];
    context[31] = context[27];
    // closed e.Collected as range 28
    // closed e.Tokens as range 30
    //DEBUG: t.ErrorList: 7
    //DEBUG: t.0: 22
    //DEBUG: s.Mode: 5
    //DEBUG: s.Kind: 6
    //DEBUG: e.Collected: 28
    //DEBUG: e.Tokens: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain:1$11=1/4 AsIs: s.Mode/5 AsIs: s.Kind/6 } Tile{ AsIs: (/11 AsIs: e.Collected/28 AsIs: )/12 HalfReuse: </13 HalfReuse: & DoTokenChain:1$11=1:1$2=1/21 } Tile{ AsIs: t.ErrorList/7 } Tile{ AsIs: t.0/22 HalfReuse: (/14 AsIs: e.Tokens/30 HalfReuse: )/1 } </32 & DoTokenChain:1$11=1:1$2=1:1*2/33 s.Mode/5/34 >/35 >/36 >/37 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[32]);
    refalrts::alloc_name(vm, context[33], functions[efunc_gen_DoTokenChain_B1S11A1B1S2A1B1D2]);
    refalrts::copy_stvar(vm, context[34], context[5]);
    refalrts::alloc_close_call(vm, context[35]);
    refalrts::alloc_close_call(vm, context[36]);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::update_name(context[4], functions[efunc_gen_DoTokenChain_B1S11A1]);
    refalrts::reinit_open_call(context[13]);
    refalrts::reinit_name(context[21], functions[efunc_gen_DoTokenChain_B1S11A1B1S2A1]);
    refalrts::reinit_open_bracket(context[14]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[36] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[32] );
    refalrts::link_brackets( context[14], context[1] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[32], context[37] );
    res = refalrts::splice_evar( res, context[22], context[1] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[11], context[21] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoTokenChain/4 s.Mode/5 s.Kind/6 t.ErrorList/7 (/11 e.Collected/9 )/12 t.NextToken/13 e.Tokens/2 >/1
  // closed e.Collected as range 9
  // closed e.Tokens as range 2
  //DEBUG: t.ErrorList: 7
  //DEBUG: t.NextToken: 13
  //DEBUG: s.Mode: 5
  //DEBUG: s.Kind: 6
  //DEBUG: e.Collected: 9
  //DEBUG: e.Tokens: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain:1*11/4 AsIs: s.Mode/5 AsIs: s.Kind/6 AsIs: t.ErrorList/7 AsIs: (/11 AsIs: e.Collected/9 AsIs: )/12 } (/15 Tile{ AsIs: e.Tokens/2 } )/16 Tile{ AsIs: t.NextToken/13 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::update_name(context[4], functions[efunc_gen_DoTokenChain_B1D11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[15] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoTokenChain("DoTokenChain", COOKIE1_, COOKIE2_, func_DoTokenChain);


static refalrts::FnResult func_gen_DoTokenChainm_AfterCall_S4A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 62 elems
  refalrts::Iter context[62];
  refalrts::zeros( context, 62 );
  // </0 & DoTokenChain-AfterCall$4=2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoTokenChain-AfterCall$4=2/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 s.new5/18 t.new6/19 (/23 e.new7/21 )/24 (/27 e.new8/25 )/28 t.new9/29 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  if( ! refalrts::svar_left( context[18], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[20] = refalrts::tvar_left( context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.new7 as range 21
  // closed e.new8 as range 25
  context[30] = refalrts::tvar_left( context[29], context[2], context[3] );
  if( ! context[30] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & DoTokenChain-AfterCall$4=2/4 s.Mode/5 (/8 e.Collected/31 )/9 (/12 e.OptionalFuncName/33 )/13 (/16 e.BracketTerms/35 )/17 # TkName/18 t.Pos/19 (/23 e.Value/37 )/24 (/27 e.Tokens/39 )/28 t.ErrorList$b/29 >/1
    context[31] = context[6];
    context[32] = context[7];
    context[33] = context[10];
    context[34] = context[11];
    context[35] = context[14];
    context[36] = context[15];
    context[37] = context[21];
    context[38] = context[22];
    context[39] = context[25];
    context[40] = context[26];
    if( ! refalrts::ident_term( identifiers[ident_TkName], context[18] ) )
      continue;
    // closed e.Collected as range 31
    // closed e.OptionalFuncName as range 33
    // closed e.BracketTerms as range 35
    // closed e.Value as range 37
    // closed e.Tokens as range 39
    //DEBUG: t.Pos: 19
    //DEBUG: t.ErrorList$b: 29
    //DEBUG: s.Mode: 5
    //DEBUG: e.Collected: 31
    //DEBUG: e.OptionalFuncName: 33
    //DEBUG: e.BracketTerms: 35
    //DEBUG: e.Value: 37
    //DEBUG: e.Tokens: 39

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} )/9 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.Pos/19 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 AsIs: s.Mode/5 HalfReuse: # Pattern/8 } Tile{ AsIs: t.ErrorList$b/29 HalfReuse: (/1 } Tile{ AsIs: e.Collected/31 } Tile{ AsIs: (/12 } Tile{ HalfReuse: # Brackets/17 } Tile{ AsIs: e.OptionalFuncName/33 } Tile{ AsIs: e.BracketTerms/35 } Tile{ AsIs: )/13 AsIs: (/16 } Tile{ Reuse: # Symbol/18 } Tile{ HalfReuse: # Identifier/23 AsIs: e.Value/37 AsIs: )/24 HalfReuse: )/27 AsIs: e.Tokens/39 HalfReuse: >/28 } Tile{ ]] }
    refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
    refalrts::reinit_ident(context[8], identifiers[ident_Pattern]);
    refalrts::reinit_open_bracket(context[1]);
    refalrts::reinit_ident(context[17], identifiers[ident_Brackets]);
    refalrts::update_ident(context[18], identifiers[ident_Symbol]);
    refalrts::reinit_ident(context[23], identifiers[ident_Identifier]);
    refalrts::reinit_close_bracket(context[27]);
    refalrts::reinit_close_call(context[28]);
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[1], context[27] );
    refalrts::link_brackets( context[16], context[24] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[23], context[28] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[13], context[16] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[29], context[1] );
    refalrts::splice_to_freelist_open( vm, context[8], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoTokenChain-AfterCall$4=2/4 s.Mode/5 (/8 e.Collected/31 )/9 (/12 e.OptionalFuncName/33 )/13 (/16 e.BracketTerms/35 )/17 # TkCompound/18 t.Pos/19 (/23 e.Value/37 )/24 (/27 e.Tokens/39 )/28 t.ErrorList$b/29 >/1
    context[31] = context[6];
    context[32] = context[7];
    context[33] = context[10];
    context[34] = context[11];
    context[35] = context[14];
    context[36] = context[15];
    context[37] = context[21];
    context[38] = context[22];
    context[39] = context[25];
    context[40] = context[26];
    if( ! refalrts::ident_term( identifiers[ident_TkCompound], context[18] ) )
      continue;
    // closed e.Collected as range 31
    // closed e.OptionalFuncName as range 33
    // closed e.BracketTerms as range 35
    // closed e.Value as range 37
    // closed e.Tokens as range 39
    //DEBUG: t.Pos: 19
    //DEBUG: t.ErrorList$b: 29
    //DEBUG: s.Mode: 5
    //DEBUG: e.Collected: 31
    //DEBUG: e.OptionalFuncName: 33
    //DEBUG: e.BracketTerms: 35
    //DEBUG: e.Value: 37
    //DEBUG: e.Tokens: 39

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} )/9 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.Pos/19 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 AsIs: s.Mode/5 HalfReuse: # Pattern/8 } Tile{ AsIs: t.ErrorList$b/29 HalfReuse: (/1 } Tile{ AsIs: e.Collected/31 } Tile{ AsIs: (/12 } Tile{ HalfReuse: # Brackets/17 } Tile{ AsIs: e.OptionalFuncName/33 } Tile{ AsIs: e.BracketTerms/35 } Tile{ AsIs: )/13 AsIs: (/16 } Tile{ Reuse: # Symbol/18 } Tile{ HalfReuse: # Identifier/23 AsIs: e.Value/37 AsIs: )/24 HalfReuse: )/27 AsIs: e.Tokens/39 HalfReuse: >/28 } Tile{ ]] }
    refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
    refalrts::reinit_ident(context[8], identifiers[ident_Pattern]);
    refalrts::reinit_open_bracket(context[1]);
    refalrts::reinit_ident(context[17], identifiers[ident_Brackets]);
    refalrts::update_ident(context[18], identifiers[ident_Symbol]);
    refalrts::reinit_ident(context[23], identifiers[ident_Identifier]);
    refalrts::reinit_close_bracket(context[27]);
    refalrts::reinit_close_call(context[28]);
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[1], context[27] );
    refalrts::link_brackets( context[16], context[24] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[23], context[28] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[13], context[16] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[29], context[1] );
    refalrts::splice_to_freelist_open( vm, context[8], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoTokenChain-AfterCall$4=2/4 s.new10/5 (/8 e.new14/31 )/9 (/12 e.new15/33 )/13 (/16 e.new16/35 )/17 s.new11/18 t.new12/19 (/23 s.new17/41 e.new18/37 )/24 (/27 e.new19/39 )/28 t.new13/29 >/1
    context[31] = context[6];
    context[32] = context[7];
    context[33] = context[10];
    context[34] = context[11];
    context[35] = context[14];
    context[36] = context[15];
    context[37] = context[21];
    context[38] = context[22];
    context[39] = context[25];
    context[40] = context[26];
    // closed e.new14 as range 31
    // closed e.new15 as range 33
    // closed e.new16 as range 35
    // closed e.new19 as range 39
    if( ! refalrts::svar_left( context[41], context[37], context[38] ) )
      continue;
    // closed e.new18 as range 37
    do {
      // </0 & DoTokenChain-AfterCall$4=2/4 s.new20/5 (/8 e.new24/42 )/9 (/12 e.new25/44 )/13 (/16 e.new26/46 )/17 s.new21/18 t.new22/19 (/23 s.new27/41 )/24 (/27 e.new28/48 )/28 t.new23/29 >/1
      context[42] = context[31];
      context[43] = context[32];
      context[44] = context[33];
      context[45] = context[34];
      context[46] = context[35];
      context[47] = context[36];
      context[48] = context[39];
      context[49] = context[40];
      if( ! refalrts::empty_seq( context[37], context[38] ) )
        continue;
      // closed e.new24 as range 42
      // closed e.new25 as range 44
      // closed e.new26 as range 46
      // closed e.new28 as range 48
      do {
        // </0 & DoTokenChain-AfterCall$4=2/4 s.Mode/5 (/8 e.Collected/50 )/9 (/12 e.OptionalFuncName/52 )/13 (/16 e.BracketTerms/54 )/17 # TkMacroDigit/18 t.Pos/19 (/23 s.Number/41 )/24 (/27 e.Tokens/56 )/28 t.ErrorList$b/29 >/1
        context[50] = context[42];
        context[51] = context[43];
        context[52] = context[44];
        context[53] = context[45];
        context[54] = context[46];
        context[55] = context[47];
        context[56] = context[48];
        context[57] = context[49];
        if( ! refalrts::ident_term( identifiers[ident_TkMacroDigit], context[18] ) )
          continue;
        // closed e.Collected as range 50
        // closed e.OptionalFuncName as range 52
        // closed e.BracketTerms as range 54
        // closed e.Tokens as range 56
        //DEBUG: t.Pos: 19
        //DEBUG: t.ErrorList$b: 29
        //DEBUG: s.Mode: 5
        //DEBUG: s.Number: 41
        //DEBUG: e.Collected: 50
        //DEBUG: e.OptionalFuncName: 52
        //DEBUG: e.BracketTerms: 54
        //DEBUG: e.Tokens: 56

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} )/9 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.Pos/19 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 AsIs: s.Mode/5 HalfReuse: # Pattern/8 } Tile{ AsIs: t.ErrorList$b/29 HalfReuse: (/1 } Tile{ AsIs: e.Collected/50 } Tile{ AsIs: (/12 } Tile{ HalfReuse: # Brackets/17 } Tile{ AsIs: e.OptionalFuncName/52 } Tile{ AsIs: e.BracketTerms/54 } Tile{ AsIs: )/13 AsIs: (/16 } Tile{ Reuse: # Symbol/18 } Tile{ HalfReuse: # Number/23 AsIs: s.Number/41 AsIs: )/24 HalfReuse: )/27 AsIs: e.Tokens/56 HalfReuse: >/28 } Tile{ ]] }
        refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
        refalrts::reinit_ident(context[8], identifiers[ident_Pattern]);
        refalrts::reinit_open_bracket(context[1]);
        refalrts::reinit_ident(context[17], identifiers[ident_Brackets]);
        refalrts::update_ident(context[18], identifiers[ident_Symbol]);
        refalrts::reinit_ident(context[23], identifiers[ident_Number]);
        refalrts::reinit_close_bracket(context[27]);
        refalrts::reinit_close_call(context[28]);
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[1], context[27] );
        refalrts::link_brackets( context[16], context[24] );
        refalrts::link_brackets( context[12], context[13] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[23], context[28] );
        res = refalrts::splice_elem( res, context[18] );
        res = refalrts::splice_evar( res, context[13], context[16] );
        res = refalrts::splice_evar( res, context[54], context[55] );
        res = refalrts::splice_evar( res, context[52], context[53] );
        res = refalrts::splice_elem( res, context[17] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[50], context[51] );
        res = refalrts::splice_evar( res, context[29], context[1] );
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoTokenChain-AfterCall$4=2/4 s.Mode/5 (/8 e.Collected/50 )/9 (/12 e.OptionalFuncName/52 )/13 (/16 e.BracketTerms/54 )/17 # TkChar/18 t.Pos/19 (/23 s.Char/41 )/24 (/27 e.Tokens/56 )/28 t.ErrorList$b/29 >/1
      context[50] = context[42];
      context[51] = context[43];
      context[52] = context[44];
      context[53] = context[45];
      context[54] = context[46];
      context[55] = context[47];
      context[56] = context[48];
      context[57] = context[49];
      if( ! refalrts::ident_term( identifiers[ident_TkChar], context[18] ) )
        continue;
      // closed e.Collected as range 50
      // closed e.OptionalFuncName as range 52
      // closed e.BracketTerms as range 54
      // closed e.Tokens as range 56
      //DEBUG: t.Pos: 19
      //DEBUG: t.ErrorList$b: 29
      //DEBUG: s.Mode: 5
      //DEBUG: s.Char: 41
      //DEBUG: e.Collected: 50
      //DEBUG: e.OptionalFuncName: 52
      //DEBUG: e.BracketTerms: 54
      //DEBUG: e.Tokens: 56

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} )/9 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.Pos/19 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 AsIs: s.Mode/5 HalfReuse: # Pattern/8 } Tile{ AsIs: t.ErrorList$b/29 HalfReuse: (/1 } Tile{ AsIs: e.Collected/50 } Tile{ AsIs: (/12 } Tile{ HalfReuse: # Brackets/17 } Tile{ AsIs: e.OptionalFuncName/52 } Tile{ AsIs: e.BracketTerms/54 } Tile{ AsIs: )/13 AsIs: (/16 } Tile{ Reuse: # Symbol/18 } Tile{ HalfReuse: # Char/23 AsIs: s.Char/41 AsIs: )/24 HalfReuse: )/27 AsIs: e.Tokens/56 HalfReuse: >/28 } Tile{ ]] }
      refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
      refalrts::reinit_ident(context[8], identifiers[ident_Pattern]);
      refalrts::reinit_open_bracket(context[1]);
      refalrts::reinit_ident(context[17], identifiers[ident_Brackets]);
      refalrts::update_ident(context[18], identifiers[ident_Symbol]);
      refalrts::reinit_ident(context[23], identifiers[ident_Char]);
      refalrts::reinit_close_bracket(context[27]);
      refalrts::reinit_close_call(context[28]);
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[1], context[27] );
      refalrts::link_brackets( context[16], context[24] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[23], context[28] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_evar( res, context[13], context[16] );
      res = refalrts::splice_evar( res, context[54], context[55] );
      res = refalrts::splice_evar( res, context[52], context[53] );
      res = refalrts::splice_elem( res, context[17] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[50], context[51] );
      res = refalrts::splice_evar( res, context[29], context[1] );
      refalrts::splice_to_freelist_open( vm, context[8], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoTokenChain-AfterCall$4=2/4 s.Mode/5 (/8 e.Collected/42 )/9 (/12 e.OptionalFuncName/44 )/13 (/16 e.BracketTerms/46 )/17 # TkVariable/18 t.Pos/19 (/23 s.VarType/41 e./48 )/24 (/27 e.Tokens/50 )/28 t.ErrorList$b/29 >/1
    context[42] = context[31];
    context[43] = context[32];
    context[44] = context[33];
    context[45] = context[34];
    context[46] = context[35];
    context[47] = context[36];
    context[48] = context[37];
    context[49] = context[38];
    context[50] = context[39];
    context[51] = context[40];
    if( ! refalrts::ident_term( identifiers[ident_TkVariable], context[18] ) )
      continue;
    // closed e.Collected as range 42
    // closed e.OptionalFuncName as range 44
    // closed e.BracketTerms as range 46
    // closed e. as range 48
    // closed e.Tokens as range 50
    //DEBUG: t.Pos: 19
    //DEBUG: t.ErrorList$b: 29
    //DEBUG: s.Mode: 5
    //DEBUG: s.VarType: 41
    //DEBUG: e.Collected: 42
    //DEBUG: e.OptionalFuncName: 44
    //DEBUG: e.BracketTerms: 46
    //DEBUG: e.: 48
    //DEBUG: e.Tokens: 50

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} )/9 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} (/23 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 AsIs: s.Mode/5 HalfReuse: # Pattern/8 } Tile{ AsIs: t.ErrorList$b/29 HalfReuse: (/1 } Tile{ AsIs: e.Collected/42 } Tile{ AsIs: (/16 } Tile{ HalfReuse: # Brackets/12 } Tile{ AsIs: e.OptionalFuncName/44 } Tile{ AsIs: e.BracketTerms/46 } Tile{ AsIs: )/13 } Tile{ HalfReuse: (/17 Reuse: # Var/18 AsIs: t.Pos/19 } Tile{ AsIs: s.VarType/41 AsIs: e./48 AsIs: )/24 HalfReuse: )/27 AsIs: e.Tokens/50 HalfReuse: >/28 } Tile{ ]] }
    refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
    refalrts::reinit_ident(context[8], identifiers[ident_Pattern]);
    refalrts::reinit_open_bracket(context[1]);
    refalrts::reinit_ident(context[12], identifiers[ident_Brackets]);
    refalrts::reinit_open_bracket(context[17]);
    refalrts::update_ident(context[18], identifiers[ident_Var]);
    refalrts::reinit_close_bracket(context[27]);
    refalrts::reinit_close_call(context[28]);
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[1], context[27] );
    refalrts::link_brackets( context[17], context[24] );
    refalrts::link_brackets( context[16], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[41], context[28] );
    res = refalrts::splice_evar( res, context[17], context[20] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_evar( res, context[46], context[47] );
    res = refalrts::splice_evar( res, context[44], context[45] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_evar( res, context[42], context[43] );
    res = refalrts::splice_evar( res, context[29], context[1] );
    refalrts::splice_to_freelist_open( vm, context[8], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoTokenChain-AfterCall$4=2/4 s.new10/5 (/8 e.new14/31 )/9 (/12 e.new15/33 )/13 (/16 e.new16/35 )/17 s.new11/18 t.new12/19 (/23 )/24 (/27 e.new17/37 )/28 t.new13/29 >/1
    context[31] = context[6];
    context[32] = context[7];
    context[33] = context[10];
    context[34] = context[11];
    context[35] = context[14];
    context[36] = context[15];
    context[37] = context[25];
    context[38] = context[26];
    if( ! refalrts::empty_seq( context[21], context[22] ) )
      continue;
    // closed e.new14 as range 31
    // closed e.new15 as range 33
    // closed e.new16 as range 35
    // closed e.new17 as range 37
    do {
      // </0 & DoTokenChain-AfterCall$4=2/4 s.Mode/5 (/8 e.Collected/39 )/9 (/12 e.OptionalFuncName/41 )/13 (/16 e.BracketTerms/43 )/17 # TkOpenBracket/18 t.Pos/19 (/23 )/24 (/27 e.Tokens/45 )/28 t.ErrorList$b/29 >/1
      context[39] = context[31];
      context[40] = context[32];
      context[41] = context[33];
      context[42] = context[34];
      context[43] = context[35];
      context[44] = context[36];
      context[45] = context[37];
      context[46] = context[38];
      if( ! refalrts::ident_term( identifiers[ident_TkOpenBracket], context[18] ) )
        continue;
      // closed e.Collected as range 39
      // closed e.OptionalFuncName as range 41
      // closed e.BracketTerms as range 43
      // closed e.Tokens as range 45
      //DEBUG: t.Pos: 19
      //DEBUG: t.ErrorList$b: 29
      //DEBUG: s.Mode: 5
      //DEBUG: e.Collected: 39
      //DEBUG: e.OptionalFuncName: 41
      //DEBUG: e.BracketTerms: 43
      //DEBUG: e.Tokens: 45

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} t.Pos/19 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain:1$6=1@1/4 AsIs: s.Mode/5 AsIs: (/8 AsIs: e.Collected/39 AsIs: )/9 AsIs: (/12 AsIs: e.OptionalFuncName/41 AsIs: )/13 AsIs: (/16 AsIs: e.BracketTerms/43 AsIs: )/17 HalfReuse: </18 } & DoTokenChain/47 s.Mode/5/48 Tile{ HalfReuse: # Pattern/23 } Tile{ AsIs: t.ErrorList$b/29 } Tile{ HalfReuse: (/24 HalfReuse: )/27 AsIs: e.Tokens/45 HalfReuse: >/28 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[47], functions[efunc_DoTokenChain]);
      refalrts::copy_stvar(vm, context[48], context[5]);
      refalrts::update_name(context[4], functions[efunc_gen_DoTokenChain_B1S6A1Z1]);
      refalrts::reinit_open_call(context[18]);
      refalrts::reinit_ident(context[23], identifiers[ident_Pattern]);
      refalrts::reinit_open_bracket(context[24]);
      refalrts::reinit_close_bracket(context[27]);
      refalrts::reinit_close_call(context[28]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[18] );
      refalrts::link_brackets( context[24], context[27] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[24], context[28] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_evar( res, context[47], context[48] );
      refalrts::splice_to_freelist_open( vm, context[18], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoTokenChain-AfterCall$4=2/4 s.new18/5 (/8 e.new21/39 )/9 (/12 e.new22/41 )/13 (/16 e.new23/43 )/17 # TkOpenCall/18 t.new19/19 (/23 )/24 (/27 e.new24/45 )/28 t.new20/29 >/1
    context[39] = context[31];
    context[40] = context[32];
    context[41] = context[33];
    context[42] = context[34];
    context[43] = context[35];
    context[44] = context[36];
    context[45] = context[37];
    context[46] = context[38];
    if( ! refalrts::ident_term( identifiers[ident_TkOpenCall], context[18] ) )
      continue;
    // closed e.new21 as range 39
    // closed e.new22 as range 41
    // closed e.new23 as range 43
    // closed e.new24 as range 45
    do {
      // </0 & DoTokenChain-AfterCall$4=2/4 # Classic/5 (/8 e.Collected/47 )/9 (/12 e.OptionalFuncName/49 )/13 (/16 e.BracketTerms/51 )/17 # TkOpenCall/18 t.Pos/19 (/23 )/24 (/27 e.Tokens/53 )/28 t.ErrorList$b/29 >/1
      context[47] = context[39];
      context[48] = context[40];
      context[49] = context[41];
      context[50] = context[42];
      context[51] = context[43];
      context[52] = context[44];
      context[53] = context[45];
      context[54] = context[46];
      if( ! refalrts::ident_term( identifiers[ident_Classic], context[5] ) )
        continue;
      // closed e.Collected as range 47
      // closed e.OptionalFuncName as range 49
      // closed e.BracketTerms as range 51
      // closed e.Tokens as range 53
      //DEBUG: t.Pos: 19
      //DEBUG: t.ErrorList$b: 29
      //DEBUG: e.Collected: 47
      //DEBUG: e.OptionalFuncName: 49
      //DEBUG: e.BracketTerms: 51
      //DEBUG: e.Tokens: 53

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoTokenChain:1$7=1@2/5 AsIs: (/8 AsIs: e.Collected/47 AsIs: )/9 AsIs: (/12 AsIs: e.OptionalFuncName/49 AsIs: )/13 AsIs: (/16 AsIs: e.BracketTerms/51 AsIs: )/17 } t.Pos/19/55 Tile{ AsIs: (/27 AsIs: e.Tokens/53 AsIs: )/28 } Tile{ AsIs: </0 } & EL-AddErrorAt/57 Tile{ AsIs: t.ErrorList$b/29 } Tile{ AsIs: t.Pos/19 HalfReuse: 'I'/23 HalfReuse: 'd'/24 } Tile{ HalfReuse: 'e'/18 }"ntifier expected after \'<\'"/58 >/60 Tile{ AsIs: >/1 ]] }
      refalrts::copy_evar(vm, context[55], context[56], context[19], context[20]);
      refalrts::alloc_name(vm, context[57], functions[efunc_ELm_AddErrorAt]);
      refalrts::alloc_chars(vm, context[58], context[59], "ntifier expected after \'<\'", 26);
      refalrts::alloc_close_call(vm, context[60]);
      refalrts::reinit_open_call(context[4]);
      refalrts::reinit_name(context[5], functions[efunc_gen_DoTokenChain_B1S7A1Z2]);
      refalrts::reinit_char(context[23], 'I');
      refalrts::reinit_char(context[24], 'd');
      refalrts::reinit_char(context[18], 'e');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[4] );
      refalrts::push_stack( vm, context[60] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[58], context[60] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_evar( res, context[19], context[24] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_elem( res, context[57] );
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[55], context[56] );
      res = refalrts::splice_evar( res, context[4], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoTokenChain-AfterCall$4=2/4 # Extended/5 (/8 e.Collected/47 )/9 (/12 e.OptionalFuncName/49 )/13 (/16 e.BracketTerms/51 )/17 # TkOpenCall/18 t.Pos/19 (/23 )/24 (/27 e.Tokens/53 )/28 t.ErrorList$b/29 >/1
      context[47] = context[39];
      context[48] = context[40];
      context[49] = context[41];
      context[50] = context[42];
      context[51] = context[43];
      context[52] = context[44];
      context[53] = context[45];
      context[54] = context[46];
      if( ! refalrts::ident_term( identifiers[ident_Extended], context[5] ) )
        continue;
      // closed e.Collected as range 47
      // closed e.OptionalFuncName as range 49
      // closed e.BracketTerms as range 51
      // closed e.Tokens as range 53
      //DEBUG: t.Pos: 19
      //DEBUG: t.ErrorList$b: 29
      //DEBUG: e.Collected: 47
      //DEBUG: e.OptionalFuncName: 49
      //DEBUG: e.BracketTerms: 51
      //DEBUG: e.Tokens: 53

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain-AfterCall/4 AsIs: # Extended/5 HalfReuse: # Pattern/8 } Tile{ AsIs: (/16 } Tile{ AsIs: e.Collected/47 } Tile{ AsIs: (/12 } # Brackets/55 Tile{ AsIs: e.OptionalFuncName/49 } Tile{ AsIs: e.BracketTerms/51 } Tile{ AsIs: )/17 HalfReuse: )/18 AsIs: t.Pos/19 AsIs: (/23 AsIs: )/24 HalfReuse: </27 } Tile{ HalfReuse: & DoTokenChain/9 } # Extended/56 Tile{ HalfReuse: # Pattern/28 AsIs: t.ErrorList$b/29 } (/57 Tile{ AsIs: )/13 } Tile{ AsIs: e.Tokens/53 } >/58 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[55], identifiers[ident_Brackets]);
      refalrts::alloc_ident(vm, context[56], identifiers[ident_Extended]);
      refalrts::alloc_open_bracket(vm, context[57]);
      refalrts::alloc_close_call(vm, context[58]);
      refalrts::update_name(context[4], functions[efunc_DoTokenChainm_AfterCall]);
      refalrts::reinit_ident(context[8], identifiers[ident_Pattern]);
      refalrts::reinit_close_bracket(context[18]);
      refalrts::reinit_open_call(context[27]);
      refalrts::reinit_name(context[9], functions[efunc_DoTokenChain]);
      refalrts::reinit_ident(context[28], identifiers[ident_Pattern]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[58] );
      refalrts::push_stack( vm, context[27] );
      refalrts::link_brackets( context[57], context[13] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[16], context[18] );
      refalrts::link_brackets( context[12], context[17] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[58] );
      res = refalrts::splice_evar( res, context[53], context[54] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_elem( res, context[57] );
      res = refalrts::splice_evar( res, context[28], context[30] );
      res = refalrts::splice_elem( res, context[56] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_evar( res, context[17], context[27] );
      res = refalrts::splice_evar( res, context[51], context[52] );
      res = refalrts::splice_evar( res, context[49], context[50] );
      res = refalrts::splice_elem( res, context[55] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[47], context[48] );
      res = refalrts::splice_elem( res, context[16] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoTokenChain-AfterCall$4=2/4 s.Mode/5 (/8 e.Collected/47 )/9 (/12 e.OptionalFuncName/49 )/13 (/16 e.BracketTerms/51 )/17 # TkOpenCall/18 t.Pos/19 (/23 )/24 (/27 e.Tokens/53 )/28 t.ErrorList$b/29 >/1
    context[47] = context[39];
    context[48] = context[40];
    context[49] = context[41];
    context[50] = context[42];
    context[51] = context[43];
    context[52] = context[44];
    context[53] = context[45];
    context[54] = context[46];
    // closed e.Collected as range 47
    // closed e.OptionalFuncName as range 49
    // closed e.BracketTerms as range 51
    // closed e.Tokens as range 53
    //DEBUG: t.Pos: 19
    //DEBUG: t.ErrorList$b: 29
    //DEBUG: s.Mode: 5
    //DEBUG: e.Collected: 47
    //DEBUG: e.OptionalFuncName: 49
    //DEBUG: e.BracketTerms: 51
    //DEBUG: e.Tokens: 53

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain:1$7=1@3/4 AsIs: s.Mode/5 AsIs: (/8 AsIs: e.Collected/47 AsIs: )/9 AsIs: (/12 AsIs: e.OptionalFuncName/49 AsIs: )/13 AsIs: (/16 AsIs: e.BracketTerms/51 AsIs: )/17 } t.Pos/19/55 Tile{ AsIs: (/27 AsIs: e.Tokens/53 AsIs: )/28 } </57 & ClassicError*2/58 Tile{ AsIs: t.ErrorList$b/29 } Tile{ HalfReuse: s.Mode5 /18 AsIs: t.Pos/19 HalfReuse: 'I'/23 HalfReuse: 'd'/24 }"entifier expected after \'<\'"/59 >/61 Tile{ AsIs: >/1 ]] }
    refalrts::copy_evar(vm, context[55], context[56], context[19], context[20]);
    refalrts::alloc_open_call(vm, context[57]);
    refalrts::alloc_name(vm, context[58], functions[efunc_gen_ClassicError_D2]);
    refalrts::alloc_chars(vm, context[59], context[60], "entifier expected after \'<\'", 27);
    refalrts::alloc_close_call(vm, context[61]);
    refalrts::update_name(context[4], functions[efunc_gen_DoTokenChain_B1S7A1Z3]);
    refalrts::reinit_svar( context[18], context[5] );
    refalrts::reinit_char(context[23], 'I');
    refalrts::reinit_char(context[24], 'd');
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[61] );
    refalrts::push_stack( vm, context[57] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[59], context[61] );
    res = refalrts::splice_evar( res, context[18], context[24] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_evar( res, context[57], context[58] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[55], context[56] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoTokenChain-AfterCall$4=2/4 s.Mode/5 (/8 e.Collected/31 )/9 (/12 e.OptionalFuncName/33 )/13 (/16 e.BracketTerms/35 )/17 # TkOpenCall/18 t.Pos/19 (/23 e.Value/37 )/24 (/27 e.Tokens/39 )/28 t.ErrorList$b/29 >/1
    context[31] = context[6];
    context[32] = context[7];
    context[33] = context[10];
    context[34] = context[11];
    context[35] = context[14];
    context[36] = context[15];
    context[37] = context[21];
    context[38] = context[22];
    context[39] = context[25];
    context[40] = context[26];
    if( ! refalrts::ident_term( identifiers[ident_TkOpenCall], context[18] ) )
      continue;
    // closed e.Collected as range 31
    // closed e.OptionalFuncName as range 33
    // closed e.BracketTerms as range 35
    // closed e.Value as range 37
    // closed e.Tokens as range 39
    //DEBUG: t.Pos: 19
    //DEBUG: t.ErrorList$b: 29
    //DEBUG: s.Mode: 5
    //DEBUG: e.Collected: 31
    //DEBUG: e.OptionalFuncName: 33
    //DEBUG: e.BracketTerms: 35
    //DEBUG: e.Value: 37
    //DEBUG: e.Tokens: 39

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain-AfterCall/4 AsIs: s.Mode/5 HalfReuse: # Pattern/8 } Tile{ AsIs: (/12 } Tile{ AsIs: e.Collected/31 } Tile{ HalfReuse: (/9 } # Brackets/41 Tile{ AsIs: e.OptionalFuncName/33 } Tile{ AsIs: e.BracketTerms/35 } Tile{ AsIs: )/17 HalfReuse: )/18 AsIs: t.Pos/19 AsIs: (/23 } (/42 # Symbol/43 # Name/44 t.Pos/19/45 Tile{ AsIs: e.Value/37 } Tile{ AsIs: )/13 HalfReuse: )/16 } </47 & DoTokenChain/48 s.Mode/5/49 # Pattern/50 Tile{ AsIs: t.ErrorList$b/29 } Tile{ HalfReuse: (/24 HalfReuse: )/27 AsIs: e.Tokens/39 HalfReuse: >/28 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_ident(vm, context[41], identifiers[ident_Brackets]);
    refalrts::alloc_open_bracket(vm, context[42]);
    refalrts::alloc_ident(vm, context[43], identifiers[ident_Symbol]);
    refalrts::alloc_ident(vm, context[44], identifiers[ident_Name]);
    refalrts::copy_evar(vm, context[45], context[46], context[19], context[20]);
    refalrts::alloc_open_call(vm, context[47]);
    refalrts::alloc_name(vm, context[48], functions[efunc_DoTokenChain]);
    refalrts::copy_stvar(vm, context[49], context[5]);
    refalrts::alloc_ident(vm, context[50], identifiers[ident_Pattern]);
    refalrts::update_name(context[4], functions[efunc_DoTokenChainm_AfterCall]);
    refalrts::reinit_ident(context[8], identifiers[ident_Pattern]);
    refalrts::reinit_open_bracket(context[9]);
    refalrts::reinit_close_bracket(context[18]);
    refalrts::reinit_close_bracket(context[16]);
    refalrts::reinit_open_bracket(context[24]);
    refalrts::reinit_close_bracket(context[27]);
    refalrts::reinit_close_call(context[28]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[47] );
    refalrts::link_brackets( context[24], context[27] );
    refalrts::link_brackets( context[23], context[16] );
    refalrts::link_brackets( context[42], context[13] );
    refalrts::link_brackets( context[12], context[18] );
    refalrts::link_brackets( context[9], context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[24], context[28] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_evar( res, context[47], context[50] );
    res = refalrts::splice_evar( res, context[13], context[16] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[42], context[46] );
    res = refalrts::splice_evar( res, context[17], context[23] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_elem( res, context[41] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_elem( res, context[12] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoTokenChain-AfterCall$4=2/4 s.new10/5 (/8 e.new13/31 )/9 (/12 e.new14/33 )/13 (/16 e.new15/35 )/17 # TkOpenADT/18 t.new11/19 (/23 e.new16/37 )/24 (/27 e.new17/39 )/28 t.new12/29 >/1
    context[31] = context[6];
    context[32] = context[7];
    context[33] = context[10];
    context[34] = context[11];
    context[35] = context[14];
    context[36] = context[15];
    context[37] = context[21];
    context[38] = context[22];
    context[39] = context[25];
    context[40] = context[26];
    if( ! refalrts::ident_term( identifiers[ident_TkOpenADT], context[18] ) )
      continue;
    // closed e.new13 as range 31
    // closed e.new14 as range 33
    // closed e.new15 as range 35
    // closed e.new16 as range 37
    // closed e.new17 as range 39
    do {
      // </0 & DoTokenChain-AfterCall$4=2/4 # Classic/5 (/8 e.Collected/41 )/9 (/12 e.OptionalFuncName/43 )/13 (/16 e.BracketTerms/45 )/17 # TkOpenADT/18 t.Pos/19 (/23 e.Value/47 )/24 (/27 e.Tokens/49 )/28 t.ErrorList$b/29 >/1
      context[41] = context[31];
      context[42] = context[32];
      context[43] = context[33];
      context[44] = context[34];
      context[45] = context[35];
      context[46] = context[36];
      context[47] = context[37];
      context[48] = context[38];
      context[49] = context[39];
      context[50] = context[40];
      if( ! refalrts::ident_term( identifiers[ident_Classic], context[5] ) )
        continue;
      // closed e.Collected as range 41
      // closed e.OptionalFuncName as range 43
      // closed e.BracketTerms as range 45
      // closed e.Value as range 47
      // closed e.Tokens as range 49
      //DEBUG: t.Pos: 19
      //DEBUG: t.ErrorList$b: 29
      //DEBUG: e.Collected: 41
      //DEBUG: e.OptionalFuncName: 43
      //DEBUG: e.BracketTerms: 45
      //DEBUG: e.Value: 47
      //DEBUG: e.Tokens: 49

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoTokenChain:1$9=1@2/5 AsIs: (/8 AsIs: e.Collected/41 AsIs: )/9 AsIs: (/12 AsIs: e.OptionalFuncName/43 AsIs: )/13 AsIs: (/16 AsIs: e.BracketTerms/45 AsIs: )/17 } Tile{ AsIs: t.Pos/19 AsIs: (/23 AsIs: e.Value/47 AsIs: )/24 AsIs: (/27 AsIs: e.Tokens/49 AsIs: )/28 } Tile{ AsIs: </0 } & EL-AddErrorAt/51 Tile{ AsIs: t.ErrorList$b/29 } t.Pos/19/52 Tile{ HalfReuse: 'A'/18 }"bstract data types are an extension"/54 >/56 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[51], functions[efunc_ELm_AddErrorAt]);
      refalrts::copy_evar(vm, context[52], context[53], context[19], context[20]);
      refalrts::alloc_chars(vm, context[54], context[55], "bstract data types are an extension", 35);
      refalrts::alloc_close_call(vm, context[56]);
      refalrts::reinit_open_call(context[4]);
      refalrts::reinit_name(context[5], functions[efunc_gen_DoTokenChain_B1S9A1Z2]);
      refalrts::reinit_char(context[18], 'A');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[4] );
      refalrts::push_stack( vm, context[56] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[54], context[56] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_evar( res, context[52], context[53] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_elem( res, context[51] );
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_evar( res, context[19], context[28] );
      res = refalrts::splice_evar( res, context[4], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoTokenChain-AfterCall$4=2/4 # Extended/5 (/8 e.Collected/41 )/9 (/12 e.OptionalFuncName/43 )/13 (/16 e.BracketTerms/45 )/17 # TkOpenADT/18 t.Pos/19 (/23 e.Value/47 )/24 (/27 e.Tokens/49 )/28 t.ErrorList$b/29 >/1
      context[41] = context[31];
      context[42] = context[32];
      context[43] = context[33];
      context[44] = context[34];
      context[45] = context[35];
      context[46] = context[36];
      context[47] = context[37];
      context[48] = context[38];
      context[49] = context[39];
      context[50] = context[40];
      if( ! refalrts::ident_term( identifiers[ident_Extended], context[5] ) )
        continue;
      // closed e.Collected as range 41
      // closed e.OptionalFuncName as range 43
      // closed e.BracketTerms as range 45
      // closed e.Value as range 47
      // closed e.Tokens as range 49
      //DEBUG: t.Pos: 19
      //DEBUG: t.ErrorList$b: 29
      //DEBUG: e.Collected: 41
      //DEBUG: e.OptionalFuncName: 43
      //DEBUG: e.BracketTerms: 45
      //DEBUG: e.Value: 47
      //DEBUG: e.Tokens: 49

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoTokenChain:1$9=2@3/5 AsIs: (/8 AsIs: e.Collected/41 AsIs: )/9 AsIs: (/12 AsIs: e.OptionalFuncName/43 AsIs: )/13 AsIs: (/16 AsIs: e.BracketTerms/45 AsIs: )/17 } Tile{ AsIs: t.Pos/19 AsIs: (/23 AsIs: e.Value/47 AsIs: )/24 HalfReuse: </27 } Tile{ HalfReuse: & DoTokenChain/0 } Tile{ Reuse: # Extended/18 } Tile{ HalfReuse: # Pattern/28 AsIs: t.ErrorList$b/29 } (/51 )/52 Tile{ AsIs: e.Tokens/49 } >/53 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[51]);
      refalrts::alloc_close_bracket(vm, context[52]);
      refalrts::alloc_close_call(vm, context[53]);
      refalrts::reinit_open_call(context[4]);
      refalrts::reinit_name(context[5], functions[efunc_gen_DoTokenChain_B1S9A2Z3]);
      refalrts::reinit_open_call(context[27]);
      refalrts::reinit_name(context[0], functions[efunc_DoTokenChain]);
      refalrts::update_ident(context[18], identifiers[ident_Extended]);
      refalrts::reinit_ident(context[28], identifiers[ident_Pattern]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[4] );
      refalrts::push_stack( vm, context[53] );
      refalrts::push_stack( vm, context[27] );
      refalrts::link_brackets( context[51], context[52] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[53] );
      res = refalrts::splice_evar( res, context[49], context[50] );
      res = refalrts::splice_evar( res, context[51], context[52] );
      res = refalrts::splice_evar( res, context[28], context[30] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_evar( res, context[19], context[27] );
      res = refalrts::splice_evar( res, context[4], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoTokenChain-AfterCall$4=2/4 s.Mode/5 (/8 e.Collected/41 )/9 (/12 e.OptionalFuncName/43 )/13 (/16 e.BracketTerms/45 )/17 # TkOpenADT/18 t.Pos/19 (/23 e.Value/47 )/24 (/27 e.Tokens/49 )/28 t.ErrorList$b/29 >/1
    context[41] = context[31];
    context[42] = context[32];
    context[43] = context[33];
    context[44] = context[34];
    context[45] = context[35];
    context[46] = context[36];
    context[47] = context[37];
    context[48] = context[38];
    context[49] = context[39];
    context[50] = context[40];
    // closed e.Collected as range 41
    // closed e.OptionalFuncName as range 43
    // closed e.BracketTerms as range 45
    // closed e.Value as range 47
    // closed e.Tokens as range 49
    //DEBUG: t.Pos: 19
    //DEBUG: t.ErrorList$b: 29
    //DEBUG: s.Mode: 5
    //DEBUG: e.Collected: 41
    //DEBUG: e.OptionalFuncName: 43
    //DEBUG: e.BracketTerms: 45
    //DEBUG: e.Value: 47
    //DEBUG: e.Tokens: 49

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain:1$9=1@3/4 AsIs: s.Mode/5 AsIs: (/8 AsIs: e.Collected/41 AsIs: )/9 AsIs: (/12 AsIs: e.OptionalFuncName/43 AsIs: )/13 AsIs: (/16 AsIs: e.BracketTerms/45 AsIs: )/17 } Tile{ AsIs: t.Pos/19 AsIs: (/23 AsIs: e.Value/47 AsIs: )/24 AsIs: (/27 AsIs: e.Tokens/49 AsIs: )/28 } </51 Tile{ HalfReuse: & ClassicError*2/18 } Tile{ AsIs: t.ErrorList$b/29 } s.Mode/5/52 t.Pos/19/53"Abstract data types are an extension"/55 >/57 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[51]);
    refalrts::copy_stvar(vm, context[52], context[5]);
    refalrts::copy_evar(vm, context[53], context[54], context[19], context[20]);
    refalrts::alloc_chars(vm, context[55], context[56], "Abstract data types are an extension", 36);
    refalrts::alloc_close_call(vm, context[57]);
    refalrts::update_name(context[4], functions[efunc_gen_DoTokenChain_B1S9A1Z3]);
    refalrts::reinit_name(context[18], functions[efunc_gen_ClassicError_D2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[57] );
    refalrts::push_stack( vm, context[51] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[52], context[57] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_elem( res, context[51] );
    res = refalrts::splice_evar( res, context[19], context[28] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoTokenChain-AfterCall$4=2/4 s.Mode/5 (/8 e.Collected/31 )/9 (/12 e.OptionalFuncName/33 )/13 (/16 e.BracketTerms/35 )/17 # TkRefal5Mode/18 t.Pos/19 (/23 s.NewMode/41 )/24 (/27 e.Tokens/39 )/28 t.ErrorList$b/29 >/1
    context[31] = context[6];
    context[32] = context[7];
    context[33] = context[10];
    context[34] = context[11];
    context[35] = context[14];
    context[36] = context[15];
    context[37] = context[21];
    context[38] = context[22];
    context[39] = context[25];
    context[40] = context[26];
    if( ! refalrts::ident_term( identifiers[ident_TkRefal5Mode], context[18] ) )
      continue;
    // closed e.Collected as range 31
    // closed e.OptionalFuncName as range 33
    // closed e.BracketTerms as range 35
    // closed e.Tokens as range 39
    if( ! refalrts::svar_left( context[41], context[37], context[38] ) )
      continue;
    if( ! refalrts::empty_seq( context[37], context[38] ) )
      continue;
    //DEBUG: t.Pos: 19
    //DEBUG: t.ErrorList$b: 29
    //DEBUG: s.Mode: 5
    //DEBUG: e.Collected: 31
    //DEBUG: e.OptionalFuncName: 33
    //DEBUG: e.BracketTerms: 35
    //DEBUG: e.Tokens: 39
    //DEBUG: s.NewMode: 41

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Mode/5 {REMOVED TILE} {REMOVED TILE} )/13 (/16 {REMOVED TILE} {REMOVED TILE} t.Pos/19 (/23 s.NewMode/41 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 } Tile{ HalfReuse: s.NewMode41 /17 Reuse: # Pattern/18 } Tile{ AsIs: t.ErrorList$b/29 } Tile{ AsIs: (/8 AsIs: e.Collected/31 HalfReuse: (/9 HalfReuse: # Brackets/12 } Tile{ AsIs: e.OptionalFuncName/33 } Tile{ AsIs: e.BracketTerms/35 } Tile{ AsIs: )/24 HalfReuse: )/27 AsIs: e.Tokens/39 HalfReuse: >/28 } Tile{ ]] }
    refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
    refalrts::reinit_svar( context[17], context[41] );
    refalrts::update_ident(context[18], identifiers[ident_Pattern]);
    refalrts::reinit_open_bracket(context[9]);
    refalrts::reinit_ident(context[12], identifiers[ident_Brackets]);
    refalrts::reinit_close_bracket(context[27]);
    refalrts::reinit_close_call(context[28]);
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[8], context[27] );
    refalrts::link_brackets( context[9], context[24] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[24], context[28] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[8], context[12] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoTokenChain-AfterCall$4=2/4 s.new10/5 (/8 e.new13/31 )/9 (/12 e.new14/33 )/13 (/16 e.new15/35 )/17 # TkAmpersand/18 t.new11/19 (/23 )/24 (/27 e.new16/37 )/28 t.new12/29 >/1
    context[31] = context[6];
    context[32] = context[7];
    context[33] = context[10];
    context[34] = context[11];
    context[35] = context[14];
    context[36] = context[15];
    context[37] = context[25];
    context[38] = context[26];
    if( ! refalrts::ident_term( identifiers[ident_TkAmpersand], context[18] ) )
      continue;
    if( ! refalrts::empty_seq( context[21], context[22] ) )
      continue;
    // closed e.new13 as range 31
    // closed e.new14 as range 33
    // closed e.new15 as range 35
    // closed e.new16 as range 37
    do {
      // </0 & DoTokenChain-AfterCall$4=2/4 # Extended/5 (/8 e.Collected/39 )/9 (/12 e.OptionalFuncName/41 )/13 (/16 e.BracketTerms/43 )/17 # TkAmpersand/18 t.Pos/19 (/23 )/24 (/27 (/49 # TkName/51 t.1/52 e.2/47 )/50 e./45 )/28 t.ErrorList$b/29 >/1
      context[39] = context[31];
      context[40] = context[32];
      context[41] = context[33];
      context[42] = context[34];
      context[43] = context[35];
      context[44] = context[36];
      context[45] = context[37];
      context[46] = context[38];
      if( ! refalrts::ident_term( identifiers[ident_Extended], context[5] ) )
        continue;
      context[47] = 0;
      context[48] = 0;
      context[49] = refalrts::brackets_left( context[47], context[48], context[45], context[46] );
      if( ! context[49] )
        continue;
      refalrts::bracket_pointers(context[49], context[50]);
      context[51] = refalrts::ident_left( identifiers[ident_TkName], context[47], context[48] );
      if( ! context[51] )
        continue;
      // closed e.Collected as range 39
      // closed e.OptionalFuncName as range 41
      // closed e.BracketTerms as range 43
      // closed e. as range 45
      context[53] = refalrts::tvar_left( context[52], context[47], context[48] );
      if( ! context[53] )
        continue;
      // closed e.2 as range 47
      //DEBUG: t.Pos: 19
      //DEBUG: t.ErrorList$b: 29
      //DEBUG: e.Collected: 39
      //DEBUG: e.OptionalFuncName: 41
      //DEBUG: e.BracketTerms: 43
      //DEBUG: e.: 45
      //DEBUG: t.1: 52
      //DEBUG: e.2: 47

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} )/9 (/12 {REMOVED TILE} )/13 {REMOVED TILE} {REMOVED TILE} )/17 {REMOVED TILE} t.Pos/19 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 AsIs: # Extended/5 HalfReuse: # Pattern/8 } Tile{ AsIs: t.ErrorList$b/29 } Tile{ AsIs: (/16 } Tile{ AsIs: e.Collected/39 } Tile{ AsIs: (/23 } Tile{ Reuse: # Brackets/18 } Tile{ AsIs: e.OptionalFuncName/41 } Tile{ AsIs: e.BracketTerms/43 } Tile{ AsIs: )/24 AsIs: (/27 HalfReuse: # Symbol/49 Reuse: # Name/51 AsIs: t.1/52 AsIs: e.2/47 AsIs: )/50 } Tile{ AsIs: )/28 } Tile{ AsIs: e./45 } Tile{ AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
      refalrts::reinit_ident(context[8], identifiers[ident_Pattern]);
      refalrts::update_ident(context[18], identifiers[ident_Brackets]);
      refalrts::reinit_ident(context[49], identifiers[ident_Symbol]);
      refalrts::update_ident(context[51], identifiers[ident_Name]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[16], context[28] );
      refalrts::link_brackets( context[27], context[50] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[45], context[46] );
      res = refalrts::splice_elem( res, context[28] );
      res = refalrts::splice_evar( res, context[24], context[50] );
      res = refalrts::splice_evar( res, context[43], context[44] );
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      refalrts::splice_to_freelist_open( vm, context[8], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoTokenChain-AfterCall$4=2/4 # Classic/5 (/8 e.Collected/39 )/9 (/12 e.OptionalFuncName/41 )/13 (/16 e.BracketTerms/43 )/17 # TkAmpersand/18 t.Pos/19 (/23 )/24 (/27 e.Tokens/45 )/28 t.ErrorList$b/29 >/1
      context[39] = context[31];
      context[40] = context[32];
      context[41] = context[33];
      context[42] = context[34];
      context[43] = context[35];
      context[44] = context[36];
      context[45] = context[37];
      context[46] = context[38];
      if( ! refalrts::ident_term( identifiers[ident_Classic], context[5] ) )
        continue;
      // closed e.Collected as range 39
      // closed e.OptionalFuncName as range 41
      // closed e.BracketTerms as range 43
      // closed e.Tokens as range 45
      //DEBUG: t.Pos: 19
      //DEBUG: t.ErrorList$b: 29
      //DEBUG: e.Collected: 39
      //DEBUG: e.OptionalFuncName: 41
      //DEBUG: e.BracketTerms: 43
      //DEBUG: e.Tokens: 45

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoTokenChain:1$11=1@3/5 AsIs: (/8 AsIs: e.Collected/39 AsIs: )/9 AsIs: (/12 AsIs: e.OptionalFuncName/41 AsIs: )/13 AsIs: (/16 AsIs: e.BracketTerms/43 AsIs: )/17 HalfReuse: </18 } Tile{ HalfReuse: & EL-AddErrorAt/0 } Tile{ AsIs: t.ErrorList$b/29 } Tile{ AsIs: t.Pos/19 }"\'&\'"/47 Tile{ HalfReuse: ' '/1 }"is not where-with sign"/49 Tile{ HalfReuse: >/23 HalfReuse: (/24 HalfReuse: )/27 AsIs: e.Tokens/45 HalfReuse: >/28 } Tile{ ]] }
      refalrts::alloc_chars(vm, context[47], context[48], "\'&\'", 3);
      refalrts::alloc_chars(vm, context[49], context[50], "is not where-with sign", 22);
      refalrts::reinit_open_call(context[4]);
      refalrts::reinit_name(context[5], functions[efunc_gen_DoTokenChain_B1S11A1Z3]);
      refalrts::reinit_open_call(context[18]);
      refalrts::reinit_name(context[0], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_char(context[1], ' ');
      refalrts::reinit_close_call(context[23]);
      refalrts::reinit_open_bracket(context[24]);
      refalrts::reinit_close_bracket(context[27]);
      refalrts::reinit_close_call(context[28]);
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[4] );
      refalrts::link_brackets( context[24], context[27] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[18] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[23], context[28] );
      res = refalrts::splice_evar( res, context[49], context[50] );
      res = refalrts::splice_elem( res, context[1] );
      res = refalrts::splice_evar( res, context[47], context[48] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_evar( res, context[4], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoTokenChain-AfterCall$4=2/4 # Extended/5 (/8 e.Collected/39 )/9 (/12 e.OptionalFuncName/41 )/13 (/16 e.BracketTerms/43 )/17 # TkAmpersand/18 t.Pos/19 (/23 )/24 (/27 e.Tokens/45 )/28 t.ErrorList$b/29 >/1
      context[39] = context[31];
      context[40] = context[32];
      context[41] = context[33];
      context[42] = context[34];
      context[43] = context[35];
      context[44] = context[36];
      context[45] = context[37];
      context[46] = context[38];
      if( ! refalrts::ident_term( identifiers[ident_Extended], context[5] ) )
        continue;
      // closed e.Collected as range 39
      // closed e.OptionalFuncName as range 41
      // closed e.BracketTerms as range 43
      // closed e.Tokens as range 45
      //DEBUG: t.Pos: 19
      //DEBUG: t.ErrorList$b: 29
      //DEBUG: e.Collected: 39
      //DEBUG: e.OptionalFuncName: 41
      //DEBUG: e.BracketTerms: 43
      //DEBUG: e.Tokens: 45

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoTokenChain:1$11=1@4/5 AsIs: (/8 AsIs: e.Collected/39 AsIs: )/9 AsIs: (/12 AsIs: e.OptionalFuncName/41 AsIs: )/13 AsIs: (/16 AsIs: e.BracketTerms/43 AsIs: )/17 HalfReuse: </18 } Tile{ HalfReuse: & EL-AddErrorAt/0 } Tile{ AsIs: t.ErrorList$b/29 } Tile{ AsIs: t.Pos/19 }"Exp"/47 Tile{ HalfReuse: 'e'/1 }"cted function name after \'&\'"/49 Tile{ HalfReuse: >/23 HalfReuse: (/24 HalfReuse: )/27 AsIs: e.Tokens/45 HalfReuse: >/28 } Tile{ ]] }
      refalrts::alloc_chars(vm, context[47], context[48], "Exp", 3);
      refalrts::alloc_chars(vm, context[49], context[50], "cted function name after \'&\'", 28);
      refalrts::reinit_open_call(context[4]);
      refalrts::reinit_name(context[5], functions[efunc_gen_DoTokenChain_B1S11A1Z4]);
      refalrts::reinit_open_call(context[18]);
      refalrts::reinit_name(context[0], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_char(context[1], 'e');
      refalrts::reinit_close_call(context[23]);
      refalrts::reinit_open_bracket(context[24]);
      refalrts::reinit_close_bracket(context[27]);
      refalrts::reinit_close_call(context[28]);
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[4] );
      refalrts::link_brackets( context[24], context[27] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[18] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[23], context[28] );
      res = refalrts::splice_evar( res, context[49], context[50] );
      res = refalrts::splice_elem( res, context[1] );
      res = refalrts::splice_evar( res, context[47], context[48] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_evar( res, context[4], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoTokenChain-AfterCall$4=2/4 s.Mode/5 (/8 e.Collected/39 )/9 (/12 e.OptionalFuncName/41 )/13 (/16 e.BracketTerms/43 )/17 # TkAmpersand/18 t.Pos/19 (/23 )/24 (/27 e.Tokens/45 )/28 t.ErrorList$b/29 >/1
    context[39] = context[31];
    context[40] = context[32];
    context[41] = context[33];
    context[42] = context[34];
    context[43] = context[35];
    context[44] = context[36];
    context[45] = context[37];
    context[46] = context[38];
    // closed e.Collected as range 39
    // closed e.OptionalFuncName as range 41
    // closed e.BracketTerms as range 43
    // closed e.Tokens as range 45
    //DEBUG: t.Pos: 19
    //DEBUG: t.ErrorList$b: 29
    //DEBUG: s.Mode: 5
    //DEBUG: e.Collected: 39
    //DEBUG: e.OptionalFuncName: 41
    //DEBUG: e.BracketTerms: 43
    //DEBUG: e.Tokens: 45

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain:1$11=1@5/4 AsIs: s.Mode/5 AsIs: (/8 AsIs: e.Collected/39 AsIs: )/9 AsIs: (/12 AsIs: e.OptionalFuncName/41 AsIs: )/13 AsIs: (/16 AsIs: e.BracketTerms/43 AsIs: )/17 HalfReuse: </18 } & DoTokenChain:1$11=1:1$2=1/47 Tile{ AsIs: t.ErrorList$b/29 } Tile{ AsIs: t.Pos/19 } Tile{ AsIs: (/27 AsIs: e.Tokens/45 AsIs: )/28 } Tile{ HalfReuse: </23 HalfReuse: & DoTokenChain:1$11=1:1$2=1:1*2/24 } s.Mode/5/48 >/49 >/50 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[47], functions[efunc_gen_DoTokenChain_B1S11A1B1S2A1]);
    refalrts::copy_stvar(vm, context[48], context[5]);
    refalrts::alloc_close_call(vm, context[49]);
    refalrts::alloc_close_call(vm, context[50]);
    refalrts::update_name(context[4], functions[efunc_gen_DoTokenChain_B1S11A1Z5]);
    refalrts::reinit_open_call(context[18]);
    refalrts::reinit_open_call(context[23]);
    refalrts::reinit_name(context[24], functions[efunc_gen_DoTokenChain_B1S11A1B1S2A1B1D2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[50] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[49] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[48], context[50] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_elem( res, context[47] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoTokenChain-AfterCall$4=2/4 s.Mode/5 (/8 e.Collected/6 )/9 (/12 e.OptionalFuncName/10 )/13 (/16 e.BracketTerms/14 )/17 s.Type/18 t.Pos/19 (/23 e.Value/21 )/24 (/27 e.Tokens/25 )/28 t.ErrorList$b/29 >/1
  // closed e.Collected as range 6
  // closed e.OptionalFuncName as range 10
  // closed e.BracketTerms as range 14
  // closed e.Value as range 21
  // closed e.Tokens as range 25
  //DEBUG: t.Pos: 19
  //DEBUG: t.ErrorList$b: 29
  //DEBUG: s.Mode: 5
  //DEBUG: s.Type: 18
  //DEBUG: e.Collected: 6
  //DEBUG: e.OptionalFuncName: 10
  //DEBUG: e.BracketTerms: 14
  //DEBUG: e.Value: 21
  //DEBUG: e.Tokens: 25

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain:1*11@1/4 AsIs: s.Mode/5 } Tile{ AsIs: t.ErrorList$b/29 } Tile{ AsIs: (/8 AsIs: e.Collected/6 AsIs: )/9 AsIs: (/12 AsIs: e.OptionalFuncName/10 AsIs: )/13 AsIs: (/16 AsIs: e.BracketTerms/14 AsIs: )/17 } Tile{ AsIs: (/27 AsIs: e.Tokens/25 AsIs: )/28 } Tile{ AsIs: (/23 } Tile{ AsIs: s.Type/18 AsIs: t.Pos/19 } Tile{ AsIs: e.Value/21 } Tile{ AsIs: )/24 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_DoTokenChain_B1D11Z1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[24] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[18], context[20] );
  res = refalrts::splice_elem( res, context[23] );
  res = refalrts::splice_evar( res, context[27], context[28] );
  res = refalrts::splice_evar( res, context[8], context[17] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoTokenChainm_AfterCall_S4A2("DoTokenChain-AfterCall$4=2", COOKIE1_, COOKIE2_, func_gen_DoTokenChainm_AfterCall_S4A2);


static refalrts::FnResult func_gen_DoTokenChainm_AfterCall_S4A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 38 elems
  refalrts::Iter context[38];
  refalrts::zeros( context, 38 );
  // </0 & DoTokenChain-AfterCall$4=1/4 s.Mode/5 (/8 e.Collected/6 )/9 (/12 e.OptionalFuncName/10 )/13 (/16 e.BracketTerms/14 )/17 s.Type/18 t.Pos/19 (/23 e.Value/21 )/24 (/27 e.Tokens/25 )/28 t.ErrorList$a/29 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.Collected as range 6
  // closed e.OptionalFuncName as range 10
  // closed e.BracketTerms as range 14
  if( ! refalrts::svar_left( context[18], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[20] = refalrts::tvar_left( context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.Value as range 21
  // closed e.Tokens as range 25
  context[30] = refalrts::tvar_left( context[29], context[2], context[3] );
  if( ! context[30] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Mode: 5
  //DEBUG: e.Collected: 6
  //DEBUG: e.OptionalFuncName: 10
  //DEBUG: e.BracketTerms: 14
  //DEBUG: s.Type: 18
  //DEBUG: t.Pos: 19
  //DEBUG: e.Value: 21
  //DEBUG: e.Tokens: 25
  //DEBUG: t.ErrorList$a: 29

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain-AfterCall$4=2/4 AsIs: s.Mode/5 AsIs: (/8 AsIs: e.Collected/6 AsIs: )/9 AsIs: (/12 AsIs: e.OptionalFuncName/10 AsIs: )/13 AsIs: (/16 AsIs: e.BracketTerms/14 AsIs: )/17 AsIs: s.Type/18 AsIs: t.Pos/19 AsIs: (/23 AsIs: e.Value/21 AsIs: )/24 AsIs: (/27 AsIs: e.Tokens/25 AsIs: )/28 } </31 & EL-AddErrorAt/32 Tile{ AsIs: t.ErrorList$a/29 } t.Pos/19/33"Missed \'>\'"/35 >/37 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[31]);
  refalrts::alloc_name(vm, context[32], functions[efunc_ELm_AddErrorAt]);
  refalrts::copy_evar(vm, context[33], context[34], context[19], context[20]);
  refalrts::alloc_chars(vm, context[35], context[36], "Missed \'>\'", 10);
  refalrts::alloc_close_call(vm, context[37]);
  refalrts::update_name(context[4], functions[efunc_gen_DoTokenChainm_AfterCall_S4A2]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[37] );
  refalrts::push_stack( vm, context[31] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[33], context[37] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  res = refalrts::splice_evar( res, context[31], context[32] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoTokenChainm_AfterCall_S4A1("DoTokenChain-AfterCall$4=1", COOKIE1_, COOKIE2_, func_gen_DoTokenChainm_AfterCall_S4A1);


static refalrts::FnResult func_DoTokenChainm_AfterCall(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 51 elems
  refalrts::Iter context[51];
  refalrts::zeros( context, 51 );
  // </0 & DoTokenChain-AfterCall/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoTokenChain-AfterCall/4 s.new1/5 s.new2/6 (/9 e.new3/7 )/10 t.new4/11 (/15 e.new5/13 )/16 t.new6/17 (/21 e.new7/19 )/22 (/25 s.new8/27 t.new9/28 e.new10/23 )/26 e.new11/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new3 as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new5 as range 13
  context[18] = refalrts::tvar_left( context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  // closed e.new7 as range 19
  // closed e.new11 as range 2
  if( ! refalrts::svar_left( context[27], context[23], context[24] ) )
    return refalrts::cRecognitionImpossible;
  context[29] = refalrts::tvar_left( context[28], context[23], context[24] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  // closed e.new10 as range 23
  do {
    // </0 & DoTokenChain-AfterCall/4 s.new12/5 s.new13/6 (/9 e.new17/30 )/10 t.new14/11 (/15 e.new18/32 )/16 t.new15/17 (/21 e.new19/34 )/22 (/25 # TkCloseCall/27 t.new20/28 )/26 e.new16/36 >/1
    context[30] = context[7];
    context[31] = context[8];
    context[32] = context[13];
    context[33] = context[14];
    context[34] = context[19];
    context[35] = context[20];
    context[36] = context[2];
    context[37] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_TkCloseCall], context[27] ) )
      continue;
    if( ! refalrts::empty_seq( context[23], context[24] ) )
      continue;
    // closed e.new17 as range 30
    // closed e.new18 as range 32
    // closed e.new19 as range 34
    // closed e.new16 as range 36
    do {
      // </0 & DoTokenChain-AfterCall/4 s.Mode/5 # Result/6 (/9 e.Collected/38 )/10 t.CallPos/11 (/15 e.OptionalFuncName/40 )/16 t.ErrorList/17 (/21 e.BracketTerms/42 )/22 (/25 # TkCloseCall/27 t.Pos/28 )/26 e.Tokens/44 >/1
      context[38] = context[30];
      context[39] = context[31];
      context[40] = context[32];
      context[41] = context[33];
      context[42] = context[34];
      context[43] = context[35];
      context[44] = context[36];
      context[45] = context[37];
      if( ! refalrts::ident_term( identifiers[ident_Result], context[6] ) )
        continue;
      // closed e.Collected as range 38
      // closed e.OptionalFuncName as range 40
      // closed e.BracketTerms as range 42
      // closed e.Tokens as range 44
      //DEBUG: t.CallPos: 11
      //DEBUG: t.ErrorList: 17
      //DEBUG: t.Pos: 28
      //DEBUG: s.Mode: 5
      //DEBUG: e.Collected: 38
      //DEBUG: e.OptionalFuncName: 40
      //DEBUG: e.BracketTerms: 42
      //DEBUG: e.Tokens: 44

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} t.CallPos/11 (/15 {REMOVED TILE} )/16 {REMOVED TILE} (/21 {REMOVED TILE} {REMOVED TILE} (/25 {REMOVED TILE} t.Pos/28 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 AsIs: s.Mode/5 AsIs: # Result/6 } Tile{ AsIs: t.ErrorList/17 } Tile{ AsIs: (/9 AsIs: e.Collected/38 HalfReuse: (/10 } Tile{ Reuse: # CallBrackets/27 } Tile{ AsIs: e.OptionalFuncName/40 } Tile{ AsIs: e.BracketTerms/42 } Tile{ AsIs: )/22 } Tile{ AsIs: )/26 AsIs: e.Tokens/44 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
      refalrts::reinit_open_bracket(context[10]);
      refalrts::update_ident(context[27], identifiers[ident_CallBrackets]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[26] );
      refalrts::link_brackets( context[10], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[26];
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      refalrts::splice_to_freelist_open( vm, context[6], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoTokenChain-AfterCall/4 s.Mode/5 # Pattern/6 (/9 e.Collected/38 )/10 t.CallPos/11 (/15 e.OptionalFuncName/40 )/16 t.ErrorList/17 (/21 e.BracketTerms/42 )/22 (/25 # TkCloseCall/27 t.Pos/28 )/26 e.Tokens/44 >/1
    context[38] = context[30];
    context[39] = context[31];
    context[40] = context[32];
    context[41] = context[33];
    context[42] = context[34];
    context[43] = context[35];
    context[44] = context[36];
    context[45] = context[37];
    if( ! refalrts::ident_term( identifiers[ident_Pattern], context[6] ) )
      continue;
    // closed e.Collected as range 38
    // closed e.OptionalFuncName as range 40
    // closed e.BracketTerms as range 42
    // closed e.Tokens as range 44
    //DEBUG: t.CallPos: 11
    //DEBUG: t.ErrorList: 17
    //DEBUG: t.Pos: 28
    //DEBUG: s.Mode: 5
    //DEBUG: e.Collected: 38
    //DEBUG: e.OptionalFuncName: 40
    //DEBUG: e.BracketTerms: 42
    //DEBUG: e.Tokens: 44

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.Pos/28 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 AsIs: s.Mode/5 AsIs: # Pattern/6 HalfReuse: </9 } Tile{ HalfReuse: & EL-AddErrorAt/16 AsIs: t.ErrorList/17 } Tile{ AsIs: t.CallPos/11 HalfReuse: 'u'/15 }"ne"/46 Tile{ HalfReuse: 'x'/10 }"pected \'<\' in the pattern expression, probably missed \'=\'"/48 >/50 Tile{ AsIs: (/21 } Tile{ AsIs: e.Collected/38 } Tile{ AsIs: (/25 Reuse: # Brackets/27 } Tile{ AsIs: e.OptionalFuncName/40 } Tile{ AsIs: e.BracketTerms/42 } Tile{ AsIs: )/22 } Tile{ AsIs: )/26 AsIs: e.Tokens/44 AsIs: >/1 ]] }
    refalrts::alloc_chars(vm, context[46], context[47], "ne", 2);
    refalrts::alloc_chars(vm, context[48], context[49], "pected \'<\' in the pattern expression, probably missed \'=\'", 57);
    refalrts::alloc_close_call(vm, context[50]);
    refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
    refalrts::reinit_open_call(context[9]);
    refalrts::reinit_name(context[16], functions[efunc_ELm_AddErrorAt]);
    refalrts::reinit_char(context[15], 'u');
    refalrts::reinit_char(context[10], 'x');
    refalrts::update_ident(context[27], identifiers[ident_Brackets]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[21], context[26] );
    refalrts::link_brackets( context[25], context[22] );
    refalrts::push_stack( vm, context[50] );
    refalrts::push_stack( vm, context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[26];
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[42], context[43] );
    res = refalrts::splice_evar( res, context[40], context[41] );
    res = refalrts::splice_evar( res, context[25], context[27] );
    res = refalrts::splice_evar( res, context[38], context[39] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[48], context[50] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[46], context[47] );
    res = refalrts::splice_evar( res, context[11], context[15] );
    res = refalrts::splice_evar( res, context[16], context[18] );
    refalrts::splice_to_freelist_open( vm, context[9], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoTokenChain-AfterCall/4 s.Mode/5 # Result/6 (/9 e.Collected/30 )/10 t.CallPos/11 (/15 e.OptionalFuncName/32 )/16 t.ErrorList/17 (/21 e.BracketTerms/34 )/22 (/25 s.Type/27 t.Pos/28 e.Value/36 )/26 e.Tokens/38 >/1
    context[30] = context[7];
    context[31] = context[8];
    context[32] = context[13];
    context[33] = context[14];
    context[34] = context[19];
    context[35] = context[20];
    context[36] = context[23];
    context[37] = context[24];
    context[38] = context[2];
    context[39] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Result], context[6] ) )
      continue;
    // closed e.Collected as range 30
    // closed e.OptionalFuncName as range 32
    // closed e.BracketTerms as range 34
    // closed e.Value as range 36
    // closed e.Tokens as range 38
    //DEBUG: t.CallPos: 11
    //DEBUG: t.ErrorList: 17
    //DEBUG: t.Pos: 28
    //DEBUG: s.Mode: 5
    //DEBUG: s.Type: 27
    //DEBUG: e.Collected: 30
    //DEBUG: e.OptionalFuncName: 32
    //DEBUG: e.BracketTerms: 34
    //DEBUG: e.Value: 36
    //DEBUG: e.Tokens: 38

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.CallPos/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 AsIs: s.Mode/5 AsIs: # Result/6 HalfReuse: </9 } Tile{ HalfReuse: & EL-AddErrorAt/16 AsIs: t.ErrorList/17 } t.Pos/28/40"Missed \'>\'"/42 >/44 Tile{ AsIs: (/21 } Tile{ AsIs: e.Collected/30 } Tile{ AsIs: (/15 } # CallBrackets/45 Tile{ AsIs: e.OptionalFuncName/32 } Tile{ AsIs: e.BracketTerms/34 } Tile{ AsIs: )/10 } Tile{ AsIs: )/22 AsIs: (/25 AsIs: s.Type/27 AsIs: t.Pos/28 AsIs: e.Value/36 AsIs: )/26 AsIs: e.Tokens/38 AsIs: >/1 ]] }
    refalrts::copy_evar(vm, context[40], context[41], context[28], context[29]);
    refalrts::alloc_chars(vm, context[42], context[43], "Missed \'>\'", 10);
    refalrts::alloc_close_call(vm, context[44]);
    refalrts::alloc_ident(vm, context[45], identifiers[ident_CallBrackets]);
    refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
    refalrts::reinit_open_call(context[9]);
    refalrts::reinit_name(context[16], functions[efunc_ELm_AddErrorAt]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[15], context[10] );
    refalrts::push_stack( vm, context[44] );
    refalrts::push_stack( vm, context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[22];
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[34], context[35] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_elem( res, context[45] );
    res = refalrts::splice_elem( res, context[15] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[40], context[44] );
    res = refalrts::splice_evar( res, context[16], context[18] );
    refalrts::splice_to_freelist_open( vm, context[9], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoTokenChain-AfterCall/4 s.Mode/5 # Pattern/6 (/9 e.Collected/7 )/10 t.CallPos/11 (/15 e.OptionalFuncName/13 )/16 t.ErrorList/17 (/21 e.BracketTerms/19 )/22 (/25 s.Type/27 t.Pos/28 e.Value/23 )/26 e.Tokens/2 >/1
  if( ! refalrts::ident_term( identifiers[ident_Pattern], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Collected as range 7
  // closed e.OptionalFuncName as range 13
  // closed e.BracketTerms as range 19
  // closed e.Value as range 23
  // closed e.Tokens as range 2
  //DEBUG: t.CallPos: 11
  //DEBUG: t.ErrorList: 17
  //DEBUG: t.Pos: 28
  //DEBUG: s.Mode: 5
  //DEBUG: s.Type: 27
  //DEBUG: e.Collected: 7
  //DEBUG: e.OptionalFuncName: 13
  //DEBUG: e.BracketTerms: 19
  //DEBUG: e.Value: 23
  //DEBUG: e.Tokens: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Type/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain-AfterCall$4=1/4 AsIs: s.Mode/5 HalfReuse: (/6 } Tile{ AsIs: e.Collected/7 } Tile{ AsIs: )/10 } Tile{ AsIs: (/15 AsIs: e.OptionalFuncName/13 AsIs: )/16 } Tile{ AsIs: (/21 AsIs: e.BracketTerms/19 AsIs: )/22 HalfReuse: s.Type27 /25 } Tile{ AsIs: t.Pos/28 } Tile{ AsIs: (/9 } Tile{ AsIs: e.Value/23 } Tile{ AsIs: )/26 } (/30 Tile{ AsIs: e.Tokens/2 } )/31 </32 & EL-AddErrorAt/33 Tile{ AsIs: t.ErrorList/17 } Tile{ AsIs: t.CallPos/11 }"unexpected \'<\' in the pattern expression, probably missed \'=\'"/34 >/36 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[30]);
  refalrts::alloc_close_bracket(vm, context[31]);
  refalrts::alloc_open_call(vm, context[32]);
  refalrts::alloc_name(vm, context[33], functions[efunc_ELm_AddErrorAt]);
  refalrts::alloc_chars(vm, context[34], context[35], "unexpected \'<\' in the pattern expression, probably missed \'=\'", 61);
  refalrts::alloc_close_call(vm, context[36]);
  refalrts::update_name(context[4], functions[efunc_gen_DoTokenChainm_AfterCall_S4A1]);
  refalrts::reinit_open_bracket(context[6]);
  refalrts::reinit_svar( context[25], context[27] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[36] );
  refalrts::push_stack( vm, context[32] );
  refalrts::link_brackets( context[30], context[31] );
  refalrts::link_brackets( context[9], context[26] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[6], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[34], context[36] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[31], context[33] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[30] );
  res = refalrts::splice_elem( res, context[26] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_evar( res, context[28], context[29] );
  res = refalrts::splice_evar( res, context[21], context[25] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_elem( res, context[10] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, context[6], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoTokenChainm_AfterCall("DoTokenChain-AfterCall", COOKIE1_, COOKIE2_, func_DoTokenChainm_AfterCall);


static refalrts::FnResult func_DoTokenChainm_AddRedefinition(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & DoTokenChain-AddRedefinition/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoTokenChain-AddRedefinition/4 s.new1/5 t.new2/6 (/10 e.new3/8 )/11 t.new4/12 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = refalrts::tvar_left( context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  context[8] = 0;
  context[9] = 0;
  context[10] = refalrts::brackets_left( context[8], context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[10], context[11]);
  // closed e.new3 as range 8
  context[13] = refalrts::tvar_left( context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & DoTokenChain-AddRedefinition/4 # Pattern/5 t.new5/6 (/10 e.new7/14 )/11 t.new6/12 >/1
    context[14] = context[8];
    context[15] = context[9];
    if( ! refalrts::ident_term( identifiers[ident_Pattern], context[5] ) )
      continue;
    // closed e.new7 as range 14
    do {
      // </0 & DoTokenChain-AddRedefinition/4 # Pattern/5 t.ErrorList/6 (/10 e.Collected/16 (/20 # Var/22 t.VarPos/23 s.VarType/25 e.Index/18 )/21 )/11 t.Pos/12 >/1
      context[16] = context[14];
      context[17] = context[15];
      context[18] = 0;
      context[19] = 0;
      context[20] = refalrts::brackets_right( context[18], context[19], context[16], context[17] );
      if( ! context[20] )
        continue;
      refalrts::bracket_pointers(context[20], context[21]);
      context[22] = refalrts::ident_left( identifiers[ident_Var], context[18], context[19] );
      if( ! context[22] )
        continue;
      // closed e.Collected as range 16
      context[24] = refalrts::tvar_left( context[23], context[18], context[19] );
      if( ! context[24] )
        continue;
      if( ! refalrts::svar_left( context[25], context[18], context[19] ) )
        continue;
      // closed e.Index as range 18
      //DEBUG: t.ErrorList: 6
      //DEBUG: t.Pos: 12
      //DEBUG: e.Collected: 16
      //DEBUG: t.VarPos: 23
      //DEBUG: s.VarType: 25
      //DEBUG: e.Index: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & DoTokenChain-AddRedefinition/4 # Pattern/5 {REMOVED TILE} t.Pos/12 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList/6 AsIs: (/10 AsIs: e.Collected/16 AsIs: (/20 Reuse: # NewVar/22 AsIs: t.VarPos/23 AsIs: s.VarType/25 AsIs: e.Index/18 AsIs: )/21 AsIs: )/11 } Tile{ ]] }
      refalrts::update_ident(context[22], identifiers[ident_NewVar]);
      refalrts::link_brackets( context[10], context[11] );
      refalrts::link_brackets( context[20], context[21] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[6], context[11] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoTokenChain-AddRedefinition/4 # Pattern/5 t.ErrorList/6 (/10 e.Collected/16 )/11 t.Pos/12 >/1
    context[16] = context[14];
    context[17] = context[15];
    // closed e.Collected as range 16
    //DEBUG: t.ErrorList: 6
    //DEBUG: t.Pos: 12
    //DEBUG: e.Collected: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 } Tile{ AsIs: t.ErrorList/6 } Tile{ AsIs: t.Pos/12 HalfReuse: 'T'/1 }"he"/18 Tile{ HalfReuse: ' '/5 }"redefinition sign expects the variable before"/20 >/22 Tile{ AsIs: (/10 AsIs: e.Collected/16 AsIs: )/11 } Tile{ ]] }
    refalrts::alloc_chars(vm, context[18], context[19], "he", 2);
    refalrts::alloc_chars(vm, context[20], context[21], "redefinition sign expects the variable before", 45);
    refalrts::alloc_close_call(vm, context[22]);
    refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
    refalrts::reinit_char(context[1], 'T');
    refalrts::reinit_char(context[5], ' ');
    refalrts::link_brackets( context[10], context[11] );
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[20], context[22] );
    res = refalrts::splice_elem( res, context[5] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[12], context[1] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoTokenChain-AddRedefinition/4 # Result/5 t.ErrorList/6 (/10 e.Collected/8 )/11 t.Pos/12 >/1
  if( ! refalrts::ident_term( identifiers[ident_Result], context[5] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Collected as range 8
  //DEBUG: t.ErrorList: 6
  //DEBUG: t.Pos: 12
  //DEBUG: e.Collected: 8

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 } Tile{ AsIs: t.ErrorList/6 } Tile{ AsIs: t.Pos/12 HalfReuse: 'I'/1 }"nv"/14 Tile{ HalfReuse: 'a'/5 }"lid redefinition sign in the result expression"/16 >/18 Tile{ AsIs: (/10 AsIs: e.Collected/8 AsIs: )/11 } Tile{ ]] }
  refalrts::alloc_chars(vm, context[14], context[15], "nv", 2);
  refalrts::alloc_chars(vm, context[16], context[17], "lid redefinition sign in the result expression", 46);
  refalrts::alloc_close_call(vm, context[18]);
  refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
  refalrts::reinit_char(context[1], 'I');
  refalrts::reinit_char(context[5], 'a');
  refalrts::link_brackets( context[10], context[11] );
  refalrts::push_stack( vm, context[18] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_evar( res, context[16], context[18] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[12], context[1] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoTokenChainm_AddRedefinition("DoTokenChain-AddRedefinition", COOKIE1_, COOKIE2_, func_DoTokenChainm_AddRedefinition);


static refalrts::FnResult func_gen_Expressionm_CheckBrackets_S1A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & Expression-CheckBrackets$1=3/4 s.Mode/5 s.Kind/6 (/9 e.Expression/7 )/10 t.ErrorList$b/11 (/15 e.Subexpression/13 )/16 e.Tokens$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Expression as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.Subexpression as range 13
  // closed e.Tokens$a as range 2
  //DEBUG: s.Mode: 5
  //DEBUG: s.Kind: 6
  //DEBUG: e.Expression: 7
  //DEBUG: t.ErrorList$b: 11
  //DEBUG: e.Subexpression: 13
  //DEBUG: e.Tokens$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/9 {REMOVED TILE} )/10 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Expression-CheckBrackets/4 AsIs: s.Mode/5 AsIs: s.Kind/6 } Tile{ AsIs: t.ErrorList$b/11 AsIs: (/15 } Tile{ AsIs: e.Expression/7 } Tile{ AsIs: e.Subexpression/13 } Tile{ AsIs: )/16 AsIs: e.Tokens$a/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Expressionm_CheckBrackets]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[16];
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[11], context[15] );
  refalrts::splice_to_freelist_open( vm, context[6], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Expressionm_CheckBrackets_S1A3("Expression-CheckBrackets$1=3", COOKIE1_, COOKIE2_, func_gen_Expressionm_CheckBrackets_S1A3);


static refalrts::FnResult func_gen_Expressionm_CheckBrackets_S1A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & Expression-CheckBrackets$1=2/4 s.Mode/5 s.Kind/6 (/9 e.Expression/7 )/10 (/13 e.Tokens/11 )/14 t.ErrorList$a/15 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.Expression as range 7
  // closed e.Tokens as range 11
  context[16] = refalrts::tvar_left( context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Mode: 5
  //DEBUG: s.Kind: 6
  //DEBUG: e.Expression: 7
  //DEBUG: e.Tokens: 11
  //DEBUG: t.ErrorList$a: 15

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Expression-CheckBrackets$1=3/4 AsIs: s.Mode/5 AsIs: s.Kind/6 AsIs: (/9 AsIs: e.Expression/7 AsIs: )/10 HalfReuse: </13 } Tile{ HalfReuse: & TokenChain/14 AsIs: t.ErrorList$a/15 } s.Mode/5/17 s.Kind/6/18 Tile{ AsIs: e.Tokens/11 } >/19 Tile{ AsIs: >/1 ]] }
  refalrts::copy_stvar(vm, context[17], context[5]);
  refalrts::copy_stvar(vm, context[18], context[6]);
  refalrts::alloc_close_call(vm, context[19]);
  refalrts::update_name(context[4], functions[efunc_gen_Expressionm_CheckBrackets_S1A3]);
  refalrts::reinit_open_call(context[13]);
  refalrts::reinit_name(context[14], functions[efunc_TokenChain]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[19] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[19] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[14], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Expressionm_CheckBrackets_S1A2("Expression-CheckBrackets$1=2", COOKIE1_, COOKIE2_, func_gen_Expressionm_CheckBrackets_S1A2);


static refalrts::FnResult func_Expressionm_CheckBrackets(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 34 elems
  refalrts::Iter context[34];
  refalrts::zeros( context, 34 );
  // </0 & Expression-CheckBrackets/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Expression-CheckBrackets/4 s.new1/5 s.new2/6 t.new3/7 t.new4/9 e.new5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.new5 as range 2
  do {
    // </0 & Expression-CheckBrackets/4 s.Mode/5 s.Kind/6 t.ErrorList/7 (/9 e.Expression/13 )/10 (/17 s.Type/19 t.Pos/20 )/18 e.Tokens/11 >/1
    context[11] = context[2];
    context[12] = context[3];
    context[13] = 0;
    context[14] = 0;
    if( ! refalrts::brackets_term( context[13], context[14], context[9] ) )
      continue;
    context[15] = 0;
    context[16] = 0;
    context[17] = refalrts::brackets_left( context[15], context[16], context[11], context[12] );
    if( ! context[17] )
      continue;
    refalrts::bracket_pointers(context[17], context[18]);
    // closed e.Expression as range 13
    // closed e.Tokens as range 11
    if( ! refalrts::svar_left( context[19], context[15], context[16] ) )
      continue;
    context[21] = refalrts::tvar_left( context[20], context[15], context[16] );
    if( ! context[21] )
      continue;
    if( ! refalrts::empty_seq( context[15], context[16] ) )
      continue;
    //DEBUG: t.ErrorList: 7
    //DEBUG: s.Mode: 5
    //DEBUG: s.Kind: 6
    //DEBUG: e.Expression: 13
    //DEBUG: e.Tokens: 11
    //DEBUG: s.Type: 19
    //DEBUG: t.Pos: 20
    //5: s.Mode
    //6: s.Kind
    //7: t.ErrorList
    //11: e.Tokens
    //13: e.Expression
    //19: s.Type
    //20: t.Pos
    //27: s.Type

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_Expressionm_CheckBrackets_S1C1]);
    refalrts::alloc_open_call(vm, context[25]);
    refalrts::alloc_name(vm, context[26], functions[efunc_gen_OneOf_Z1]);
    refalrts::copy_stvar(vm, context[27], context[19]);
    refalrts::alloc_ident(vm, context[28], identifiers[ident_TkCloseBracket]);
    refalrts::alloc_ident(vm, context[29], identifiers[ident_TkCloseCall]);
    refalrts::alloc_ident(vm, context[30], identifiers[ident_TkCloseADT]);
    refalrts::alloc_close_call(vm, context[31]);
    refalrts::alloc_close_call(vm, context[23]);
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[22] );
    res = refalrts::splice_elem( res, context[23] );
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[25] );
    res = refalrts::splice_elem( res, context[31] );
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_elem( res, context[28] );
    res = refalrts::splice_stvar( res, context[27] );
    res = refalrts::splice_elem( res, context[26] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_elem( res, context[22] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </22 & Expression-CheckBrackets$1?1/26 # True/27 >/23
      context[24] = 0;
      context[25] = 0;
      context[26] = refalrts::call_left( context[24], context[25], context[22], context[23] );
      context[27] = refalrts::ident_left( identifiers[ident_True], context[24], context[25] );
      if( ! context[27] )
        continue;
      if( ! refalrts::empty_seq( context[24], context[25] ) )
        continue;
      //DEBUG: t.ErrorList: 7
      //DEBUG: s.Mode: 5
      //DEBUG: s.Kind: 6
      //DEBUG: e.Expression: 13
      //DEBUG: e.Tokens: 11
      //DEBUG: s.Type: 19
      //DEBUG: t.Pos: 20

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Type/19 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Expression-CheckBrackets$1=2/4 AsIs: s.Mode/5 AsIs: s.Kind/6 } Tile{ AsIs: (/9 AsIs: e.Expression/13 AsIs: )/10 AsIs: (/17 } Tile{ AsIs: e.Tokens/11 } )/28 </29 & EL-AddErrorAt/30 Tile{ AsIs: t.ErrorList/7 } Tile{ AsIs: t.Pos/20 HalfReuse: 'u'/18 }"nbalanced "/31 Tile{ AsIs: </22 Reuse: & TokName/26 HalfReuse: s.Type19 /27 AsIs: >/23 AsIs: >/1 } >/33 Tile{ ]] }
      refalrts::alloc_close_bracket(vm, context[28]);
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_ELm_AddErrorAt]);
      refalrts::alloc_chars(vm, context[31], context[32], "nbalanced ", 10);
      refalrts::alloc_close_call(vm, context[33]);
      refalrts::update_name(context[4], functions[efunc_gen_Expressionm_CheckBrackets_S1A2]);
      refalrts::reinit_char(context[18], 'u');
      refalrts::update_name(context[26], functions[efunc_TokName]);
      refalrts::reinit_svar( context[27], context[19] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[22] );
      refalrts::link_brackets( context[17], context[28] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_evar( res, context[22], context[1] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[20], context[18] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      res = refalrts::splice_evar( res, context[28], context[30] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[9], context[17] );
      refalrts::splice_to_freelist_open( vm, context[6], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[22], context[23]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Expression-CheckBrackets/4 s.Mode/5 s.Kind/6 t.ErrorList/7 t.Expression/9 e.Tokens/2 >/1
  // closed e.Tokens as range 2
  //DEBUG: t.ErrorList: 7
  //DEBUG: t.Expression: 9
  //DEBUG: s.Mode: 5
  //DEBUG: s.Kind: 6
  //DEBUG: e.Tokens: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Expression-CheckBrackets/4 s.Mode/5 s.Kind/6 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList/7 AsIs: t.Expression/9 } Tile{ AsIs: e.Tokens/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[10] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Expressionm_CheckBrackets("Expression-CheckBrackets", COOKIE1_, COOKIE2_, func_Expressionm_CheckBrackets);


static refalrts::FnResult func_ClassicError(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & ClassicError/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & ClassicError/4 t.new1/5 s.new2/7 t.new3/8 e.new4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[9] = refalrts::tvar_left( context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  // closed e.new4 as range 2
  do {
    // </0 & ClassicError/4 t.ErrorList/5 # Classic/7 t.Pos/8 e.Message/10 >/1
    context[10] = context[2];
    context[11] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Classic], context[7] ) )
      continue;
    // closed e.Message as range 10
    //DEBUG: t.ErrorList: 5
    //DEBUG: t.Pos: 8
    //DEBUG: e.Message: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} # Classic/7 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList/5 } Tile{ AsIs: t.Pos/8 AsIs: e.Message/10 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    refalrts::splice_to_freelist_open( vm, context[6], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ClassicError/4 t.ErrorList/5 # Extended/7 t.Pos/8 e.Message/2 >/1
  if( ! refalrts::ident_term( identifiers[ident_Extended], context[7] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Message as range 2
  //DEBUG: t.ErrorList: 5
  //DEBUG: t.Pos: 8
  //DEBUG: e.Message: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & ClassicError/4 {REMOVED TILE} # Extended/7 t.Pos/8 e.Message/2 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList/5 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ClassicError("ClassicError", COOKIE1_, COOKIE2_, func_ClassicError);


static refalrts::FnResult func_UnexpectedToken(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & UnexpectedToken/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & UnexpectedToken/4 t.new1/5 (/9 s.new2/11 t.new3/12 e.new4/7 )/10 e.new5/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new5 as range 2
  if( ! refalrts::svar_left( context[11], context[7], context[8] ) )
    return refalrts::cRecognitionImpossible;
  context[13] = refalrts::tvar_left( context[12], context[7], context[8] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  // closed e.new4 as range 7
  do {
    // </0 & UnexpectedToken/4 t.ErrorList/5 (/9 # TkError/11 t.Pos/12 e.Message/14 )/10 e.Expected/16 >/1
    context[14] = context[7];
    context[15] = context[8];
    context[16] = context[2];
    context[17] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_TkError], context[11] ) )
      continue;
    // closed e.Message as range 14
    // closed e.Expected as range 16
    //DEBUG: t.ErrorList: 5
    //DEBUG: t.Pos: 12
    //DEBUG: e.Message: 14
    //DEBUG: e.Expected: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/9 # TkError/11 {REMOVED TILE} e.Expected/16 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList/5 } Tile{ AsIs: t.Pos/12 AsIs: e.Message/14 HalfReuse: >/10 } Tile{ ]] }
    refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
    refalrts::reinit_close_call(context[10]);
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[12], context[10] );
    refalrts::splice_to_freelist_open( vm, context[6], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UnexpectedToken/4 t.ErrorList/5 (/9 s.Type/11 t.Pos/12 e.Value/7 )/10 e.Expected/2 >/1
  // closed e.Value as range 7
  // closed e.Expected as range 2
  //DEBUG: t.ErrorList: 5
  //DEBUG: t.Pos: 12
  //DEBUG: s.Type: 11
  //DEBUG: e.Value: 7
  //DEBUG: e.Expected: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Value/7 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList/5 } Tile{ AsIs: t.Pos/12 }"unexpected "/14 </16 Tile{ HalfReuse: & TokName/9 AsIs: s.Type/11 } >/17", expected"/18 Tile{ HalfReuse: ' '/10 AsIs: e.Expected/2 AsIs: >/1 ]] }
  refalrts::alloc_chars(vm, context[14], context[15], "unexpected ", 11);
  refalrts::alloc_open_call(vm, context[16]);
  refalrts::alloc_close_call(vm, context[17]);
  refalrts::alloc_chars(vm, context[18], context[19], ", expected", 10);
  refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
  refalrts::reinit_name(context[9], functions[efunc_TokName]);
  refalrts::reinit_char(context[10], ' ');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[17] );
  refalrts::push_stack( vm, context[16] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[10];
  res = refalrts::splice_evar( res, context[17], context[19] );
  res = refalrts::splice_evar( res, context[9], context[11] );
  res = refalrts::splice_evar( res, context[14], context[16] );
  res = refalrts::splice_evar( res, context[12], context[13] );
  refalrts::splice_to_freelist_open( vm, context[6], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_UnexpectedToken("UnexpectedToken", COOKIE1_, COOKIE2_, func_UnexpectedToken);


static refalrts::FnResult func_TokName(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & TokName/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & TokName/4 s.new1/5 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & TokName/4 # TkName/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkName], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: 'i'/0 HalfReuse: 'd'/4 HalfReuse: 'e'/5 HalfReuse: 'n'/1 }"tifier"/6 Tile{ ]] }
    refalrts::alloc_chars(vm, context[6], context[7], "tifier", 6);
    refalrts::reinit_char(context[0], 'i');
    refalrts::reinit_char(context[4], 'd');
    refalrts::reinit_char(context[5], 'e');
    refalrts::reinit_char(context[1], 'n');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & TokName/4 # TkCompound/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkCompound], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: 'c'/0 HalfReuse: 'o'/4 HalfReuse: 'm'/5 HalfReuse: 'p'/1 }"ound symbol"/6 Tile{ ]] }
    refalrts::alloc_chars(vm, context[6], context[7], "ound symbol", 11);
    refalrts::reinit_char(context[0], 'c');
    refalrts::reinit_char(context[4], 'o');
    refalrts::reinit_char(context[5], 'm');
    refalrts::reinit_char(context[1], 'p');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & TokName/4 # TkMacroDigit/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkMacroDigit], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: 'n'/0 HalfReuse: 'u'/4 HalfReuse: 'm'/5 HalfReuse: 'b'/1 }"er"/6 Tile{ ]] }
    refalrts::alloc_chars(vm, context[6], context[7], "er", 2);
    refalrts::reinit_char(context[0], 'n');
    refalrts::reinit_char(context[4], 'u');
    refalrts::reinit_char(context[5], 'm');
    refalrts::reinit_char(context[1], 'b');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & TokName/4 # TkChar/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkChar], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: 'c'/0 HalfReuse: 'h'/4 HalfReuse: 'a'/5 HalfReuse: 'r'/1 }"acter"/6 Tile{ ]] }
    refalrts::alloc_chars(vm, context[6], context[7], "acter", 5);
    refalrts::reinit_char(context[0], 'c');
    refalrts::reinit_char(context[4], 'h');
    refalrts::reinit_char(context[5], 'a');
    refalrts::reinit_char(context[1], 'r');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & TokName/4 # TkVariable/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkVariable], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: 'v'/0 HalfReuse: 'a'/4 HalfReuse: 'r'/5 HalfReuse: 'i'/1 }"able"/6 Tile{ ]] }
    refalrts::alloc_chars(vm, context[6], context[7], "able", 4);
    refalrts::reinit_char(context[0], 'v');
    refalrts::reinit_char(context[4], 'a');
    refalrts::reinit_char(context[5], 'r');
    refalrts::reinit_char(context[1], 'i');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & TokName/4 # TkOpenBracket/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkOpenBracket], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '\''/4 HalfReuse: '('/5 HalfReuse: '\''/1 ]] }
    refalrts::reinit_char(context[4], '\'');
    refalrts::reinit_char(context[5], '(');
    refalrts::reinit_char(context[1], '\'');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & TokName/4 # TkCloseBracket/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkCloseBracket], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '\''/4 HalfReuse: ')'/5 HalfReuse: '\''/1 ]] }
    refalrts::reinit_char(context[4], '\'');
    refalrts::reinit_char(context[5], ')');
    refalrts::reinit_char(context[1], '\'');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & TokName/4 # TkOpenBlock/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkOpenBlock], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '\''/4 HalfReuse: '{'/5 HalfReuse: '\''/1 ]] }
    refalrts::reinit_char(context[4], '\'');
    refalrts::reinit_char(context[5], '{');
    refalrts::reinit_char(context[1], '\'');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & TokName/4 # TkCloseBlock/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkCloseBlock], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '\''/4 HalfReuse: '}'/5 HalfReuse: '\''/1 ]] }
    refalrts::reinit_char(context[4], '\'');
    refalrts::reinit_char(context[5], '}');
    refalrts::reinit_char(context[1], '\'');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & TokName/4 # TkOpenCall/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkOpenCall], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '\''/4 HalfReuse: '<'/5 HalfReuse: '\''/1 ]] }
    refalrts::reinit_char(context[4], '\'');
    refalrts::reinit_char(context[5], '<');
    refalrts::reinit_char(context[1], '\'');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & TokName/4 # TkCloseCall/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkCloseCall], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '\''/4 HalfReuse: '>'/5 HalfReuse: '\''/1 ]] }
    refalrts::reinit_char(context[4], '\'');
    refalrts::reinit_char(context[5], '>');
    refalrts::reinit_char(context[1], '\'');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & TokName/4 # TkOpenADT/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkOpenADT], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '\''/4 HalfReuse: '['/5 HalfReuse: '\''/1 ]] }
    refalrts::reinit_char(context[4], '\'');
    refalrts::reinit_char(context[5], '[');
    refalrts::reinit_char(context[1], '\'');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & TokName/4 # TkCloseADT/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkCloseADT], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '\''/4 HalfReuse: ']'/5 HalfReuse: '\''/1 ]] }
    refalrts::reinit_char(context[4], '\'');
    refalrts::reinit_char(context[5], ']');
    refalrts::reinit_char(context[1], '\'');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & TokName/4 # TkComma/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkComma], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '\''/4 HalfReuse: ','/5 HalfReuse: '\''/1 ]] }
    refalrts::reinit_char(context[4], '\'');
    refalrts::reinit_char(context[5], ',');
    refalrts::reinit_char(context[1], '\'');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & TokName/4 # TkColon/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkColon], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '\''/4 HalfReuse: ':'/5 HalfReuse: '\''/1 ]] }
    refalrts::reinit_char(context[4], '\'');
    refalrts::reinit_char(context[5], ':');
    refalrts::reinit_char(context[1], '\'');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & TokName/4 # TkAssign/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkAssign], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '\''/4 HalfReuse: '='/5 HalfReuse: '\''/1 ]] }
    refalrts::reinit_char(context[4], '\'');
    refalrts::reinit_char(context[5], '=');
    refalrts::reinit_char(context[1], '\'');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & TokName/4 # TkSemicolon/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkSemicolon], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '\''/4 HalfReuse: ';'/5 HalfReuse: '\''/1 ]] }
    refalrts::reinit_char(context[4], '\'');
    refalrts::reinit_char(context[5], ';');
    refalrts::reinit_char(context[1], '\'');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & TokName/4 # TkExtern/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkExtern], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: '$'/0 HalfReuse: 'E'/4 HalfReuse: 'X'/5 HalfReuse: 'T'/1 }"ERN"/6 Tile{ ]] }
    refalrts::alloc_chars(vm, context[6], context[7], "ERN", 3);
    refalrts::reinit_char(context[0], '$');
    refalrts::reinit_char(context[4], 'E');
    refalrts::reinit_char(context[5], 'X');
    refalrts::reinit_char(context[1], 'T');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & TokName/4 # TkEntry/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkEntry], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: '$'/0 HalfReuse: 'E'/4 HalfReuse: 'N'/5 HalfReuse: 'T'/1 }"RY"/6 Tile{ ]] }
    refalrts::alloc_chars(vm, context[6], context[7], "RY", 2);
    refalrts::reinit_char(context[0], '$');
    refalrts::reinit_char(context[4], 'E');
    refalrts::reinit_char(context[5], 'N');
    refalrts::reinit_char(context[1], 'T');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & TokName/4 # TkEnum/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkEnum], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: '$'/0 HalfReuse: 'E'/4 HalfReuse: 'N'/5 HalfReuse: 'U'/1 } 'M'/6 Tile{ ]] }
    refalrts::alloc_char(vm, context[6], 'M');
    refalrts::reinit_char(context[0], '$');
    refalrts::reinit_char(context[4], 'E');
    refalrts::reinit_char(context[5], 'N');
    refalrts::reinit_char(context[1], 'U');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & TokName/4 # TkEEnum/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkEEnum], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: '$'/0 HalfReuse: 'E'/4 HalfReuse: 'E'/5 HalfReuse: 'N'/1 }"UM"/6 Tile{ ]] }
    refalrts::alloc_chars(vm, context[6], context[7], "UM", 2);
    refalrts::reinit_char(context[0], '$');
    refalrts::reinit_char(context[4], 'E');
    refalrts::reinit_char(context[5], 'E');
    refalrts::reinit_char(context[1], 'N');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & TokName/4 # TkSwap/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkSwap], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: '$'/0 HalfReuse: 'S'/4 HalfReuse: 'W'/5 HalfReuse: 'A'/1 } 'P'/6 Tile{ ]] }
    refalrts::alloc_char(vm, context[6], 'P');
    refalrts::reinit_char(context[0], '$');
    refalrts::reinit_char(context[4], 'S');
    refalrts::reinit_char(context[5], 'W');
    refalrts::reinit_char(context[1], 'A');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & TokName/4 # TkESwap/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkESwap], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: '$'/0 HalfReuse: 'E'/4 HalfReuse: 'S'/5 HalfReuse: 'W'/1 }"AP"/6 Tile{ ]] }
    refalrts::alloc_chars(vm, context[6], context[7], "AP", 2);
    refalrts::reinit_char(context[0], '$');
    refalrts::reinit_char(context[4], 'E');
    refalrts::reinit_char(context[5], 'S');
    refalrts::reinit_char(context[1], 'W');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & TokName/4 # TkInclude/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkInclude], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: '$'/0 HalfReuse: 'I'/4 HalfReuse: 'N'/5 HalfReuse: 'C'/1 }"LUDE"/6 Tile{ ]] }
    refalrts::alloc_chars(vm, context[6], context[7], "LUDE", 4);
    refalrts::reinit_char(context[0], '$');
    refalrts::reinit_char(context[4], 'I');
    refalrts::reinit_char(context[5], 'N');
    refalrts::reinit_char(context[1], 'C');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & TokName/4 # TkScopeId/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkScopeId], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: '$'/0 HalfReuse: 'S'/4 HalfReuse: 'C'/5 HalfReuse: 'O'/1 }"PEID"/6 Tile{ ]] }
    refalrts::alloc_chars(vm, context[6], context[7], "PEID", 4);
    refalrts::reinit_char(context[0], '$');
    refalrts::reinit_char(context[4], 'S');
    refalrts::reinit_char(context[5], 'C');
    refalrts::reinit_char(context[1], 'O');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & TokName/4 # TkLabel/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkLabel], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: '$'/0 HalfReuse: 'L'/4 HalfReuse: 'A'/5 HalfReuse: 'B'/1 }"EL"/6 Tile{ ]] }
    refalrts::alloc_chars(vm, context[6], context[7], "EL", 2);
    refalrts::reinit_char(context[0], '$');
    refalrts::reinit_char(context[4], 'L');
    refalrts::reinit_char(context[5], 'A');
    refalrts::reinit_char(context[1], 'B');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & TokName/4 # TkInline/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkInline], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: '$'/0 HalfReuse: 'I'/4 HalfReuse: 'N'/5 HalfReuse: 'L'/1 }"INE"/6 Tile{ ]] }
    refalrts::alloc_chars(vm, context[6], context[7], "INE", 3);
    refalrts::reinit_char(context[0], '$');
    refalrts::reinit_char(context[4], 'I');
    refalrts::reinit_char(context[5], 'N');
    refalrts::reinit_char(context[1], 'L');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & TokName/4 # TkDrive/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkDrive], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: '$'/0 HalfReuse: 'D'/4 HalfReuse: 'R'/5 HalfReuse: 'I'/1 }"VE"/6 Tile{ ]] }
    refalrts::alloc_chars(vm, context[6], context[7], "VE", 2);
    refalrts::reinit_char(context[0], '$');
    refalrts::reinit_char(context[4], 'D');
    refalrts::reinit_char(context[5], 'R');
    refalrts::reinit_char(context[1], 'I');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & TokName/4 # TkIntrinsic/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkIntrinsic], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: '$'/0 HalfReuse: 'I'/4 HalfReuse: 'N'/5 HalfReuse: 'T'/1 }"RINSIC"/6 Tile{ ]] }
    refalrts::alloc_chars(vm, context[6], context[7], "RINSIC", 6);
    refalrts::reinit_char(context[0], '$');
    refalrts::reinit_char(context[4], 'I');
    refalrts::reinit_char(context[5], 'N');
    refalrts::reinit_char(context[1], 'T');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & TokName/4 # TkEOF/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkEOF], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: 'e'/0 HalfReuse: 'n'/4 HalfReuse: 'd'/5 HalfReuse: '-'/1 }"of-file"/6 Tile{ ]] }
    refalrts::alloc_chars(vm, context[6], context[7], "of-file", 7);
    refalrts::reinit_char(context[0], 'e');
    refalrts::reinit_char(context[4], 'n');
    refalrts::reinit_char(context[5], 'd');
    refalrts::reinit_char(context[1], '-');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & TokName/4 # TkRefal5Mode/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkRefal5Mode], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: '*'/0 HalfReuse: '$'/4 HalfReuse: 'C'/5 HalfReuse: 'L'/1 }"ASSIC or *$EXTENDED"/6 Tile{ ]] }
    refalrts::alloc_chars(vm, context[6], context[7], "ASSIC or *$EXTENDED", 19);
    refalrts::reinit_char(context[0], '*');
    refalrts::reinit_char(context[4], '$');
    refalrts::reinit_char(context[5], 'C');
    refalrts::reinit_char(context[1], 'L');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & TokName/4 # TkAmpersand/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkAmpersand], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '\''/4 HalfReuse: '&'/5 HalfReuse: '\''/1 ]] }
    refalrts::reinit_char(context[4], '\'');
    refalrts::reinit_char(context[5], '&');
    refalrts::reinit_char(context[1], '\'');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & TokName/4 # TkRedefinition/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkRedefinition], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '\''/4 HalfReuse: '^'/5 HalfReuse: '\''/1 ]] }
    refalrts::reinit_char(context[4], '\'');
    refalrts::reinit_char(context[5], '^');
    refalrts::reinit_char(context[1], '\'');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & TokName/4 # TkNativeCode/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkNativeCode], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: 'n'/0 HalfReuse: 'a'/4 HalfReuse: 't'/5 HalfReuse: 'i'/1 }"ve code insertion"/6 Tile{ ]] }
    refalrts::alloc_chars(vm, context[6], context[7], "ve code insertion", 17);
    refalrts::reinit_char(context[0], 'n');
    refalrts::reinit_char(context[4], 'a');
    refalrts::reinit_char(context[5], 't');
    refalrts::reinit_char(context[1], 'i');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & TokName/4 # TkSpec/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkSpec], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: '$'/0 HalfReuse: 'S'/4 HalfReuse: 'P'/5 HalfReuse: 'E'/1 } 'C'/6 Tile{ ]] }
    refalrts::alloc_char(vm, context[6], 'C');
    refalrts::reinit_char(context[0], '$');
    refalrts::reinit_char(context[4], 'S');
    refalrts::reinit_char(context[5], 'P');
    refalrts::reinit_char(context[1], 'E');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & TokName/4 # TkMeta/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_TkMeta], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: '$'/0 HalfReuse: 'M'/4 HalfReuse: 'E'/5 HalfReuse: 'T'/1 } 'A'/6 Tile{ ]] }
    refalrts::alloc_char(vm, context[6], 'A');
    refalrts::reinit_char(context[0], '$');
    refalrts::reinit_char(context[4], 'M');
    refalrts::reinit_char(context[5], 'E');
    refalrts::reinit_char(context[1], 'T');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & TokName/4 # TkPseudoComment/5 >/1
  if( ! refalrts::ident_term( identifiers[ident_TkPseudoComment], context[5] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: '*'/0 HalfReuse: '$'/4 HalfReuse: '-'/5 HalfReuse: 'p'/1 }"seudocomment"/6 Tile{ ]] }
  refalrts::alloc_chars(vm, context[6], context[7], "seudocomment", 12);
  refalrts::reinit_char(context[0], '*');
  refalrts::reinit_char(context[4], '$');
  refalrts::reinit_char(context[5], '-');
  refalrts::reinit_char(context[1], 'p');
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[6], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_TokName("TokName", COOKIE1_, COOKIE2_, func_TokName);


static refalrts::FnResult func_gen_Unit_B1D1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 71 elems
  refalrts::Iter context[71];
  refalrts::zeros( context, 71 );
  // </0 & Unit:1*1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Unit:1*1/4 t.new1/5 (/9 e.new2/7 )/10 s.new3/11 t.new4/12 t.new5/14 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[13] = refalrts::tvar_left( context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  context[15] = refalrts::tvar_left( context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & Unit:1*1/4 t.new6/5 (/9 e.new12/16 )/10 s.new7/11 t.new8/12 (/14 s.new9/20 t.new10/21 e.new11/18 )/15 >/1
    context[16] = context[7];
    context[17] = context[8];
    context[18] = 0;
    context[19] = 0;
    if( ! refalrts::brackets_term( context[18], context[19], context[14] ) )
      continue;
    // closed e.new12 as range 16
    if( ! refalrts::svar_left( context[20], context[18], context[19] ) )
      continue;
    context[22] = refalrts::tvar_left( context[21], context[18], context[19] );
    if( ! context[22] )
      continue;
    // closed e.new11 as range 18
    do {
      // </0 & Unit:1*1/4 t.new13/5 (/9 e.new18/23 )/10 s.new14/11 t.new15/12 (/14 s.new16/20 t.new17/21 )/15 >/1
      context[23] = context[16];
      context[24] = context[17];
      if( ! refalrts::empty_seq( context[18], context[19] ) )
        continue;
      // closed e.new18 as range 23
      do {
        // </0 & Unit:1*1/4 t.ErrorList/5 (/9 e.Tokens/25 )/10 s.Mode/11 t.NextToken/12 (/14 s.Tag/20 t.Pos/21 )/15 >/1
        context[25] = context[23];
        context[26] = context[24];
        // closed e.Tokens as range 25
        //DEBUG: t.ErrorList: 5
        //DEBUG: t.NextToken: 12
        //DEBUG: t.Pos: 21
        //DEBUG: s.Mode: 11
        //DEBUG: s.Tag: 20
        //DEBUG: e.Tokens: 25
        //5: t.ErrorList
        //11: s.Mode
        //12: t.NextToken
        //20: s.Tag
        //21: t.Pos
        //25: e.Tokens
        //32: s.Tag

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[27]);
        refalrts::alloc_name(vm, context[29], functions[efunc_gen_Unit_B1D1S2C1]);
        refalrts::alloc_open_call(vm, context[30]);
        refalrts::alloc_name(vm, context[31], functions[efunc_gen_OneOf_Z1]);
        refalrts::copy_stvar(vm, context[32], context[20]);
        refalrts::alloc_open_call(vm, context[33]);
        refalrts::alloc_name(vm, context[34], functions[efunc_NameListTags]);
        refalrts::alloc_close_call(vm, context[35]);
        refalrts::alloc_close_call(vm, context[36]);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[27] );
        res = refalrts::splice_elem( res, context[28] );
        refalrts::push_stack( vm, context[36] );
        refalrts::push_stack( vm, context[30] );
        res = refalrts::splice_elem( res, context[36] );
        refalrts::push_stack( vm, context[35] );
        refalrts::push_stack( vm, context[33] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_elem( res, context[34] );
        res = refalrts::splice_elem( res, context[33] );
        res = refalrts::splice_stvar( res, context[32] );
        res = refalrts::splice_elem( res, context[31] );
        res = refalrts::splice_elem( res, context[30] );
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[27] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </27 & Unit:1*1$2?1/31 # True/32 >/28
          context[29] = 0;
          context[30] = 0;
          context[31] = refalrts::call_left( context[29], context[30], context[27], context[28] );
          context[32] = refalrts::ident_left( identifiers[ident_True], context[29], context[30] );
          if( ! context[32] )
            continue;
          if( ! refalrts::empty_seq( context[29], context[30] ) )
            continue;
          //DEBUG: t.ErrorList: 5
          //DEBUG: t.NextToken: 12
          //DEBUG: t.Pos: 21
          //DEBUG: s.Mode: 11
          //DEBUG: s.Tag: 20
          //DEBUG: e.Tokens: 25

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.Mode/11 t.NextToken/12 (/14 s.Tag/20 {REMOVED TILE} {REMOVED TILE} >/28 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: </27 Reuse: & Unit:1$2:1/31 HalfReuse: s.Mode11 /32 } Tile{ AsIs: t.Pos/21 HalfReuse: s.Tag20 /15 } Tile{ AsIs: </0 Reuse: & NameList/4 AsIs: t.ErrorList/5 HalfReuse: s.Tag20 /9 AsIs: e.Tokens/25 HalfReuse: >/10 } Tile{ AsIs: >/1 ]] }
          refalrts::update_name(context[31], functions[efunc_gen_Unit_B1S2B1]);
          refalrts::reinit_svar( context[32], context[11] );
          refalrts::reinit_svar( context[15], context[20] );
          refalrts::update_name(context[4], functions[efunc_NameList]);
          refalrts::reinit_svar( context[9], context[20] );
          refalrts::reinit_close_call(context[10]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[10] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[0], context[10] );
          res = refalrts::splice_evar( res, context[21], context[15] );
          res = refalrts::splice_evar( res, context[27], context[32] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[27], context[28]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Unit:1*1/4 t.new19/5 (/9 e.new23/25 )/10 s.new20/11 t.new21/12 (/14 # TkInclude/20 t.new22/21 )/15 >/1
      context[25] = context[23];
      context[26] = context[24];
      if( ! refalrts::ident_term( identifiers[ident_TkInclude], context[20] ) )
        continue;
      // closed e.new23 as range 25
      do {
        // </0 & Unit:1*1/4 t.new24/5 (/9 t.new28/29 t.new29/31 e.new30/27 )/10 s.new25/11 t.new26/12 (/14 # TkInclude/20 t.new27/21 )/15 >/1
        context[27] = context[25];
        context[28] = context[26];
        context[30] = refalrts::tvar_left( context[29], context[27], context[28] );
        if( ! context[30] )
          continue;
        context[32] = refalrts::tvar_left( context[31], context[27], context[28] );
        if( ! context[32] )
          continue;
        // closed e.new30 as range 27
        do {
          // </0 & Unit:1*1/4 t.ErrorList/5 (/9 t./29 t.0/31 e.0/33 )/10 # Classic/11 t.NextToken/12 (/14 # TkInclude/20 t.Pos/21 )/15 >/1
          context[33] = context[27];
          context[34] = context[28];
          if( ! refalrts::ident_term( identifiers[ident_Classic], context[11] ) )
            continue;
          // closed e.0 as range 33
          //DEBUG: t.ErrorList: 5
          //DEBUG: t.: 29
          //DEBUG: t.0: 31
          //DEBUG: t.NextToken: 12
          //DEBUG: t.Pos: 21
          //DEBUG: e.0: 33

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.NextToken/12 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Include=1/4 } Tile{ AsIs: (/14 } Tile{ AsIs: e.0/33 } Tile{ HalfReuse: )/9 AsIs: t./29 AsIs: t.0/31 } </35 & EL-AddErrorAt/36 Tile{ AsIs: t.ErrorList/5 } Tile{ AsIs: t.Pos/21 } Tile{ HalfReuse: '$'/20 } Tile{ HalfReuse: 'I'/10 HalfReuse: 'N'/11 }"CLUDE is extension"/37 Tile{ HalfReuse: >/15 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[35]);
          refalrts::alloc_name(vm, context[36], functions[efunc_ELm_AddErrorAt]);
          refalrts::alloc_chars(vm, context[37], context[38], "CLUDE is extension", 18);
          refalrts::update_name(context[4], functions[efunc_gen_Include_A1]);
          refalrts::reinit_close_bracket(context[9]);
          refalrts::reinit_char(context[20], '$');
          refalrts::reinit_char(context[10], 'I');
          refalrts::reinit_char(context[11], 'N');
          refalrts::reinit_close_call(context[15]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[15] );
          refalrts::push_stack( vm, context[35] );
          refalrts::link_brackets( context[14], context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[15];
          res = refalrts::splice_evar( res, context[37], context[38] );
          res = refalrts::splice_evar( res, context[10], context[11] );
          res = refalrts::splice_elem( res, context[20] );
          res = refalrts::splice_evar( res, context[21], context[22] );
          res = refalrts::splice_evar( res, context[5], context[6] );
          res = refalrts::splice_evar( res, context[35], context[36] );
          res = refalrts::splice_evar( res, context[9], context[32] );
          res = refalrts::splice_evar( res, context[33], context[34] );
          res = refalrts::splice_elem( res, context[14] );
          refalrts::splice_to_freelist_open( vm, context[4], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Unit:1*1/4 t.new31/5 (/9 t.new34/29 t.new35/31 e.new36/33 )/10 # Extended/11 t.new32/12 (/14 # TkInclude/20 t.new33/21 )/15 >/1
          context[33] = context[27];
          context[34] = context[28];
          if( ! refalrts::ident_term( identifiers[ident_Extended], context[11] ) )
            continue;
          // closed e.new36 as range 33
          do {
            // </0 & Unit:1*1/4 t.new37/5 (/9 (/29 s.new40/39 t.new41/40 e.new42/37 )/30 t.new43/31 e.new44/35 )/10 # Extended/11 t.new38/12 (/14 # TkInclude/20 t.new39/21 )/15 >/1
            context[35] = context[33];
            context[36] = context[34];
            context[37] = 0;
            context[38] = 0;
            if( ! refalrts::brackets_term( context[37], context[38], context[29] ) )
              continue;
            // closed e.new44 as range 35
            if( ! refalrts::svar_left( context[39], context[37], context[38] ) )
              continue;
            context[41] = refalrts::tvar_left( context[40], context[37], context[38] );
            if( ! context[41] )
              continue;
            // closed e.new42 as range 37
            do {
              // </0 & Unit:1*1/4 t.new45/5 (/9 (/29 # TkCompound/39 t.new48/40 e.new49/42 )/30 t.new50/31 e.new51/44 )/10 # Extended/11 t.new46/12 (/14 # TkInclude/20 t.new47/21 )/15 >/1
              context[42] = context[37];
              context[43] = context[38];
              context[44] = context[35];
              context[45] = context[36];
              if( ! refalrts::ident_term( identifiers[ident_TkCompound], context[39] ) )
                continue;
              // closed e.new49 as range 42
              // closed e.new51 as range 44
              do {
                // </0 & Unit:1*1/4 t.new52/5 (/9 (/29 # TkCompound/39 t.new55/40 e.new56/46 )/30 (/31 s.new57/52 t.new58/53 e.new59/50 )/32 e.new60/48 )/10 # Extended/11 t.new53/12 (/14 # TkInclude/20 t.new54/21 )/15 >/1
                context[46] = context[42];
                context[47] = context[43];
                context[48] = context[44];
                context[49] = context[45];
                context[50] = 0;
                context[51] = 0;
                if( ! refalrts::brackets_term( context[50], context[51], context[31] ) )
                  continue;
                // closed e.new56 as range 46
                // closed e.new60 as range 48
                if( ! refalrts::svar_left( context[52], context[50], context[51] ) )
                  continue;
                context[54] = refalrts::tvar_left( context[53], context[50], context[51] );
                if( ! context[54] )
                  continue;
                // closed e.new59 as range 50
                do {
                  // </0 & Unit:1*1/4 t.ErrorList/5 (/9 (/29 # TkCompound/39 t.2/40 e.3/55 )/30 (/31 # TkSemicolon/52 t.4/53 )/32 e.0/57 )/10 # Extended/11 t.NextToken/12 (/14 # TkInclude/20 t.Pos/21 )/15 >/1
                  context[55] = context[46];
                  context[56] = context[47];
                  context[57] = context[48];
                  context[58] = context[49];
                  if( ! refalrts::ident_term( identifiers[ident_TkSemicolon], context[52] ) )
                    continue;
                  if( ! refalrts::empty_seq( context[50], context[51] ) )
                    continue;
                  // closed e.3 as range 55
                  // closed e.0 as range 57
                  //DEBUG: t.ErrorList: 5
                  //DEBUG: t.2: 40
                  //DEBUG: t.4: 53
                  //DEBUG: t.NextToken: 12
                  //DEBUG: t.Pos: 21
                  //DEBUG: e.3: 55
                  //DEBUG: e.0: 57

                  refalrts::reset_allocator(vm);
                  //TRASH: {REMOVED TILE} </0 & Unit:1*1/4 {REMOVED TILE} # TkSemicolon/52 t.4/53 )/32 {REMOVED TILE} )/10 # Extended/11 t.NextToken/12 (/14 # TkInclude/20 t.Pos/21 )/15 >/1 {REMOVED TILE}
                  //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList/5 AsIs: (/9 AsIs: (/29 Reuse: # Include/39 AsIs: t.2/40 AsIs: e.3/55 AsIs: )/30 HalfReuse: )/31 } Tile{ AsIs: e.0/57 } Tile{ ]] }
                  refalrts::update_ident(context[39], identifiers[ident_Include]);
                  refalrts::reinit_close_bracket(context[31]);
                  refalrts::link_brackets( context[9], context[31] );
                  refalrts::link_brackets( context[29], context[30] );
                  refalrts::Iter trash_prev = arg_begin->prev;
                  refalrts::use(trash_prev);
                  refalrts::Iter res = arg_end->next;
                  res = refalrts::splice_evar( res, context[57], context[58] );
                  res = refalrts::splice_evar( res, context[5], context[31] );
                  refalrts::splice_to_freelist_open( vm, trash_prev, res );
                  return refalrts::cSuccess;
                } while ( 0 );
                refalrts::stop_sentence(vm);

                do {
                  // </0 & Unit:1*1/4 t.ErrorList/5 (/9 (/29 # TkCompound/39 t.2/40 e.2/55 )/30 (/31 # TkError/52 t.1/53 e.3/57 )/32 e.0/59 )/10 # Extended/11 t.NextToken/12 (/14 # TkInclude/20 t.Pos/21 )/15 >/1
                  context[55] = context[46];
                  context[56] = context[47];
                  context[57] = context[50];
                  context[58] = context[51];
                  context[59] = context[48];
                  context[60] = context[49];
                  if( ! refalrts::ident_term( identifiers[ident_TkError], context[52] ) )
                    continue;
                  // closed e.2 as range 55
                  // closed e.3 as range 57
                  // closed e.0 as range 59
                  //DEBUG: t.ErrorList: 5
                  //DEBUG: t.2: 40
                  //DEBUG: t.1: 53
                  //DEBUG: t.NextToken: 12
                  //DEBUG: t.Pos: 21
                  //DEBUG: e.2: 55
                  //DEBUG: e.3: 57
                  //DEBUG: e.0: 59

                  refalrts::reset_allocator(vm);
                  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/10 # Extended/11 t.NextToken/12 (/14 {REMOVED TILE} t.Pos/21 )/15 {REMOVED TILE} {REMOVED TILE}
                  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList/5 } t.1/53/61 e.3/57/63 Tile{ AsIs: >/1 } Tile{ AsIs: (/9 AsIs: (/29 Reuse: # Include/39 AsIs: t.2/40 AsIs: e.2/55 AsIs: )/30 HalfReuse: )/31 HalfReuse: (/52 } Tile{ Reuse: # TkError/20 } Tile{ AsIs: t.1/53 AsIs: e.3/57 AsIs: )/32 } Tile{ AsIs: e.0/59 } Tile{ ]] }
                  refalrts::copy_evar(vm, context[61], context[62], context[53], context[54]);
                  refalrts::copy_evar(vm, context[63], context[64], context[57], context[58]);
                  refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
                  refalrts::update_ident(context[39], identifiers[ident_Include]);
                  refalrts::reinit_close_bracket(context[31]);
                  refalrts::reinit_open_bracket(context[52]);
                  refalrts::update_ident(context[20], identifiers[ident_TkError]);
                  refalrts::link_brackets( context[52], context[32] );
                  refalrts::link_brackets( context[9], context[31] );
                  refalrts::link_brackets( context[29], context[30] );
                  refalrts::push_stack( vm, context[1] );
                  refalrts::push_stack( vm, context[0] );
                  refalrts::Iter trash_prev = arg_begin->prev;
                  refalrts::use(trash_prev);
                  refalrts::Iter res = arg_end->next;
                  res = refalrts::splice_evar( res, context[59], context[60] );
                  res = refalrts::splice_evar( res, context[53], context[32] );
                  res = refalrts::splice_elem( res, context[20] );
                  res = refalrts::splice_evar( res, context[9], context[52] );
                  res = refalrts::splice_elem( res, context[1] );
                  res = refalrts::splice_evar( res, context[63], context[64] );
                  res = refalrts::splice_evar( res, context[61], context[62] );
                  refalrts::splice_to_freelist_open( vm, context[6], res );
                  return refalrts::cSuccess;
                } while ( 0 );
                refalrts::stop_sentence(vm);

                // </0 & Unit:1*1/4 t.ErrorList/5 (/9 (/29 # TkCompound/39 t.2/40 e.2/55 )/30 (/31 s.Type/52 t.1/53 e.3/57 )/32 e.0/59 )/10 # Extended/11 t.NextToken/12 (/14 # TkInclude/20 t.Pos/21 )/15 >/1
                context[55] = context[46];
                context[56] = context[47];
                context[57] = context[50];
                context[58] = context[51];
                context[59] = context[48];
                context[60] = context[49];
                // closed e.2 as range 55
                // closed e.3 as range 57
                // closed e.0 as range 59
                //DEBUG: t.ErrorList: 5
                //DEBUG: t.2: 40
                //DEBUG: t.1: 53
                //DEBUG: t.NextToken: 12
                //DEBUG: t.Pos: 21
                //DEBUG: s.Type: 52
                //DEBUG: e.2: 55
                //DEBUG: e.3: 57
                //DEBUG: e.0: 59

                refalrts::reset_allocator(vm);
                //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.NextToken/12 {REMOVED TILE} {REMOVED TILE} t.Pos/21 {REMOVED TILE} {REMOVED TILE}
                //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList/5 } t.1/53/61 Tile{ HalfReuse: 'u'/20 } 'n'/63 Tile{ HalfReuse: 'e'/10 HalfReuse: 'x'/11 }"pected "/64 </66 & TokName/67 Tile{ HalfReuse: s.Type52 /15 AsIs: >/1 }", expected \';\'"/68 >/70 Tile{ AsIs: (/9 AsIs: (/29 Reuse: # Include/39 AsIs: t.2/40 AsIs: e.2/55 AsIs: )/30 HalfReuse: )/31 } Tile{ AsIs: (/14 } Tile{ AsIs: s.Type/52 AsIs: t.1/53 AsIs: e.3/57 AsIs: )/32 } Tile{ AsIs: e.0/59 } Tile{ ]] }
                refalrts::copy_evar(vm, context[61], context[62], context[53], context[54]);
                refalrts::alloc_char(vm, context[63], 'n');
                refalrts::alloc_chars(vm, context[64], context[65], "pected ", 7);
                refalrts::alloc_open_call(vm, context[66]);
                refalrts::alloc_name(vm, context[67], functions[efunc_TokName]);
                refalrts::alloc_chars(vm, context[68], context[69], ", expected \';\'", 14);
                refalrts::alloc_close_call(vm, context[70]);
                refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
                refalrts::reinit_char(context[20], 'u');
                refalrts::reinit_char(context[10], 'e');
                refalrts::reinit_char(context[11], 'x');
                refalrts::reinit_svar( context[15], context[52] );
                refalrts::update_ident(context[39], identifiers[ident_Include]);
                refalrts::reinit_close_bracket(context[31]);
                refalrts::link_brackets( context[14], context[32] );
                refalrts::link_brackets( context[9], context[31] );
                refalrts::link_brackets( context[29], context[30] );
                refalrts::push_stack( vm, context[70] );
                refalrts::push_stack( vm, context[0] );
                refalrts::push_stack( vm, context[1] );
                refalrts::push_stack( vm, context[66] );
                refalrts::Iter trash_prev = arg_begin->prev;
                refalrts::use(trash_prev);
                refalrts::Iter res = arg_end->next;
                res = refalrts::splice_evar( res, context[59], context[60] );
                res = refalrts::splice_evar( res, context[52], context[32] );
                res = refalrts::splice_elem( res, context[14] );
                res = refalrts::splice_evar( res, context[9], context[31] );
                res = refalrts::splice_evar( res, context[68], context[70] );
                res = refalrts::splice_evar( res, context[15], context[1] );
                res = refalrts::splice_evar( res, context[64], context[67] );
                res = refalrts::splice_evar( res, context[10], context[11] );
                res = refalrts::splice_elem( res, context[63] );
                res = refalrts::splice_elem( res, context[20] );
                res = refalrts::splice_evar( res, context[61], context[62] );
                refalrts::splice_to_freelist_open( vm, context[6], res );
                return refalrts::cSuccess;
              } while ( 0 );
              refalrts::stop_sentence(vm);

              // </0 & Unit:1*1/4 t.ErrorList/5 (/9 (/29 # TkCompound/39 t.2/40 e.2/46 )/30 t.0/31 e.0/48 )/10 # Extended/11 t.NextToken/12 (/14 # TkInclude/20 t.Pos/21 )/15 >/1
              context[46] = context[42];
              context[47] = context[43];
              context[48] = context[44];
              context[49] = context[45];
              // closed e.2 as range 46
              // closed e.0 as range 48
              //DEBUG: t.ErrorList: 5
              //DEBUG: t.2: 40
              //DEBUG: t.0: 31
              //DEBUG: t.NextToken: 12
              //DEBUG: t.Pos: 21
              //DEBUG: e.2: 46
              //DEBUG: e.0: 48

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} # Extended/11 t.NextToken/12 {REMOVED TILE} t.Pos/21 {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ AsIs: </0 Reuse: & UnexpectedToken*2/4 AsIs: t.ErrorList/5 } Tile{ AsIs: t.0/31 } Tile{ HalfReuse: '\''/14 HalfReuse: ';'/20 } Tile{ HalfReuse: '\''/15 AsIs: >/1 } Tile{ AsIs: (/9 AsIs: (/29 Reuse: # Include/39 AsIs: t.2/40 AsIs: e.2/46 AsIs: )/30 } Tile{ AsIs: )/10 } t.0/31/50 Tile{ AsIs: e.0/48 } Tile{ ]] }
              refalrts::copy_evar(vm, context[50], context[51], context[31], context[32]);
              refalrts::update_name(context[4], functions[efunc_gen_UnexpectedToken_D2]);
              refalrts::reinit_char(context[14], '\'');
              refalrts::reinit_char(context[20], ';');
              refalrts::reinit_char(context[15], '\'');
              refalrts::update_ident(context[39], identifiers[ident_Include]);
              refalrts::link_brackets( context[9], context[10] );
              refalrts::link_brackets( context[29], context[30] );
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[0] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = arg_end->next;
              res = refalrts::splice_evar( res, context[48], context[49] );
              res = refalrts::splice_evar( res, context[50], context[51] );
              res = refalrts::splice_elem( res, context[10] );
              res = refalrts::splice_evar( res, context[9], context[30] );
              res = refalrts::splice_evar( res, context[15], context[1] );
              res = refalrts::splice_evar( res, context[14], context[20] );
              res = refalrts::splice_evar( res, context[31], context[32] );
              refalrts::splice_to_freelist_open( vm, context[6], res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            do {
              // </0 & Unit:1*1/4 t.ErrorList/5 (/9 (/29 # TkError/39 t.2/40 e.2/42 )/30 t.0/31 e.0/44 )/10 # Extended/11 t.NextToken/12 (/14 # TkInclude/20 t.Pos/21 )/15 >/1
              context[42] = context[37];
              context[43] = context[38];
              context[44] = context[35];
              context[45] = context[36];
              if( ! refalrts::ident_term( identifiers[ident_TkError], context[39] ) )
                continue;
              // closed e.2 as range 42
              // closed e.0 as range 44
              //DEBUG: t.ErrorList: 5
              //DEBUG: t.2: 40
              //DEBUG: t.0: 31
              //DEBUG: t.NextToken: 12
              //DEBUG: t.Pos: 21
              //DEBUG: e.2: 42
              //DEBUG: e.0: 44

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/10 # Extended/11 t.NextToken/12 {REMOVED TILE} # TkInclude/20 t.Pos/21 )/15 {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList/5 } t.2/40/46 e.2/42/48 Tile{ AsIs: >/1 } Tile{ AsIs: (/14 } Tile{ HalfReuse: )/9 AsIs: (/29 AsIs: # TkError/39 AsIs: t.2/40 AsIs: e.2/42 AsIs: )/30 AsIs: t.0/31 } Tile{ AsIs: e.0/44 } Tile{ ]] }
              refalrts::copy_evar(vm, context[46], context[47], context[40], context[41]);
              refalrts::copy_evar(vm, context[48], context[49], context[42], context[43]);
              refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
              refalrts::reinit_close_bracket(context[9]);
              refalrts::link_brackets( context[29], context[30] );
              refalrts::link_brackets( context[14], context[9] );
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[0] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = arg_end->next;
              res = refalrts::splice_evar( res, context[44], context[45] );
              res = refalrts::splice_evar( res, context[9], context[32] );
              res = refalrts::splice_elem( res, context[14] );
              res = refalrts::splice_elem( res, context[1] );
              res = refalrts::splice_evar( res, context[48], context[49] );
              res = refalrts::splice_evar( res, context[46], context[47] );
              refalrts::splice_to_freelist_open( vm, context[6], res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            // </0 & Unit:1*1/4 t.ErrorList/5 (/9 (/29 s.Type/39 t.2/40 e.2/42 )/30 t.0/31 e.0/44 )/10 # Extended/11 t.NextToken/12 (/14 # TkInclude/20 t.Pos/21 )/15 >/1
            context[42] = context[37];
            context[43] = context[38];
            context[44] = context[35];
            context[45] = context[36];
            // closed e.2 as range 42
            // closed e.0 as range 44
            //DEBUG: t.ErrorList: 5
            //DEBUG: t.2: 40
            //DEBUG: t.0: 31
            //DEBUG: t.NextToken: 12
            //DEBUG: t.Pos: 21
            //DEBUG: s.Type: 39
            //DEBUG: e.2: 42
            //DEBUG: e.0: 44

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.NextToken/12 {REMOVED TILE} {REMOVED TILE} t.Pos/21 {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList/5 } t.2/40/46 Tile{ HalfReuse: 'u'/20 } 'n'/48 Tile{ HalfReuse: 'e'/10 HalfReuse: 'x'/11 }"pected "/49 </51 & TokName/52 Tile{ HalfReuse: s.Type39 /15 AsIs: >/1 }", expected compound symbol"/53 >/55 Tile{ AsIs: (/14 } Tile{ HalfReuse: )/9 AsIs: (/29 AsIs: s.Type/39 AsIs: t.2/40 AsIs: e.2/42 AsIs: )/30 AsIs: t.0/31 } Tile{ AsIs: e.0/44 } Tile{ ]] }
            refalrts::copy_evar(vm, context[46], context[47], context[40], context[41]);
            refalrts::alloc_char(vm, context[48], 'n');
            refalrts::alloc_chars(vm, context[49], context[50], "pected ", 7);
            refalrts::alloc_open_call(vm, context[51]);
            refalrts::alloc_name(vm, context[52], functions[efunc_TokName]);
            refalrts::alloc_chars(vm, context[53], context[54], ", expected compound symbol", 26);
            refalrts::alloc_close_call(vm, context[55]);
            refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
            refalrts::reinit_char(context[20], 'u');
            refalrts::reinit_char(context[10], 'e');
            refalrts::reinit_char(context[11], 'x');
            refalrts::reinit_svar( context[15], context[39] );
            refalrts::reinit_close_bracket(context[9]);
            refalrts::link_brackets( context[29], context[30] );
            refalrts::link_brackets( context[14], context[9] );
            refalrts::push_stack( vm, context[55] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[51] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[44], context[45] );
            res = refalrts::splice_evar( res, context[9], context[32] );
            res = refalrts::splice_elem( res, context[14] );
            res = refalrts::splice_evar( res, context[53], context[55] );
            res = refalrts::splice_evar( res, context[15], context[1] );
            res = refalrts::splice_evar( res, context[49], context[52] );
            res = refalrts::splice_evar( res, context[10], context[11] );
            res = refalrts::splice_elem( res, context[48] );
            res = refalrts::splice_elem( res, context[20] );
            res = refalrts::splice_evar( res, context[46], context[47] );
            refalrts::splice_to_freelist_open( vm, context[6], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & Unit:1*1/4 t.ErrorList/5 (/9 t./29 t.0/31 e.0/35 )/10 # Extended/11 t.NextToken/12 (/14 # TkInclude/20 t.Pos/21 )/15 >/1
          context[35] = context[33];
          context[36] = context[34];
          // closed e.0 as range 35
          //DEBUG: t.ErrorList: 5
          //DEBUG: t.: 29
          //DEBUG: t.0: 31
          //DEBUG: t.NextToken: 12
          //DEBUG: t.Pos: 21
          //DEBUG: e.0: 35

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.NextToken/12 {REMOVED TILE} {REMOVED TILE} t.Pos/21 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & UnexpectedToken*2/4 AsIs: t.ErrorList/5 } t./29/37 'c'/39 Tile{ HalfReuse: 'o'/10 HalfReuse: 'm'/11 } Tile{ HalfReuse: 'p'/20 }"ound symbo"/40 Tile{ HalfReuse: 'l'/15 AsIs: >/1 } Tile{ AsIs: (/14 } Tile{ HalfReuse: )/9 AsIs: t./29 AsIs: t.0/31 } Tile{ AsIs: e.0/35 } Tile{ ]] }
          refalrts::copy_evar(vm, context[37], context[38], context[29], context[30]);
          refalrts::alloc_char(vm, context[39], 'c');
          refalrts::alloc_chars(vm, context[40], context[41], "ound symbo", 10);
          refalrts::update_name(context[4], functions[efunc_gen_UnexpectedToken_D2]);
          refalrts::reinit_char(context[10], 'o');
          refalrts::reinit_char(context[11], 'm');
          refalrts::reinit_char(context[20], 'p');
          refalrts::reinit_char(context[15], 'l');
          refalrts::reinit_close_bracket(context[9]);
          refalrts::link_brackets( context[14], context[9] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[35], context[36] );
          res = refalrts::splice_evar( res, context[9], context[32] );
          res = refalrts::splice_elem( res, context[14] );
          res = refalrts::splice_evar( res, context[15], context[1] );
          res = refalrts::splice_evar( res, context[40], context[41] );
          res = refalrts::splice_elem( res, context[20] );
          res = refalrts::splice_evar( res, context[10], context[11] );
          res = refalrts::splice_evar( res, context[37], context[39] );
          refalrts::splice_to_freelist_open( vm, context[6], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Unit:1*1/4 t.ErrorList/5 (/9 t./29 t.0/31 e.0/33 )/10 s.Mode/11 t.NextToken/12 (/14 # TkInclude/20 t.Pos/21 )/15 >/1
        context[33] = context[27];
        context[34] = context[28];
        // closed e.0 as range 33
        //DEBUG: t.ErrorList: 5
        //DEBUG: t.: 29
        //DEBUG: t.0: 31
        //DEBUG: t.NextToken: 12
        //DEBUG: t.Pos: 21
        //DEBUG: s.Mode: 11
        //DEBUG: e.0: 33

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Mode/11 t.NextToken/12 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </35 & Include=1/36 Tile{ AsIs: (/14 } Tile{ AsIs: e.0/33 } Tile{ AsIs: )/10 } Tile{ AsIs: t./29 AsIs: t.0/31 } Tile{ AsIs: </0 Reuse: & ClassicError*2/4 AsIs: t.ErrorList/5 HalfReuse: s.Mode11 /9 } Tile{ AsIs: t.Pos/21 } Tile{ HalfReuse: '$'/20 }"INCLUDE is extension"/37 Tile{ HalfReuse: >/15 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[35]);
        refalrts::alloc_name(vm, context[36], functions[efunc_gen_Include_A1]);
        refalrts::alloc_chars(vm, context[37], context[38], "INCLUDE is extension", 20);
        refalrts::update_name(context[4], functions[efunc_gen_ClassicError_D2]);
        refalrts::reinit_svar( context[9], context[11] );
        refalrts::reinit_char(context[20], '$');
        refalrts::reinit_close_call(context[15]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[35] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[14], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[15];
        res = refalrts::splice_evar( res, context[37], context[38] );
        res = refalrts::splice_elem( res, context[20] );
        res = refalrts::splice_evar( res, context[21], context[22] );
        res = refalrts::splice_evar( res, context[0], context[9] );
        res = refalrts::splice_evar( res, context[29], context[32] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Unit:1*1/4 t.ErrorList/5 (/9 e.Tokens/27 )/10 s.Mode/11 t.NextToken/12 (/14 # TkInclude/20 t.Pos/21 )/15 >/1
      context[27] = context[25];
      context[28] = context[26];
      // closed e.Tokens as range 27
      //DEBUG: t.ErrorList: 5
      //DEBUG: t.NextToken: 12
      //DEBUG: t.Pos: 21
      //DEBUG: s.Mode: 11
      //DEBUG: e.Tokens: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} )/10 s.Mode/11 t.NextToken/12 (/14 # TkInclude/20 {REMOVED TILE} )/15 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Include*1/4 AsIs: t.ErrorList/5 HalfReuse: s.Mode11 /9 } Tile{ AsIs: t.Pos/21 } Tile{ AsIs: e.Tokens/27 } Tile{ AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_gen_Include_D1]);
      refalrts::reinit_svar( context[9], context[11] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      refalrts::splice_to_freelist_open( vm, context[9], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Unit:1*1/4 t.ErrorList/5 (/9 e.Tokens/23 )/10 s.Mode/11 t.NextToken/12 (/14 # TkNativeCode/20 t.Pos/21 e.Lines/25 )/15 >/1
      context[23] = context[16];
      context[24] = context[17];
      context[25] = context[18];
      context[26] = context[19];
      if( ! refalrts::ident_term( identifiers[ident_TkNativeCode], context[20] ) )
        continue;
      // closed e.Tokens as range 23
      // closed e.Lines as range 25
      //DEBUG: t.ErrorList: 5
      //DEBUG: t.NextToken: 12
      //DEBUG: t.Pos: 21
      //DEBUG: s.Mode: 11
      //DEBUG: e.Tokens: 23
      //DEBUG: e.Lines: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Unit:1*1/4 {REMOVED TILE} {REMOVED TILE} )/10 s.Mode/11 t.NextToken/12 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList/5 AsIs: (/9 } Tile{ AsIs: (/14 Reuse: # NativeBlock/20 AsIs: t.Pos/21 AsIs: e.Lines/25 AsIs: )/15 HalfReuse: )/1 } Tile{ AsIs: e.Tokens/23 } Tile{ ]] }
      refalrts::update_ident(context[20], identifiers[ident_NativeBlock]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[9], context[1] );
      refalrts::link_brackets( context[14], context[15] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[14], context[1] );
      res = refalrts::splice_evar( res, context[5], context[9] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Unit:1*1/4 t.new13/5 (/9 e.new18/23 )/10 s.new14/11 t.new15/12 (/14 s.new16/20 t.new17/21 )/15 >/1
      context[23] = context[16];
      context[24] = context[17];
      if( ! refalrts::empty_seq( context[18], context[19] ) )
        continue;
      // closed e.new18 as range 23
      do {
        // </0 & Unit:1*1/4 t.ErrorList/5 (/9 e.Tokens/25 )/10 s.Mode/11 t.NextToken/12 (/14 # TkSemicolon/20 t.Pos/21 )/15 >/1
        context[25] = context[23];
        context[26] = context[24];
        if( ! refalrts::ident_term( identifiers[ident_TkSemicolon], context[20] ) )
          continue;
        // closed e.Tokens as range 25
        //DEBUG: t.ErrorList: 5
        //DEBUG: t.NextToken: 12
        //DEBUG: t.Pos: 21
        //DEBUG: s.Mode: 11
        //DEBUG: e.Tokens: 25

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & Unit:1*1/4 {REMOVED TILE} {REMOVED TILE} )/10 s.Mode/11 t.NextToken/12 (/14 # TkSemicolon/20 t.Pos/21 {REMOVED TILE} >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList/5 AsIs: (/9 } Tile{ AsIs: )/15 } Tile{ AsIs: e.Tokens/25 } Tile{ ]] }
        refalrts::link_brackets( context[9], context[15] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_evar( res, context[5], context[9] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Unit:1*1/4 t.new19/5 (/9 e.new23/25 )/10 s.new20/11 t.new21/12 (/14 # TkSpec/20 t.new22/21 )/15 >/1
      context[25] = context[23];
      context[26] = context[24];
      if( ! refalrts::ident_term( identifiers[ident_TkSpec], context[20] ) )
        continue;
      // closed e.new23 as range 25
      do {
        // </0 & Unit:1*1/4 t.new24/5 (/9 t.new28/29 e.new29/27 )/10 s.new25/11 t.new26/12 (/14 # TkSpec/20 t.new27/21 )/15 >/1
        context[27] = context[25];
        context[28] = context[26];
        context[30] = refalrts::tvar_left( context[29], context[27], context[28] );
        if( ! context[30] )
          continue;
        // closed e.new29 as range 27
        do {
          // </0 & Unit:1*1/4 t.new30/5 (/9 (/29 s.new34/35 t.new35/36 e.new36/33 )/30 e.new37/31 )/10 s.new31/11 t.new32/12 (/14 # TkSpec/20 t.new33/21 )/15 >/1
          context[31] = context[27];
          context[32] = context[28];
          context[33] = 0;
          context[34] = 0;
          if( ! refalrts::brackets_term( context[33], context[34], context[29] ) )
            continue;
          // closed e.new37 as range 31
          if( ! refalrts::svar_left( context[35], context[33], context[34] ) )
            continue;
          context[37] = refalrts::tvar_left( context[36], context[33], context[34] );
          if( ! context[37] )
            continue;
          // closed e.new36 as range 33
          do {
            // </0 & Unit:1*1/4 t.ErrorList/5 (/9 (/29 # TkName/35 t.1/36 e.2/38 )/30 e./40 )/10 s.Mode/11 t.NextToken/12 (/14 # TkSpec/20 t.Pos/21 )/15 >/1
            context[38] = context[33];
            context[39] = context[34];
            context[40] = context[31];
            context[41] = context[32];
            if( ! refalrts::ident_term( identifiers[ident_TkName], context[35] ) )
              continue;
            // closed e.2 as range 38
            // closed e. as range 40
            //DEBUG: t.ErrorList: 5
            //DEBUG: t.1: 36
            //DEBUG: t.NextToken: 12
            //DEBUG: t.Pos: 21
            //DEBUG: s.Mode: 11
            //DEBUG: e.2: 38
            //DEBUG: e.: 40

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} # TkName/35 t.1/36 {REMOVED TILE} )/30 {REMOVED TILE} {REMOVED TILE} s.Mode/11 t.NextToken/12 {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ HalfReuse: </14 HalfReuse: & Specialization$1=1/20 AsIs: t.Pos/21 } Tile{ AsIs: (/29 } Tile{ AsIs: e.2/38 } Tile{ AsIs: )/10 } Tile{ AsIs: </0 Reuse: & Pattern/4 AsIs: t.ErrorList/5 HalfReuse: s.Mode11 /9 } Tile{ AsIs: e./40 } Tile{ HalfReuse: >/15 AsIs: >/1 ]] }
            refalrts::reinit_open_call(context[14]);
            refalrts::reinit_name(context[20], functions[efunc_gen_Specialization_S1A1]);
            refalrts::update_name(context[4], functions[efunc_Pattern]);
            refalrts::reinit_svar( context[9], context[11] );
            refalrts::reinit_close_call(context[15]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[14] );
            refalrts::push_stack( vm, context[15] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[29], context[10] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[15];
            res = refalrts::splice_evar( res, context[40], context[41] );
            res = refalrts::splice_evar( res, context[0], context[9] );
            res = refalrts::splice_elem( res, context[10] );
            res = refalrts::splice_evar( res, context[38], context[39] );
            res = refalrts::splice_elem( res, context[29] );
            res = refalrts::splice_evar( res, context[14], context[22] );
            refalrts::splice_to_freelist_open( vm, trash_prev, res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & Unit:1*1/4 t.ErrorList/5 (/9 (/29 # TkError/35 t.1/36 e.2/38 )/30 e./40 )/10 s.Mode/11 t.NextToken/12 (/14 # TkSpec/20 t.Pos/21 )/15 >/1
            context[38] = context[33];
            context[39] = context[34];
            context[40] = context[31];
            context[41] = context[32];
            if( ! refalrts::ident_term( identifiers[ident_TkError], context[35] ) )
              continue;
            // closed e.2 as range 38
            // closed e. as range 40
            //DEBUG: t.ErrorList: 5
            //DEBUG: t.1: 36
            //DEBUG: t.NextToken: 12
            //DEBUG: t.Pos: 21
            //DEBUG: s.Mode: 11
            //DEBUG: e.2: 38
            //DEBUG: e.: 40

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} (/9 (/29 # TkError/35 {REMOVED TILE} {REMOVED TILE} )/10 s.Mode/11 t.NextToken/12 {REMOVED TILE} t.Pos/21 )/15 >/1 {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList/5 } Tile{ AsIs: t.1/36 AsIs: e.2/38 HalfReuse: >/30 } Tile{ AsIs: (/14 HalfReuse: )/20 } Tile{ AsIs: e./40 } Tile{ ]] }
            refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
            refalrts::reinit_close_call(context[30]);
            refalrts::reinit_close_bracket(context[20]);
            refalrts::link_brackets( context[14], context[20] );
            refalrts::push_stack( vm, context[30] );
            refalrts::push_stack( vm, context[0] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[40], context[41] );
            res = refalrts::splice_evar( res, context[14], context[20] );
            res = refalrts::splice_evar( res, context[36], context[30] );
            refalrts::splice_to_freelist_open( vm, context[6], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & Unit:1*1/4 t.ErrorList/5 (/9 (/29 s.Type/35 t.1/36 e.2/38 )/30 e./40 )/10 s.Mode/11 t.NextToken/12 (/14 # TkSpec/20 t.Pos/21 )/15 >/1
          context[38] = context[33];
          context[39] = context[34];
          context[40] = context[31];
          context[41] = context[32];
          // closed e.2 as range 38
          // closed e. as range 40
          //DEBUG: t.ErrorList: 5
          //DEBUG: t.1: 36
          //DEBUG: t.NextToken: 12
          //DEBUG: t.Pos: 21
          //DEBUG: s.Type: 35
          //DEBUG: s.Mode: 11
          //DEBUG: e.2: 38
          //DEBUG: e.: 40

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.2/38 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Mode/11 t.NextToken/12 {REMOVED TILE} t.Pos/21 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList/5 } Tile{ AsIs: t.1/36 } 'u'/42 Tile{ HalfReuse: 'n'/30 } Tile{ HalfReuse: 'e'/10 }"xpected "/43 Tile{ HalfReuse: </9 HalfReuse: & TokName/29 AsIs: s.Type/35 } >/45", expected function nam"/46 Tile{ HalfReuse: 'e'/15 AsIs: >/1 } Tile{ AsIs: (/14 HalfReuse: )/20 } Tile{ AsIs: e./40 } Tile{ ]] }
          refalrts::alloc_char(vm, context[42], 'u');
          refalrts::alloc_chars(vm, context[43], context[44], "xpected ", 8);
          refalrts::alloc_close_call(vm, context[45]);
          refalrts::alloc_chars(vm, context[46], context[47], ", expected function nam", 23);
          refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
          refalrts::reinit_char(context[30], 'n');
          refalrts::reinit_char(context[10], 'e');
          refalrts::reinit_open_call(context[9]);
          refalrts::reinit_name(context[29], functions[efunc_TokName]);
          refalrts::reinit_char(context[15], 'e');
          refalrts::reinit_close_bracket(context[20]);
          refalrts::link_brackets( context[14], context[20] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[45] );
          refalrts::push_stack( vm, context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[40], context[41] );
          res = refalrts::splice_evar( res, context[14], context[20] );
          res = refalrts::splice_evar( res, context[15], context[1] );
          res = refalrts::splice_evar( res, context[45], context[47] );
          res = refalrts::splice_evar( res, context[9], context[35] );
          res = refalrts::splice_evar( res, context[43], context[44] );
          res = refalrts::splice_elem( res, context[10] );
          res = refalrts::splice_elem( res, context[30] );
          res = refalrts::splice_elem( res, context[42] );
          res = refalrts::splice_evar( res, context[36], context[37] );
          refalrts::splice_to_freelist_open( vm, context[6], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Unit:1*1/4 t.ErrorList/5 (/9 t./29 e./31 )/10 s.Mode/11 t.NextToken/12 (/14 # TkSpec/20 t.Pos/21 )/15 >/1
        context[31] = context[27];
        context[32] = context[28];
        // closed e. as range 31
        //DEBUG: t.ErrorList: 5
        //DEBUG: t.: 29
        //DEBUG: t.NextToken: 12
        //DEBUG: t.Pos: 21
        //DEBUG: s.Mode: 11
        //DEBUG: e.: 31

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Mode/11 t.NextToken/12 {REMOVED TILE} t.Pos/21 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & UnexpectedToken*2/4 AsIs: t.ErrorList/5 } Tile{ AsIs: t./29 } Tile{ HalfReuse: 'f'/9 }"un"/33 Tile{ HalfReuse: 'c'/10 }"tion nam"/35 Tile{ HalfReuse: 'e'/15 AsIs: >/1 } Tile{ AsIs: (/14 HalfReuse: )/20 } Tile{ AsIs: e./31 } Tile{ ]] }
        refalrts::alloc_chars(vm, context[33], context[34], "un", 2);
        refalrts::alloc_chars(vm, context[35], context[36], "tion nam", 8);
        refalrts::update_name(context[4], functions[efunc_gen_UnexpectedToken_D2]);
        refalrts::reinit_char(context[9], 'f');
        refalrts::reinit_char(context[10], 'c');
        refalrts::reinit_char(context[15], 'e');
        refalrts::reinit_close_bracket(context[20]);
        refalrts::link_brackets( context[14], context[20] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[14], context[20] );
        res = refalrts::splice_evar( res, context[15], context[1] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        refalrts::splice_to_freelist_open( vm, context[6], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Unit:1*1/4 t.ErrorList/5 (/9 e.Tokens/27 )/10 s.Mode/11 t.NextToken/12 (/14 # TkSpec/20 t.Pos/21 )/15 >/1
      context[27] = context[25];
      context[28] = context[26];
      // closed e.Tokens as range 27
      //DEBUG: t.ErrorList: 5
      //DEBUG: t.NextToken: 12
      //DEBUG: t.Pos: 21
      //DEBUG: s.Mode: 11
      //DEBUG: e.Tokens: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} )/10 s.Mode/11 t.NextToken/12 (/14 # TkSpec/20 {REMOVED TILE} )/15 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Specialization*2/4 AsIs: t.ErrorList/5 HalfReuse: s.Mode11 /9 } Tile{ AsIs: t.Pos/21 } Tile{ AsIs: e.Tokens/27 } Tile{ AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_gen_Specialization_D2]);
      refalrts::reinit_svar( context[9], context[11] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      refalrts::splice_to_freelist_open( vm, context[9], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Unit:1*1/4 t.ErrorList/5 (/9 e.Tokens/23 )/10 s.Mode/11 t.NextToken/12 (/14 s.Type/20 t.Pos/21 e.Value/25 )/15 >/1
      context[23] = context[16];
      context[24] = context[17];
      context[25] = context[18];
      context[26] = context[19];
      // closed e.Tokens as range 23
      // closed e.Value as range 25
      //DEBUG: t.ErrorList: 5
      //DEBUG: t.NextToken: 12
      //DEBUG: t.Pos: 21
      //DEBUG: s.Mode: 11
      //DEBUG: s.Type: 20
      //DEBUG: e.Tokens: 23
      //DEBUG: e.Value: 25
      //5: t.ErrorList
      //11: s.Mode
      //12: t.NextToken
      //20: s.Type
      //21: t.Pos
      //23: e.Tokens
      //25: e.Value
      //32: s.Type

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[27]);
      refalrts::alloc_name(vm, context[29], functions[efunc_gen_Unit_B1D1S7C1]);
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_OneOf_Z1]);
      refalrts::copy_stvar(vm, context[32], context[20]);
      refalrts::alloc_ident(vm, context[33], identifiers[ident_TkEntry]);
      refalrts::alloc_ident(vm, context[34], identifiers[ident_TkName]);
      refalrts::alloc_close_call(vm, context[35]);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[27] );
      res = refalrts::splice_elem( res, context[28] );
      refalrts::push_stack( vm, context[35] );
      refalrts::push_stack( vm, context[30] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_stvar( res, context[32] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[27] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </27 & Unit:1*1$7?1/31 # True/32 >/28
        context[29] = 0;
        context[30] = 0;
        context[31] = refalrts::call_left( context[29], context[30], context[27], context[28] );
        context[32] = refalrts::ident_left( identifiers[ident_True], context[29], context[30] );
        if( ! context[32] )
          continue;
        if( ! refalrts::empty_seq( context[29], context[30] ) )
          continue;
        //DEBUG: t.ErrorList: 5
        //DEBUG: t.NextToken: 12
        //DEBUG: t.Pos: 21
        //DEBUG: s.Mode: 11
        //DEBUG: s.Type: 20
        //DEBUG: e.Tokens: 23
        //DEBUG: e.Value: 25

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} )/10 s.Mode/11 {REMOVED TILE} (/14 s.Type/20 t.Pos/21 e.Value/25 )/15 </27 & Unit:1*1$7?1/31 # True/32 >/28 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Function/4 AsIs: t.ErrorList/5 HalfReuse: s.Mode11 /9 } Tile{ AsIs: t.NextToken/12 } Tile{ AsIs: e.Tokens/23 } Tile{ AsIs: >/1 ]] }
        refalrts::update_name(context[4], functions[efunc_Function]);
        refalrts::reinit_svar( context[9], context[11] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        refalrts::splice_to_freelist_open( vm, context[9], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[27], context[28]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Unit:1*1/4 t.ErrorList/5 (/9 e.Tokens/23 )/10 s.Mode/11 t.NextToken/12 (/14 # TkPseudoComment/20 t.Pos/21 e.CommentTokens/25 )/15 >/1
      context[23] = context[16];
      context[24] = context[17];
      context[25] = context[18];
      context[26] = context[19];
      if( ! refalrts::ident_term( identifiers[ident_TkPseudoComment], context[20] ) )
        continue;
      // closed e.Tokens as range 23
      // closed e.CommentTokens as range 25
      //DEBUG: t.ErrorList: 5
      //DEBUG: t.NextToken: 12
      //DEBUG: t.Pos: 21
      //DEBUG: s.Mode: 11
      //DEBUG: e.Tokens: 23
      //DEBUG: e.CommentTokens: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Mode/11 t.NextToken/12 {REMOVED TILE} t.Pos/21 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Unit:1$8:1/4 } Tile{ AsIs: (/9 AsIs: e.Tokens/23 AsIs: )/10 } Tile{ HalfReuse: </14 HalfReuse: & Unit/20 } Tile{ AsIs: t.ErrorList/5 } # Extended/27 Tile{ AsIs: e.CommentTokens/25 } Tile{ HalfReuse: >/15 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[27], identifiers[ident_Extended]);
      refalrts::update_name(context[4], functions[efunc_gen_Unit_B1S8B1]);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[20], functions[efunc_Unit]);
      refalrts::reinit_close_call(context[15]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[15];
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[14], context[20] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Unit:1*1/4 t.ErrorList/5 (/9 e.Tokens/23 )/10 s.Mode/11 t.NextToken/12 (/14 # TkError/20 t.0/21 e.1/25 )/15 >/1
      context[23] = context[16];
      context[24] = context[17];
      context[25] = context[18];
      context[26] = context[19];
      if( ! refalrts::ident_term( identifiers[ident_TkError], context[20] ) )
        continue;
      // closed e.Tokens as range 23
      // closed e.1 as range 25
      //DEBUG: t.ErrorList: 5
      //DEBUG: t.NextToken: 12
      //DEBUG: t.0: 21
      //DEBUG: s.Mode: 11
      //DEBUG: e.Tokens: 23
      //DEBUG: e.1: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} (/9 {REMOVED TILE} )/10 s.Mode/11 t.NextToken/12 (/14 # TkError/20 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList/5 } Tile{ AsIs: t.0/21 AsIs: e.1/25 HalfReuse: >/15 } Tile{ AsIs: e.Tokens/23 } Tile{ ]] }
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_close_call(context[15]);
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[21], context[15] );
      refalrts::splice_to_freelist_open( vm, context[6], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Unit:1*1/4 t.ErrorList/5 (/9 e.Tokens/23 )/10 s.Mode/11 t.NextToken/12 (/14 s.Type/20 t.0/21 e.1/25 )/15 >/1
    context[23] = context[16];
    context[24] = context[17];
    context[25] = context[18];
    context[26] = context[19];
    // closed e.Tokens as range 23
    // closed e.1 as range 25
    //DEBUG: t.ErrorList: 5
    //DEBUG: t.NextToken: 12
    //DEBUG: t.0: 21
    //DEBUG: s.Mode: 11
    //DEBUG: s.Type: 20
    //DEBUG: e.Tokens: 23
    //DEBUG: e.1: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Mode/11 t.NextToken/12 {REMOVED TILE} s.Type/20 {REMOVED TILE} e.1/25 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList/5 } Tile{ AsIs: t.0/21 } Tile{ HalfReuse: 'u'/10 } Tile{ HalfReuse: 'n'/9 } 'e'/27 Tile{ HalfReuse: 'x'/14 }"pected "/28 </30 & TokName/31 Tile{ HalfReuse: s.Type20 /15 AsIs: >/1 }", expected Declaration, definition, $INCLUDE or special comment"/32 >/34 Tile{ AsIs: e.Tokens/23 } Tile{ ]] }
    refalrts::alloc_char(vm, context[27], 'e');
    refalrts::alloc_chars(vm, context[28], context[29], "pected ", 7);
    refalrts::alloc_open_call(vm, context[30]);
    refalrts::alloc_name(vm, context[31], functions[efunc_TokName]);
    refalrts::alloc_chars(vm, context[32], context[33], ", expected Declaration, definition, $INCLUDE or special comment", 63);
    refalrts::alloc_close_call(vm, context[34]);
    refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
    refalrts::reinit_char(context[10], 'u');
    refalrts::reinit_char(context[9], 'n');
    refalrts::reinit_char(context[14], 'x');
    refalrts::reinit_svar( context[15], context[20] );
    refalrts::push_stack( vm, context[34] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[30] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[32], context[34] );
    res = refalrts::splice_evar( res, context[15], context[1] );
    res = refalrts::splice_evar( res, context[28], context[31] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_elem( res, context[27] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    refalrts::splice_to_freelist_open( vm, context[6], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Unit:1*1/4 t.ErrorList/5 (/9 e.Tokens/7 )/10 s.Mode/11 t.NextToken/12 t.Unexpected/14 >/1
  // closed e.Tokens as range 7
  //DEBUG: t.ErrorList: 5
  //DEBUG: t.NextToken: 12
  //DEBUG: t.Unexpected: 14
  //DEBUG: s.Mode: 11
  //DEBUG: e.Tokens: 7

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Mode/11 t.NextToken/12 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UnexpectedToken*2/4 AsIs: t.ErrorList/5 } Tile{ AsIs: t.Unexpected/14 HalfReuse: 'D'/1 } Tile{ HalfReuse: 'e'/9 } 'c'/16 Tile{ HalfReuse: 'l'/10 }"aration, definition, $INCLUDE or special comment"/17 >/19 Tile{ AsIs: e.Tokens/7 } Tile{ ]] }
  refalrts::alloc_char(vm, context[16], 'c');
  refalrts::alloc_chars(vm, context[17], context[18], "aration, definition, $INCLUDE or special comment", 48);
  refalrts::alloc_close_call(vm, context[19]);
  refalrts::update_name(context[4], functions[efunc_gen_UnexpectedToken_D2]);
  refalrts::reinit_char(context[1], 'D');
  refalrts::reinit_char(context[9], 'e');
  refalrts::reinit_char(context[10], 'l');
  refalrts::push_stack( vm, context[19] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[17], context[19] );
  res = refalrts::splice_elem( res, context[10] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_evar( res, context[14], context[1] );
  refalrts::splice_to_freelist_open( vm, context[6], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Unit_B1D1("Unit:1*1", COOKIE1_, COOKIE2_, func_gen_Unit_B1D1);


static refalrts::FnResult func_gen_DoTokenChain_B1D11(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 56 elems
  refalrts::Iter context[56];
  refalrts::zeros( context, 56 );
  // </0 & DoTokenChain:1*11/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoTokenChain:1*11/4 s.new1/5 s.new2/6 t.new3/7 (/11 e.new4/9 )/12 (/15 e.new5/13 )/16 t.new6/17 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new4 as range 9
  // closed e.new5 as range 13
  context[18] = refalrts::tvar_left( context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & DoTokenChain:1*11/4 s.new7/5 s.new8/6 t.new9/7 (/11 e.new13/19 )/12 (/15 e.new14/21 )/16 (/17 s.new10/25 t.new11/26 e.new12/23 )/18 >/1
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = 0;
    context[24] = 0;
    if( ! refalrts::brackets_term( context[23], context[24], context[17] ) )
      continue;
    // closed e.new13 as range 19
    // closed e.new14 as range 21
    if( ! refalrts::svar_left( context[25], context[23], context[24] ) )
      continue;
    context[27] = refalrts::tvar_left( context[26], context[23], context[24] );
    if( ! context[27] )
      continue;
    // closed e.new12 as range 23
    do {
      // </0 & DoTokenChain:1*11/4 s.new15/5 s.new16/6 t.new17/7 (/11 e.new20/28 )/12 (/15 e.new21/30 )/16 (/17 s.new18/25 t.new19/26 )/18 >/1
      context[28] = context[19];
      context[29] = context[20];
      context[30] = context[21];
      context[31] = context[22];
      if( ! refalrts::empty_seq( context[23], context[24] ) )
        continue;
      // closed e.new20 as range 28
      // closed e.new21 as range 30
      do {
        // </0 & DoTokenChain:1*11/4 s.Mode/5 s.Kind/6 t.ErrorList/7 (/11 e.Collected/32 )/12 (/15 e.Tokens/34 )/16 (/17 # TkOpenBlock/25 t.Pos/26 )/18 >/1
        context[32] = context[28];
        context[33] = context[29];
        context[34] = context[30];
        context[35] = context[31];
        if( ! refalrts::ident_term( identifiers[ident_TkOpenBlock], context[25] ) )
          continue;
        // closed e.Collected as range 32
        // closed e.Tokens as range 34
        //DEBUG: t.ErrorList: 7
        //DEBUG: t.Pos: 26
        //DEBUG: s.Mode: 5
        //DEBUG: s.Kind: 6
        //DEBUG: e.Collected: 32
        //DEBUG: e.Tokens: 34
        //5: s.Mode
        //6: s.Kind
        //7: t.ErrorList
        //26: t.Pos
        //32: e.Collected
        //34: e.Tokens
        //39: s.Kind

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[36]);
        refalrts::alloc_name(vm, context[38], functions[efunc_gen_DoTokenChain_B1D11S12C1]);
        refalrts::copy_stvar(vm, context[39], context[6]);
        refalrts::alloc_close_call(vm, context[37]);
        refalrts::push_stack( vm, context[37] );
        refalrts::push_stack( vm, context[36] );
        res = refalrts::splice_elem( res, context[37] );
        res = refalrts::splice_stvar( res, context[39] );
        res = refalrts::splice_elem( res, context[38] );
        res = refalrts::splice_elem( res, context[36] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </36 & DoTokenChain:1*11$12?1/40 # Result/41 >/37
          context[38] = 0;
          context[39] = 0;
          context[40] = refalrts::call_left( context[38], context[39], context[36], context[37] );
          context[41] = refalrts::ident_left( identifiers[ident_Result], context[38], context[39] );
          if( ! context[41] )
            continue;
          if( ! refalrts::empty_seq( context[38], context[39] ) )
            continue;
          //DEBUG: t.ErrorList: 7
          //DEBUG: t.Pos: 26
          //DEBUG: s.Mode: 5
          //DEBUG: s.Kind: 6
          //DEBUG: e.Collected: 32
          //DEBUG: e.Tokens: 34

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Kind/6 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/18 {REMOVED TILE} & DoTokenChain:1*11$12?1/40 # Result/41 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain:1$12=2/4 AsIs: s.Mode/5 } Tile{ AsIs: (/11 AsIs: e.Collected/32 AsIs: )/12 } Tile{ AsIs: t.Pos/26 } Tile{ AsIs: (/15 AsIs: e.Tokens/34 AsIs: )/16 HalfReuse: </17 HalfReuse: & ClassicError@3/25 } Tile{ AsIs: t.ErrorList/7 } Tile{ HalfReuse: s.Mode5 /36 } t.Pos/26/42 Tile{ AsIs: >/37 AsIs: >/1 ]] }
          refalrts::copy_evar(vm, context[42], context[43], context[26], context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_DoTokenChain_B1S12A2]);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[25], functions[efunc_gen_ClassicError_Z3]);
          refalrts::reinit_svar( context[36], context[5] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[37] );
          refalrts::push_stack( vm, context[17] );
          refalrts::link_brackets( context[15], context[16] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[37];
          res = refalrts::splice_evar( res, context[42], context[43] );
          res = refalrts::splice_elem( res, context[36] );
          res = refalrts::splice_evar( res, context[7], context[8] );
          res = refalrts::splice_evar( res, context[15], context[25] );
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[11], context[12] );
          refalrts::splice_to_freelist_open( vm, context[5], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[36], context[37]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoTokenChain:1*11/4 s.new22/5 s.new23/6 t.new24/7 (/11 e.new26/32 )/12 (/15 e.new27/34 )/16 (/17 # TkRedefinition/25 t.new25/26 )/18 >/1
        context[32] = context[28];
        context[33] = context[29];
        context[34] = context[30];
        context[35] = context[31];
        if( ! refalrts::ident_term( identifiers[ident_TkRedefinition], context[25] ) )
          continue;
        // closed e.new26 as range 32
        // closed e.new27 as range 34
        do {
          // </0 & DoTokenChain:1*11/4 # Classic/5 s.Kind/6 t.ErrorList/7 (/11 e.Collected/36 )/12 (/15 e.Tokens/38 )/16 (/17 # TkRedefinition/25 t.Pos/26 )/18 >/1
          context[36] = context[32];
          context[37] = context[33];
          context[38] = context[34];
          context[39] = context[35];
          if( ! refalrts::ident_term( identifiers[ident_Classic], context[5] ) )
            continue;
          // closed e.Collected as range 36
          // closed e.Tokens as range 38
          //DEBUG: t.ErrorList: 7
          //DEBUG: t.Pos: 26
          //DEBUG: s.Kind: 6
          //DEBUG: e.Collected: 36
          //DEBUG: e.Tokens: 38

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 AsIs: # Classic/5 AsIs: s.Kind/6 } Tile{ HalfReuse: </16 HalfReuse: & DoTokenChain-AddRedefinition/17 HalfReuse: s.Kind6 /25 } </40 & EL-AddErrorAt/41 Tile{ AsIs: t.ErrorList/7 } t.Pos/26/42 Tile{ HalfReuse: 'V'/15 }"ariable redefinition is available in the extended mode"/44 >/46 Tile{ AsIs: (/11 AsIs: e.Collected/36 AsIs: )/12 } Tile{ AsIs: t.Pos/26 HalfReuse: >/18 } Tile{ AsIs: e.Tokens/38 } Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[40]);
          refalrts::alloc_name(vm, context[41], functions[efunc_ELm_AddErrorAt]);
          refalrts::copy_evar(vm, context[42], context[43], context[26], context[27]);
          refalrts::alloc_chars(vm, context[44], context[45], "ariable redefinition is available in the extended mode", 54);
          refalrts::alloc_close_call(vm, context[46]);
          refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
          refalrts::reinit_open_call(context[16]);
          refalrts::reinit_name(context[17], functions[efunc_DoTokenChainm_AddRedefinition]);
          refalrts::reinit_svar( context[25], context[6] );
          refalrts::reinit_char(context[15], 'V');
          refalrts::reinit_close_call(context[18]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[18] );
          refalrts::push_stack( vm, context[16] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::push_stack( vm, context[46] );
          refalrts::push_stack( vm, context[40] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[38], context[39] );
          res = refalrts::splice_evar( res, context[26], context[18] );
          res = refalrts::splice_evar( res, context[11], context[12] );
          res = refalrts::splice_evar( res, context[44], context[46] );
          res = refalrts::splice_elem( res, context[15] );
          res = refalrts::splice_evar( res, context[42], context[43] );
          res = refalrts::splice_evar( res, context[7], context[8] );
          res = refalrts::splice_evar( res, context[40], context[41] );
          res = refalrts::splice_evar( res, context[16], context[25] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoTokenChain:1*11/4 # Extended/5 s.new28/6 t.new29/7 (/11 e.new31/36 )/12 (/15 e.new32/38 )/16 (/17 # TkRedefinition/25 t.new30/26 )/18 >/1
          context[36] = context[32];
          context[37] = context[33];
          context[38] = context[34];
          context[39] = context[35];
          if( ! refalrts::ident_term( identifiers[ident_Extended], context[5] ) )
            continue;
          // closed e.new31 as range 36
          // closed e.new32 as range 38
          do {
            // </0 & DoTokenChain:1*11/4 # Extended/5 # Pattern/6 t.new33/7 (/11 e.new35/40 )/12 (/15 e.new36/42 )/16 (/17 # TkRedefinition/25 t.new34/26 )/18 >/1
            context[40] = context[36];
            context[41] = context[37];
            context[42] = context[38];
            context[43] = context[39];
            if( ! refalrts::ident_term( identifiers[ident_Pattern], context[6] ) )
              continue;
            // closed e.new35 as range 40
            // closed e.new36 as range 42
            do {
              // </0 & DoTokenChain:1*11/4 # Extended/5 # Pattern/6 t.ErrorList/7 (/11 e./44 (/50 # Var/52 t.1/53 s.VarType/55 e.3/48 )/51 )/12 (/15 e.Tokens/46 )/16 (/17 # TkRedefinition/25 t.Pos/26 )/18 >/1
              context[44] = context[40];
              context[45] = context[41];
              context[46] = context[42];
              context[47] = context[43];
              context[48] = 0;
              context[49] = 0;
              context[50] = refalrts::brackets_right( context[48], context[49], context[44], context[45] );
              if( ! context[50] )
                continue;
              refalrts::bracket_pointers(context[50], context[51]);
              context[52] = refalrts::ident_left( identifiers[ident_Var], context[48], context[49] );
              if( ! context[52] )
                continue;
              // closed e. as range 44
              // closed e.Tokens as range 46
              context[54] = refalrts::tvar_left( context[53], context[48], context[49] );
              if( ! context[54] )
                continue;
              if( ! refalrts::svar_left( context[55], context[48], context[49] ) )
                continue;
              // closed e.3 as range 48
              //DEBUG: t.ErrorList: 7
              //DEBUG: t.Pos: 26
              //DEBUG: e.: 44
              //DEBUG: e.Tokens: 46
              //DEBUG: t.1: 53
              //DEBUG: s.VarType: 55
              //DEBUG: e.3: 48

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} (/15 {REMOVED TILE} )/16 (/17 # TkRedefinition/25 t.Pos/26 )/18 {REMOVED TILE}
              //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 AsIs: # Extended/5 AsIs: # Pattern/6 AsIs: t.ErrorList/7 AsIs: (/11 AsIs: e./44 AsIs: (/50 Reuse: # NewVar/52 AsIs: t.1/53 AsIs: s.VarType/55 AsIs: e.3/48 AsIs: )/51 AsIs: )/12 } Tile{ AsIs: e.Tokens/46 } Tile{ AsIs: >/1 ]] }
              refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
              refalrts::update_ident(context[52], identifiers[ident_NewVar]);
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[0] );
              refalrts::link_brackets( context[11], context[12] );
              refalrts::link_brackets( context[50], context[51] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = context[1];
              res = refalrts::splice_evar( res, context[46], context[47] );
              refalrts::splice_to_freelist_open( vm, context[12], res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            // </0 & DoTokenChain:1*11/4 # Extended/5 # Pattern/6 t.ErrorList/7 (/11 e.Collected/44 )/12 (/15 e.Tokens/46 )/16 (/17 # TkRedefinition/25 t.Pos/26 )/18 >/1
            context[44] = context[40];
            context[45] = context[41];
            context[46] = context[42];
            context[47] = context[43];
            // closed e.Collected as range 44
            // closed e.Tokens as range 46
            //DEBUG: t.ErrorList: 7
            //DEBUG: t.Pos: 26
            //DEBUG: e.Collected: 44
            //DEBUG: e.Tokens: 46

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 AsIs: # Extended/5 AsIs: # Pattern/6 } </48 & EL-AddErrorAt/49 Tile{ AsIs: t.ErrorList/7 } Tile{ AsIs: t.Pos/26 HalfReuse: 'T'/18 } Tile{ HalfReuse: 'h'/15 } Tile{ HalfReuse: 'e'/16 HalfReuse: ' '/17 HalfReuse: 'r'/25 }"edefinition sign expects the variable before"/50 >/52 Tile{ AsIs: (/11 AsIs: e.Collected/44 AsIs: )/12 } Tile{ AsIs: e.Tokens/46 } Tile{ AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[48]);
            refalrts::alloc_name(vm, context[49], functions[efunc_ELm_AddErrorAt]);
            refalrts::alloc_chars(vm, context[50], context[51], "edefinition sign expects the variable before", 44);
            refalrts::alloc_close_call(vm, context[52]);
            refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
            refalrts::reinit_char(context[18], 'T');
            refalrts::reinit_char(context[15], 'h');
            refalrts::reinit_char(context[16], 'e');
            refalrts::reinit_char(context[17], ' ');
            refalrts::reinit_char(context[25], 'r');
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[11], context[12] );
            refalrts::push_stack( vm, context[52] );
            refalrts::push_stack( vm, context[48] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[46], context[47] );
            res = refalrts::splice_evar( res, context[11], context[12] );
            res = refalrts::splice_evar( res, context[50], context[52] );
            res = refalrts::splice_evar( res, context[16], context[25] );
            res = refalrts::splice_elem( res, context[15] );
            res = refalrts::splice_evar( res, context[26], context[18] );
            res = refalrts::splice_evar( res, context[7], context[8] );
            res = refalrts::splice_evar( res, context[48], context[49] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & DoTokenChain:1*11/4 # Extended/5 # Result/6 t.ErrorList/7 (/11 e.Collected/40 )/12 (/15 e.Tokens/42 )/16 (/17 # TkRedefinition/25 t.Pos/26 )/18 >/1
            context[40] = context[36];
            context[41] = context[37];
            context[42] = context[38];
            context[43] = context[39];
            if( ! refalrts::ident_term( identifiers[ident_Result], context[6] ) )
              continue;
            // closed e.Collected as range 40
            // closed e.Tokens as range 42
            //DEBUG: t.ErrorList: 7
            //DEBUG: t.Pos: 26
            //DEBUG: e.Collected: 40
            //DEBUG: e.Tokens: 42

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 AsIs: # Extended/5 AsIs: # Result/6 } </44 & EL-AddErrorAt/45 Tile{ AsIs: t.ErrorList/7 } Tile{ AsIs: t.Pos/26 HalfReuse: 'I'/18 } Tile{ HalfReuse: 'n'/15 } Tile{ HalfReuse: 'v'/16 HalfReuse: 'a'/17 HalfReuse: 'l'/25 }"id redefinition sign in the result expression"/46 >/48 Tile{ AsIs: (/11 AsIs: e.Collected/40 AsIs: )/12 } Tile{ AsIs: e.Tokens/42 } Tile{ AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[44]);
            refalrts::alloc_name(vm, context[45], functions[efunc_ELm_AddErrorAt]);
            refalrts::alloc_chars(vm, context[46], context[47], "id redefinition sign in the result expression", 45);
            refalrts::alloc_close_call(vm, context[48]);
            refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
            refalrts::reinit_char(context[18], 'I');
            refalrts::reinit_char(context[15], 'n');
            refalrts::reinit_char(context[16], 'v');
            refalrts::reinit_char(context[17], 'a');
            refalrts::reinit_char(context[25], 'l');
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[11], context[12] );
            refalrts::push_stack( vm, context[48] );
            refalrts::push_stack( vm, context[44] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[42], context[43] );
            res = refalrts::splice_evar( res, context[11], context[12] );
            res = refalrts::splice_evar( res, context[46], context[48] );
            res = refalrts::splice_evar( res, context[16], context[25] );
            res = refalrts::splice_elem( res, context[15] );
            res = refalrts::splice_evar( res, context[26], context[18] );
            res = refalrts::splice_evar( res, context[7], context[8] );
            res = refalrts::splice_evar( res, context[44], context[45] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & DoTokenChain:1*11/4 # Extended/5 s.Kind/6 t.ErrorList/7 (/11 e.Collected/40 )/12 (/15 e.Tokens/42 )/16 (/17 # TkRedefinition/25 t.Pos/26 )/18 >/1
          context[40] = context[36];
          context[41] = context[37];
          context[42] = context[38];
          context[43] = context[39];
          // closed e.Collected as range 40
          // closed e.Tokens as range 42
          //DEBUG: t.ErrorList: 7
          //DEBUG: t.Pos: 26
          //DEBUG: s.Kind: 6
          //DEBUG: e.Collected: 40
          //DEBUG: e.Tokens: 42

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} (/15 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: </16 HalfReuse: & DoTokenChain/17 Reuse: # Extended/25 } Tile{ HalfReuse: s.Kind6 /0 HalfReuse: </4 HalfReuse: & DoTokenChain-AddRedefinition*3/5 AsIs: s.Kind/6 AsIs: t.ErrorList/7 AsIs: (/11 AsIs: e.Collected/40 AsIs: )/12 } Tile{ AsIs: t.Pos/26 HalfReuse: >/18 } Tile{ AsIs: e.Tokens/42 } Tile{ AsIs: >/1 ]] }
          refalrts::reinit_open_call(context[16]);
          refalrts::reinit_name(context[17], functions[efunc_DoTokenChain]);
          refalrts::update_ident(context[25], identifiers[ident_Extended]);
          refalrts::reinit_svar( context[0], context[6] );
          refalrts::reinit_open_call(context[4]);
          refalrts::reinit_name(context[5], functions[efunc_gen_DoTokenChainm_AddRedefinition_D3]);
          refalrts::reinit_close_call(context[18]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[16] );
          refalrts::push_stack( vm, context[18] );
          refalrts::push_stack( vm, context[4] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[42], context[43] );
          res = refalrts::splice_evar( res, context[26], context[18] );
          res = refalrts::splice_evar( res, context[0], context[12] );
          res = refalrts::splice_evar( res, context[16], context[25] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoTokenChain:1*11/4 s.Mode/5 s.Kind/6 t.ErrorList/7 (/11 e.Collected/36 )/12 (/15 e.Tokens/38 )/16 (/17 # TkRedefinition/25 t.Pos/26 )/18 >/1
        context[36] = context[32];
        context[37] = context[33];
        context[38] = context[34];
        context[39] = context[35];
        // closed e.Collected as range 36
        // closed e.Tokens as range 38
        //DEBUG: t.ErrorList: 7
        //DEBUG: t.Pos: 26
        //DEBUG: s.Mode: 5
        //DEBUG: s.Kind: 6
        //DEBUG: e.Collected: 36
        //DEBUG: e.Tokens: 38

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 AsIs: s.Mode/5 AsIs: s.Kind/6 } Tile{ HalfReuse: </15 } & DoTokenChain-AddRedefinition/40 s.Kind/6/41 </42 & ClassicError*2/43 Tile{ AsIs: t.ErrorList/7 } Tile{ HalfReuse: s.Mode5 /25 AsIs: t.Pos/26 HalfReuse: 'V'/18 } Tile{ HalfReuse: 'a'/16 HalfReuse: 'r'/17 }"iable redefinition is available in the extended mode"/44 >/46 Tile{ AsIs: (/11 AsIs: e.Collected/36 AsIs: )/12 } t.Pos/26/47 >/49 Tile{ AsIs: e.Tokens/38 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_name(vm, context[40], functions[efunc_DoTokenChainm_AddRedefinition]);
        refalrts::copy_stvar(vm, context[41], context[6]);
        refalrts::alloc_open_call(vm, context[42]);
        refalrts::alloc_name(vm, context[43], functions[efunc_gen_ClassicError_D2]);
        refalrts::alloc_chars(vm, context[44], context[45], "iable redefinition is available in the extended mode", 52);
        refalrts::alloc_close_call(vm, context[46]);
        refalrts::copy_evar(vm, context[47], context[48], context[26], context[27]);
        refalrts::alloc_close_call(vm, context[49]);
        refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_svar( context[25], context[5] );
        refalrts::reinit_char(context[18], 'V');
        refalrts::reinit_char(context[16], 'a');
        refalrts::reinit_char(context[17], 'r');
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[49] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::push_stack( vm, context[46] );
        refalrts::push_stack( vm, context[42] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[38], context[39] );
        res = refalrts::splice_evar( res, context[47], context[49] );
        res = refalrts::splice_evar( res, context[11], context[12] );
        res = refalrts::splice_evar( res, context[44], context[46] );
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[25], context[18] );
        res = refalrts::splice_evar( res, context[7], context[8] );
        res = refalrts::splice_evar( res, context[40], context[43] );
        res = refalrts::splice_elem( res, context[15] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoTokenChain:1*11/4 s.new22/5 s.new23/6 t.new24/7 (/11 e.new26/32 )/12 (/15 e.new27/34 )/16 (/17 # TkScopeId/25 t.new25/26 )/18 >/1
      context[32] = context[28];
      context[33] = context[29];
      context[34] = context[30];
      context[35] = context[31];
      if( ! refalrts::ident_term( identifiers[ident_TkScopeId], context[25] ) )
        continue;
      // closed e.new26 as range 32
      // closed e.new27 as range 34
      do {
        // </0 & DoTokenChain:1*11/4 # Classic/5 s.Kind/6 t.ErrorList/7 (/11 e.Collected/36 )/12 (/15 e.Tokens/38 )/16 (/17 # TkScopeId/25 t.Pos/26 )/18 >/1
        context[36] = context[32];
        context[37] = context[33];
        context[38] = context[34];
        context[39] = context[35];
        if( ! refalrts::ident_term( identifiers[ident_Classic], context[5] ) )
          continue;
        // closed e.Collected as range 36
        // closed e.Tokens as range 38
        //DEBUG: t.ErrorList: 7
        //DEBUG: t.Pos: 26
        //DEBUG: s.Kind: 6
        //DEBUG: e.Collected: 36
        //DEBUG: e.Tokens: 38

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 AsIs: # Classic/5 AsIs: s.Kind/6 } </40 & EL-AddErrorAt/41 Tile{ AsIs: t.ErrorList/7 } Tile{ AsIs: t.Pos/26 HalfReuse: '$'/18 }"SCOPEID is not supported in the classic REFAL-5"/42 >/44 Tile{ AsIs: (/11 AsIs: e.Collected/36 HalfReuse: (/12 HalfReuse: # Symbol/15 } # Number/45 # Cookie1/46 Tile{ AsIs: )/16 AsIs: (/17 Reuse: # Symbol/25 } # Number/47 # Cookie2/48 )/49 )/50 Tile{ AsIs: e.Tokens/38 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[40]);
        refalrts::alloc_name(vm, context[41], functions[efunc_ELm_AddErrorAt]);
        refalrts::alloc_chars(vm, context[42], context[43], "SCOPEID is not supported in the classic REFAL-5", 47);
        refalrts::alloc_close_call(vm, context[44]);
        refalrts::alloc_ident(vm, context[45], identifiers[ident_Number]);
        refalrts::alloc_ident(vm, context[46], identifiers[ident_Cookie1]);
        refalrts::alloc_ident(vm, context[47], identifiers[ident_Number]);
        refalrts::alloc_ident(vm, context[48], identifiers[ident_Cookie2]);
        refalrts::alloc_close_bracket(vm, context[49]);
        refalrts::alloc_close_bracket(vm, context[50]);
        refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
        refalrts::reinit_char(context[18], '$');
        refalrts::reinit_open_bracket(context[12]);
        refalrts::reinit_ident(context[15], identifiers[ident_Symbol]);
        refalrts::update_ident(context[25], identifiers[ident_Symbol]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[11], context[50] );
        refalrts::link_brackets( context[17], context[49] );
        refalrts::link_brackets( context[12], context[16] );
        refalrts::push_stack( vm, context[44] );
        refalrts::push_stack( vm, context[40] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[38], context[39] );
        res = refalrts::splice_evar( res, context[47], context[50] );
        res = refalrts::splice_evar( res, context[16], context[25] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_evar( res, context[11], context[15] );
        res = refalrts::splice_evar( res, context[42], context[44] );
        res = refalrts::splice_evar( res, context[26], context[18] );
        res = refalrts::splice_evar( res, context[7], context[8] );
        res = refalrts::splice_evar( res, context[40], context[41] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoTokenChain:1*11/4 # Extended/5 s.Kind/6 t.ErrorList/7 (/11 e.Collected/36 )/12 (/15 e.Tokens/38 )/16 (/17 # TkScopeId/25 t.Pos/26 )/18 >/1
        context[36] = context[32];
        context[37] = context[33];
        context[38] = context[34];
        context[39] = context[35];
        if( ! refalrts::ident_term( identifiers[ident_Extended], context[5] ) )
          continue;
        // closed e.Collected as range 36
        // closed e.Tokens as range 38
        //DEBUG: t.ErrorList: 7
        //DEBUG: t.Pos: 26
        //DEBUG: s.Kind: 6
        //DEBUG: e.Collected: 36
        //DEBUG: e.Tokens: 38

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.Pos/26 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 AsIs: # Extended/5 AsIs: s.Kind/6 AsIs: t.ErrorList/7 AsIs: (/11 AsIs: e.Collected/36 HalfReuse: (/12 HalfReuse: # Symbol/15 } # Number/40 # Cookie1/41 Tile{ AsIs: )/16 AsIs: (/17 Reuse: # Symbol/25 } # Number/42 # Cookie2/43 )/44 Tile{ AsIs: )/18 } Tile{ AsIs: e.Tokens/38 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_ident(vm, context[40], identifiers[ident_Number]);
        refalrts::alloc_ident(vm, context[41], identifiers[ident_Cookie1]);
        refalrts::alloc_ident(vm, context[42], identifiers[ident_Number]);
        refalrts::alloc_ident(vm, context[43], identifiers[ident_Cookie2]);
        refalrts::alloc_close_bracket(vm, context[44]);
        refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
        refalrts::reinit_open_bracket(context[12]);
        refalrts::reinit_ident(context[15], identifiers[ident_Symbol]);
        refalrts::update_ident(context[25], identifiers[ident_Symbol]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[11], context[18] );
        refalrts::link_brackets( context[17], context[44] );
        refalrts::link_brackets( context[12], context[16] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[38], context[39] );
        res = refalrts::splice_elem( res, context[18] );
        res = refalrts::splice_evar( res, context[42], context[44] );
        res = refalrts::splice_evar( res, context[16], context[25] );
        res = refalrts::splice_evar( res, context[40], context[41] );
        refalrts::splice_to_freelist_open( vm, context[15], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoTokenChain:1*11/4 s.Mode/5 s.Kind/6 t.ErrorList/7 (/11 e.Collected/36 )/12 (/15 e.Tokens/38 )/16 (/17 # TkScopeId/25 t.Pos/26 )/18 >/1
      context[36] = context[32];
      context[37] = context[33];
      context[38] = context[34];
      context[39] = context[35];
      // closed e.Collected as range 36
      // closed e.Tokens as range 38
      //DEBUG: t.ErrorList: 7
      //DEBUG: t.Pos: 26
      //DEBUG: s.Mode: 5
      //DEBUG: s.Kind: 6
      //DEBUG: e.Collected: 36
      //DEBUG: e.Tokens: 38

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 AsIs: s.Mode/5 AsIs: s.Kind/6 } </40 & ClassicError*2/41 Tile{ AsIs: t.ErrorList/7 } s.Mode/5/42 Tile{ AsIs: t.Pos/26 HalfReuse: '$'/18 }"SCOPEID is not supported in the classic REFAL-5"/43 >/45 Tile{ AsIs: (/11 AsIs: e.Collected/36 HalfReuse: (/12 HalfReuse: # Symbol/15 } # Number/46 # Cookie1/47 Tile{ AsIs: )/16 AsIs: (/17 Reuse: # Symbol/25 } # Number/48 # Cookie2/49 )/50 )/51 Tile{ AsIs: e.Tokens/38 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[40]);
      refalrts::alloc_name(vm, context[41], functions[efunc_gen_ClassicError_D2]);
      refalrts::copy_stvar(vm, context[42], context[5]);
      refalrts::alloc_chars(vm, context[43], context[44], "SCOPEID is not supported in the classic REFAL-5", 47);
      refalrts::alloc_close_call(vm, context[45]);
      refalrts::alloc_ident(vm, context[46], identifiers[ident_Number]);
      refalrts::alloc_ident(vm, context[47], identifiers[ident_Cookie1]);
      refalrts::alloc_ident(vm, context[48], identifiers[ident_Number]);
      refalrts::alloc_ident(vm, context[49], identifiers[ident_Cookie2]);
      refalrts::alloc_close_bracket(vm, context[50]);
      refalrts::alloc_close_bracket(vm, context[51]);
      refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
      refalrts::reinit_char(context[18], '$');
      refalrts::reinit_open_bracket(context[12]);
      refalrts::reinit_ident(context[15], identifiers[ident_Symbol]);
      refalrts::update_ident(context[25], identifiers[ident_Symbol]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[11], context[51] );
      refalrts::link_brackets( context[17], context[50] );
      refalrts::link_brackets( context[12], context[16] );
      refalrts::push_stack( vm, context[45] );
      refalrts::push_stack( vm, context[40] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_evar( res, context[48], context[51] );
      res = refalrts::splice_evar( res, context[16], context[25] );
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_evar( res, context[11], context[15] );
      res = refalrts::splice_evar( res, context[43], context[45] );
      res = refalrts::splice_evar( res, context[26], context[18] );
      res = refalrts::splice_elem( res, context[42] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoTokenChain:1*11/4 s.Mode/5 s.Kind/6 t.ErrorList/7 (/11 e.Collected/28 )/12 (/15 e.Tokens/30 )/16 (/17 # TkError/25 t.Pos/26 e.Message/32 )/18 >/1
    context[28] = context[19];
    context[29] = context[20];
    context[30] = context[21];
    context[31] = context[22];
    context[32] = context[23];
    context[33] = context[24];
    if( ! refalrts::ident_term( identifiers[ident_TkError], context[25] ) )
      continue;
    // closed e.Collected as range 28
    // closed e.Tokens as range 30
    // closed e.Message as range 32
    //DEBUG: t.ErrorList: 7
    //DEBUG: t.Pos: 26
    //DEBUG: s.Mode: 5
    //DEBUG: s.Kind: 6
    //DEBUG: e.Collected: 28
    //DEBUG: e.Tokens: 30
    //DEBUG: e.Message: 32

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} (/15 {REMOVED TILE} )/16 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 AsIs: s.Mode/5 AsIs: s.Kind/6 } Tile{ HalfReuse: </17 HalfReuse: & EL-AddErrorAt/25 } Tile{ AsIs: t.ErrorList/7 } Tile{ AsIs: t.Pos/26 AsIs: e.Message/32 HalfReuse: >/18 } Tile{ AsIs: (/11 AsIs: e.Collected/28 AsIs: )/12 } Tile{ AsIs: e.Tokens/30 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
    refalrts::reinit_open_call(context[17]);
    refalrts::reinit_name(context[25], functions[efunc_ELm_AddErrorAt]);
    refalrts::reinit_close_call(context[18]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[26], context[18] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[17], context[25] );
    refalrts::splice_to_freelist_open( vm, context[6], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoTokenChain:1*11/4 s.Mode/5 s.Kind/6 t.ErrorList/7 (/11 e.Collected/9 )/12 (/15 e.Tokens/13 )/16 t.OtherToken/17 >/1
  // closed e.Collected as range 9
  // closed e.Tokens as range 13
  //DEBUG: t.ErrorList: 7
  //DEBUG: t.OtherToken: 17
  //DEBUG: s.Mode: 5
  //DEBUG: s.Kind: 6
  //DEBUG: e.Collected: 9
  //DEBUG: e.Tokens: 13

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DoTokenChain:1*11/4 s.Mode/5 s.Kind/6 {REMOVED TILE} (/15 {REMOVED TILE} )/16 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList/7 AsIs: (/11 AsIs: e.Collected/9 AsIs: )/12 } Tile{ AsIs: t.OtherToken/17 } Tile{ AsIs: e.Tokens/13 } Tile{ ]] }
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[7], context[12] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoTokenChain_B1D11("DoTokenChain:1*11", COOKIE1_, COOKIE2_, func_gen_DoTokenChain_B1D11);


static refalrts::FnResult func_gen_OneOf_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & OneOf@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & OneOf@1/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & OneOf@1/4 s.Type/5 e.Elems-B/8 s.Type/12 e.Elems-E/10 >/1
    context[6] = context[2];
    context[7] = context[3];
    context[8] = 0;
    context[9] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[10] = context[6];
      context[11] = context[7];
      if( ! refalrts::repeated_stvar_left( vm, context[12], context[5], context[10], context[11] ) )
        continue;
      // closed e.Elems-E as range 10
      //DEBUG: s.Type: 5
      //DEBUG: e.Elems-B: 8
      //DEBUG: e.Elems-E: 10

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & OneOf@1/4 s.Type/5 e.Elems-B/8 s.Type/12 e.Elems-E/10 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
      refalrts::reinit_ident(context[1], identifiers[ident_True]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[8], context[9], context[6], context[7] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & OneOf@1/4 s.Type/5 e.Elems/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    // closed e.Elems as range 6
    //DEBUG: s.Type: 5
    //DEBUG: e.Elems: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & OneOf@1/4 s.Type/5 e.Elems/6 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_False]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OneOf@1/4 s.Type/5 e.dyn0/2 >/1
  // closed e.dyn0 as range 2
  //DEBUG: s.Type: 5
  //DEBUG: e.dyn0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & OneOf@0/4 AsIs: s.Type/5 AsIs: e.dyn0/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_OneOf_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OneOf_Z1("OneOf@1", COOKIE1_, COOKIE2_, func_gen_OneOf_Z1);


static refalrts::FnResult func_gen_ClassicError_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & ClassicError@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & ClassicError@1/4 t.new1/5 s.new2/7 t.new3/8 e.new4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[9] = refalrts::tvar_left( context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  // closed e.new4 as range 2
  do {
    // </0 & ClassicError@1/4 t.ErrorList$a/5 # Classic/7 t.Pos0/8 e.Call/10 >/1
    context[10] = context[2];
    context[11] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Classic], context[7] ) )
      continue;
    // closed e.Call as range 10
    //DEBUG: t.ErrorList$a: 5
    //DEBUG: t.Pos0: 8
    //DEBUG: e.Call: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList$a/5 } Tile{ AsIs: t.Pos0/8 AsIs: e.Call/10 HalfReuse: ' '/1 } 'i'/12 Tile{ HalfReuse: 's'/7 }" an extension"/13 >/15 Tile{ ]] }
    refalrts::alloc_char(vm, context[12], 'i');
    refalrts::alloc_chars(vm, context[13], context[14], " an extension", 13);
    refalrts::alloc_close_call(vm, context[15]);
    refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
    refalrts::reinit_char(context[1], ' ');
    refalrts::reinit_char(context[7], 's');
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[13], context[15] );
    res = refalrts::splice_elem( res, context[7] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[8], context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & ClassicError@1/4 t.ErrorList$a/5 # Extended/7 t.Pos0/8 e.Call/10 >/1
    context[10] = context[2];
    context[11] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Extended], context[7] ) )
      continue;
    // closed e.Call as range 10
    //DEBUG: t.ErrorList$a: 5
    //DEBUG: t.Pos0: 8
    //DEBUG: e.Call: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & ClassicError@1/4 {REMOVED TILE} # Extended/7 t.Pos0/8 e.Call/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList$a/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ClassicError@1/4 t.ErrorList$a/5 s.dyn0/7 t.Pos0/8 e.Call/2 >/1
  // closed e.Call as range 2
  //DEBUG: t.ErrorList$a: 5
  //DEBUG: t.Pos0: 8
  //DEBUG: s.dyn0: 7
  //DEBUG: e.Call: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ClassicError@0/4 AsIs: t.ErrorList$a/5 AsIs: s.dyn0/7 AsIs: t.Pos0/8 AsIs: e.Call/2 HalfReuse: ' '/1 }"is an extension"/10 >/12 Tile{ ]] }
  refalrts::alloc_chars(vm, context[10], context[11], "is an extension", 15);
  refalrts::alloc_close_call(vm, context[12]);
  refalrts::update_name(context[4], functions[efunc_gen_ClassicError_Z0]);
  refalrts::reinit_char(context[1], ' ');
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[10], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ClassicError_Z1("ClassicError@1", COOKIE1_, COOKIE2_, func_gen_ClassicError_Z1);


static refalrts::FnResult func_gen_ClassicError_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & ClassicError@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & ClassicError@2/4 t.new1/5 s.new2/7 t.new3/8 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[9] = refalrts::tvar_left( context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & ClassicError@2/4 t.ErrorList0/5 # Classic/7 t.EntryPos/8 >/1
    if( ! refalrts::ident_term( identifiers[ident_Classic], context[7] ) )
      continue;
    //DEBUG: t.ErrorList0: 5
    //DEBUG: t.EntryPos: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0/5 } Tile{ AsIs: t.EntryPos/8 } 'E'/10 Tile{ HalfReuse: 'n'/7 }"try list is an extension"/11 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_char(vm, context[10], 'E');
    refalrts::alloc_chars(vm, context[11], context[12], "try list is an extension", 24);
    refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
    refalrts::reinit_char(context[7], 'n');
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[7] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & ClassicError@2/4 t.ErrorList0/5 # Extended/7 t.EntryPos/8 >/1
    if( ! refalrts::ident_term( identifiers[ident_Extended], context[7] ) )
      continue;
    //DEBUG: t.ErrorList0: 5
    //DEBUG: t.EntryPos: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & ClassicError@2/4 {REMOVED TILE} # Extended/7 t.EntryPos/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList0/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ClassicError@2/4 t.ErrorList0/5 s.dyn0/7 t.EntryPos/8 >/1
  //DEBUG: t.ErrorList0: 5
  //DEBUG: t.EntryPos: 8
  //DEBUG: s.dyn0: 7

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ClassicError@0/4 AsIs: t.ErrorList0/5 AsIs: s.dyn0/7 AsIs: t.EntryPos/8 HalfReuse: 'E'/1 }"ntry list is an extension"/10 >/12 Tile{ ]] }
  refalrts::alloc_chars(vm, context[10], context[11], "ntry list is an extension", 25);
  refalrts::alloc_close_call(vm, context[12]);
  refalrts::update_name(context[4], functions[efunc_gen_ClassicError_Z0]);
  refalrts::reinit_char(context[1], 'E');
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[10], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ClassicError_Z2("ClassicError@2", COOKIE1_, COOKIE2_, func_gen_ClassicError_Z2);


static refalrts::FnResult func_gen_SentenceTail_S1A3Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 41 elems
  refalrts::Iter context[41];
  refalrts::zeros( context, 41 );
  // </0 & SentenceTail$1=3@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & SentenceTail$1=3@1/4 t.new1/5 t.new2/7 (/11 e.new3/9 )/12 t.new4/13 (/17 e.new5/15 )/18 t.new6/19 (/23 e.new7/21 )/24 (/27 e.new8/25 )/28 e.new9/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new3 as range 9
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.new5 as range 15
  context[20] = refalrts::tvar_left( context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.new7 as range 21
  // closed e.new8 as range 25
  // closed e.new9 as range 2
  do {
    // </0 & SentenceTail$1=3@1/4 t.FirstPattern0/5 t.FirstResult0/7 (/11 e.FirstBlocks$a0/29 )/12 t.NextPattern0/13 (/17 e.ConditionsAndAssignments0/31 )/18 t.LastResult0/19 (/23 e.LastBlocks0/33 )/24 (/27 e.Tokens$a0/35 )/28 t.ErrorList$c/39 >/1
    context[29] = context[9];
    context[30] = context[10];
    context[31] = context[15];
    context[32] = context[16];
    context[33] = context[21];
    context[34] = context[22];
    context[35] = context[25];
    context[36] = context[26];
    context[37] = context[2];
    context[38] = context[3];
    // closed e.FirstBlocks$a0 as range 29
    // closed e.ConditionsAndAssignments0 as range 31
    // closed e.LastBlocks0 as range 33
    // closed e.Tokens$a0 as range 35
    context[40] = refalrts::tvar_left( context[39], context[37], context[38] );
    if( ! context[40] )
      continue;
    if( ! refalrts::empty_seq( context[37], context[38] ) )
      continue;
    //DEBUG: t.FirstPattern0: 5
    //DEBUG: t.FirstResult0: 7
    //DEBUG: t.NextPattern0: 13
    //DEBUG: t.LastResult0: 19
    //DEBUG: e.FirstBlocks$a0: 29
    //DEBUG: e.ConditionsAndAssignments0: 31
    //DEBUG: e.LastBlocks0: 33
    //DEBUG: e.Tokens$a0: 35
    //DEBUG: t.ErrorList$c: 39

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/18 {REMOVED TILE} {REMOVED TILE} )/28 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList$c/39 HalfReuse: (/1 } Tile{ AsIs: t.FirstPattern0/5 } Tile{ HalfReuse: (/0 HalfReuse: # Assign/4 } Tile{ AsIs: t.FirstResult0/7 AsIs: (/11 AsIs: e.FirstBlocks$a0/29 AsIs: )/12 AsIs: t.NextPattern0/13 HalfReuse: )/17 } Tile{ AsIs: e.ConditionsAndAssignments0/31 } Tile{ AsIs: t.LastResult0/19 AsIs: (/23 AsIs: e.LastBlocks0/33 AsIs: )/24 HalfReuse: )/27 } Tile{ AsIs: e.Tokens$a0/35 } Tile{ ]] }
    refalrts::reinit_open_bracket(context[1]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_Assign]);
    refalrts::reinit_close_bracket(context[17]);
    refalrts::reinit_close_bracket(context[27]);
    refalrts::link_brackets( context[1], context[27] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[0], context[17] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[19], context[27] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[7], context[17] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[39], context[1] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & SentenceTail$1=3@1/4 t.FirstPattern0/5 t.FirstResult0/7 (/11 e.FirstBlocks$a0/9 )/12 t.NextPattern0/13 (/17 e.ConditionsAndAssignments0/15 )/18 t.LastResult0/19 (/23 e.LastBlocks0/21 )/24 (/27 e.Tokens$a0/25 )/28 e.dyn/2 >/1
  // closed e.FirstBlocks$a0 as range 9
  // closed e.ConditionsAndAssignments0 as range 15
  // closed e.LastBlocks0 as range 21
  // closed e.Tokens$a0 as range 25
  // closed e.dyn as range 2
  //DEBUG: t.FirstPattern0: 5
  //DEBUG: t.FirstResult0: 7
  //DEBUG: t.NextPattern0: 13
  //DEBUG: t.LastResult0: 19
  //DEBUG: e.FirstBlocks$a0: 9
  //DEBUG: e.ConditionsAndAssignments0: 15
  //DEBUG: e.LastBlocks0: 21
  //DEBUG: e.Tokens$a0: 25
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & SentenceTail$1=3@0/4 AsIs: t.FirstPattern0/5 } # Assign/29 Tile{ AsIs: t.FirstResult0/7 AsIs: (/11 AsIs: e.FirstBlocks$a0/9 AsIs: )/12 AsIs: t.NextPattern0/13 AsIs: (/17 AsIs: e.ConditionsAndAssignments0/15 AsIs: )/18 AsIs: t.LastResult0/19 AsIs: (/23 AsIs: e.LastBlocks0/21 AsIs: )/24 AsIs: (/27 AsIs: e.Tokens$a0/25 AsIs: )/28 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_ident(vm, context[29], identifiers[ident_Assign]);
  refalrts::update_name(context[4], functions[efunc_gen_SentenceTail_S1A3Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[7];
  res = refalrts::splice_elem( res, context[29] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_SentenceTail_S1A3Z1("SentenceTail$1=3@1", COOKIE1_, COOKIE2_, func_gen_SentenceTail_S1A3Z1);


static refalrts::FnResult func_gen_CheckSentenceEnd_S1A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 40 elems
  refalrts::Iter context[40];
  refalrts::zeros( context, 40 );
  // </0 & CheckSentenceEnd$1=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckSentenceEnd$1=1@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & CheckSentenceEnd$1=1@1/4 (/7 e.new5/13 )/8 (/11 e.new6/15 )/12 t.new4/19 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.new5 as range 13
    // closed e.new6 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    if( ! refalrts::empty_seq( context[17], context[18] ) )
      continue;
    do {
      // </0 & CheckSentenceEnd$1=1@1/4 (/7 e.1/21 )/8 (/11 (/27 t.0/29 e.3/25 )/28 e.0/23 )/12 t.ErrorList$a/19 >/1
      context[21] = context[13];
      context[22] = context[14];
      context[23] = context[15];
      context[24] = context[16];
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[23], context[24] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      // closed e.1 as range 21
      // closed e.0 as range 23
      context[30] = refalrts::tvar_left( context[29], context[25], context[26] );
      if( ! context[30] )
        continue;
      // closed e.3 as range 25
      //DEBUG: t.ErrorList$a: 19
      //DEBUG: e.1: 21
      //DEBUG: e.0: 23
      //DEBUG: t.0: 29
      //DEBUG: e.3: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentenceEnd$1=2/4 AsIs: (/7 AsIs: e.1/21 AsIs: )/8 HalfReuse: </11 HalfReuse: & DoCheckExceedBlocks/27 } # Classic/31 </32 & EL-AddErrorAt/33 Tile{ AsIs: t.ErrorList$a/19 } Tile{ AsIs: t.0/29 }"Exceed block in this position"/34 >/36 (/37 (/38 Tile{ AsIs: e.3/25 } )/39 Tile{ AsIs: )/28 AsIs: e.0/23 HalfReuse: >/12 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[31], identifiers[ident_Classic]);
      refalrts::alloc_open_call(vm, context[32]);
      refalrts::alloc_name(vm, context[33], functions[efunc_ELm_AddErrorAt]);
      refalrts::alloc_chars(vm, context[34], context[35], "Exceed block in this position", 29);
      refalrts::alloc_close_call(vm, context[36]);
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::alloc_open_bracket(vm, context[38]);
      refalrts::alloc_close_bracket(vm, context[39]);
      refalrts::update_name(context[4], functions[efunc_gen_CheckSentenceEnd_S1A2]);
      refalrts::reinit_open_call(context[11]);
      refalrts::reinit_name(context[27], functions[efunc_DoCheckExceedBlocks]);
      refalrts::reinit_close_call(context[12]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[12] );
      refalrts::push_stack( vm, context[11] );
      refalrts::link_brackets( context[37], context[28] );
      refalrts::link_brackets( context[38], context[39] );
      refalrts::push_stack( vm, context[36] );
      refalrts::push_stack( vm, context[32] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[28], context[12] );
      res = refalrts::splice_elem( res, context[39] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[34], context[38] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[31], context[33] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & CheckSentenceEnd$1=1@1/4 (/7 e.1/21 )/8 (/11 )/12 t.ErrorList$a/19 >/1
      context[21] = context[13];
      context[22] = context[14];
      if( ! refalrts::empty_seq( context[15], context[16] ) )
        continue;
      // closed e.1 as range 21
      //DEBUG: t.ErrorList$a: 19
      //DEBUG: e.1: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & CheckSentenceEnd$1=1@1/4 {REMOVED TILE} (/11 )/12 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList$a/19 } Tile{ AsIs: (/7 AsIs: e.1/21 AsIs: )/8 } Tile{ ]] }
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[7], context[8] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & CheckSentenceEnd$1=1@1/4 (/7 e.1/21 )/8 (/11 e./23 )/12 t.ErrorList$a/19 >/1
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[15];
    context[24] = context[16];
    // closed e.1 as range 21
    // closed e. as range 23
    //DEBUG: t.ErrorList$a: 19
    //DEBUG: e.1: 21
    //DEBUG: e.: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentenceEnd$1=2/4 AsIs: (/7 AsIs: e.1/21 AsIs: )/8 HalfReuse: </11 } & DoCheckExceedBlocks@0/25 Tile{ HalfReuse: # Classic/12 AsIs: t.ErrorList$a/19 } (/26 )/27 Tile{ AsIs: e./23 } >/28 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[25], functions[efunc_gen_DoCheckExceedBlocks_Z0]);
    refalrts::alloc_open_bracket(vm, context[26]);
    refalrts::alloc_close_bracket(vm, context[27]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckSentenceEnd_S1A2]);
    refalrts::reinit_open_call(context[11]);
    refalrts::reinit_ident(context[12], identifiers[ident_Classic]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[11] );
    refalrts::link_brackets( context[26], context[27] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[28] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_evar( res, context[12], context[20] );
    res = refalrts::splice_elem( res, context[25] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSentenceEnd$1=1@1/4 (/7 e.1/5 )/8 (/11 e./9 )/12 e.dyn/2 >/1
  // closed e.1 as range 5
  // closed e. as range 9
  // closed e.dyn as range 2
  //DEBUG: e.1: 5
  //DEBUG: e.: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentenceEnd$1=1@0/4 AsIs: (/7 } Tile{ AsIs: e.1/5 } )/13 Tile{ HalfReuse: # Classic/8 AsIs: (/11 AsIs: e./9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentenceEnd_S1A1Z0]);
  refalrts::reinit_ident(context[8], identifiers[ident_Classic]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSentenceEnd_S1A1Z1("CheckSentenceEnd$1=1@1", COOKIE1_, COOKIE2_, func_gen_CheckSentenceEnd_S1A1Z1);


static refalrts::FnResult func_gen_DoCheckExceedBlocks_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & DoCheckExceedBlocks@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoCheckExceedBlocks@3/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 e.new4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 2
  do {
    // </0 & DoCheckExceedBlocks@3/4 t.ErrorList0/5 (/9 e.ScannedBlocks0/15 )/10 (/13 e.Body0/17 )/14 (/23 t.Pos/25 e.Body/21 )/24 e.RestBlocks/19 >/1
    context[15] = context[7];
    context[16] = context[8];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    context[21] = 0;
    context[22] = 0;
    context[23] = refalrts::brackets_left( context[21], context[22], context[19], context[20] );
    if( ! context[23] )
      continue;
    refalrts::bracket_pointers(context[23], context[24]);
    // closed e.ScannedBlocks0 as range 15
    // closed e.Body0 as range 17
    // closed e.RestBlocks as range 19
    context[26] = refalrts::tvar_left( context[25], context[21], context[22] );
    if( ! context[26] )
      continue;
    // closed e.Body as range 21
    //DEBUG: t.ErrorList0: 5
    //DEBUG: e.ScannedBlocks0: 15
    //DEBUG: e.Body0: 17
    //DEBUG: e.RestBlocks: 19
    //DEBUG: t.Pos: 25
    //DEBUG: e.Body: 21

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.Pos/25 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoCheckExceedBlocks@3/4 AsIs: t.ErrorList0/5 AsIs: (/9 AsIs: e.ScannedBlocks0/15 HalfReuse: (/10 } Tile{ AsIs: e.Body0/17 } Tile{ HalfReuse: )/13 } Tile{ AsIs: )/14 AsIs: (/23 } Tile{ AsIs: e.Body/21 } Tile{ AsIs: )/24 AsIs: e.RestBlocks/19 AsIs: >/1 ]] }
    refalrts::reinit_open_bracket(context[10]);
    refalrts::reinit_close_bracket(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[9], context[14] );
    refalrts::link_brackets( context[10], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[24];
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[14], context[23] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    refalrts::splice_to_freelist_open( vm, context[10], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoCheckExceedBlocks@3/4 t.ErrorList0/5 (/9 e.ScannedBlocks0/15 )/10 (/13 e.Body0/17 )/14 >/1
    context[15] = context[7];
    context[16] = context[8];
    context[17] = context[11];
    context[18] = context[12];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.ScannedBlocks0 as range 15
    // closed e.Body0 as range 17
    //DEBUG: t.ErrorList0: 5
    //DEBUG: e.ScannedBlocks0: 15
    //DEBUG: e.Body0: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoCheckExceedBlocks@3/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList0/5 } Tile{ AsIs: e.ScannedBlocks0/15 } Tile{ AsIs: (/13 AsIs: e.Body0/17 AsIs: )/14 } Tile{ ]] }
    refalrts::link_brackets( context[13], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoCheckExceedBlocks@3/4 t.ErrorList0/5 (/9 e.ScannedBlocks0/7 )/10 (/13 e.Body0/11 )/14 e.dyn1/2 >/1
  // closed e.ScannedBlocks0 as range 7
  // closed e.Body0 as range 11
  // closed e.dyn1 as range 2
  //DEBUG: t.ErrorList0: 5
  //DEBUG: e.ScannedBlocks0: 7
  //DEBUG: e.Body0: 11
  //DEBUG: e.dyn1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </13 } Tile{ HalfReuse: & DoCheckExceedBlocks@0/0 HalfReuse: # Extended/4 AsIs: t.ErrorList0/5 AsIs: (/9 AsIs: e.ScannedBlocks0/7 HalfReuse: (/10 } Tile{ AsIs: e.Body0/11 } )/15 Tile{ AsIs: )/14 AsIs: e.dyn1/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::reinit_open_call(context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoCheckExceedBlocks_Z0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Extended]);
  refalrts::reinit_open_bracket(context[10]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[9], context[14] );
  refalrts::link_brackets( context[10], context[15] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[14];
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[0], context[10] );
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoCheckExceedBlocks_Z3("DoCheckExceedBlocks@3", COOKIE1_, COOKIE2_, func_gen_DoCheckExceedBlocks_Z3);


static refalrts::FnResult func_gen_Resultm_Blocks_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 62 elems
  refalrts::Iter context[62];
  refalrts::zeros( context, 62 );
  // </0 & Result-Blocks@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Result-Blocks@1/4 s.new1/5 (/8 e.new2/6 )/9 t.new3/10 (/14 e.new4/12 )/15 t.new5/16 t.new6/18 e.new7/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new2 as range 6
  context[11] = refalrts::tvar_left( context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  // closed e.new4 as range 12
  context[17] = refalrts::tvar_left( context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  context[19] = refalrts::tvar_left( context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  // closed e.new7 as range 2
  do {
    // </0 & Result-Blocks@1/4 s.new8/5 (/8 e.new16/20 )/9 t.new9/10 (/14 e.new17/22 )/15 t.new10/16 t.new11/18 (/28 s.new12/30 e.new13/26 t.new14/31 )/29 e.new15/24 >/1
    context[20] = context[6];
    context[21] = context[7];
    context[22] = context[12];
    context[23] = context[13];
    context[24] = context[2];
    context[25] = context[3];
    context[26] = 0;
    context[27] = 0;
    context[28] = refalrts::brackets_left( context[26], context[27], context[24], context[25] );
    if( ! context[28] )
      continue;
    refalrts::bracket_pointers(context[28], context[29]);
    // closed e.new16 as range 20
    // closed e.new17 as range 22
    // closed e.new15 as range 24
    if( ! refalrts::svar_left( context[30], context[26], context[27] ) )
      continue;
    context[32] = refalrts::tvar_right( context[31], context[26], context[27] );
    if( ! context[32] )
      continue;
    // closed e.new13 as range 26
    do {
      // </0 & Result-Blocks@1/4 s.Mode0/5 (/8 e.Blocks0/33 )/9 t.ColonPos0/10 (/14 e.Body/35 )/15 t.ErrorList$a/16 t.Result0/18 (/28 # TkRefal5Mode/30 t.ModePos/41 s.NewMode/31 )/29 e.Tokens/39 >/1
      context[33] = context[20];
      context[34] = context[21];
      context[35] = context[22];
      context[36] = context[23];
      context[37] = context[26];
      context[38] = context[27];
      context[39] = context[24];
      context[40] = context[25];
      if( ! refalrts::svar_term( context[31], context[31] ) )
        continue;
      if( ! refalrts::ident_term( identifiers[ident_TkRefal5Mode], context[30] ) )
        continue;
      // closed e.Blocks0 as range 33
      // closed e.Body as range 35
      // closed e.Tokens as range 39
      context[42] = refalrts::tvar_left( context[41], context[37], context[38] );
      if( ! context[42] )
        continue;
      if( ! refalrts::empty_seq( context[37], context[38] ) )
        continue;
      //DEBUG: t.ColonPos0: 10
      //DEBUG: t.ErrorList$a: 16
      //DEBUG: t.Result0: 18
      //DEBUG: s.NewMode: 31
      //DEBUG: s.Mode0: 5
      //DEBUG: e.Blocks0: 33
      //DEBUG: e.Body: 35
      //DEBUG: e.Tokens: 39
      //DEBUG: t.ModePos: 41

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Mode0/5 {REMOVED TILE} (/28 # TkRefal5Mode/30 t.ModePos/41 {REMOVED TILE} )/29 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Result-Blocks@1/4 } Tile{ AsIs: s.NewMode/31 } Tile{ AsIs: (/8 AsIs: e.Blocks0/33 AsIs: )/9 AsIs: t.ColonPos0/10 AsIs: (/14 AsIs: e.Body/35 AsIs: )/15 AsIs: t.ErrorList$a/16 AsIs: t.Result0/18 } Tile{ AsIs: e.Tokens/39 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[14], context[15] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_evar( res, context[8], context[19] );
      res = refalrts::splice_elem( res, context[31] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Result-Blocks@1/4 s.new18/5 (/8 e.new25/33 )/9 t.new19/10 (/14 e.new26/35 )/15 t.new20/16 t.new21/18 (/28 s.new23/30 t.new24/31 )/29 e.new22/37 >/1
    context[33] = context[20];
    context[34] = context[21];
    context[35] = context[22];
    context[36] = context[23];
    context[37] = context[24];
    context[38] = context[25];
    if( ! refalrts::empty_seq( context[26], context[27] ) )
      continue;
    // closed e.new25 as range 33
    // closed e.new26 as range 35
    // closed e.new22 as range 37
    do {
      // </0 & Result-Blocks@1/4 s.new27/5 (/8 e.new36/39 )/9 t.new28/10 (/14 e.new37/41 )/15 t.new29/16 t.new30/18 (/28 # TkColon/30 t.new35/31 )/29 (/47 s.new31/49 e.new32/45 t.new33/50 )/48 e.new34/43 >/1
      context[39] = context[33];
      context[40] = context[34];
      context[41] = context[35];
      context[42] = context[36];
      context[43] = context[37];
      context[44] = context[38];
      if( ! refalrts::ident_term( identifiers[ident_TkColon], context[30] ) )
        continue;
      context[45] = 0;
      context[46] = 0;
      context[47] = refalrts::brackets_left( context[45], context[46], context[43], context[44] );
      if( ! context[47] )
        continue;
      refalrts::bracket_pointers(context[47], context[48]);
      // closed e.new36 as range 39
      // closed e.new37 as range 41
      // closed e.new34 as range 43
      if( ! refalrts::svar_left( context[49], context[45], context[46] ) )
        continue;
      context[51] = refalrts::tvar_right( context[50], context[45], context[46] );
      if( ! context[51] )
        continue;
      // closed e.new32 as range 45
      do {
        // </0 & Result-Blocks@1/4 s.Mode0/5 (/8 e.Blocks0/52 )/9 t.ColonPos0/10 (/14 e.Body/54 )/15 t.ErrorList$a/16 t.Result0/18 (/28 # TkColon/30 t.ColonPos/31 )/29 (/47 # TkRefal5Mode/49 t.ModePos/60 s.NewMode/50 )/48 e.Tokens/58 >/1
        context[52] = context[39];
        context[53] = context[40];
        context[54] = context[41];
        context[55] = context[42];
        context[56] = context[45];
        context[57] = context[46];
        context[58] = context[43];
        context[59] = context[44];
        if( ! refalrts::svar_term( context[50], context[50] ) )
          continue;
        if( ! refalrts::ident_term( identifiers[ident_TkRefal5Mode], context[49] ) )
          continue;
        // closed e.Blocks0 as range 52
        // closed e.Body as range 54
        // closed e.Tokens as range 58
        context[61] = refalrts::tvar_left( context[60], context[56], context[57] );
        if( ! context[61] )
          continue;
        if( ! refalrts::empty_seq( context[56], context[57] ) )
          continue;
        //DEBUG: t.ColonPos0: 10
        //DEBUG: t.ErrorList$a: 16
        //DEBUG: t.Result0: 18
        //DEBUG: t.ColonPos: 31
        //DEBUG: s.NewMode: 50
        //DEBUG: s.Mode0: 5
        //DEBUG: e.Blocks0: 52
        //DEBUG: e.Body: 54
        //DEBUG: e.Tokens: 58
        //DEBUG: t.ModePos: 60

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Mode0/5 {REMOVED TILE} (/47 # TkRefal5Mode/49 t.ModePos/60 {REMOVED TILE} )/48 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Result-Blocks@1/4 } Tile{ AsIs: s.NewMode/50 } Tile{ AsIs: (/8 AsIs: e.Blocks0/52 AsIs: )/9 AsIs: t.ColonPos0/10 AsIs: (/14 AsIs: e.Body/54 AsIs: )/15 AsIs: t.ErrorList$a/16 AsIs: t.Result0/18 AsIs: (/28 AsIs: # TkColon/30 AsIs: t.ColonPos/31 AsIs: )/29 } Tile{ AsIs: e.Tokens/58 } Tile{ AsIs: >/1 ]] }
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[28], context[29] );
        refalrts::link_brackets( context[14], context[15] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[58], context[59] );
        res = refalrts::splice_evar( res, context[8], context[29] );
        res = refalrts::splice_elem( res, context[50] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Result-Blocks@1/4 s.Mode0/5 (/8 e.Blocks0/52 )/9 t.ColonPos0/10 (/14 e.Body/54 )/15 t.ErrorList$a/16 t.Result0/18 (/28 # TkColon/30 t.ColonPos/31 )/29 (/47 # TkOpenBlock/49 t.BlockPos/50 )/48 e.Tokens/56 >/1
      context[52] = context[39];
      context[53] = context[40];
      context[54] = context[41];
      context[55] = context[42];
      context[56] = context[43];
      context[57] = context[44];
      if( ! refalrts::ident_term( identifiers[ident_TkOpenBlock], context[49] ) )
        continue;
      if( ! refalrts::empty_seq( context[45], context[46] ) )
        continue;
      // closed e.Blocks0 as range 52
      // closed e.Body as range 54
      // closed e.Tokens as range 56
      //DEBUG: t.ColonPos0: 10
      //DEBUG: t.ErrorList$a: 16
      //DEBUG: t.Result0: 18
      //DEBUG: t.ColonPos: 31
      //DEBUG: t.BlockPos: 50
      //DEBUG: s.Mode0: 5
      //DEBUG: e.Blocks0: 52
      //DEBUG: e.Body: 54
      //DEBUG: e.Tokens: 56

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Result-Blocks$3=1/4 AsIs: s.Mode0/5 AsIs: (/8 AsIs: e.Blocks0/52 HalfReuse: (/9 AsIs: t.ColonPos0/10 } Tile{ AsIs: e.Body/54 } Tile{ AsIs: )/15 } Tile{ HalfReuse: )/14 } Tile{ AsIs: t.ColonPos/31 } Tile{ AsIs: t.Result0/18 HalfReuse: </28 HalfReuse: & Block/30 } Tile{ AsIs: t.ErrorList$a/16 } Tile{ HalfReuse: s.Mode05 /29 AsIs: (/47 AsIs: # TkOpenBlock/49 AsIs: t.BlockPos/50 AsIs: )/48 AsIs: e.Tokens/56 AsIs: >/1 } >/58 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[58]);
      refalrts::update_name(context[4], functions[efunc_gen_Resultm_Blocks_S3A1]);
      refalrts::reinit_open_bracket(context[9]);
      refalrts::reinit_close_bracket(context[14]);
      refalrts::reinit_open_call(context[28]);
      refalrts::reinit_name(context[30], functions[efunc_Block]);
      refalrts::reinit_svar( context[29], context[5] );
      refalrts::push_stack( vm, context[58] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[28] );
      refalrts::link_brackets( context[47], context[48] );
      refalrts::link_brackets( context[8], context[14] );
      refalrts::link_brackets( context[9], context[15] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[58] );
      res = refalrts::splice_evar( res, context[29], context[1] );
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_evar( res, context[18], context[30] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_elem( res, context[15] );
      res = refalrts::splice_evar( res, context[54], context[55] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Result-Blocks@1/4 s.Mode0/5 (/8 e.Blocks0/39 )/9 t.ColonPos0/10 (/14 e.Body/41 )/15 t.ErrorList$a/16 t.Result0/18 (/28 # TkOpenBlock/30 t.BlockPos/31 )/29 e.Tokens/43 >/1
    context[39] = context[33];
    context[40] = context[34];
    context[41] = context[35];
    context[42] = context[36];
    context[43] = context[37];
    context[44] = context[38];
    if( ! refalrts::ident_term( identifiers[ident_TkOpenBlock], context[30] ) )
      continue;
    // closed e.Blocks0 as range 39
    // closed e.Body as range 41
    // closed e.Tokens as range 43
    //DEBUG: t.ColonPos0: 10
    //DEBUG: t.ErrorList$a: 16
    //DEBUG: t.Result0: 18
    //DEBUG: t.BlockPos: 31
    //DEBUG: s.Mode0: 5
    //DEBUG: e.Blocks0: 39
    //DEBUG: e.Body: 41
    //DEBUG: e.Tokens: 43

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Result-Blocks/4 AsIs: s.Mode0/5 AsIs: (/8 AsIs: e.Blocks0/39 HalfReuse: (/9 AsIs: t.ColonPos0/10 } Tile{ AsIs: e.Body/41 } )/45 )/46 </47 Tile{ HalfReuse: & EL-AddErrorAt/15 AsIs: t.ErrorList$a/16 } t.BlockPos/31/48"Missed \':\'"/50 >/52 Tile{ AsIs: t.Result0/18 } Tile{ AsIs: (/14 } # TkColon/53 t.BlockPos/31/54 )/56 Tile{ AsIs: (/28 AsIs: # TkOpenBlock/30 AsIs: t.BlockPos/31 AsIs: )/29 AsIs: e.Tokens/43 AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[45]);
    refalrts::alloc_close_bracket(vm, context[46]);
    refalrts::alloc_open_call(vm, context[47]);
    refalrts::copy_evar(vm, context[48], context[49], context[31], context[32]);
    refalrts::alloc_chars(vm, context[50], context[51], "Missed \':\'", 10);
    refalrts::alloc_close_call(vm, context[52]);
    refalrts::alloc_ident(vm, context[53], identifiers[ident_TkColon]);
    refalrts::copy_evar(vm, context[54], context[55], context[31], context[32]);
    refalrts::alloc_close_bracket(vm, context[56]);
    refalrts::update_name(context[4], functions[efunc_Resultm_Blocks]);
    refalrts::reinit_open_bracket(context[9]);
    refalrts::reinit_name(context[15], functions[efunc_ELm_AddErrorAt]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[28], context[29] );
    refalrts::link_brackets( context[14], context[56] );
    refalrts::push_stack( vm, context[52] );
    refalrts::push_stack( vm, context[47] );
    refalrts::link_brackets( context[8], context[46] );
    refalrts::link_brackets( context[9], context[45] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[28];
    res = refalrts::splice_evar( res, context[53], context[56] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[48], context[52] );
    res = refalrts::splice_evar( res, context[15], context[17] );
    res = refalrts::splice_evar( res, context[45], context[47] );
    res = refalrts::splice_evar( res, context[41], context[42] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Result-Blocks@1/4 s.Mode0/5 (/8 e.Blocks0/20 )/9 t.ColonPos0/10 (/14 e.Body/22 )/15 t.ErrorList$a/16 t.Result0/18 e.Tokens/24 >/1
    context[20] = context[6];
    context[21] = context[7];
    context[22] = context[12];
    context[23] = context[13];
    context[24] = context[2];
    context[25] = context[3];
    // closed e.Blocks0 as range 20
    // closed e.Body as range 22
    // closed e.Tokens as range 24
    //DEBUG: t.ColonPos0: 10
    //DEBUG: t.ErrorList$a: 16
    //DEBUG: t.Result0: 18
    //DEBUG: s.Mode0: 5
    //DEBUG: e.Blocks0: 20
    //DEBUG: e.Body: 22
    //DEBUG: e.Tokens: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Result-Blocks@1/4 s.Mode0/5 {REMOVED TILE} (/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList$a/16 AsIs: t.Result0/18 } Tile{ AsIs: (/8 AsIs: e.Blocks0/20 HalfReuse: (/9 AsIs: t.ColonPos0/10 } Tile{ AsIs: e.Body/22 } Tile{ AsIs: )/15 } Tile{ HalfReuse: )/1 } Tile{ AsIs: e.Tokens/24 } Tile{ ]] }
    refalrts::reinit_open_bracket(context[9]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[8], context[1] );
    refalrts::link_brackets( context[9], context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_elem( res, context[15] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[8], context[11] );
    res = refalrts::splice_evar( res, context[16], context[19] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Result-Blocks@1/4 s.Mode0/5 (/8 e.Blocks0/6 )/9 t.ColonPos0/10 (/14 e.Body/12 )/15 t.ErrorList$a/16 t.Result0/18 e.dyn1/2 >/1
  // closed e.Blocks0 as range 6
  // closed e.Body as range 12
  // closed e.dyn1 as range 2
  //DEBUG: t.ColonPos0: 10
  //DEBUG: t.ErrorList$a: 16
  //DEBUG: t.Result0: 18
  //DEBUG: s.Mode0: 5
  //DEBUG: e.Blocks0: 6
  //DEBUG: e.Body: 12
  //DEBUG: e.dyn1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Result-Blocks@0/4 AsIs: s.Mode0/5 AsIs: (/8 AsIs: e.Blocks0/6 HalfReuse: (/9 AsIs: t.ColonPos0/10 } Tile{ AsIs: e.Body/12 } Tile{ HalfReuse: )/14 } Tile{ AsIs: )/15 AsIs: t.ErrorList$a/16 AsIs: t.Result0/18 AsIs: e.dyn1/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Resultm_Blocks_Z0]);
  refalrts::reinit_open_bracket(context[9]);
  refalrts::reinit_close_bracket(context[14]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[8], context[15] );
  refalrts::link_brackets( context[9], context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[15];
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[12], context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Resultm_Blocks_Z1("Result-Blocks@1", COOKIE1_, COOKIE2_, func_gen_Resultm_Blocks_Z1);


static refalrts::FnResult func_gen_DoTokenChain_B1S7A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 32 elems
  refalrts::Iter context[32];
  refalrts::zeros( context, 32 );
  // </0 & DoTokenChain:1$7=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoTokenChain:1$7=1@1/4 s.new1/5 (/8 e.new2/6 )/9 t.new3/10 (/14 e.new4/12 )/15 e.new5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new2 as range 6
  context[11] = refalrts::tvar_left( context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  // closed e.new4 as range 12
  // closed e.new5 as range 2
  do {
    // </0 & DoTokenChain:1$7=1@1/4 s.Kind0/5 (/8 e.Collected0/16 )/9 t.Pos0/10 (/14 e.Tokens0/18 )/15 t.ErrorList$a/22 >/1
    context[16] = context[6];
    context[17] = context[7];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[2];
    context[21] = context[3];
    // closed e.Collected0 as range 16
    // closed e.Tokens0 as range 18
    context[23] = refalrts::tvar_left( context[22], context[20], context[21] );
    if( ! context[23] )
      continue;
    if( ! refalrts::empty_seq( context[20], context[21] ) )
      continue;
    //DEBUG: t.Pos0: 10
    //DEBUG: s.Kind0: 5
    //DEBUG: e.Collected0: 16
    //DEBUG: e.Tokens0: 18
    //DEBUG: t.ErrorList$a: 22

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </24 Tile{ HalfReuse: & DoTokenChain-AfterCall/0 HalfReuse: # Classic/4 AsIs: s.Kind0/5 AsIs: (/8 AsIs: e.Collected0/16 AsIs: )/9 AsIs: t.Pos0/10 AsIs: (/14 } )/25 </26 & DoTokenChain/27 # Classic/28 Tile{ HalfReuse: s.Kind05 /15 AsIs: t.ErrorList$a/22 } (/29 )/30 Tile{ AsIs: e.Tokens0/18 } >/31 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[24]);
    refalrts::alloc_close_bracket(vm, context[25]);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_DoTokenChain]);
    refalrts::alloc_ident(vm, context[28], identifiers[ident_Classic]);
    refalrts::alloc_open_bracket(vm, context[29]);
    refalrts::alloc_close_bracket(vm, context[30]);
    refalrts::alloc_close_call(vm, context[31]);
    refalrts::reinit_name(context[0], functions[efunc_DoTokenChainm_AfterCall]);
    refalrts::reinit_ident(context[4], identifiers[ident_Classic]);
    refalrts::reinit_svar( context[15], context[5] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[26] );
    refalrts::link_brackets( context[29], context[30] );
    refalrts::link_brackets( context[14], context[25] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[31] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_evar( res, context[15], context[23] );
    res = refalrts::splice_evar( res, context[25], context[28] );
    res = refalrts::splice_evar( res, context[0], context[14] );
    res = refalrts::splice_elem( res, context[24] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoTokenChain:1$7=1@1/4 s.Kind0/5 (/8 e.Collected0/6 )/9 t.Pos0/10 (/14 e.Tokens0/12 )/15 e.dyn/2 >/1
  // closed e.Collected0 as range 6
  // closed e.Tokens0 as range 12
  // closed e.dyn as range 2
  //DEBUG: t.Pos0: 10
  //DEBUG: s.Kind0: 5
  //DEBUG: e.Collected0: 6
  //DEBUG: e.Tokens0: 12
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </16 Tile{ HalfReuse: & DoTokenChain:1$7=1@0/0 HalfReuse: # Classic/4 AsIs: s.Kind0/5 AsIs: (/8 AsIs: e.Collected0/6 AsIs: )/9 AsIs: t.Pos0/10 AsIs: (/14 AsIs: e.Tokens0/12 AsIs: )/15 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[16]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoTokenChain_B1S7A1Z0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Classic]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[16] );
  refalrts::link_brackets( context[14], context[15] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoTokenChain_B1S7A1Z1("DoTokenChain:1$7=1@1", COOKIE1_, COOKIE2_, func_gen_DoTokenChain_B1S7A1Z1);


static refalrts::FnResult func_gen_DoTokenChain_B1S9A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & DoTokenChain:1$9=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoTokenChain:1$9=1@1/4 s.new1/5 (/8 e.new2/6 )/9 t.new3/10 (/14 e.new4/12 )/15 (/18 e.new5/16 )/19 e.new6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new2 as range 6
  context[11] = refalrts::tvar_left( context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  context[16] = 0;
  context[17] = 0;
  context[18] = refalrts::brackets_left( context[16], context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[18], context[19]);
  // closed e.new4 as range 12
  // closed e.new5 as range 16
  // closed e.new6 as range 2
  do {
    // </0 & DoTokenChain:1$9=1@1/4 s.Kind0/5 (/8 e.Collected0/20 )/9 t.OpenPos0/10 (/14 e.FuncName0/22 )/15 (/18 e.Tokens0/24 )/19 t.ErrorList$a/28 >/1
    context[20] = context[6];
    context[21] = context[7];
    context[22] = context[12];
    context[23] = context[13];
    context[24] = context[16];
    context[25] = context[17];
    context[26] = context[2];
    context[27] = context[3];
    // closed e.Collected0 as range 20
    // closed e.FuncName0 as range 22
    // closed e.Tokens0 as range 24
    context[29] = refalrts::tvar_left( context[28], context[26], context[27] );
    if( ! context[29] )
      continue;
    if( ! refalrts::empty_seq( context[26], context[27] ) )
      continue;
    //DEBUG: t.OpenPos0: 10
    //DEBUG: s.Kind0: 5
    //DEBUG: e.Collected0: 20
    //DEBUG: e.FuncName0: 22
    //DEBUG: e.Tokens0: 24
    //DEBUG: t.ErrorList$a: 28

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain:1$9=2@2/4 AsIs: s.Kind0/5 AsIs: (/8 AsIs: e.Collected0/20 AsIs: )/9 AsIs: t.OpenPos0/10 AsIs: (/14 AsIs: e.FuncName0/22 AsIs: )/15 HalfReuse: </18 } & DoTokenChain/30 # Classic/31 Tile{ HalfReuse: s.Kind05 /19 AsIs: t.ErrorList$a/28 } (/32 )/33 Tile{ AsIs: e.Tokens0/24 } >/34 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[30], functions[efunc_DoTokenChain]);
    refalrts::alloc_ident(vm, context[31], identifiers[ident_Classic]);
    refalrts::alloc_open_bracket(vm, context[32]);
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::alloc_close_call(vm, context[34]);
    refalrts::update_name(context[4], functions[efunc_gen_DoTokenChain_B1S9A2Z2]);
    refalrts::reinit_open_call(context[18]);
    refalrts::reinit_svar( context[19], context[5] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[34] );
    refalrts::push_stack( vm, context[18] );
    refalrts::link_brackets( context[32], context[33] );
    refalrts::link_brackets( context[14], context[15] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[34] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[19], context[29] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoTokenChain:1$9=1@1/4 s.Kind0/5 (/8 e.Collected0/6 )/9 t.OpenPos0/10 (/14 e.FuncName0/12 )/15 (/18 e.Tokens0/16 )/19 e.dyn/2 >/1
  // closed e.Collected0 as range 6
  // closed e.FuncName0 as range 12
  // closed e.Tokens0 as range 16
  // closed e.dyn as range 2
  //DEBUG: t.OpenPos0: 10
  //DEBUG: s.Kind0: 5
  //DEBUG: e.Collected0: 6
  //DEBUG: e.FuncName0: 12
  //DEBUG: e.Tokens0: 16
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </20 Tile{ HalfReuse: & DoTokenChain:1$9=1@0/0 HalfReuse: # Classic/4 AsIs: s.Kind0/5 AsIs: (/8 AsIs: e.Collected0/6 AsIs: )/9 AsIs: t.OpenPos0/10 AsIs: (/14 AsIs: e.FuncName0/12 AsIs: )/15 AsIs: (/18 AsIs: e.Tokens0/16 AsIs: )/19 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[20]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoTokenChain_B1S9A1Z0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Classic]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[20] );
  refalrts::link_brackets( context[18], context[19] );
  refalrts::link_brackets( context[14], context[15] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[20] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoTokenChain_B1S9A1Z1("DoTokenChain:1$9=1@1", COOKIE1_, COOKIE2_, func_gen_DoTokenChain_B1S9A1Z1);


static refalrts::FnResult func_gen_DoTokenChain_B1S9A2Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 60 elems
  refalrts::Iter context[60];
  refalrts::zeros( context, 60 );
  // </0 & DoTokenChain:1$9=2@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoTokenChain:1$9=2@1/4 s.new1/5 (/8 e.new2/6 )/9 t.new3/10 (/14 e.new4/12 )/15 e.new5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new2 as range 6
  context[11] = refalrts::tvar_left( context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  // closed e.new4 as range 12
  // closed e.new5 as range 2
  do {
    // </0 & DoTokenChain:1$9=2@1/4 s.new6/5 (/8 e.new11/16 )/9 t.new7/10 (/14 e.new12/18 )/15 t.new8/22 (/26 e.new9/24 )/27 e.new10/20 >/1
    context[16] = context[6];
    context[17] = context[7];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[2];
    context[21] = context[3];
    // closed e.new11 as range 16
    // closed e.new12 as range 18
    context[23] = refalrts::tvar_left( context[22], context[20], context[21] );
    if( ! context[23] )
      continue;
    context[24] = 0;
    context[25] = 0;
    context[26] = refalrts::brackets_left( context[24], context[25], context[20], context[21] );
    if( ! context[26] )
      continue;
    refalrts::bracket_pointers(context[26], context[27]);
    // closed e.new9 as range 24
    // closed e.new10 as range 20
    do {
      // </0 & DoTokenChain:1$9=2@1/4 s.new13/5 (/8 e.new21/28 )/9 t.new14/10 (/14 e.new22/30 )/15 t.new15/22 (/26 e.new20/32 )/27 (/38 s.new16/40 t.new17/41 e.new18/36 )/39 e.new19/34 >/1
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[24];
      context[33] = context[25];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = 0;
      context[37] = 0;
      context[38] = refalrts::brackets_left( context[36], context[37], context[34], context[35] );
      if( ! context[38] )
        continue;
      refalrts::bracket_pointers(context[38], context[39]);
      // closed e.new21 as range 28
      // closed e.new22 as range 30
      // closed e.new20 as range 32
      // closed e.new19 as range 34
      if( ! refalrts::svar_left( context[40], context[36], context[37] ) )
        continue;
      context[42] = refalrts::tvar_left( context[41], context[36], context[37] );
      if( ! context[42] )
        continue;
      // closed e.new18 as range 36
      do {
        // </0 & DoTokenChain:1$9=2@1/4 s.Kind0/5 (/8 e.Collected0/43 )/9 t.OpenPos0/10 (/14 e.FuncName0/45 )/15 t.ErrorList$b/22 (/26 e.BracketTerms/47 )/27 (/38 # TkCloseADT/40 t.1/41 )/39 e./49 >/1
        context[43] = context[28];
        context[44] = context[29];
        context[45] = context[30];
        context[46] = context[31];
        context[47] = context[32];
        context[48] = context[33];
        context[49] = context[34];
        context[50] = context[35];
        if( ! refalrts::ident_term( identifiers[ident_TkCloseADT], context[40] ) )
          continue;
        if( ! refalrts::empty_seq( context[36], context[37] ) )
          continue;
        // closed e.Collected0 as range 43
        // closed e.FuncName0 as range 45
        // closed e.BracketTerms as range 47
        // closed e. as range 49
        //DEBUG: t.OpenPos0: 10
        //DEBUG: t.ErrorList$b: 22
        //DEBUG: t.1: 41
        //DEBUG: s.Kind0: 5
        //DEBUG: e.Collected0: 43
        //DEBUG: e.FuncName0: 45
        //DEBUG: e.BracketTerms: 47
        //DEBUG: e.: 49

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} (/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.1/41 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 } Tile{ Reuse: # Extended/40 } Tile{ AsIs: s.Kind0/5 } Tile{ AsIs: t.ErrorList$b/22 AsIs: (/26 } Tile{ AsIs: e.Collected0/43 } Tile{ AsIs: (/38 } Tile{ HalfReuse: # ADT-Brackets/9 AsIs: t.OpenPos0/10 AsIs: (/14 AsIs: e.FuncName0/45 AsIs: )/15 } Tile{ AsIs: e.BracketTerms/47 } Tile{ AsIs: )/27 } Tile{ AsIs: )/39 AsIs: e./49 AsIs: >/1 ]] }
        refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
        refalrts::update_ident(context[40], identifiers[ident_Extended]);
        refalrts::reinit_ident(context[9], identifiers[ident_ADTm_Brackets]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[26], context[39] );
        refalrts::link_brackets( context[38], context[27] );
        refalrts::link_brackets( context[14], context[15] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[39];
        res = refalrts::splice_elem( res, context[27] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[9], context[15] );
        res = refalrts::splice_elem( res, context[38] );
        res = refalrts::splice_evar( res, context[43], context[44] );
        res = refalrts::splice_evar( res, context[22], context[26] );
        res = refalrts::splice_elem( res, context[5] );
        res = refalrts::splice_elem( res, context[40] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoTokenChain:1$9=2@1/4 s.Kind0/5 (/8 e.Collected0/43 )/9 t.OpenPos0/10 (/14 e.FuncName0/45 )/15 t.ErrorList$b/22 (/26 e.BracketTerms/47 )/27 (/38 s.Type/40 t.1/41 e.2/49 )/39 e./51 >/1
      context[43] = context[28];
      context[44] = context[29];
      context[45] = context[30];
      context[46] = context[31];
      context[47] = context[32];
      context[48] = context[33];
      context[49] = context[36];
      context[50] = context[37];
      context[51] = context[34];
      context[52] = context[35];
      // closed e.Collected0 as range 43
      // closed e.FuncName0 as range 45
      // closed e.BracketTerms as range 47
      // closed e.2 as range 49
      // closed e. as range 51
      //DEBUG: t.OpenPos0: 10
      //DEBUG: t.ErrorList$b: 22
      //DEBUG: t.1: 41
      //DEBUG: s.Kind0: 5
      //DEBUG: s.Type: 40
      //DEBUG: e.Collected0: 43
      //DEBUG: e.FuncName0: 45
      //DEBUG: e.BracketTerms: 47
      //DEBUG: e.2: 49
      //DEBUG: e.: 51

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain:1$9=3@1/4 AsIs: s.Kind0/5 AsIs: (/8 AsIs: e.Collected0/43 AsIs: )/9 AsIs: t.OpenPos0/10 AsIs: (/14 AsIs: e.FuncName0/45 AsIs: )/15 } Tile{ AsIs: (/26 } Tile{ AsIs: e.BracketTerms/47 } )/53 </54 & EL-AddErrorAt/55 Tile{ AsIs: t.ErrorList$b/22 } t.1/41/56"Missed \']\'"/58 Tile{ HalfReuse: >/27 AsIs: (/38 AsIs: s.Type/40 AsIs: t.1/41 AsIs: e.2/49 AsIs: )/39 AsIs: e./51 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[53]);
      refalrts::alloc_open_call(vm, context[54]);
      refalrts::alloc_name(vm, context[55], functions[efunc_ELm_AddErrorAt]);
      refalrts::copy_evar(vm, context[56], context[57], context[41], context[42]);
      refalrts::alloc_chars(vm, context[58], context[59], "Missed \']\'", 10);
      refalrts::update_name(context[4], functions[efunc_gen_DoTokenChain_B1S9A3Z1]);
      refalrts::reinit_close_call(context[27]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[38], context[39] );
      refalrts::push_stack( vm, context[27] );
      refalrts::push_stack( vm, context[54] );
      refalrts::link_brackets( context[26], context[53] );
      refalrts::link_brackets( context[14], context[15] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[27];
      res = refalrts::splice_evar( res, context[56], context[59] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[53], context[55] );
      res = refalrts::splice_evar( res, context[47], context[48] );
      res = refalrts::splice_elem( res, context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoTokenChain:1$9=2@1/4 s.Kind0/5 (/8 e.Collected0/28 )/9 t.OpenPos0/10 (/14 e.FuncName0/30 )/15 t.ErrorList$b/22 (/26 e.BracketTerms/32 )/27 e.Tokens$a/34 >/1
    context[28] = context[16];
    context[29] = context[17];
    context[30] = context[18];
    context[31] = context[19];
    context[32] = context[24];
    context[33] = context[25];
    context[34] = context[20];
    context[35] = context[21];
    // closed e.Collected0 as range 28
    // closed e.FuncName0 as range 30
    // closed e.BracketTerms as range 32
    // closed e.Tokens$a as range 34
    //DEBUG: t.OpenPos0: 10
    //DEBUG: t.ErrorList$b: 22
    //DEBUG: s.Kind0: 5
    //DEBUG: e.Collected0: 28
    //DEBUG: e.FuncName0: 30
    //DEBUG: e.BracketTerms: 32
    //DEBUG: e.Tokens$a: 34

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain:1$9=3@1/4 AsIs: s.Kind0/5 AsIs: (/8 AsIs: e.Collected0/28 AsIs: )/9 AsIs: t.OpenPos0/10 AsIs: (/14 AsIs: e.FuncName0/30 AsIs: )/15 } Tile{ AsIs: (/26 AsIs: e.BracketTerms/32 AsIs: )/27 } </36 & DoTokenChain:1$9=3:1*2/37 Tile{ AsIs: t.ErrorList$b/22 } Tile{ AsIs: e.Tokens$a/34 } >/38 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[36]);
    refalrts::alloc_name(vm, context[37], functions[efunc_gen_DoTokenChain_B1S9A3B1D2]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::update_name(context[4], functions[efunc_gen_DoTokenChain_B1S9A3Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[36] );
    refalrts::link_brackets( context[26], context[27] );
    refalrts::link_brackets( context[14], context[15] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[38] );
    res = refalrts::splice_evar( res, context[34], context[35] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[36], context[37] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoTokenChain:1$9=2@1/4 s.Kind0/5 (/8 e.Collected0/6 )/9 t.OpenPos0/10 (/14 e.FuncName0/12 )/15 e.dyn/2 >/1
  // closed e.Collected0 as range 6
  // closed e.FuncName0 as range 12
  // closed e.dyn as range 2
  //DEBUG: t.OpenPos0: 10
  //DEBUG: s.Kind0: 5
  //DEBUG: e.Collected0: 6
  //DEBUG: e.FuncName0: 12
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </16 Tile{ HalfReuse: & DoTokenChain:1$9=2@0/0 HalfReuse: # Extended/4 AsIs: s.Kind0/5 AsIs: (/8 AsIs: e.Collected0/6 AsIs: )/9 AsIs: t.OpenPos0/10 AsIs: (/14 AsIs: e.FuncName0/12 AsIs: )/15 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[16]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoTokenChain_B1S9A2Z0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Extended]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[16] );
  refalrts::link_brackets( context[14], context[15] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoTokenChain_B1S9A2Z1("DoTokenChain:1$9=2@1", COOKIE1_, COOKIE2_, func_gen_DoTokenChain_B1S9A2Z1);


static refalrts::FnResult func_gen_DoTokenChain_B1S11A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & DoTokenChain:1$11=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoTokenChain:1$11=1@1/4 s.new1/5 (/8 e.new2/6 )/9 e.new3/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new2 as range 6
  // closed e.new3 as range 2
  do {
    // </0 & DoTokenChain:1$11=1@1/4 s.Kind0/5 (/8 e.Collected0/10 )/9 t.ErrorList$a/14 (/18 e.Term/16 )/19 e.Tokens$a/12 >/1
    context[10] = context[6];
    context[11] = context[7];
    context[12] = context[2];
    context[13] = context[3];
    // closed e.Collected0 as range 10
    context[15] = refalrts::tvar_left( context[14], context[12], context[13] );
    if( ! context[15] )
      continue;
    context[16] = 0;
    context[17] = 0;
    context[18] = refalrts::brackets_left( context[16], context[17], context[12], context[13] );
    if( ! context[18] )
      continue;
    refalrts::bracket_pointers(context[18], context[19]);
    // closed e.Term as range 16
    // closed e.Tokens$a as range 12
    //DEBUG: s.Kind0: 5
    //DEBUG: e.Collected0: 10
    //DEBUG: t.ErrorList$a: 14
    //DEBUG: e.Term: 16
    //DEBUG: e.Tokens$a: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Kind0/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 } Tile{ HalfReuse: # Classic/8 } Tile{ HalfReuse: s.Kind05 /9 AsIs: t.ErrorList$a/14 AsIs: (/18 } Tile{ AsIs: e.Collected0/10 } Tile{ AsIs: e.Term/16 } Tile{ AsIs: )/19 AsIs: e.Tokens$a/12 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
    refalrts::reinit_ident(context[8], identifiers[ident_Classic]);
    refalrts::reinit_svar( context[9], context[5] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[18], context[19] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[19];
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[9], context[18] );
    res = refalrts::splice_elem( res, context[8] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoTokenChain:1$11=1@1/4 s.Kind0/5 (/8 e.Collected0/6 )/9 e.dyn/2 >/1
  // closed e.Collected0 as range 6
  // closed e.dyn as range 2
  //DEBUG: s.Kind0: 5
  //DEBUG: e.Collected0: 6
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </10 Tile{ HalfReuse: & DoTokenChain:1$11=1@0/0 HalfReuse: # Classic/4 AsIs: s.Kind0/5 AsIs: (/8 AsIs: e.Collected0/6 AsIs: )/9 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[10]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoTokenChain_B1S11A1Z0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Classic]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[10] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoTokenChain_B1S11A1Z1("DoTokenChain:1$11=1@1", COOKIE1_, COOKIE2_, func_gen_DoTokenChain_B1S11A1Z1);


static refalrts::FnResult func_gen_DoTokenChain_B1S11A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & DoTokenChain:1$11=1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoTokenChain:1$11=1@2/4 s.new1/5 (/8 e.new2/6 )/9 e.new3/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new2 as range 6
  // closed e.new3 as range 2
  do {
    // </0 & DoTokenChain:1$11=1@2/4 s.Kind0/5 (/8 e.Collected0/10 )/9 t.ErrorList$a/14 (/18 e.Term/16 )/19 e.Tokens$a/12 >/1
    context[10] = context[6];
    context[11] = context[7];
    context[12] = context[2];
    context[13] = context[3];
    // closed e.Collected0 as range 10
    context[15] = refalrts::tvar_left( context[14], context[12], context[13] );
    if( ! context[15] )
      continue;
    context[16] = 0;
    context[17] = 0;
    context[18] = refalrts::brackets_left( context[16], context[17], context[12], context[13] );
    if( ! context[18] )
      continue;
    refalrts::bracket_pointers(context[18], context[19]);
    // closed e.Term as range 16
    // closed e.Tokens$a as range 12
    //DEBUG: s.Kind0: 5
    //DEBUG: e.Collected0: 10
    //DEBUG: t.ErrorList$a: 14
    //DEBUG: e.Term: 16
    //DEBUG: e.Tokens$a: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Kind0/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 } Tile{ HalfReuse: # Extended/8 } Tile{ HalfReuse: s.Kind05 /9 AsIs: t.ErrorList$a/14 AsIs: (/18 } Tile{ AsIs: e.Collected0/10 } Tile{ AsIs: e.Term/16 } Tile{ AsIs: )/19 AsIs: e.Tokens$a/12 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
    refalrts::reinit_ident(context[8], identifiers[ident_Extended]);
    refalrts::reinit_svar( context[9], context[5] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[18], context[19] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[19];
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[9], context[18] );
    res = refalrts::splice_elem( res, context[8] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoTokenChain:1$11=1@2/4 s.Kind0/5 (/8 e.Collected0/6 )/9 e.dyn/2 >/1
  // closed e.Collected0 as range 6
  // closed e.dyn as range 2
  //DEBUG: s.Kind0: 5
  //DEBUG: e.Collected0: 6
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </10 Tile{ HalfReuse: & DoTokenChain:1$11=1@0/0 HalfReuse: # Extended/4 AsIs: s.Kind0/5 AsIs: (/8 AsIs: e.Collected0/6 AsIs: )/9 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[10]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoTokenChain_B1S11A1Z0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Extended]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[10] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoTokenChain_B1S11A1Z2("DoTokenChain:1$11=1@2", COOKIE1_, COOKIE2_, func_gen_DoTokenChain_B1S11A1Z2);


static refalrts::FnResult func_gen_ClassicError_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & ClassicError@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & ClassicError@3/4 t.new1/5 s.new2/7 t.new3/8 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[9] = refalrts::tvar_left( context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & ClassicError@3/4 t.ErrorList0/5 # Classic/7 t.Pos0/8 >/1
    if( ! refalrts::ident_term( identifiers[ident_Classic], context[7] ) )
      continue;
    //DEBUG: t.ErrorList0: 5
    //DEBUG: t.Pos0: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0/5 } Tile{ AsIs: t.Pos0/8 } 'D'/10 Tile{ HalfReuse: 'i'/7 }"d you forget \':\' before block?"/11 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_char(vm, context[10], 'D');
    refalrts::alloc_chars(vm, context[11], context[12], "d you forget \':\' before block?", 30);
    refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
    refalrts::reinit_char(context[7], 'i');
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[7] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & ClassicError@3/4 t.ErrorList0/5 # Extended/7 t.Pos0/8 >/1
    if( ! refalrts::ident_term( identifiers[ident_Extended], context[7] ) )
      continue;
    //DEBUG: t.ErrorList0: 5
    //DEBUG: t.Pos0: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & ClassicError@3/4 {REMOVED TILE} # Extended/7 t.Pos0/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList0/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ClassicError@3/4 t.ErrorList0/5 s.dyn0/7 t.Pos0/8 >/1
  //DEBUG: t.ErrorList0: 5
  //DEBUG: t.Pos0: 8
  //DEBUG: s.dyn0: 7

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ClassicError@0/4 AsIs: t.ErrorList0/5 AsIs: s.dyn0/7 AsIs: t.Pos0/8 HalfReuse: 'D'/1 }"id you forget \':\' before block?"/10 >/12 Tile{ ]] }
  refalrts::alloc_chars(vm, context[10], context[11], "id you forget \':\' before block?", 31);
  refalrts::alloc_close_call(vm, context[12]);
  refalrts::update_name(context[4], functions[efunc_gen_ClassicError_Z0]);
  refalrts::reinit_char(context[1], 'D');
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[10], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ClassicError_Z3("ClassicError@3", COOKIE1_, COOKIE2_, func_gen_ClassicError_Z3);


static refalrts::FnResult func_gen_DoTokenChain_B1S9A2Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 60 elems
  refalrts::Iter context[60];
  refalrts::zeros( context, 60 );
  // </0 & DoTokenChain:1$9=2@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoTokenChain:1$9=2@2/4 s.new1/5 (/8 e.new2/6 )/9 t.new3/10 (/14 e.new4/12 )/15 e.new5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new2 as range 6
  context[11] = refalrts::tvar_left( context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  // closed e.new4 as range 12
  // closed e.new5 as range 2
  do {
    // </0 & DoTokenChain:1$9=2@2/4 s.new6/5 (/8 e.new11/16 )/9 t.new7/10 (/14 e.new12/18 )/15 t.new8/22 (/26 e.new9/24 )/27 e.new10/20 >/1
    context[16] = context[6];
    context[17] = context[7];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[2];
    context[21] = context[3];
    // closed e.new11 as range 16
    // closed e.new12 as range 18
    context[23] = refalrts::tvar_left( context[22], context[20], context[21] );
    if( ! context[23] )
      continue;
    context[24] = 0;
    context[25] = 0;
    context[26] = refalrts::brackets_left( context[24], context[25], context[20], context[21] );
    if( ! context[26] )
      continue;
    refalrts::bracket_pointers(context[26], context[27]);
    // closed e.new9 as range 24
    // closed e.new10 as range 20
    do {
      // </0 & DoTokenChain:1$9=2@2/4 s.new13/5 (/8 e.new21/28 )/9 t.new14/10 (/14 e.new22/30 )/15 t.new15/22 (/26 e.new20/32 )/27 (/38 s.new16/40 t.new17/41 e.new18/36 )/39 e.new19/34 >/1
      context[28] = context[16];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[19];
      context[32] = context[24];
      context[33] = context[25];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = 0;
      context[37] = 0;
      context[38] = refalrts::brackets_left( context[36], context[37], context[34], context[35] );
      if( ! context[38] )
        continue;
      refalrts::bracket_pointers(context[38], context[39]);
      // closed e.new21 as range 28
      // closed e.new22 as range 30
      // closed e.new20 as range 32
      // closed e.new19 as range 34
      if( ! refalrts::svar_left( context[40], context[36], context[37] ) )
        continue;
      context[42] = refalrts::tvar_left( context[41], context[36], context[37] );
      if( ! context[42] )
        continue;
      // closed e.new18 as range 36
      do {
        // </0 & DoTokenChain:1$9=2@2/4 s.Kind0/5 (/8 e.Collected0/43 )/9 t.OpenPos0/10 (/14 e.FuncName0/45 )/15 t.ErrorList$b/22 (/26 e.BracketTerms/47 )/27 (/38 # TkCloseADT/40 t.1/41 )/39 e./49 >/1
        context[43] = context[28];
        context[44] = context[29];
        context[45] = context[30];
        context[46] = context[31];
        context[47] = context[32];
        context[48] = context[33];
        context[49] = context[34];
        context[50] = context[35];
        if( ! refalrts::ident_term( identifiers[ident_TkCloseADT], context[40] ) )
          continue;
        if( ! refalrts::empty_seq( context[36], context[37] ) )
          continue;
        // closed e.Collected0 as range 43
        // closed e.FuncName0 as range 45
        // closed e.BracketTerms as range 47
        // closed e. as range 49
        //DEBUG: t.OpenPos0: 10
        //DEBUG: t.ErrorList$b: 22
        //DEBUG: t.1: 41
        //DEBUG: s.Kind0: 5
        //DEBUG: e.Collected0: 43
        //DEBUG: e.FuncName0: 45
        //DEBUG: e.BracketTerms: 47
        //DEBUG: e.: 49

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} (/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.1/41 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 } Tile{ Reuse: # Classic/40 } Tile{ AsIs: s.Kind0/5 } Tile{ AsIs: t.ErrorList$b/22 AsIs: (/26 } Tile{ AsIs: e.Collected0/43 } Tile{ AsIs: (/38 } Tile{ HalfReuse: # ADT-Brackets/9 AsIs: t.OpenPos0/10 AsIs: (/14 AsIs: e.FuncName0/45 AsIs: )/15 } Tile{ AsIs: e.BracketTerms/47 } Tile{ AsIs: )/27 } Tile{ AsIs: )/39 AsIs: e./49 AsIs: >/1 ]] }
        refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
        refalrts::update_ident(context[40], identifiers[ident_Classic]);
        refalrts::reinit_ident(context[9], identifiers[ident_ADTm_Brackets]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[26], context[39] );
        refalrts::link_brackets( context[38], context[27] );
        refalrts::link_brackets( context[14], context[15] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[39];
        res = refalrts::splice_elem( res, context[27] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[9], context[15] );
        res = refalrts::splice_elem( res, context[38] );
        res = refalrts::splice_evar( res, context[43], context[44] );
        res = refalrts::splice_evar( res, context[22], context[26] );
        res = refalrts::splice_elem( res, context[5] );
        res = refalrts::splice_elem( res, context[40] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoTokenChain:1$9=2@2/4 s.Kind0/5 (/8 e.Collected0/43 )/9 t.OpenPos0/10 (/14 e.FuncName0/45 )/15 t.ErrorList$b/22 (/26 e.BracketTerms/47 )/27 (/38 s.Type/40 t.1/41 e.2/49 )/39 e./51 >/1
      context[43] = context[28];
      context[44] = context[29];
      context[45] = context[30];
      context[46] = context[31];
      context[47] = context[32];
      context[48] = context[33];
      context[49] = context[36];
      context[50] = context[37];
      context[51] = context[34];
      context[52] = context[35];
      // closed e.Collected0 as range 43
      // closed e.FuncName0 as range 45
      // closed e.BracketTerms as range 47
      // closed e.2 as range 49
      // closed e. as range 51
      //DEBUG: t.OpenPos0: 10
      //DEBUG: t.ErrorList$b: 22
      //DEBUG: t.1: 41
      //DEBUG: s.Kind0: 5
      //DEBUG: s.Type: 40
      //DEBUG: e.Collected0: 43
      //DEBUG: e.FuncName0: 45
      //DEBUG: e.BracketTerms: 47
      //DEBUG: e.2: 49
      //DEBUG: e.: 51

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain:1$9=3@2/4 AsIs: s.Kind0/5 AsIs: (/8 AsIs: e.Collected0/43 AsIs: )/9 AsIs: t.OpenPos0/10 AsIs: (/14 AsIs: e.FuncName0/45 AsIs: )/15 } Tile{ AsIs: (/26 } Tile{ AsIs: e.BracketTerms/47 } )/53 </54 & EL-AddErrorAt/55 Tile{ AsIs: t.ErrorList$b/22 } t.1/41/56"Missed \']\'"/58 Tile{ HalfReuse: >/27 AsIs: (/38 AsIs: s.Type/40 AsIs: t.1/41 AsIs: e.2/49 AsIs: )/39 AsIs: e./51 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[53]);
      refalrts::alloc_open_call(vm, context[54]);
      refalrts::alloc_name(vm, context[55], functions[efunc_ELm_AddErrorAt]);
      refalrts::copy_evar(vm, context[56], context[57], context[41], context[42]);
      refalrts::alloc_chars(vm, context[58], context[59], "Missed \']\'", 10);
      refalrts::update_name(context[4], functions[efunc_gen_DoTokenChain_B1S9A3Z2]);
      refalrts::reinit_close_call(context[27]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[38], context[39] );
      refalrts::push_stack( vm, context[27] );
      refalrts::push_stack( vm, context[54] );
      refalrts::link_brackets( context[26], context[53] );
      refalrts::link_brackets( context[14], context[15] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[27];
      res = refalrts::splice_evar( res, context[56], context[59] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[53], context[55] );
      res = refalrts::splice_evar( res, context[47], context[48] );
      res = refalrts::splice_elem( res, context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoTokenChain:1$9=2@2/4 s.Kind0/5 (/8 e.Collected0/28 )/9 t.OpenPos0/10 (/14 e.FuncName0/30 )/15 t.ErrorList$b/22 (/26 e.BracketTerms/32 )/27 e.Tokens$a/34 >/1
    context[28] = context[16];
    context[29] = context[17];
    context[30] = context[18];
    context[31] = context[19];
    context[32] = context[24];
    context[33] = context[25];
    context[34] = context[20];
    context[35] = context[21];
    // closed e.Collected0 as range 28
    // closed e.FuncName0 as range 30
    // closed e.BracketTerms as range 32
    // closed e.Tokens$a as range 34
    //DEBUG: t.OpenPos0: 10
    //DEBUG: t.ErrorList$b: 22
    //DEBUG: s.Kind0: 5
    //DEBUG: e.Collected0: 28
    //DEBUG: e.FuncName0: 30
    //DEBUG: e.BracketTerms: 32
    //DEBUG: e.Tokens$a: 34

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain:1$9=3@2/4 AsIs: s.Kind0/5 AsIs: (/8 AsIs: e.Collected0/28 AsIs: )/9 AsIs: t.OpenPos0/10 AsIs: (/14 AsIs: e.FuncName0/30 AsIs: )/15 } Tile{ AsIs: (/26 AsIs: e.BracketTerms/32 AsIs: )/27 } </36 & DoTokenChain:1$9=3:1*2/37 Tile{ AsIs: t.ErrorList$b/22 } Tile{ AsIs: e.Tokens$a/34 } >/38 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[36]);
    refalrts::alloc_name(vm, context[37], functions[efunc_gen_DoTokenChain_B1S9A3B1D2]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::update_name(context[4], functions[efunc_gen_DoTokenChain_B1S9A3Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[36] );
    refalrts::link_brackets( context[26], context[27] );
    refalrts::link_brackets( context[14], context[15] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[38] );
    res = refalrts::splice_evar( res, context[34], context[35] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[36], context[37] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoTokenChain:1$9=2@2/4 s.Kind0/5 (/8 e.Collected0/6 )/9 t.OpenPos0/10 (/14 e.FuncName0/12 )/15 e.dyn/2 >/1
  // closed e.Collected0 as range 6
  // closed e.FuncName0 as range 12
  // closed e.dyn as range 2
  //DEBUG: t.OpenPos0: 10
  //DEBUG: s.Kind0: 5
  //DEBUG: e.Collected0: 6
  //DEBUG: e.FuncName0: 12
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </16 Tile{ HalfReuse: & DoTokenChain:1$9=2@0/0 HalfReuse: # Classic/4 AsIs: s.Kind0/5 AsIs: (/8 AsIs: e.Collected0/6 AsIs: )/9 AsIs: t.OpenPos0/10 AsIs: (/14 AsIs: e.FuncName0/12 AsIs: )/15 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[16]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoTokenChain_B1S9A2Z0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Classic]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[16] );
  refalrts::link_brackets( context[14], context[15] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoTokenChain_B1S9A2Z2("DoTokenChain:1$9=2@2", COOKIE1_, COOKIE2_, func_gen_DoTokenChain_B1S9A2Z2);


static refalrts::FnResult func_gen_DoTokenChain_B1S9A3Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & DoTokenChain:1$9=3@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoTokenChain:1$9=3@1/4 s.new1/5 (/8 e.new2/6 )/9 t.new3/10 (/14 e.new4/12 )/15 (/18 e.new5/16 )/19 e.new6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new2 as range 6
  context[11] = refalrts::tvar_left( context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  context[16] = 0;
  context[17] = 0;
  context[18] = refalrts::brackets_left( context[16], context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[18], context[19]);
  // closed e.new4 as range 12
  // closed e.new5 as range 16
  // closed e.new6 as range 2
  do {
    // </0 & DoTokenChain:1$9=3@1/4 s.Kind0/5 (/8 e.Collected0/20 )/9 t.OpenPos0/10 (/14 e.FuncName0/22 )/15 (/18 e.BracketTerms0/24 )/19 t.ErrorList$c/28 e.Tokens$b/26 >/1
    context[20] = context[6];
    context[21] = context[7];
    context[22] = context[12];
    context[23] = context[13];
    context[24] = context[16];
    context[25] = context[17];
    context[26] = context[2];
    context[27] = context[3];
    // closed e.Collected0 as range 20
    // closed e.FuncName0 as range 22
    // closed e.BracketTerms0 as range 24
    context[29] = refalrts::tvar_left( context[28], context[26], context[27] );
    if( ! context[29] )
      continue;
    // closed e.Tokens$b as range 26
    //DEBUG: t.OpenPos0: 10
    //DEBUG: s.Kind0: 5
    //DEBUG: e.Collected0: 20
    //DEBUG: e.FuncName0: 22
    //DEBUG: e.BracketTerms0: 24
    //DEBUG: t.ErrorList$c: 28
    //DEBUG: e.Tokens$b: 26

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Kind0/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 } # Extended/30 Tile{ HalfReuse: s.Kind05 /19 AsIs: t.ErrorList$c/28 } Tile{ AsIs: (/8 } Tile{ AsIs: e.Collected0/20 } Tile{ AsIs: (/18 } Tile{ HalfReuse: # ADT-Brackets/9 AsIs: t.OpenPos0/10 AsIs: (/14 AsIs: e.FuncName0/22 AsIs: )/15 } Tile{ AsIs: e.BracketTerms0/24 } )/31 )/32 Tile{ AsIs: e.Tokens$b/26 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_ident(vm, context[30], identifiers[ident_Extended]);
    refalrts::alloc_close_bracket(vm, context[31]);
    refalrts::alloc_close_bracket(vm, context[32]);
    refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
    refalrts::reinit_svar( context[19], context[5] );
    refalrts::reinit_ident(context[9], identifiers[ident_ADTm_Brackets]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[8], context[32] );
    refalrts::link_brackets( context[18], context[31] );
    refalrts::link_brackets( context[14], context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[9], context[15] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[19], context[29] );
    res = refalrts::splice_elem( res, context[30] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoTokenChain:1$9=3@1/4 s.Kind0/5 (/8 e.Collected0/6 )/9 t.OpenPos0/10 (/14 e.FuncName0/12 )/15 (/18 e.BracketTerms0/16 )/19 e.dyn/2 >/1
  // closed e.Collected0 as range 6
  // closed e.FuncName0 as range 12
  // closed e.BracketTerms0 as range 16
  // closed e.dyn as range 2
  //DEBUG: t.OpenPos0: 10
  //DEBUG: s.Kind0: 5
  //DEBUG: e.Collected0: 6
  //DEBUG: e.FuncName0: 12
  //DEBUG: e.BracketTerms0: 16
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </20 Tile{ HalfReuse: & DoTokenChain:1$9=3@0/0 HalfReuse: # Extended/4 AsIs: s.Kind0/5 AsIs: (/8 AsIs: e.Collected0/6 AsIs: )/9 AsIs: t.OpenPos0/10 AsIs: (/14 AsIs: e.FuncName0/12 AsIs: )/15 AsIs: (/18 AsIs: e.BracketTerms0/16 AsIs: )/19 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[20]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoTokenChain_B1S9A3Z0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Extended]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[20] );
  refalrts::link_brackets( context[18], context[19] );
  refalrts::link_brackets( context[14], context[15] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[20] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoTokenChain_B1S9A3Z1("DoTokenChain:1$9=3@1", COOKIE1_, COOKIE2_, func_gen_DoTokenChain_B1S9A3Z1);


static refalrts::FnResult func_gen_DoTokenChain_B1S6A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 68 elems
  refalrts::Iter context[68];
  refalrts::zeros( context, 68 );
  // </0 & DoTokenChain:1$6=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoTokenChain:1$6=1@1/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 e.new5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 2
  do {
    // </0 & DoTokenChain:1$6=1@1/4 s.new6/5 (/8 e.new10/18 )/9 (/12 e.new11/20 )/13 (/16 e.new12/22 )/17 t.new7/26 (/30 e.new8/28 )/31 e.new9/24 >/1
    context[18] = context[6];
    context[19] = context[7];
    context[20] = context[10];
    context[21] = context[11];
    context[22] = context[14];
    context[23] = context[15];
    context[24] = context[2];
    context[25] = context[3];
    // closed e.new10 as range 18
    // closed e.new11 as range 20
    // closed e.new12 as range 22
    context[27] = refalrts::tvar_left( context[26], context[24], context[25] );
    if( ! context[27] )
      continue;
    context[28] = 0;
    context[29] = 0;
    context[30] = refalrts::brackets_left( context[28], context[29], context[24], context[25] );
    if( ! context[30] )
      continue;
    refalrts::bracket_pointers(context[30], context[31]);
    // closed e.new8 as range 28
    // closed e.new9 as range 24
    do {
      // </0 & DoTokenChain:1$6=1@1/4 s.new13/5 (/8 e.new20/32 )/9 (/12 e.new21/34 )/13 (/16 e.new22/36 )/17 t.new14/26 (/30 e.new19/38 )/31 (/44 s.new15/46 t.new16/47 e.new17/42 )/45 e.new18/40 >/1
      context[32] = context[18];
      context[33] = context[19];
      context[34] = context[20];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[23];
      context[38] = context[28];
      context[39] = context[29];
      context[40] = context[24];
      context[41] = context[25];
      context[42] = 0;
      context[43] = 0;
      context[44] = refalrts::brackets_left( context[42], context[43], context[40], context[41] );
      if( ! context[44] )
        continue;
      refalrts::bracket_pointers(context[44], context[45]);
      // closed e.new20 as range 32
      // closed e.new21 as range 34
      // closed e.new22 as range 36
      // closed e.new19 as range 38
      // closed e.new18 as range 40
      if( ! refalrts::svar_left( context[46], context[42], context[43] ) )
        continue;
      context[48] = refalrts::tvar_left( context[47], context[42], context[43] );
      if( ! context[48] )
        continue;
      // closed e.new17 as range 42
      do {
        // </0 & DoTokenChain:1$6=1@1/4 s.Mode0/5 (/8 e.Collected0/49 )/9 (/12 e.OptionalFuncName/51 )/13 (/16 e.BracketTerms0/53 )/17 t.ErrorList$a/26 (/30 e.BracketTerms/55 )/31 (/44 # TkCloseBracket/46 t.1/47 )/45 e./57 >/1
        context[49] = context[32];
        context[50] = context[33];
        context[51] = context[34];
        context[52] = context[35];
        context[53] = context[36];
        context[54] = context[37];
        context[55] = context[38];
        context[56] = context[39];
        context[57] = context[40];
        context[58] = context[41];
        if( ! refalrts::ident_term( identifiers[ident_TkCloseBracket], context[46] ) )
          continue;
        if( ! refalrts::empty_seq( context[42], context[43] ) )
          continue;
        // closed e.Collected0 as range 49
        // closed e.OptionalFuncName as range 51
        // closed e.BracketTerms0 as range 53
        // closed e.BracketTerms as range 55
        // closed e. as range 57
        //DEBUG: t.ErrorList$a: 26
        //DEBUG: t.1: 47
        //DEBUG: s.Mode0: 5
        //DEBUG: e.Collected0: 49
        //DEBUG: e.OptionalFuncName: 51
        //DEBUG: e.BracketTerms0: 53
        //DEBUG: e.BracketTerms: 55
        //DEBUG: e.: 57

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} )/9 {REMOVED TILE} {REMOVED TILE} )/13 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.1/47 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 AsIs: s.Mode0/5 HalfReuse: # Pattern/8 } Tile{ AsIs: t.ErrorList$a/26 AsIs: (/30 } Tile{ AsIs: e.Collected0/49 } Tile{ AsIs: (/16 } Tile{ HalfReuse: # Brackets/12 } Tile{ AsIs: e.OptionalFuncName/51 } Tile{ AsIs: e.BracketTerms0/53 } Tile{ AsIs: )/31 AsIs: (/44 Reuse: # Brackets/46 } Tile{ AsIs: e.BracketTerms/55 } Tile{ AsIs: )/17 } Tile{ AsIs: )/45 AsIs: e./57 AsIs: >/1 ]] }
        refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
        refalrts::reinit_ident(context[8], identifiers[ident_Pattern]);
        refalrts::reinit_ident(context[12], identifiers[ident_Brackets]);
        refalrts::update_ident(context[46], identifiers[ident_Brackets]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[30], context[45] );
        refalrts::link_brackets( context[44], context[17] );
        refalrts::link_brackets( context[16], context[31] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[45];
        res = refalrts::splice_elem( res, context[17] );
        res = refalrts::splice_evar( res, context[55], context[56] );
        res = refalrts::splice_evar( res, context[31], context[46] );
        res = refalrts::splice_evar( res, context[53], context[54] );
        res = refalrts::splice_evar( res, context[51], context[52] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_elem( res, context[16] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        res = refalrts::splice_evar( res, context[26], context[30] );
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoTokenChain:1$6=1@1/4 s.Mode0/5 (/8 e.Collected0/49 )/9 (/12 e.OptionalFuncName/51 )/13 (/16 e.BracketTerms0/53 )/17 t.ErrorList$a/26 (/30 e.BracketTerms/55 )/31 (/44 s.Type/46 t.1/47 e.2/57 )/45 e./59 >/1
      context[49] = context[32];
      context[50] = context[33];
      context[51] = context[34];
      context[52] = context[35];
      context[53] = context[36];
      context[54] = context[37];
      context[55] = context[38];
      context[56] = context[39];
      context[57] = context[42];
      context[58] = context[43];
      context[59] = context[40];
      context[60] = context[41];
      // closed e.Collected0 as range 49
      // closed e.OptionalFuncName as range 51
      // closed e.BracketTerms0 as range 53
      // closed e.BracketTerms as range 55
      // closed e.2 as range 57
      // closed e. as range 59
      //DEBUG: t.ErrorList$a: 26
      //DEBUG: t.1: 47
      //DEBUG: s.Mode0: 5
      //DEBUG: s.Type: 46
      //DEBUG: e.Collected0: 49
      //DEBUG: e.OptionalFuncName: 51
      //DEBUG: e.BracketTerms0: 53
      //DEBUG: e.BracketTerms: 55
      //DEBUG: e.2: 57
      //DEBUG: e.: 59

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain:1$6=2@1/4 AsIs: s.Mode0/5 AsIs: (/8 AsIs: e.Collected0/49 AsIs: )/9 AsIs: (/12 AsIs: e.OptionalFuncName/51 AsIs: )/13 AsIs: (/16 AsIs: e.BracketTerms0/53 AsIs: )/17 } Tile{ AsIs: (/30 } Tile{ AsIs: e.BracketTerms/55 } )/61 </62 & EL-AddErrorAt/63 Tile{ AsIs: t.ErrorList$a/26 } t.1/47/64"Missed \')\'"/66 Tile{ HalfReuse: >/31 AsIs: (/44 AsIs: s.Type/46 AsIs: t.1/47 AsIs: e.2/57 AsIs: )/45 AsIs: e./59 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[61]);
      refalrts::alloc_open_call(vm, context[62]);
      refalrts::alloc_name(vm, context[63], functions[efunc_ELm_AddErrorAt]);
      refalrts::copy_evar(vm, context[64], context[65], context[47], context[48]);
      refalrts::alloc_chars(vm, context[66], context[67], "Missed \')\'", 10);
      refalrts::update_name(context[4], functions[efunc_gen_DoTokenChain_B1S6A2Z1]);
      refalrts::reinit_close_call(context[31]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[44], context[45] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[62] );
      refalrts::link_brackets( context[30], context[61] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[31];
      res = refalrts::splice_evar( res, context[64], context[67] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[61], context[63] );
      res = refalrts::splice_evar( res, context[55], context[56] );
      res = refalrts::splice_elem( res, context[30] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoTokenChain:1$6=1@1/4 s.Mode0/5 (/8 e.Collected0/32 )/9 (/12 e.OptionalFuncName/34 )/13 (/16 e.BracketTerms0/36 )/17 t.ErrorList$a/26 (/30 e.BracketTerms/38 )/31 e.Tokens$a/40 >/1
    context[32] = context[18];
    context[33] = context[19];
    context[34] = context[20];
    context[35] = context[21];
    context[36] = context[22];
    context[37] = context[23];
    context[38] = context[28];
    context[39] = context[29];
    context[40] = context[24];
    context[41] = context[25];
    // closed e.Collected0 as range 32
    // closed e.OptionalFuncName as range 34
    // closed e.BracketTerms0 as range 36
    // closed e.BracketTerms as range 38
    // closed e.Tokens$a as range 40
    //DEBUG: t.ErrorList$a: 26
    //DEBUG: s.Mode0: 5
    //DEBUG: e.Collected0: 32
    //DEBUG: e.OptionalFuncName: 34
    //DEBUG: e.BracketTerms0: 36
    //DEBUG: e.BracketTerms: 38
    //DEBUG: e.Tokens$a: 40

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain:1$6=2@1/4 AsIs: s.Mode0/5 AsIs: (/8 AsIs: e.Collected0/32 AsIs: )/9 AsIs: (/12 AsIs: e.OptionalFuncName/34 AsIs: )/13 AsIs: (/16 AsIs: e.BracketTerms0/36 AsIs: )/17 } Tile{ AsIs: (/30 AsIs: e.BracketTerms/38 AsIs: )/31 } </42 & DoTokenChain:1$6=2:1*2/43 Tile{ AsIs: t.ErrorList$a/26 } Tile{ AsIs: e.Tokens$a/40 } >/44 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[42]);
    refalrts::alloc_name(vm, context[43], functions[efunc_gen_DoTokenChain_B1S6A2B1D2]);
    refalrts::alloc_close_call(vm, context[44]);
    refalrts::update_name(context[4], functions[efunc_gen_DoTokenChain_B1S6A2Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[44] );
    refalrts::push_stack( vm, context[42] );
    refalrts::link_brackets( context[30], context[31] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[44] );
    res = refalrts::splice_evar( res, context[40], context[41] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_evar( res, context[42], context[43] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoTokenChain:1$6=1@1/4 s.Mode0/5 (/8 e.Collected0/6 )/9 (/12 e.OptionalFuncName/10 )/13 (/16 e.BracketTerms0/14 )/17 e.dyn/2 >/1
  // closed e.Collected0 as range 6
  // closed e.OptionalFuncName as range 10
  // closed e.BracketTerms0 as range 14
  // closed e.dyn as range 2
  //DEBUG: s.Mode0: 5
  //DEBUG: e.Collected0: 6
  //DEBUG: e.OptionalFuncName: 10
  //DEBUG: e.BracketTerms0: 14
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain:1$6=1@0/4 AsIs: s.Mode0/5 HalfReuse: # Pattern/8 } Tile{ AsIs: (/12 } Tile{ AsIs: e.Collected0/6 } Tile{ AsIs: (/16 } Tile{ HalfReuse: # Brackets/9 } Tile{ AsIs: e.OptionalFuncName/10 } Tile{ AsIs: e.BracketTerms0/14 } Tile{ AsIs: )/13 } Tile{ AsIs: )/17 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_DoTokenChain_B1S6A1Z0]);
  refalrts::reinit_ident(context[8], identifiers[ident_Pattern]);
  refalrts::reinit_ident(context[9], identifiers[ident_Brackets]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[12], context[17] );
  refalrts::link_brackets( context[16], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[17];
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_elem( res, context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoTokenChain_B1S6A1Z1("DoTokenChain:1$6=1@1", COOKIE1_, COOKIE2_, func_gen_DoTokenChain_B1S6A1Z1);


static refalrts::FnResult func_gen_DoTokenChain_B1S7A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 43 elems
  refalrts::Iter context[43];
  refalrts::zeros( context, 43 );
  // </0 & DoTokenChain:1$7=1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoTokenChain:1$7=1@2/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 t.new4/17 (/21 e.new5/19 )/22 e.new6/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  context[18] = refalrts::tvar_left( context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.new5 as range 19
  // closed e.new6 as range 2
  do {
    // </0 & DoTokenChain:1$7=1@2/4 (/7 e.Collected0/23 )/8 (/11 e.OptionalFuncName/25 )/12 (/15 e.BracketTerms/27 )/16 t.Pos0/17 (/21 e.Tokens0/29 )/22 t.ErrorList$a/33 >/1
    context[23] = context[5];
    context[24] = context[6];
    context[25] = context[9];
    context[26] = context[10];
    context[27] = context[13];
    context[28] = context[14];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[2];
    context[32] = context[3];
    // closed e.Collected0 as range 23
    // closed e.OptionalFuncName as range 25
    // closed e.BracketTerms as range 27
    // closed e.Tokens0 as range 29
    context[34] = refalrts::tvar_left( context[33], context[31], context[32] );
    if( ! context[34] )
      continue;
    if( ! refalrts::empty_seq( context[31], context[32] ) )
      continue;
    //DEBUG: t.Pos0: 17
    //DEBUG: e.Collected0: 23
    //DEBUG: e.OptionalFuncName: 25
    //DEBUG: e.BracketTerms: 27
    //DEBUG: e.Tokens0: 29
    //DEBUG: t.ErrorList$a: 33

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </35 & DoTokenChain-AfterCall/36 Tile{ HalfReuse: # Classic/0 HalfReuse: # Pattern/4 AsIs: (/7 AsIs: e.Collected0/23 HalfReuse: (/8 HalfReuse: # Brackets/11 } Tile{ AsIs: e.OptionalFuncName/25 } Tile{ AsIs: e.BracketTerms/27 } )/37 Tile{ AsIs: )/16 AsIs: t.Pos0/17 AsIs: (/21 } Tile{ AsIs: )/12 HalfReuse: </15 } & DoTokenChain/38 # Classic/39 Tile{ HalfReuse: # Pattern/22 AsIs: t.ErrorList$a/33 } (/40 )/41 Tile{ AsIs: e.Tokens0/29 } >/42 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[35]);
    refalrts::alloc_name(vm, context[36], functions[efunc_DoTokenChainm_AfterCall]);
    refalrts::alloc_close_bracket(vm, context[37]);
    refalrts::alloc_name(vm, context[38], functions[efunc_DoTokenChain]);
    refalrts::alloc_ident(vm, context[39], identifiers[ident_Classic]);
    refalrts::alloc_open_bracket(vm, context[40]);
    refalrts::alloc_close_bracket(vm, context[41]);
    refalrts::alloc_close_call(vm, context[42]);
    refalrts::reinit_ident(context[0], identifiers[ident_Classic]);
    refalrts::reinit_ident(context[4], identifiers[ident_Pattern]);
    refalrts::reinit_open_bracket(context[8]);
    refalrts::reinit_ident(context[11], identifiers[ident_Brackets]);
    refalrts::reinit_open_call(context[15]);
    refalrts::reinit_ident(context[22], identifiers[ident_Pattern]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[42] );
    refalrts::push_stack( vm, context[15] );
    refalrts::link_brackets( context[40], context[41] );
    refalrts::link_brackets( context[21], context[12] );
    refalrts::link_brackets( context[7], context[16] );
    refalrts::link_brackets( context[8], context[37] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[42] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_evar( res, context[40], context[41] );
    res = refalrts::splice_evar( res, context[22], context[34] );
    res = refalrts::splice_evar( res, context[38], context[39] );
    res = refalrts::splice_evar( res, context[12], context[15] );
    res = refalrts::splice_evar( res, context[16], context[21] );
    res = refalrts::splice_elem( res, context[37] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[0], context[11] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoTokenChain:1$7=1@2/4 (/7 e.Collected0/5 )/8 (/11 e.OptionalFuncName/9 )/12 (/15 e.BracketTerms/13 )/16 t.Pos0/17 (/21 e.Tokens0/19 )/22 e.dyn/2 >/1
  // closed e.Collected0 as range 5
  // closed e.OptionalFuncName as range 9
  // closed e.BracketTerms as range 13
  // closed e.Tokens0 as range 19
  // closed e.dyn as range 2
  //DEBUG: t.Pos0: 17
  //DEBUG: e.Collected0: 5
  //DEBUG: e.OptionalFuncName: 9
  //DEBUG: e.BracketTerms: 13
  //DEBUG: e.Tokens0: 19
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </15 } & DoTokenChain:1$7=1@0/23 Tile{ HalfReuse: # Classic/0 HalfReuse: # Pattern/4 AsIs: (/7 AsIs: e.Collected0/5 HalfReuse: (/8 HalfReuse: # Brackets/11 } Tile{ AsIs: e.OptionalFuncName/9 } Tile{ AsIs: e.BracketTerms/13 } Tile{ AsIs: )/12 } Tile{ AsIs: )/16 AsIs: t.Pos0/17 AsIs: (/21 AsIs: e.Tokens0/19 AsIs: )/22 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[23], functions[efunc_gen_DoTokenChain_B1S7A1Z0]);
  refalrts::reinit_open_call(context[15]);
  refalrts::reinit_ident(context[0], identifiers[ident_Classic]);
  refalrts::reinit_ident(context[4], identifiers[ident_Pattern]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::reinit_ident(context[11], identifiers[ident_Brackets]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[15] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[7], context[16] );
  refalrts::link_brackets( context[8], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[16];
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[0], context[11] );
  res = refalrts::splice_elem( res, context[23] );
  res = refalrts::splice_elem( res, context[15] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoTokenChain_B1S7A1Z2("DoTokenChain:1$7=1@2", COOKIE1_, COOKIE2_, func_gen_DoTokenChain_B1S7A1Z2);


static refalrts::FnResult func_gen_DoTokenChain_B1S7A1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 43 elems
  refalrts::Iter context[43];
  refalrts::zeros( context, 43 );
  // </0 & DoTokenChain:1$7=1@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoTokenChain:1$7=1@3/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 t.new5/18 (/22 e.new6/20 )/23 e.new7/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  context[19] = refalrts::tvar_left( context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  context[20] = 0;
  context[21] = 0;
  context[22] = refalrts::brackets_left( context[20], context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[22], context[23]);
  // closed e.new6 as range 20
  // closed e.new7 as range 2
  do {
    // </0 & DoTokenChain:1$7=1@3/4 s.Mode0/5 (/8 e.Collected0/24 )/9 (/12 e.OptionalFuncName/26 )/13 (/16 e.BracketTerms/28 )/17 t.Pos0/18 (/22 e.Tokens0/30 )/23 t.ErrorList$a/34 >/1
    context[24] = context[6];
    context[25] = context[7];
    context[26] = context[10];
    context[27] = context[11];
    context[28] = context[14];
    context[29] = context[15];
    context[30] = context[20];
    context[31] = context[21];
    context[32] = context[2];
    context[33] = context[3];
    // closed e.Collected0 as range 24
    // closed e.OptionalFuncName as range 26
    // closed e.BracketTerms as range 28
    // closed e.Tokens0 as range 30
    context[35] = refalrts::tvar_left( context[34], context[32], context[33] );
    if( ! context[35] )
      continue;
    if( ! refalrts::empty_seq( context[32], context[33] ) )
      continue;
    //DEBUG: t.Pos0: 18
    //DEBUG: s.Mode0: 5
    //DEBUG: e.Collected0: 24
    //DEBUG: e.OptionalFuncName: 26
    //DEBUG: e.BracketTerms: 28
    //DEBUG: e.Tokens0: 30
    //DEBUG: t.ErrorList$a: 34

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain-AfterCall/4 AsIs: s.Mode0/5 HalfReuse: # Pattern/8 } (/36 Tile{ AsIs: e.Collected0/24 } Tile{ AsIs: (/12 } # Brackets/37 Tile{ AsIs: e.OptionalFuncName/26 } Tile{ AsIs: e.BracketTerms/28 } Tile{ AsIs: )/9 } Tile{ AsIs: )/17 AsIs: t.Pos0/18 AsIs: (/22 } Tile{ AsIs: )/13 HalfReuse: </16 } & DoTokenChain/38 s.Mode0/5/39 Tile{ HalfReuse: # Pattern/23 AsIs: t.ErrorList$a/34 } (/40 )/41 Tile{ AsIs: e.Tokens0/30 } >/42 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[36]);
    refalrts::alloc_ident(vm, context[37], identifiers[ident_Brackets]);
    refalrts::alloc_name(vm, context[38], functions[efunc_DoTokenChain]);
    refalrts::copy_stvar(vm, context[39], context[5]);
    refalrts::alloc_open_bracket(vm, context[40]);
    refalrts::alloc_close_bracket(vm, context[41]);
    refalrts::alloc_close_call(vm, context[42]);
    refalrts::update_name(context[4], functions[efunc_DoTokenChainm_AfterCall]);
    refalrts::reinit_ident(context[8], identifiers[ident_Pattern]);
    refalrts::reinit_open_call(context[16]);
    refalrts::reinit_ident(context[23], identifiers[ident_Pattern]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[42] );
    refalrts::push_stack( vm, context[16] );
    refalrts::link_brackets( context[40], context[41] );
    refalrts::link_brackets( context[22], context[13] );
    refalrts::link_brackets( context[36], context[17] );
    refalrts::link_brackets( context[12], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[42] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_evar( res, context[40], context[41] );
    res = refalrts::splice_evar( res, context[23], context[35] );
    res = refalrts::splice_evar( res, context[38], context[39] );
    res = refalrts::splice_evar( res, context[13], context[16] );
    res = refalrts::splice_evar( res, context[17], context[22] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_elem( res, context[37] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_elem( res, context[36] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoTokenChain:1$7=1@3/4 s.Mode0/5 (/8 e.Collected0/6 )/9 (/12 e.OptionalFuncName/10 )/13 (/16 e.BracketTerms/14 )/17 t.Pos0/18 (/22 e.Tokens0/20 )/23 e.dyn/2 >/1
  // closed e.Collected0 as range 6
  // closed e.OptionalFuncName as range 10
  // closed e.BracketTerms as range 14
  // closed e.Tokens0 as range 20
  // closed e.dyn as range 2
  //DEBUG: t.Pos0: 18
  //DEBUG: s.Mode0: 5
  //DEBUG: e.Collected0: 6
  //DEBUG: e.OptionalFuncName: 10
  //DEBUG: e.BracketTerms: 14
  //DEBUG: e.Tokens0: 20
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain:1$7=1@0/4 AsIs: s.Mode0/5 HalfReuse: # Pattern/8 } Tile{ AsIs: (/12 } Tile{ AsIs: e.Collected0/6 } Tile{ AsIs: (/16 } Tile{ HalfReuse: # Brackets/9 } Tile{ AsIs: e.OptionalFuncName/10 } Tile{ AsIs: e.BracketTerms/14 } Tile{ AsIs: )/13 } Tile{ AsIs: )/17 AsIs: t.Pos0/18 AsIs: (/22 AsIs: e.Tokens0/20 AsIs: )/23 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_DoTokenChain_B1S7A1Z0]);
  refalrts::reinit_ident(context[8], identifiers[ident_Pattern]);
  refalrts::reinit_ident(context[9], identifiers[ident_Brackets]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[22], context[23] );
  refalrts::link_brackets( context[12], context[17] );
  refalrts::link_brackets( context[16], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[17];
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_elem( res, context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoTokenChain_B1S7A1Z3("DoTokenChain:1$7=1@3", COOKIE1_, COOKIE2_, func_gen_DoTokenChain_B1S7A1Z3);


static refalrts::FnResult func_gen_DoTokenChain_B1S9A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 46 elems
  refalrts::Iter context[46];
  refalrts::zeros( context, 46 );
  // </0 & DoTokenChain:1$9=1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoTokenChain:1$9=1@2/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 t.new4/17 (/21 e.new5/19 )/22 (/25 e.new6/23 )/26 e.new7/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  context[18] = refalrts::tvar_left( context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  // closed e.new5 as range 19
  // closed e.new6 as range 23
  // closed e.new7 as range 2
  do {
    // </0 & DoTokenChain:1$9=1@2/4 (/7 e.Collected0/27 )/8 (/11 e.OptionalFuncName/29 )/12 (/15 e.BracketTerms/31 )/16 t.Pos/17 (/21 e.Value/33 )/22 (/25 e.Tokens0/35 )/26 t.ErrorList$a/39 >/1
    context[27] = context[5];
    context[28] = context[6];
    context[29] = context[9];
    context[30] = context[10];
    context[31] = context[13];
    context[32] = context[14];
    context[33] = context[19];
    context[34] = context[20];
    context[35] = context[23];
    context[36] = context[24];
    context[37] = context[2];
    context[38] = context[3];
    // closed e.Collected0 as range 27
    // closed e.OptionalFuncName as range 29
    // closed e.BracketTerms as range 31
    // closed e.Value as range 33
    // closed e.Tokens0 as range 35
    context[40] = refalrts::tvar_left( context[39], context[37], context[38] );
    if( ! context[40] )
      continue;
    if( ! refalrts::empty_seq( context[37], context[38] ) )
      continue;
    //DEBUG: t.Pos: 17
    //DEBUG: e.Collected0: 27
    //DEBUG: e.OptionalFuncName: 29
    //DEBUG: e.BracketTerms: 31
    //DEBUG: e.Value: 33
    //DEBUG: e.Tokens0: 35
    //DEBUG: t.ErrorList$a: 39

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain:1$9=2@4/4 AsIs: (/7 AsIs: e.Collected0/27 AsIs: )/8 AsIs: (/11 AsIs: e.OptionalFuncName/29 AsIs: )/12 AsIs: (/15 AsIs: e.BracketTerms/31 AsIs: )/16 AsIs: t.Pos/17 AsIs: (/21 AsIs: e.Value/33 AsIs: )/22 HalfReuse: </25 } & DoTokenChain/41 # Classic/42 Tile{ HalfReuse: # Pattern/26 AsIs: t.ErrorList$a/39 } (/43 )/44 Tile{ AsIs: e.Tokens0/35 } >/45 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[41], functions[efunc_DoTokenChain]);
    refalrts::alloc_ident(vm, context[42], identifiers[ident_Classic]);
    refalrts::alloc_open_bracket(vm, context[43]);
    refalrts::alloc_close_bracket(vm, context[44]);
    refalrts::alloc_close_call(vm, context[45]);
    refalrts::update_name(context[4], functions[efunc_gen_DoTokenChain_B1S9A2Z4]);
    refalrts::reinit_open_call(context[25]);
    refalrts::reinit_ident(context[26], identifiers[ident_Pattern]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[45] );
    refalrts::push_stack( vm, context[25] );
    refalrts::link_brackets( context[43], context[44] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[45] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_evar( res, context[26], context[40] );
    res = refalrts::splice_evar( res, context[41], context[42] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoTokenChain:1$9=1@2/4 (/7 e.Collected0/5 )/8 (/11 e.OptionalFuncName/9 )/12 (/15 e.BracketTerms/13 )/16 t.Pos/17 (/21 e.Value/19 )/22 (/25 e.Tokens0/23 )/26 e.dyn/2 >/1
  // closed e.Collected0 as range 5
  // closed e.OptionalFuncName as range 9
  // closed e.BracketTerms as range 13
  // closed e.Value as range 19
  // closed e.Tokens0 as range 23
  // closed e.dyn as range 2
  //DEBUG: t.Pos: 17
  //DEBUG: e.Collected0: 5
  //DEBUG: e.OptionalFuncName: 9
  //DEBUG: e.BracketTerms: 13
  //DEBUG: e.Value: 19
  //DEBUG: e.Tokens0: 23
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </15 } & DoTokenChain:1$9=1@0/27 Tile{ HalfReuse: # Classic/0 HalfReuse: # Pattern/4 AsIs: (/7 AsIs: e.Collected0/5 HalfReuse: (/8 HalfReuse: # Brackets/11 } Tile{ AsIs: e.OptionalFuncName/9 } Tile{ AsIs: e.BracketTerms/13 } Tile{ AsIs: )/12 } Tile{ AsIs: )/16 AsIs: t.Pos/17 AsIs: (/21 AsIs: e.Value/19 AsIs: )/22 AsIs: (/25 AsIs: e.Tokens0/23 AsIs: )/26 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[27], functions[efunc_gen_DoTokenChain_B1S9A1Z0]);
  refalrts::reinit_open_call(context[15]);
  refalrts::reinit_ident(context[0], identifiers[ident_Classic]);
  refalrts::reinit_ident(context[4], identifiers[ident_Pattern]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::reinit_ident(context[11], identifiers[ident_Brackets]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[15] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[7], context[16] );
  refalrts::link_brackets( context[8], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[16];
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[0], context[11] );
  res = refalrts::splice_elem( res, context[27] );
  res = refalrts::splice_elem( res, context[15] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoTokenChain_B1S9A1Z2("DoTokenChain:1$9=1@2", COOKIE1_, COOKIE2_, func_gen_DoTokenChain_B1S9A1Z2);


static refalrts::FnResult func_gen_DoTokenChain_B1S9A2Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 79 elems
  refalrts::Iter context[79];
  refalrts::zeros( context, 79 );
  // </0 & DoTokenChain:1$9=2@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoTokenChain:1$9=2@3/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 t.new4/17 (/21 e.new5/19 )/22 e.new6/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  context[18] = refalrts::tvar_left( context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.new5 as range 19
  // closed e.new6 as range 2
  do {
    // </0 & DoTokenChain:1$9=2@3/4 (/7 e.new11/23 )/8 (/11 e.new12/25 )/12 (/15 e.new13/27 )/16 t.new7/17 (/21 e.new14/29 )/22 t.new8/33 (/37 e.new9/35 )/38 e.new10/31 >/1
    context[23] = context[5];
    context[24] = context[6];
    context[25] = context[9];
    context[26] = context[10];
    context[27] = context[13];
    context[28] = context[14];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[2];
    context[32] = context[3];
    // closed e.new11 as range 23
    // closed e.new12 as range 25
    // closed e.new13 as range 27
    // closed e.new14 as range 29
    context[34] = refalrts::tvar_left( context[33], context[31], context[32] );
    if( ! context[34] )
      continue;
    context[35] = 0;
    context[36] = 0;
    context[37] = refalrts::brackets_left( context[35], context[36], context[31], context[32] );
    if( ! context[37] )
      continue;
    refalrts::bracket_pointers(context[37], context[38]);
    // closed e.new9 as range 35
    // closed e.new10 as range 31
    do {
      // </0 & DoTokenChain:1$9=2@3/4 (/7 e.new22/39 )/8 (/11 e.new23/41 )/12 (/15 e.new24/43 )/16 t.new15/17 (/21 e.new25/45 )/22 t.new16/33 (/37 e.new21/47 )/38 (/53 s.new17/55 t.new18/56 e.new19/51 )/54 e.new20/49 >/1
      context[39] = context[23];
      context[40] = context[24];
      context[41] = context[25];
      context[42] = context[26];
      context[43] = context[27];
      context[44] = context[28];
      context[45] = context[29];
      context[46] = context[30];
      context[47] = context[35];
      context[48] = context[36];
      context[49] = context[31];
      context[50] = context[32];
      context[51] = 0;
      context[52] = 0;
      context[53] = refalrts::brackets_left( context[51], context[52], context[49], context[50] );
      if( ! context[53] )
        continue;
      refalrts::bracket_pointers(context[53], context[54]);
      // closed e.new22 as range 39
      // closed e.new23 as range 41
      // closed e.new24 as range 43
      // closed e.new25 as range 45
      // closed e.new21 as range 47
      // closed e.new20 as range 49
      if( ! refalrts::svar_left( context[55], context[51], context[52] ) )
        continue;
      context[57] = refalrts::tvar_left( context[56], context[51], context[52] );
      if( ! context[57] )
        continue;
      // closed e.new19 as range 51
      do {
        // </0 & DoTokenChain:1$9=2@3/4 (/7 e.Collected0/58 )/8 (/11 e.OptionalFuncName/60 )/12 (/15 e.BracketTerms0/62 )/16 t.Pos/17 (/21 e.Value/64 )/22 t.ErrorList$b/33 (/37 e.BracketTerms/66 )/38 (/53 # TkCloseADT/55 t.1/56 )/54 e./68 >/1
        context[58] = context[39];
        context[59] = context[40];
        context[60] = context[41];
        context[61] = context[42];
        context[62] = context[43];
        context[63] = context[44];
        context[64] = context[45];
        context[65] = context[46];
        context[66] = context[47];
        context[67] = context[48];
        context[68] = context[49];
        context[69] = context[50];
        if( ! refalrts::ident_term( identifiers[ident_TkCloseADT], context[55] ) )
          continue;
        if( ! refalrts::empty_seq( context[51], context[52] ) )
          continue;
        // closed e.Collected0 as range 58
        // closed e.OptionalFuncName as range 60
        // closed e.BracketTerms0 as range 62
        // closed e.Value as range 64
        // closed e.BracketTerms as range 66
        // closed e. as range 68
        //DEBUG: t.Pos: 17
        //DEBUG: t.ErrorList$b: 33
        //DEBUG: t.1: 56
        //DEBUG: e.Collected0: 58
        //DEBUG: e.OptionalFuncName: 60
        //DEBUG: e.BracketTerms0: 62
        //DEBUG: e.Value: 64
        //DEBUG: e.BracketTerms: 66
        //DEBUG: e.: 68

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} (/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.1/56 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 HalfReuse: # Extended/7 } Tile{ HalfReuse: # Pattern/8 } Tile{ AsIs: t.ErrorList$b/33 AsIs: (/37 } Tile{ AsIs: e.Collected0/58 } Tile{ AsIs: (/15 } Tile{ Reuse: # Brackets/55 } Tile{ AsIs: e.OptionalFuncName/60 } Tile{ AsIs: e.BracketTerms0/62 } Tile{ AsIs: )/38 AsIs: (/53 } Tile{ HalfReuse: # ADT-Brackets/16 AsIs: t.Pos/17 AsIs: (/21 AsIs: e.Value/64 AsIs: )/22 } Tile{ AsIs: e.BracketTerms/66 } Tile{ AsIs: )/12 } Tile{ AsIs: )/54 AsIs: e./68 AsIs: >/1 ]] }
        refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
        refalrts::reinit_ident(context[7], identifiers[ident_Extended]);
        refalrts::reinit_ident(context[8], identifiers[ident_Pattern]);
        refalrts::update_ident(context[55], identifiers[ident_Brackets]);
        refalrts::reinit_ident(context[16], identifiers[ident_ADTm_Brackets]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[37], context[54] );
        refalrts::link_brackets( context[53], context[12] );
        refalrts::link_brackets( context[21], context[22] );
        refalrts::link_brackets( context[15], context[38] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[54];
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[66], context[67] );
        res = refalrts::splice_evar( res, context[16], context[22] );
        res = refalrts::splice_evar( res, context[38], context[53] );
        res = refalrts::splice_evar( res, context[62], context[63] );
        res = refalrts::splice_evar( res, context[60], context[61] );
        res = refalrts::splice_elem( res, context[55] );
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_evar( res, context[58], context[59] );
        res = refalrts::splice_evar( res, context[33], context[37] );
        res = refalrts::splice_elem( res, context[8] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoTokenChain:1$9=2@3/4 (/7 e.Collected0/58 )/8 (/11 e.OptionalFuncName/60 )/12 (/15 e.BracketTerms0/62 )/16 t.Pos/17 (/21 e.Value/64 )/22 t.ErrorList$b/33 (/37 e.BracketTerms/66 )/38 (/53 s.Type/55 t.1/56 e.2/68 )/54 e./70 >/1
      context[58] = context[39];
      context[59] = context[40];
      context[60] = context[41];
      context[61] = context[42];
      context[62] = context[43];
      context[63] = context[44];
      context[64] = context[45];
      context[65] = context[46];
      context[66] = context[47];
      context[67] = context[48];
      context[68] = context[51];
      context[69] = context[52];
      context[70] = context[49];
      context[71] = context[50];
      // closed e.Collected0 as range 58
      // closed e.OptionalFuncName as range 60
      // closed e.BracketTerms0 as range 62
      // closed e.Value as range 64
      // closed e.BracketTerms as range 66
      // closed e.2 as range 68
      // closed e. as range 70
      //DEBUG: t.Pos: 17
      //DEBUG: t.ErrorList$b: 33
      //DEBUG: t.1: 56
      //DEBUG: s.Type: 55
      //DEBUG: e.Collected0: 58
      //DEBUG: e.OptionalFuncName: 60
      //DEBUG: e.BracketTerms0: 62
      //DEBUG: e.Value: 64
      //DEBUG: e.BracketTerms: 66
      //DEBUG: e.2: 68
      //DEBUG: e.: 70

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain:1$9=3@3/4 AsIs: (/7 AsIs: e.Collected0/58 AsIs: )/8 AsIs: (/11 AsIs: e.OptionalFuncName/60 AsIs: )/12 AsIs: (/15 AsIs: e.BracketTerms0/62 AsIs: )/16 AsIs: t.Pos/17 AsIs: (/21 AsIs: e.Value/64 AsIs: )/22 } Tile{ AsIs: (/37 } Tile{ AsIs: e.BracketTerms/66 } )/72 </73 & EL-AddErrorAt/74 Tile{ AsIs: t.ErrorList$b/33 } t.1/56/75"Missed \']\'"/77 Tile{ HalfReuse: >/38 AsIs: (/53 AsIs: s.Type/55 AsIs: t.1/56 AsIs: e.2/68 AsIs: )/54 AsIs: e./70 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[72]);
      refalrts::alloc_open_call(vm, context[73]);
      refalrts::alloc_name(vm, context[74], functions[efunc_ELm_AddErrorAt]);
      refalrts::copy_evar(vm, context[75], context[76], context[56], context[57]);
      refalrts::alloc_chars(vm, context[77], context[78], "Missed \']\'", 10);
      refalrts::update_name(context[4], functions[efunc_gen_DoTokenChain_B1S9A3Z3]);
      refalrts::reinit_close_call(context[38]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[53], context[54] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[73] );
      refalrts::link_brackets( context[37], context[72] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[38];
      res = refalrts::splice_evar( res, context[75], context[78] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[72], context[74] );
      res = refalrts::splice_evar( res, context[66], context[67] );
      res = refalrts::splice_elem( res, context[37] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoTokenChain:1$9=2@3/4 (/7 e.Collected0/39 )/8 (/11 e.OptionalFuncName/41 )/12 (/15 e.BracketTerms0/43 )/16 t.Pos/17 (/21 e.Value/45 )/22 t.ErrorList$b/33 (/37 e.BracketTerms/47 )/38 e.Tokens$a/49 >/1
    context[39] = context[23];
    context[40] = context[24];
    context[41] = context[25];
    context[42] = context[26];
    context[43] = context[27];
    context[44] = context[28];
    context[45] = context[29];
    context[46] = context[30];
    context[47] = context[35];
    context[48] = context[36];
    context[49] = context[31];
    context[50] = context[32];
    // closed e.Collected0 as range 39
    // closed e.OptionalFuncName as range 41
    // closed e.BracketTerms0 as range 43
    // closed e.Value as range 45
    // closed e.BracketTerms as range 47
    // closed e.Tokens$a as range 49
    //DEBUG: t.Pos: 17
    //DEBUG: t.ErrorList$b: 33
    //DEBUG: e.Collected0: 39
    //DEBUG: e.OptionalFuncName: 41
    //DEBUG: e.BracketTerms0: 43
    //DEBUG: e.Value: 45
    //DEBUG: e.BracketTerms: 47
    //DEBUG: e.Tokens$a: 49

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain:1$9=3@3/4 AsIs: (/7 AsIs: e.Collected0/39 AsIs: )/8 AsIs: (/11 AsIs: e.OptionalFuncName/41 AsIs: )/12 AsIs: (/15 AsIs: e.BracketTerms0/43 AsIs: )/16 AsIs: t.Pos/17 AsIs: (/21 AsIs: e.Value/45 AsIs: )/22 } Tile{ AsIs: (/37 AsIs: e.BracketTerms/47 AsIs: )/38 } </51 & DoTokenChain:1$9=3:1*2/52 Tile{ AsIs: t.ErrorList$b/33 } Tile{ AsIs: e.Tokens$a/49 } >/53 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[51]);
    refalrts::alloc_name(vm, context[52], functions[efunc_gen_DoTokenChain_B1S9A3B1D2]);
    refalrts::alloc_close_call(vm, context[53]);
    refalrts::update_name(context[4], functions[efunc_gen_DoTokenChain_B1S9A3Z3]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[53] );
    refalrts::push_stack( vm, context[51] );
    refalrts::link_brackets( context[37], context[38] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[53] );
    res = refalrts::splice_evar( res, context[49], context[50] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[51], context[52] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoTokenChain:1$9=2@3/4 (/7 e.Collected0/5 )/8 (/11 e.OptionalFuncName/9 )/12 (/15 e.BracketTerms0/13 )/16 t.Pos/17 (/21 e.Value/19 )/22 e.dyn/2 >/1
  // closed e.Collected0 as range 5
  // closed e.OptionalFuncName as range 9
  // closed e.BracketTerms0 as range 13
  // closed e.Value as range 19
  // closed e.dyn as range 2
  //DEBUG: t.Pos: 17
  //DEBUG: e.Collected0: 5
  //DEBUG: e.OptionalFuncName: 9
  //DEBUG: e.BracketTerms0: 13
  //DEBUG: e.Value: 19
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </15 } & DoTokenChain:1$9=2@0/23 Tile{ HalfReuse: # Extended/0 HalfReuse: # Pattern/4 AsIs: (/7 AsIs: e.Collected0/5 HalfReuse: (/8 HalfReuse: # Brackets/11 } Tile{ AsIs: e.OptionalFuncName/9 } Tile{ AsIs: e.BracketTerms0/13 } Tile{ AsIs: )/12 } Tile{ AsIs: )/16 AsIs: t.Pos/17 AsIs: (/21 AsIs: e.Value/19 AsIs: )/22 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[23], functions[efunc_gen_DoTokenChain_B1S9A2Z0]);
  refalrts::reinit_open_call(context[15]);
  refalrts::reinit_ident(context[0], identifiers[ident_Extended]);
  refalrts::reinit_ident(context[4], identifiers[ident_Pattern]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::reinit_ident(context[11], identifiers[ident_Brackets]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[15] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[7], context[16] );
  refalrts::link_brackets( context[8], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[16];
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[0], context[11] );
  res = refalrts::splice_elem( res, context[23] );
  res = refalrts::splice_elem( res, context[15] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoTokenChain_B1S9A2Z3("DoTokenChain:1$9=2@3", COOKIE1_, COOKIE2_, func_gen_DoTokenChain_B1S9A2Z3);


static refalrts::FnResult func_gen_DoTokenChain_B1S9A1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 47 elems
  refalrts::Iter context[47];
  refalrts::zeros( context, 47 );
  // </0 & DoTokenChain:1$9=1@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoTokenChain:1$9=1@3/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 t.new5/18 (/22 e.new6/20 )/23 (/26 e.new7/24 )/27 e.new8/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  context[19] = refalrts::tvar_left( context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  context[20] = 0;
  context[21] = 0;
  context[22] = refalrts::brackets_left( context[20], context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[22], context[23]);
  context[24] = 0;
  context[25] = 0;
  context[26] = refalrts::brackets_left( context[24], context[25], context[2], context[3] );
  if( ! context[26] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[26], context[27]);
  // closed e.new6 as range 20
  // closed e.new7 as range 24
  // closed e.new8 as range 2
  do {
    // </0 & DoTokenChain:1$9=1@3/4 s.Mode0/5 (/8 e.Collected0/28 )/9 (/12 e.OptionalFuncName/30 )/13 (/16 e.BracketTerms/32 )/17 t.Pos/18 (/22 e.Value/34 )/23 (/26 e.Tokens0/36 )/27 t.ErrorList$a/40 >/1
    context[28] = context[6];
    context[29] = context[7];
    context[30] = context[10];
    context[31] = context[11];
    context[32] = context[14];
    context[33] = context[15];
    context[34] = context[20];
    context[35] = context[21];
    context[36] = context[24];
    context[37] = context[25];
    context[38] = context[2];
    context[39] = context[3];
    // closed e.Collected0 as range 28
    // closed e.OptionalFuncName as range 30
    // closed e.BracketTerms as range 32
    // closed e.Value as range 34
    // closed e.Tokens0 as range 36
    context[41] = refalrts::tvar_left( context[40], context[38], context[39] );
    if( ! context[41] )
      continue;
    if( ! refalrts::empty_seq( context[38], context[39] ) )
      continue;
    //DEBUG: t.Pos: 18
    //DEBUG: s.Mode0: 5
    //DEBUG: e.Collected0: 28
    //DEBUG: e.OptionalFuncName: 30
    //DEBUG: e.BracketTerms: 32
    //DEBUG: e.Value: 34
    //DEBUG: e.Tokens0: 36
    //DEBUG: t.ErrorList$a: 40

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain:1$9=2@5/4 AsIs: s.Mode0/5 AsIs: (/8 AsIs: e.Collected0/28 AsIs: )/9 AsIs: (/12 AsIs: e.OptionalFuncName/30 AsIs: )/13 AsIs: (/16 AsIs: e.BracketTerms/32 AsIs: )/17 AsIs: t.Pos/18 AsIs: (/22 AsIs: e.Value/34 AsIs: )/23 HalfReuse: </26 } & DoTokenChain/42 s.Mode0/5/43 Tile{ HalfReuse: # Pattern/27 AsIs: t.ErrorList$a/40 } (/44 )/45 Tile{ AsIs: e.Tokens0/36 } >/46 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[42], functions[efunc_DoTokenChain]);
    refalrts::copy_stvar(vm, context[43], context[5]);
    refalrts::alloc_open_bracket(vm, context[44]);
    refalrts::alloc_close_bracket(vm, context[45]);
    refalrts::alloc_close_call(vm, context[46]);
    refalrts::update_name(context[4], functions[efunc_gen_DoTokenChain_B1S9A2Z5]);
    refalrts::reinit_open_call(context[26]);
    refalrts::reinit_ident(context[27], identifiers[ident_Pattern]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[46] );
    refalrts::push_stack( vm, context[26] );
    refalrts::link_brackets( context[44], context[45] );
    refalrts::link_brackets( context[22], context[23] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[46] );
    res = refalrts::splice_evar( res, context[36], context[37] );
    res = refalrts::splice_evar( res, context[44], context[45] );
    res = refalrts::splice_evar( res, context[27], context[41] );
    res = refalrts::splice_evar( res, context[42], context[43] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoTokenChain:1$9=1@3/4 s.Mode0/5 (/8 e.Collected0/6 )/9 (/12 e.OptionalFuncName/10 )/13 (/16 e.BracketTerms/14 )/17 t.Pos/18 (/22 e.Value/20 )/23 (/26 e.Tokens0/24 )/27 e.dyn/2 >/1
  // closed e.Collected0 as range 6
  // closed e.OptionalFuncName as range 10
  // closed e.BracketTerms as range 14
  // closed e.Value as range 20
  // closed e.Tokens0 as range 24
  // closed e.dyn as range 2
  //DEBUG: t.Pos: 18
  //DEBUG: s.Mode0: 5
  //DEBUG: e.Collected0: 6
  //DEBUG: e.OptionalFuncName: 10
  //DEBUG: e.BracketTerms: 14
  //DEBUG: e.Value: 20
  //DEBUG: e.Tokens0: 24
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain:1$9=1@0/4 AsIs: s.Mode0/5 HalfReuse: # Pattern/8 } Tile{ AsIs: (/12 } Tile{ AsIs: e.Collected0/6 } Tile{ AsIs: (/16 } Tile{ HalfReuse: # Brackets/9 } Tile{ AsIs: e.OptionalFuncName/10 } Tile{ AsIs: e.BracketTerms/14 } Tile{ AsIs: )/13 } Tile{ AsIs: )/17 AsIs: t.Pos/18 AsIs: (/22 AsIs: e.Value/20 AsIs: )/23 AsIs: (/26 AsIs: e.Tokens0/24 AsIs: )/27 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_DoTokenChain_B1S9A1Z0]);
  refalrts::reinit_ident(context[8], identifiers[ident_Pattern]);
  refalrts::reinit_ident(context[9], identifiers[ident_Brackets]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[26], context[27] );
  refalrts::link_brackets( context[22], context[23] );
  refalrts::link_brackets( context[12], context[17] );
  refalrts::link_brackets( context[16], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[17];
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_elem( res, context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoTokenChain_B1S9A1Z3("DoTokenChain:1$9=1@3", COOKIE1_, COOKIE2_, func_gen_DoTokenChain_B1S9A1Z3);


static refalrts::FnResult func_gen_DoTokenChain_B1S11A1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & DoTokenChain:1$11=1@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoTokenChain:1$11=1@3/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 2
  do {
    // </0 & DoTokenChain:1$11=1@3/4 (/7 e.Collected0/17 )/8 (/11 e.OptionalFuncName/19 )/12 (/15 e.BracketTerms/21 )/16 t.ErrorList$a/25 (/29 e.Term/27 )/30 e.Tokens$a/23 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.Collected0 as range 17
    // closed e.OptionalFuncName as range 19
    // closed e.BracketTerms as range 21
    context[26] = refalrts::tvar_left( context[25], context[23], context[24] );
    if( ! context[26] )
      continue;
    context[27] = 0;
    context[28] = 0;
    context[29] = refalrts::brackets_left( context[27], context[28], context[23], context[24] );
    if( ! context[29] )
      continue;
    refalrts::bracket_pointers(context[29], context[30]);
    // closed e.Term as range 27
    // closed e.Tokens$a as range 23
    //DEBUG: e.Collected0: 17
    //DEBUG: e.OptionalFuncName: 19
    //DEBUG: e.BracketTerms: 21
    //DEBUG: t.ErrorList$a: 25
    //DEBUG: e.Term: 27
    //DEBUG: e.Tokens$a: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 HalfReuse: # Classic/7 } Tile{ HalfReuse: # Pattern/16 AsIs: t.ErrorList$a/25 } Tile{ AsIs: (/15 } Tile{ AsIs: e.Collected0/17 } Tile{ AsIs: (/11 } Tile{ HalfReuse: # Brackets/12 } Tile{ AsIs: e.OptionalFuncName/19 } Tile{ AsIs: e.BracketTerms/21 } Tile{ HalfReuse: )/29 AsIs: e.Term/27 AsIs: )/30 AsIs: e.Tokens$a/23 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
    refalrts::reinit_ident(context[7], identifiers[ident_Classic]);
    refalrts::reinit_ident(context[16], identifiers[ident_Pattern]);
    refalrts::reinit_ident(context[12], identifiers[ident_Brackets]);
    refalrts::reinit_close_bracket(context[29]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[15], context[30] );
    refalrts::link_brackets( context[11], context[29] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[29];
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_elem( res, context[15] );
    res = refalrts::splice_evar( res, context[16], context[26] );
    refalrts::splice_to_freelist_open( vm, context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoTokenChain:1$11=1@3/4 (/7 e.Collected0/5 )/8 (/11 e.OptionalFuncName/9 )/12 (/15 e.BracketTerms/13 )/16 e.dyn/2 >/1
  // closed e.Collected0 as range 5
  // closed e.OptionalFuncName as range 9
  // closed e.BracketTerms as range 13
  // closed e.dyn as range 2
  //DEBUG: e.Collected0: 5
  //DEBUG: e.OptionalFuncName: 9
  //DEBUG: e.BracketTerms: 13
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </15 } & DoTokenChain:1$11=1@0/17 Tile{ HalfReuse: # Classic/0 HalfReuse: # Pattern/4 AsIs: (/7 AsIs: e.Collected0/5 HalfReuse: (/8 HalfReuse: # Brackets/11 } Tile{ AsIs: e.OptionalFuncName/9 } Tile{ AsIs: e.BracketTerms/13 } Tile{ AsIs: )/12 } Tile{ AsIs: )/16 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[17], functions[efunc_gen_DoTokenChain_B1S11A1Z0]);
  refalrts::reinit_open_call(context[15]);
  refalrts::reinit_ident(context[0], identifiers[ident_Classic]);
  refalrts::reinit_ident(context[4], identifiers[ident_Pattern]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::reinit_ident(context[11], identifiers[ident_Brackets]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[15] );
  refalrts::link_brackets( context[7], context[16] );
  refalrts::link_brackets( context[8], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[16];
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[0], context[11] );
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_elem( res, context[15] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoTokenChain_B1S11A1Z3("DoTokenChain:1$11=1@3", COOKIE1_, COOKIE2_, func_gen_DoTokenChain_B1S11A1Z3);


static refalrts::FnResult func_gen_DoTokenChain_B1S11A1Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & DoTokenChain:1$11=1@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoTokenChain:1$11=1@4/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 2
  do {
    // </0 & DoTokenChain:1$11=1@4/4 (/7 e.Collected0/17 )/8 (/11 e.OptionalFuncName/19 )/12 (/15 e.BracketTerms/21 )/16 t.ErrorList$a/25 (/29 e.Term/27 )/30 e.Tokens$a/23 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.Collected0 as range 17
    // closed e.OptionalFuncName as range 19
    // closed e.BracketTerms as range 21
    context[26] = refalrts::tvar_left( context[25], context[23], context[24] );
    if( ! context[26] )
      continue;
    context[27] = 0;
    context[28] = 0;
    context[29] = refalrts::brackets_left( context[27], context[28], context[23], context[24] );
    if( ! context[29] )
      continue;
    refalrts::bracket_pointers(context[29], context[30]);
    // closed e.Term as range 27
    // closed e.Tokens$a as range 23
    //DEBUG: e.Collected0: 17
    //DEBUG: e.OptionalFuncName: 19
    //DEBUG: e.BracketTerms: 21
    //DEBUG: t.ErrorList$a: 25
    //DEBUG: e.Term: 27
    //DEBUG: e.Tokens$a: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 HalfReuse: # Extended/7 } Tile{ HalfReuse: # Pattern/16 AsIs: t.ErrorList$a/25 } Tile{ AsIs: (/15 } Tile{ AsIs: e.Collected0/17 } Tile{ AsIs: (/11 } Tile{ HalfReuse: # Brackets/12 } Tile{ AsIs: e.OptionalFuncName/19 } Tile{ AsIs: e.BracketTerms/21 } Tile{ HalfReuse: )/29 AsIs: e.Term/27 AsIs: )/30 AsIs: e.Tokens$a/23 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
    refalrts::reinit_ident(context[7], identifiers[ident_Extended]);
    refalrts::reinit_ident(context[16], identifiers[ident_Pattern]);
    refalrts::reinit_ident(context[12], identifiers[ident_Brackets]);
    refalrts::reinit_close_bracket(context[29]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[15], context[30] );
    refalrts::link_brackets( context[11], context[29] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[29];
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_elem( res, context[15] );
    res = refalrts::splice_evar( res, context[16], context[26] );
    refalrts::splice_to_freelist_open( vm, context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoTokenChain:1$11=1@4/4 (/7 e.Collected0/5 )/8 (/11 e.OptionalFuncName/9 )/12 (/15 e.BracketTerms/13 )/16 e.dyn/2 >/1
  // closed e.Collected0 as range 5
  // closed e.OptionalFuncName as range 9
  // closed e.BracketTerms as range 13
  // closed e.dyn as range 2
  //DEBUG: e.Collected0: 5
  //DEBUG: e.OptionalFuncName: 9
  //DEBUG: e.BracketTerms: 13
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </15 } & DoTokenChain:1$11=1@0/17 Tile{ HalfReuse: # Extended/0 HalfReuse: # Pattern/4 AsIs: (/7 AsIs: e.Collected0/5 HalfReuse: (/8 HalfReuse: # Brackets/11 } Tile{ AsIs: e.OptionalFuncName/9 } Tile{ AsIs: e.BracketTerms/13 } Tile{ AsIs: )/12 } Tile{ AsIs: )/16 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[17], functions[efunc_gen_DoTokenChain_B1S11A1Z0]);
  refalrts::reinit_open_call(context[15]);
  refalrts::reinit_ident(context[0], identifiers[ident_Extended]);
  refalrts::reinit_ident(context[4], identifiers[ident_Pattern]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::reinit_ident(context[11], identifiers[ident_Brackets]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[15] );
  refalrts::link_brackets( context[7], context[16] );
  refalrts::link_brackets( context[8], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[16];
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[0], context[11] );
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_elem( res, context[15] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoTokenChain_B1S11A1Z4("DoTokenChain:1$11=1@4", COOKIE1_, COOKIE2_, func_gen_DoTokenChain_B1S11A1Z4);


static refalrts::FnResult func_gen_DoTokenChain_B1S11A1Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 32 elems
  refalrts::Iter context[32];
  refalrts::zeros( context, 32 );
  // </0 & DoTokenChain:1$11=1@5/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoTokenChain:1$11=1@5/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 e.new5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 2
  do {
    // </0 & DoTokenChain:1$11=1@5/4 s.Mode0/5 (/8 e.Collected0/18 )/9 (/12 e.OptionalFuncName/20 )/13 (/16 e.BracketTerms/22 )/17 t.ErrorList$a/26 (/30 e.Term/28 )/31 e.Tokens$a/24 >/1
    context[18] = context[6];
    context[19] = context[7];
    context[20] = context[10];
    context[21] = context[11];
    context[22] = context[14];
    context[23] = context[15];
    context[24] = context[2];
    context[25] = context[3];
    // closed e.Collected0 as range 18
    // closed e.OptionalFuncName as range 20
    // closed e.BracketTerms as range 22
    context[27] = refalrts::tvar_left( context[26], context[24], context[25] );
    if( ! context[27] )
      continue;
    context[28] = 0;
    context[29] = 0;
    context[30] = refalrts::brackets_left( context[28], context[29], context[24], context[25] );
    if( ! context[30] )
      continue;
    refalrts::bracket_pointers(context[30], context[31]);
    // closed e.Term as range 28
    // closed e.Tokens$a as range 24
    //DEBUG: s.Mode0: 5
    //DEBUG: e.Collected0: 18
    //DEBUG: e.OptionalFuncName: 20
    //DEBUG: e.BracketTerms: 22
    //DEBUG: t.ErrorList$a: 26
    //DEBUG: e.Term: 28
    //DEBUG: e.Tokens$a: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} )/9 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/17 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 AsIs: s.Mode0/5 HalfReuse: # Pattern/8 } Tile{ AsIs: t.ErrorList$a/26 } Tile{ AsIs: (/12 } Tile{ AsIs: e.Collected0/18 } Tile{ AsIs: (/16 } Tile{ HalfReuse: # Brackets/13 } Tile{ AsIs: e.OptionalFuncName/20 } Tile{ AsIs: e.BracketTerms/22 } Tile{ HalfReuse: )/30 AsIs: e.Term/28 AsIs: )/31 AsIs: e.Tokens$a/24 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
    refalrts::reinit_ident(context[8], identifiers[ident_Pattern]);
    refalrts::reinit_ident(context[13], identifiers[ident_Brackets]);
    refalrts::reinit_close_bracket(context[30]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[12], context[31] );
    refalrts::link_brackets( context[16], context[30] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[30];
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    refalrts::splice_to_freelist_open( vm, context[8], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoTokenChain:1$11=1@5/4 s.Mode0/5 (/8 e.Collected0/6 )/9 (/12 e.OptionalFuncName/10 )/13 (/16 e.BracketTerms/14 )/17 e.dyn/2 >/1
  // closed e.Collected0 as range 6
  // closed e.OptionalFuncName as range 10
  // closed e.BracketTerms as range 14
  // closed e.dyn as range 2
  //DEBUG: s.Mode0: 5
  //DEBUG: e.Collected0: 6
  //DEBUG: e.OptionalFuncName: 10
  //DEBUG: e.BracketTerms: 14
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain:1$11=1@0/4 AsIs: s.Mode0/5 HalfReuse: # Pattern/8 } Tile{ AsIs: (/12 } Tile{ AsIs: e.Collected0/6 } Tile{ AsIs: (/16 } Tile{ HalfReuse: # Brackets/9 } Tile{ AsIs: e.OptionalFuncName/10 } Tile{ AsIs: e.BracketTerms/14 } Tile{ AsIs: )/13 } Tile{ AsIs: )/17 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_DoTokenChain_B1S11A1Z0]);
  refalrts::reinit_ident(context[8], identifiers[ident_Pattern]);
  refalrts::reinit_ident(context[9], identifiers[ident_Brackets]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[12], context[17] );
  refalrts::link_brackets( context[16], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[17];
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_elem( res, context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoTokenChain_B1S11A1Z5("DoTokenChain:1$11=1@5", COOKIE1_, COOKIE2_, func_gen_DoTokenChain_B1S11A1Z5);


static refalrts::FnResult func_gen_DoTokenChain_B1D11Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 85 elems
  refalrts::Iter context[85];
  refalrts::zeros( context, 85 );
  // </0 & DoTokenChain:1*11@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoTokenChain:1*11@1/4 s.new1/5 t.new2/6 (/10 e.new3/8 )/11 (/14 e.new4/12 )/15 (/18 e.new5/16 )/19 (/22 e.new6/20 )/23 e.new7/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = refalrts::tvar_left( context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  context[8] = 0;
  context[9] = 0;
  context[10] = refalrts::brackets_left( context[8], context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[10], context[11]);
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  context[16] = 0;
  context[17] = 0;
  context[18] = refalrts::brackets_left( context[16], context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[18], context[19]);
  context[20] = 0;
  context[21] = 0;
  context[22] = refalrts::brackets_left( context[20], context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[22], context[23]);
  // closed e.new3 as range 8
  // closed e.new4 as range 12
  // closed e.new5 as range 16
  // closed e.new6 as range 20
  // closed e.new7 as range 2
  do {
    // </0 & DoTokenChain:1*11@1/4 s.new8/5 t.new9/6 (/10 e.new11/24 )/11 (/14 e.new12/26 )/15 (/18 e.new13/28 )/19 (/22 e.new14/30 )/23 t.new10/34 >/1
    context[24] = context[8];
    context[25] = context[9];
    context[26] = context[12];
    context[27] = context[13];
    context[28] = context[16];
    context[29] = context[17];
    context[30] = context[20];
    context[31] = context[21];
    context[32] = context[2];
    context[33] = context[3];
    // closed e.new11 as range 24
    // closed e.new12 as range 26
    // closed e.new13 as range 28
    // closed e.new14 as range 30
    context[35] = refalrts::tvar_left( context[34], context[32], context[33] );
    if( ! context[35] )
      continue;
    if( ! refalrts::empty_seq( context[32], context[33] ) )
      continue;
    do {
      // </0 & DoTokenChain:1*11@1/4 s.new15/5 t.new16/6 (/10 e.new20/36 )/11 (/14 e.new21/38 )/15 (/18 e.new22/40 )/19 (/22 e.new23/42 )/23 (/34 s.new17/46 t.new18/47 e.new19/44 )/35 >/1
      context[36] = context[24];
      context[37] = context[25];
      context[38] = context[26];
      context[39] = context[27];
      context[40] = context[28];
      context[41] = context[29];
      context[42] = context[30];
      context[43] = context[31];
      context[44] = 0;
      context[45] = 0;
      if( ! refalrts::brackets_term( context[44], context[45], context[34] ) )
        continue;
      // closed e.new20 as range 36
      // closed e.new21 as range 38
      // closed e.new22 as range 40
      // closed e.new23 as range 42
      if( ! refalrts::svar_left( context[46], context[44], context[45] ) )
        continue;
      context[48] = refalrts::tvar_left( context[47], context[44], context[45] );
      if( ! context[48] )
        continue;
      // closed e.new19 as range 44
      do {
        // </0 & DoTokenChain:1*11@1/4 s.new24/5 t.new25/6 (/10 e.new28/49 )/11 (/14 e.new29/51 )/15 (/18 e.new30/53 )/19 (/22 e.new31/55 )/23 (/34 s.new26/46 t.new27/47 )/35 >/1
        context[49] = context[36];
        context[50] = context[37];
        context[51] = context[38];
        context[52] = context[39];
        context[53] = context[40];
        context[54] = context[41];
        context[55] = context[42];
        context[56] = context[43];
        if( ! refalrts::empty_seq( context[44], context[45] ) )
          continue;
        // closed e.new28 as range 49
        // closed e.new29 as range 51
        // closed e.new30 as range 53
        // closed e.new31 as range 55
        do {
          // </0 & DoTokenChain:1*11@1/4 s.Mode0/5 t.ErrorList$b/6 (/10 e.Collected0/57 )/11 (/14 e.OptionalFuncName/59 )/15 (/18 e.BracketTerms/61 )/19 (/22 e.Tokens0/63 )/23 (/34 # TkOpenBlock/46 t.Pos/47 )/35 >/1
          context[57] = context[49];
          context[58] = context[50];
          context[59] = context[51];
          context[60] = context[52];
          context[61] = context[53];
          context[62] = context[54];
          context[63] = context[55];
          context[64] = context[56];
          if( ! refalrts::ident_term( identifiers[ident_TkOpenBlock], context[46] ) )
            continue;
          // closed e.Collected0 as range 57
          // closed e.OptionalFuncName as range 59
          // closed e.BracketTerms as range 61
          // closed e.Tokens0 as range 63
          //DEBUG: t.ErrorList$b: 6
          //DEBUG: t.Pos: 47
          //DEBUG: s.Mode0: 5
          //DEBUG: e.Collected0: 57
          //DEBUG: e.OptionalFuncName: 59
          //DEBUG: e.BracketTerms: 61
          //DEBUG: e.Tokens0: 63
          //5: s.Mode0
          //6: t.ErrorList$b
          //47: t.Pos
          //57: e.Collected0
          //59: e.OptionalFuncName
          //61: e.BracketTerms
          //63: e.Tokens0

          refalrts::reset_allocator(vm);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::alloc_open_call(vm, context[65]);
          refalrts::alloc_name(vm, context[67], functions[efunc_gen_DoTokenChain_B1D11Z1S12C1]);
          refalrts::alloc_ident(vm, context[68], identifiers[ident_Pattern]);
          refalrts::alloc_close_call(vm, context[66]);
          refalrts::push_stack( vm, context[66] );
          refalrts::push_stack( vm, context[65] );
          res = refalrts::splice_elem( res, context[66] );
          res = refalrts::splice_elem( res, context[68] );
          res = refalrts::splice_elem( res, context[67] );
          res = refalrts::splice_elem( res, context[65] );
          refalrts::use( res );
          refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
          if (rec_res != refalrts::cSuccess)
            return rec_res;
          refalrts::this_is_generated_function(vm);
          do {
            // </65 & DoTokenChain:1*11@1$12?1/69 # Result/70 >/66
            context[67] = 0;
            context[68] = 0;
            context[69] = refalrts::call_left( context[67], context[68], context[65], context[66] );
            context[70] = refalrts::ident_left( identifiers[ident_Result], context[67], context[68] );
            if( ! context[70] )
              continue;
            if( ! refalrts::empty_seq( context[67], context[68] ) )
              continue;
            //DEBUG: t.ErrorList$b: 6
            //DEBUG: t.Pos: 47
            //DEBUG: s.Mode0: 5
            //DEBUG: e.Collected0: 57
            //DEBUG: e.OptionalFuncName: 59
            //DEBUG: e.BracketTerms: 61
            //DEBUG: e.Tokens0: 63

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/35 </65 & DoTokenChain:1*11@1$12?1/69 {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain:1$12=2@1/4 AsIs: s.Mode0/5 } Tile{ AsIs: (/10 AsIs: e.Collected0/57 AsIs: )/11 AsIs: (/14 AsIs: e.OptionalFuncName/59 AsIs: )/15 AsIs: (/18 AsIs: e.BracketTerms/61 AsIs: )/19 } Tile{ AsIs: t.Pos/47 } Tile{ AsIs: (/22 AsIs: e.Tokens0/63 AsIs: )/23 HalfReuse: </34 HalfReuse: & ClassicError@3/46 } Tile{ AsIs: t.ErrorList$b/6 } Tile{ HalfReuse: s.Mode05 /70 } t.Pos/47/71 Tile{ AsIs: >/66 AsIs: >/1 ]] }
            refalrts::copy_evar(vm, context[71], context[72], context[47], context[48]);
            refalrts::update_name(context[4], functions[efunc_gen_DoTokenChain_B1S12A2Z1]);
            refalrts::reinit_open_call(context[34]);
            refalrts::reinit_name(context[46], functions[efunc_gen_ClassicError_Z3]);
            refalrts::reinit_svar( context[70], context[5] );
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[66] );
            refalrts::push_stack( vm, context[34] );
            refalrts::link_brackets( context[22], context[23] );
            refalrts::link_brackets( context[18], context[19] );
            refalrts::link_brackets( context[14], context[15] );
            refalrts::link_brackets( context[10], context[11] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[66];
            res = refalrts::splice_evar( res, context[71], context[72] );
            res = refalrts::splice_elem( res, context[70] );
            res = refalrts::splice_evar( res, context[6], context[7] );
            res = refalrts::splice_evar( res, context[22], context[46] );
            res = refalrts::splice_evar( res, context[47], context[48] );
            res = refalrts::splice_evar( res, context[10], context[19] );
            refalrts::splice_to_freelist_open( vm, context[5], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          refalrts::splice_to_freelist(vm, context[65], context[66]);
          continue;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoTokenChain:1*11@1/4 s.new32/5 t.new33/6 (/10 e.new35/57 )/11 (/14 e.new36/59 )/15 (/18 e.new37/61 )/19 (/22 e.new38/63 )/23 (/34 # TkRedefinition/46 t.new34/47 )/35 >/1
          context[57] = context[49];
          context[58] = context[50];
          context[59] = context[51];
          context[60] = context[52];
          context[61] = context[53];
          context[62] = context[54];
          context[63] = context[55];
          context[64] = context[56];
          if( ! refalrts::ident_term( identifiers[ident_TkRedefinition], context[46] ) )
            continue;
          // closed e.new35 as range 57
          // closed e.new36 as range 59
          // closed e.new37 as range 61
          // closed e.new38 as range 63
          do {
            // </0 & DoTokenChain:1*11@1/4 # Classic/5 t.ErrorList$b/6 (/10 e.Collected0/65 )/11 (/14 e.OptionalFuncName/67 )/15 (/18 e.BracketTerms/69 )/19 (/22 e.Tokens0/71 )/23 (/34 # TkRedefinition/46 t.Pos/47 )/35 >/1
            context[65] = context[57];
            context[66] = context[58];
            context[67] = context[59];
            context[68] = context[60];
            context[69] = context[61];
            context[70] = context[62];
            context[71] = context[63];
            context[72] = context[64];
            if( ! refalrts::ident_term( identifiers[ident_Classic], context[5] ) )
              continue;
            // closed e.Collected0 as range 65
            // closed e.OptionalFuncName as range 67
            // closed e.BracketTerms as range 69
            // closed e.Tokens0 as range 71
            //DEBUG: t.ErrorList$b: 6
            //DEBUG: t.Pos: 47
            //DEBUG: e.Collected0: 65
            //DEBUG: e.OptionalFuncName: 67
            //DEBUG: e.BracketTerms: 69
            //DEBUG: e.Tokens0: 71

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 AsIs: # Classic/5 } # Pattern/73 Tile{ HalfReuse: </15 HalfReuse: & DoTokenChain-AddRedefinition/18 } Tile{ HalfReuse: # Pattern/19 HalfReuse: </22 } Tile{ HalfReuse: & EL-AddErrorAt/23 } Tile{ AsIs: t.ErrorList$b/6 } t.Pos/47/74"Variable redefinition is available in the extended mode"/76 >/78 Tile{ AsIs: (/10 AsIs: e.Collected0/65 HalfReuse: (/11 HalfReuse: # Brackets/14 } Tile{ AsIs: e.OptionalFuncName/67 } Tile{ AsIs: e.BracketTerms/69 } Tile{ HalfReuse: )/34 HalfReuse: )/46 AsIs: t.Pos/47 HalfReuse: >/35 } Tile{ AsIs: e.Tokens0/71 } Tile{ AsIs: >/1 ]] }
            refalrts::alloc_ident(vm, context[73], identifiers[ident_Pattern]);
            refalrts::copy_evar(vm, context[74], context[75], context[47], context[48]);
            refalrts::alloc_chars(vm, context[76], context[77], "Variable redefinition is available in the extended mode", 55);
            refalrts::alloc_close_call(vm, context[78]);
            refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
            refalrts::reinit_open_call(context[15]);
            refalrts::reinit_name(context[18], functions[efunc_DoTokenChainm_AddRedefinition]);
            refalrts::reinit_ident(context[19], identifiers[ident_Pattern]);
            refalrts::reinit_open_call(context[22]);
            refalrts::reinit_name(context[23], functions[efunc_ELm_AddErrorAt]);
            refalrts::reinit_open_bracket(context[11]);
            refalrts::reinit_ident(context[14], identifiers[ident_Brackets]);
            refalrts::reinit_close_bracket(context[34]);
            refalrts::reinit_close_bracket(context[46]);
            refalrts::reinit_close_call(context[35]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[35] );
            refalrts::push_stack( vm, context[15] );
            refalrts::link_brackets( context[10], context[46] );
            refalrts::link_brackets( context[11], context[34] );
            refalrts::push_stack( vm, context[78] );
            refalrts::push_stack( vm, context[22] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[71], context[72] );
            res = refalrts::splice_evar( res, context[34], context[35] );
            res = refalrts::splice_evar( res, context[69], context[70] );
            res = refalrts::splice_evar( res, context[67], context[68] );
            res = refalrts::splice_evar( res, context[10], context[14] );
            res = refalrts::splice_evar( res, context[74], context[78] );
            res = refalrts::splice_evar( res, context[6], context[7] );
            res = refalrts::splice_elem( res, context[23] );
            res = refalrts::splice_evar( res, context[19], context[22] );
            res = refalrts::splice_evar( res, context[15], context[18] );
            res = refalrts::splice_elem( res, context[73] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & DoTokenChain:1*11@1/4 # Extended/5 t.ErrorList$b/6 (/10 e.Collected0/65 )/11 (/14 e.OptionalFuncName/67 )/15 (/18 e.BracketTerms/69 )/19 (/22 e.Tokens0/71 )/23 (/34 # TkRedefinition/46 t.Pos/47 )/35 >/1
            context[65] = context[57];
            context[66] = context[58];
            context[67] = context[59];
            context[68] = context[60];
            context[69] = context[61];
            context[70] = context[62];
            context[71] = context[63];
            context[72] = context[64];
            if( ! refalrts::ident_term( identifiers[ident_Extended], context[5] ) )
              continue;
            // closed e.Collected0 as range 65
            // closed e.OptionalFuncName as range 67
            // closed e.BracketTerms as range 69
            // closed e.Tokens0 as range 71
            //DEBUG: t.ErrorList$b: 6
            //DEBUG: t.Pos: 47
            //DEBUG: e.Collected0: 65
            //DEBUG: e.OptionalFuncName: 67
            //DEBUG: e.BracketTerms: 69
            //DEBUG: e.Tokens0: 71

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 AsIs: # Extended/5 } # Pattern/73 </74 & EL-AddErrorAt/75 Tile{ AsIs: t.ErrorList$b/6 } Tile{ AsIs: t.Pos/47 HalfReuse: 'T'/35 HalfReuse: 'h'/1 } 'e'/76 Tile{ HalfReuse: ' '/34 HalfReuse: 'r'/46 } Tile{ HalfReuse: 'e'/15 HalfReuse: 'd'/18 }"efinition sign expects the variable before"/77 >/79 Tile{ AsIs: (/10 AsIs: e.Collected0/65 HalfReuse: (/11 HalfReuse: # Brackets/14 } Tile{ AsIs: e.OptionalFuncName/67 } Tile{ AsIs: e.BracketTerms/69 } Tile{ AsIs: )/19 HalfReuse: )/22 AsIs: e.Tokens0/71 HalfReuse: >/23 } Tile{ ]] }
            refalrts::alloc_ident(vm, context[73], identifiers[ident_Pattern]);
            refalrts::alloc_open_call(vm, context[74]);
            refalrts::alloc_name(vm, context[75], functions[efunc_ELm_AddErrorAt]);
            refalrts::alloc_char(vm, context[76], 'e');
            refalrts::alloc_chars(vm, context[77], context[78], "efinition sign expects the variable before", 42);
            refalrts::alloc_close_call(vm, context[79]);
            refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
            refalrts::reinit_char(context[35], 'T');
            refalrts::reinit_char(context[1], 'h');
            refalrts::reinit_char(context[34], ' ');
            refalrts::reinit_char(context[46], 'r');
            refalrts::reinit_char(context[15], 'e');
            refalrts::reinit_char(context[18], 'd');
            refalrts::reinit_open_bracket(context[11]);
            refalrts::reinit_ident(context[14], identifiers[ident_Brackets]);
            refalrts::reinit_close_bracket(context[22]);
            refalrts::reinit_close_call(context[23]);
            refalrts::push_stack( vm, context[23] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[10], context[22] );
            refalrts::link_brackets( context[11], context[19] );
            refalrts::push_stack( vm, context[79] );
            refalrts::push_stack( vm, context[74] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[19], context[23] );
            res = refalrts::splice_evar( res, context[69], context[70] );
            res = refalrts::splice_evar( res, context[67], context[68] );
            res = refalrts::splice_evar( res, context[10], context[14] );
            res = refalrts::splice_evar( res, context[77], context[79] );
            res = refalrts::splice_evar( res, context[15], context[18] );
            res = refalrts::splice_evar( res, context[34], context[46] );
            res = refalrts::splice_elem( res, context[76] );
            res = refalrts::splice_evar( res, context[47], context[1] );
            res = refalrts::splice_evar( res, context[6], context[7] );
            res = refalrts::splice_evar( res, context[73], context[75] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & DoTokenChain:1*11@1/4 s.Mode0/5 t.ErrorList$b/6 (/10 e.Collected0/65 )/11 (/14 e.OptionalFuncName/67 )/15 (/18 e.BracketTerms/69 )/19 (/22 e.Tokens0/71 )/23 (/34 # TkRedefinition/46 t.Pos/47 )/35 >/1
          context[65] = context[57];
          context[66] = context[58];
          context[67] = context[59];
          context[68] = context[60];
          context[69] = context[61];
          context[70] = context[62];
          context[71] = context[63];
          context[72] = context[64];
          // closed e.Collected0 as range 65
          // closed e.OptionalFuncName as range 67
          // closed e.BracketTerms as range 69
          // closed e.Tokens0 as range 71
          //DEBUG: t.ErrorList$b: 6
          //DEBUG: t.Pos: 47
          //DEBUG: s.Mode0: 5
          //DEBUG: e.Collected0: 65
          //DEBUG: e.OptionalFuncName: 67
          //DEBUG: e.BracketTerms: 69
          //DEBUG: e.Tokens0: 71

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 AsIs: s.Mode0/5 } # Pattern/73 Tile{ HalfReuse: </15 HalfReuse: & DoTokenChain-AddRedefinition/18 } Tile{ HalfReuse: # Pattern/23 } Tile{ HalfReuse: </19 HalfReuse: & ClassicError*2/22 } Tile{ AsIs: t.ErrorList$b/6 } s.Mode0/5/74 t.Pos/47/75"Variable redefinition is available in the extended mode"/77 >/79 Tile{ AsIs: (/10 AsIs: e.Collected0/65 HalfReuse: (/11 HalfReuse: # Brackets/14 } Tile{ AsIs: e.OptionalFuncName/67 } Tile{ AsIs: e.BracketTerms/69 } Tile{ HalfReuse: )/34 HalfReuse: )/46 AsIs: t.Pos/47 HalfReuse: >/35 } Tile{ AsIs: e.Tokens0/71 } Tile{ AsIs: >/1 ]] }
          refalrts::alloc_ident(vm, context[73], identifiers[ident_Pattern]);
          refalrts::copy_stvar(vm, context[74], context[5]);
          refalrts::copy_evar(vm, context[75], context[76], context[47], context[48]);
          refalrts::alloc_chars(vm, context[77], context[78], "Variable redefinition is available in the extended mode", 55);
          refalrts::alloc_close_call(vm, context[79]);
          refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[18], functions[efunc_DoTokenChainm_AddRedefinition]);
          refalrts::reinit_ident(context[23], identifiers[ident_Pattern]);
          refalrts::reinit_open_call(context[19]);
          refalrts::reinit_name(context[22], functions[efunc_gen_ClassicError_D2]);
          refalrts::reinit_open_bracket(context[11]);
          refalrts::reinit_ident(context[14], identifiers[ident_Brackets]);
          refalrts::reinit_close_bracket(context[34]);
          refalrts::reinit_close_bracket(context[46]);
          refalrts::reinit_close_call(context[35]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[35] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[10], context[46] );
          refalrts::link_brackets( context[11], context[34] );
          refalrts::push_stack( vm, context[79] );
          refalrts::push_stack( vm, context[19] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[71], context[72] );
          res = refalrts::splice_evar( res, context[34], context[35] );
          res = refalrts::splice_evar( res, context[69], context[70] );
          res = refalrts::splice_evar( res, context[67], context[68] );
          res = refalrts::splice_evar( res, context[10], context[14] );
          res = refalrts::splice_evar( res, context[74], context[79] );
          res = refalrts::splice_evar( res, context[6], context[7] );
          res = refalrts::splice_evar( res, context[19], context[22] );
          res = refalrts::splice_elem( res, context[23] );
          res = refalrts::splice_evar( res, context[15], context[18] );
          res = refalrts::splice_elem( res, context[73] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoTokenChain:1*11@1/4 s.new32/5 t.new33/6 (/10 e.new35/57 )/11 (/14 e.new36/59 )/15 (/18 e.new37/61 )/19 (/22 e.new38/63 )/23 (/34 # TkScopeId/46 t.new34/47 )/35 >/1
        context[57] = context[49];
        context[58] = context[50];
        context[59] = context[51];
        context[60] = context[52];
        context[61] = context[53];
        context[62] = context[54];
        context[63] = context[55];
        context[64] = context[56];
        if( ! refalrts::ident_term( identifiers[ident_TkScopeId], context[46] ) )
          continue;
        // closed e.new35 as range 57
        // closed e.new36 as range 59
        // closed e.new37 as range 61
        // closed e.new38 as range 63
        do {
          // </0 & DoTokenChain:1*11@1/4 # Classic/5 t.ErrorList$b/6 (/10 e.Collected0/65 )/11 (/14 e.OptionalFuncName/67 )/15 (/18 e.BracketTerms/69 )/19 (/22 e.Tokens0/71 )/23 (/34 # TkScopeId/46 t.Pos/47 )/35 >/1
          context[65] = context[57];
          context[66] = context[58];
          context[67] = context[59];
          context[68] = context[60];
          context[69] = context[61];
          context[70] = context[62];
          context[71] = context[63];
          context[72] = context[64];
          if( ! refalrts::ident_term( identifiers[ident_Classic], context[5] ) )
            continue;
          // closed e.Collected0 as range 65
          // closed e.OptionalFuncName as range 67
          // closed e.BracketTerms as range 69
          // closed e.Tokens0 as range 71
          //DEBUG: t.ErrorList$b: 6
          //DEBUG: t.Pos: 47
          //DEBUG: e.Collected0: 65
          //DEBUG: e.OptionalFuncName: 67
          //DEBUG: e.BracketTerms: 69
          //DEBUG: e.Tokens0: 71

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 AsIs: # Classic/5 } # Pattern/73 </74 & EL-AddErrorAt/75 Tile{ AsIs: t.ErrorList$b/6 } Tile{ AsIs: t.Pos/47 HalfReuse: '$'/35 }"SCOPEID is not supported in the classic REFAL-5"/76 >/78 Tile{ AsIs: (/10 AsIs: e.Collected0/65 HalfReuse: (/11 HalfReuse: # Brackets/14 } Tile{ AsIs: e.OptionalFuncName/67 } Tile{ AsIs: e.BracketTerms/69 } Tile{ AsIs: )/23 AsIs: (/34 Reuse: # Symbol/46 } # Number/79 # Cookie1/80 Tile{ AsIs: )/19 AsIs: (/22 } # Symbol/81 # Number/82 # Cookie2/83 Tile{ AsIs: )/15 HalfReuse: )/18 } Tile{ AsIs: e.Tokens0/71 } Tile{ AsIs: >/1 ]] }
          refalrts::alloc_ident(vm, context[73], identifiers[ident_Pattern]);
          refalrts::alloc_open_call(vm, context[74]);
          refalrts::alloc_name(vm, context[75], functions[efunc_ELm_AddErrorAt]);
          refalrts::alloc_chars(vm, context[76], context[77], "SCOPEID is not supported in the classic REFAL-5", 47);
          refalrts::alloc_close_call(vm, context[78]);
          refalrts::alloc_ident(vm, context[79], identifiers[ident_Number]);
          refalrts::alloc_ident(vm, context[80], identifiers[ident_Cookie1]);
          refalrts::alloc_ident(vm, context[81], identifiers[ident_Symbol]);
          refalrts::alloc_ident(vm, context[82], identifiers[ident_Number]);
          refalrts::alloc_ident(vm, context[83], identifiers[ident_Cookie2]);
          refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
          refalrts::reinit_char(context[35], '$');
          refalrts::reinit_open_bracket(context[11]);
          refalrts::reinit_ident(context[14], identifiers[ident_Brackets]);
          refalrts::update_ident(context[46], identifiers[ident_Symbol]);
          refalrts::reinit_close_bracket(context[18]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[10], context[18] );
          refalrts::link_brackets( context[22], context[15] );
          refalrts::link_brackets( context[34], context[19] );
          refalrts::link_brackets( context[11], context[23] );
          refalrts::push_stack( vm, context[78] );
          refalrts::push_stack( vm, context[74] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[71], context[72] );
          res = refalrts::splice_evar( res, context[15], context[18] );
          res = refalrts::splice_evar( res, context[81], context[83] );
          res = refalrts::splice_evar( res, context[19], context[22] );
          res = refalrts::splice_evar( res, context[79], context[80] );
          res = refalrts::splice_evar( res, context[23], context[46] );
          res = refalrts::splice_evar( res, context[69], context[70] );
          res = refalrts::splice_evar( res, context[67], context[68] );
          res = refalrts::splice_evar( res, context[10], context[14] );
          res = refalrts::splice_evar( res, context[76], context[78] );
          res = refalrts::splice_evar( res, context[47], context[35] );
          res = refalrts::splice_evar( res, context[6], context[7] );
          res = refalrts::splice_evar( res, context[73], context[75] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoTokenChain:1*11@1/4 # Extended/5 t.ErrorList$b/6 (/10 e.Collected0/65 )/11 (/14 e.OptionalFuncName/67 )/15 (/18 e.BracketTerms/69 )/19 (/22 e.Tokens0/71 )/23 (/34 # TkScopeId/46 t.Pos/47 )/35 >/1
          context[65] = context[57];
          context[66] = context[58];
          context[67] = context[59];
          context[68] = context[60];
          context[69] = context[61];
          context[70] = context[62];
          context[71] = context[63];
          context[72] = context[64];
          if( ! refalrts::ident_term( identifiers[ident_Extended], context[5] ) )
            continue;
          // closed e.Collected0 as range 65
          // closed e.OptionalFuncName as range 67
          // closed e.BracketTerms as range 69
          // closed e.Tokens0 as range 71
          //DEBUG: t.ErrorList$b: 6
          //DEBUG: t.Pos: 47
          //DEBUG: e.Collected0: 65
          //DEBUG: e.OptionalFuncName: 67
          //DEBUG: e.BracketTerms: 69
          //DEBUG: e.Tokens0: 71

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.Pos/47 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } </73 Tile{ HalfReuse: & DoTokenChain/0 HalfReuse: # Extended/4 Reuse: # Pattern/5 AsIs: t.ErrorList$b/6 AsIs: (/10 AsIs: e.Collected0/65 HalfReuse: (/11 HalfReuse: # Brackets/14 } Tile{ AsIs: e.OptionalFuncName/67 } Tile{ AsIs: e.BracketTerms/69 } Tile{ AsIs: )/23 AsIs: (/34 Reuse: # Symbol/46 } # Number/74 # Cookie1/75 Tile{ AsIs: )/19 AsIs: (/22 } # Symbol/76 Tile{ HalfReuse: # Number/35 } # Cookie2/77 Tile{ AsIs: )/15 HalfReuse: )/18 } Tile{ AsIs: e.Tokens0/71 } Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[73]);
          refalrts::alloc_ident(vm, context[74], identifiers[ident_Number]);
          refalrts::alloc_ident(vm, context[75], identifiers[ident_Cookie1]);
          refalrts::alloc_ident(vm, context[76], identifiers[ident_Symbol]);
          refalrts::alloc_ident(vm, context[77], identifiers[ident_Cookie2]);
          refalrts::reinit_name(context[0], functions[efunc_DoTokenChain]);
          refalrts::reinit_ident(context[4], identifiers[ident_Extended]);
          refalrts::update_ident(context[5], identifiers[ident_Pattern]);
          refalrts::reinit_open_bracket(context[11]);
          refalrts::reinit_ident(context[14], identifiers[ident_Brackets]);
          refalrts::update_ident(context[46], identifiers[ident_Symbol]);
          refalrts::reinit_ident(context[35], identifiers[ident_Number]);
          refalrts::reinit_close_bracket(context[18]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[73] );
          refalrts::link_brackets( context[10], context[18] );
          refalrts::link_brackets( context[22], context[15] );
          refalrts::link_brackets( context[34], context[19] );
          refalrts::link_brackets( context[11], context[23] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[71], context[72] );
          res = refalrts::splice_evar( res, context[15], context[18] );
          res = refalrts::splice_elem( res, context[77] );
          res = refalrts::splice_elem( res, context[35] );
          res = refalrts::splice_elem( res, context[76] );
          res = refalrts::splice_evar( res, context[19], context[22] );
          res = refalrts::splice_evar( res, context[74], context[75] );
          res = refalrts::splice_evar( res, context[23], context[46] );
          res = refalrts::splice_evar( res, context[69], context[70] );
          res = refalrts::splice_evar( res, context[67], context[68] );
          res = refalrts::splice_evar( res, context[0], context[14] );
          res = refalrts::splice_elem( res, context[73] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoTokenChain:1*11@1/4 s.Mode0/5 t.ErrorList$b/6 (/10 e.Collected0/65 )/11 (/14 e.OptionalFuncName/67 )/15 (/18 e.BracketTerms/69 )/19 (/22 e.Tokens0/71 )/23 (/34 # TkScopeId/46 t.Pos/47 )/35 >/1
        context[65] = context[57];
        context[66] = context[58];
        context[67] = context[59];
        context[68] = context[60];
        context[69] = context[61];
        context[70] = context[62];
        context[71] = context[63];
        context[72] = context[64];
        // closed e.Collected0 as range 65
        // closed e.OptionalFuncName as range 67
        // closed e.BracketTerms as range 69
        // closed e.Tokens0 as range 71
        //DEBUG: t.ErrorList$b: 6
        //DEBUG: t.Pos: 47
        //DEBUG: s.Mode0: 5
        //DEBUG: e.Collected0: 65
        //DEBUG: e.OptionalFuncName: 67
        //DEBUG: e.BracketTerms: 69
        //DEBUG: e.Tokens0: 71

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 AsIs: s.Mode0/5 } # Pattern/73 </74 & ClassicError*2/75 Tile{ AsIs: t.ErrorList$b/6 } s.Mode0/5/76 Tile{ AsIs: t.Pos/47 HalfReuse: '$'/35 }"SCOPEID is not supported in the classic REFAL-5"/77 >/79 Tile{ AsIs: (/10 AsIs: e.Collected0/65 HalfReuse: (/11 HalfReuse: # Brackets/14 } Tile{ AsIs: e.OptionalFuncName/67 } Tile{ AsIs: e.BracketTerms/69 } Tile{ AsIs: )/23 AsIs: (/34 Reuse: # Symbol/46 } # Number/80 # Cookie1/81 Tile{ AsIs: )/19 AsIs: (/22 } # Symbol/82 # Number/83 # Cookie2/84 Tile{ AsIs: )/15 HalfReuse: )/18 } Tile{ AsIs: e.Tokens0/71 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_ident(vm, context[73], identifiers[ident_Pattern]);
        refalrts::alloc_open_call(vm, context[74]);
        refalrts::alloc_name(vm, context[75], functions[efunc_gen_ClassicError_D2]);
        refalrts::copy_stvar(vm, context[76], context[5]);
        refalrts::alloc_chars(vm, context[77], context[78], "SCOPEID is not supported in the classic REFAL-5", 47);
        refalrts::alloc_close_call(vm, context[79]);
        refalrts::alloc_ident(vm, context[80], identifiers[ident_Number]);
        refalrts::alloc_ident(vm, context[81], identifiers[ident_Cookie1]);
        refalrts::alloc_ident(vm, context[82], identifiers[ident_Symbol]);
        refalrts::alloc_ident(vm, context[83], identifiers[ident_Number]);
        refalrts::alloc_ident(vm, context[84], identifiers[ident_Cookie2]);
        refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
        refalrts::reinit_char(context[35], '$');
        refalrts::reinit_open_bracket(context[11]);
        refalrts::reinit_ident(context[14], identifiers[ident_Brackets]);
        refalrts::update_ident(context[46], identifiers[ident_Symbol]);
        refalrts::reinit_close_bracket(context[18]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[10], context[18] );
        refalrts::link_brackets( context[22], context[15] );
        refalrts::link_brackets( context[34], context[19] );
        refalrts::link_brackets( context[11], context[23] );
        refalrts::push_stack( vm, context[79] );
        refalrts::push_stack( vm, context[74] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[71], context[72] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        res = refalrts::splice_evar( res, context[82], context[84] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        res = refalrts::splice_evar( res, context[80], context[81] );
        res = refalrts::splice_evar( res, context[23], context[46] );
        res = refalrts::splice_evar( res, context[69], context[70] );
        res = refalrts::splice_evar( res, context[67], context[68] );
        res = refalrts::splice_evar( res, context[10], context[14] );
        res = refalrts::splice_evar( res, context[77], context[79] );
        res = refalrts::splice_evar( res, context[47], context[35] );
        res = refalrts::splice_elem( res, context[76] );
        res = refalrts::splice_evar( res, context[6], context[7] );
        res = refalrts::splice_evar( res, context[73], context[75] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoTokenChain:1*11@1/4 s.Mode0/5 t.ErrorList$b/6 (/10 e.Collected0/49 )/11 (/14 e.OptionalFuncName/51 )/15 (/18 e.BracketTerms/53 )/19 (/22 e.Tokens0/55 )/23 (/34 # TkError/46 t.Pos/47 e.Message/57 )/35 >/1
      context[49] = context[36];
      context[50] = context[37];
      context[51] = context[38];
      context[52] = context[39];
      context[53] = context[40];
      context[54] = context[41];
      context[55] = context[42];
      context[56] = context[43];
      context[57] = context[44];
      context[58] = context[45];
      if( ! refalrts::ident_term( identifiers[ident_TkError], context[46] ) )
        continue;
      // closed e.Collected0 as range 49
      // closed e.OptionalFuncName as range 51
      // closed e.BracketTerms as range 53
      // closed e.Tokens0 as range 55
      // closed e.Message as range 57
      //DEBUG: t.ErrorList$b: 6
      //DEBUG: t.Pos: 47
      //DEBUG: s.Mode0: 5
      //DEBUG: e.Collected0: 49
      //DEBUG: e.OptionalFuncName: 51
      //DEBUG: e.BracketTerms: 53
      //DEBUG: e.Tokens0: 55
      //DEBUG: e.Message: 57

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} (/10 {REMOVED TILE} )/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 AsIs: s.Mode0/5 } Tile{ HalfReuse: # Pattern/14 } Tile{ HalfReuse: </15 HalfReuse: & EL-AddErrorAt/18 } Tile{ AsIs: t.ErrorList$b/6 } Tile{ AsIs: t.Pos/47 AsIs: e.Message/57 HalfReuse: >/35 HalfReuse: (/1 } Tile{ AsIs: e.Collected0/49 } Tile{ AsIs: (/34 Reuse: # Brackets/46 } Tile{ AsIs: e.OptionalFuncName/51 } Tile{ AsIs: e.BracketTerms/53 } Tile{ AsIs: )/19 HalfReuse: )/22 AsIs: e.Tokens0/55 HalfReuse: >/23 } Tile{ ]] }
      refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
      refalrts::reinit_ident(context[14], identifiers[ident_Pattern]);
      refalrts::reinit_open_call(context[15]);
      refalrts::reinit_name(context[18], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_close_call(context[35]);
      refalrts::reinit_open_bracket(context[1]);
      refalrts::update_ident(context[46], identifiers[ident_Brackets]);
      refalrts::reinit_close_bracket(context[22]);
      refalrts::reinit_close_call(context[23]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[1], context[22] );
      refalrts::link_brackets( context[34], context[19] );
      refalrts::push_stack( vm, context[35] );
      refalrts::push_stack( vm, context[15] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[19], context[23] );
      res = refalrts::splice_evar( res, context[53], context[54] );
      res = refalrts::splice_evar( res, context[51], context[52] );
      res = refalrts::splice_evar( res, context[34], context[46] );
      res = refalrts::splice_evar( res, context[49], context[50] );
      res = refalrts::splice_evar( res, context[47], context[1] );
      res = refalrts::splice_evar( res, context[6], context[7] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      res = refalrts::splice_elem( res, context[14] );
      refalrts::splice_to_freelist_open( vm, context[5], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoTokenChain:1*11@1/4 s.Mode0/5 t.ErrorList$b/6 (/10 e.Collected0/36 )/11 (/14 e.OptionalFuncName/38 )/15 (/18 e.BracketTerms/40 )/19 (/22 e.Tokens0/42 )/23 t.OtherToken/34 >/1
    context[36] = context[24];
    context[37] = context[25];
    context[38] = context[26];
    context[39] = context[27];
    context[40] = context[28];
    context[41] = context[29];
    context[42] = context[30];
    context[43] = context[31];
    // closed e.Collected0 as range 36
    // closed e.OptionalFuncName as range 38
    // closed e.BracketTerms as range 40
    // closed e.Tokens0 as range 42
    //DEBUG: t.ErrorList$b: 6
    //DEBUG: t.OtherToken: 34
    //DEBUG: s.Mode0: 5
    //DEBUG: e.Collected0: 36
    //DEBUG: e.OptionalFuncName: 38
    //DEBUG: e.BracketTerms: 40
    //DEBUG: e.Tokens0: 42

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoTokenChain:1*11@1/4 s.Mode0/5 {REMOVED TILE} {REMOVED TILE} )/15 (/18 {REMOVED TILE} {REMOVED TILE} (/22 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList$b/6 AsIs: (/10 AsIs: e.Collected0/36 HalfReuse: (/11 HalfReuse: # Brackets/14 } Tile{ AsIs: e.OptionalFuncName/38 } Tile{ AsIs: e.BracketTerms/40 } Tile{ AsIs: )/19 } Tile{ AsIs: )/23 AsIs: t.OtherToken/34 } Tile{ AsIs: e.Tokens0/42 } Tile{ ]] }
    refalrts::reinit_open_bracket(context[11]);
    refalrts::reinit_ident(context[14], identifiers[ident_Brackets]);
    refalrts::link_brackets( context[10], context[23] );
    refalrts::link_brackets( context[11], context[19] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[42], context[43] );
    res = refalrts::splice_evar( res, context[23], context[35] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[40], context[41] );
    res = refalrts::splice_evar( res, context[38], context[39] );
    res = refalrts::splice_evar( res, context[6], context[14] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoTokenChain:1*11@1/4 s.Mode0/5 t.ErrorList$b/6 (/10 e.Collected0/8 )/11 (/14 e.OptionalFuncName/12 )/15 (/18 e.BracketTerms/16 )/19 (/22 e.Tokens0/20 )/23 e.dyn/2 >/1
  // closed e.Collected0 as range 8
  // closed e.OptionalFuncName as range 12
  // closed e.BracketTerms as range 16
  // closed e.Tokens0 as range 20
  // closed e.dyn as range 2
  //DEBUG: t.ErrorList$b: 6
  //DEBUG: s.Mode0: 5
  //DEBUG: e.Collected0: 8
  //DEBUG: e.OptionalFuncName: 12
  //DEBUG: e.BracketTerms: 16
  //DEBUG: e.Tokens0: 20
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain:1@0/4 AsIs: s.Mode0/5 } Tile{ HalfReuse: # Pattern/18 } Tile{ AsIs: t.ErrorList$b/6 AsIs: (/10 AsIs: e.Collected0/8 HalfReuse: (/11 HalfReuse: # Brackets/14 } Tile{ AsIs: e.OptionalFuncName/12 } Tile{ AsIs: e.BracketTerms/16 } Tile{ AsIs: )/15 } Tile{ AsIs: )/19 AsIs: (/22 AsIs: e.Tokens0/20 AsIs: )/23 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_DoTokenChain_B1Z0]);
  refalrts::reinit_ident(context[18], identifiers[ident_Pattern]);
  refalrts::reinit_open_bracket(context[11]);
  refalrts::reinit_ident(context[14], identifiers[ident_Brackets]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[22], context[23] );
  refalrts::link_brackets( context[10], context[19] );
  refalrts::link_brackets( context[11], context[15] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[19];
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[16], context[17] );
  res = refalrts::splice_evar( res, context[12], context[13] );
  res = refalrts::splice_evar( res, context[6], context[14] );
  res = refalrts::splice_elem( res, context[18] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoTokenChain_B1D11Z1("DoTokenChain:1*11@1", COOKIE1_, COOKIE2_, func_gen_DoTokenChain_B1D11Z1);


static refalrts::FnResult func_gen_DoTokenChain_B1S9A3Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & DoTokenChain:1$9=3@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoTokenChain:1$9=3@2/4 s.new1/5 (/8 e.new2/6 )/9 t.new3/10 (/14 e.new4/12 )/15 (/18 e.new5/16 )/19 e.new6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new2 as range 6
  context[11] = refalrts::tvar_left( context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  context[16] = 0;
  context[17] = 0;
  context[18] = refalrts::brackets_left( context[16], context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[18], context[19]);
  // closed e.new4 as range 12
  // closed e.new5 as range 16
  // closed e.new6 as range 2
  do {
    // </0 & DoTokenChain:1$9=3@2/4 s.Kind0/5 (/8 e.Collected0/20 )/9 t.OpenPos0/10 (/14 e.FuncName0/22 )/15 (/18 e.BracketTerms0/24 )/19 t.ErrorList$c/28 e.Tokens$b/26 >/1
    context[20] = context[6];
    context[21] = context[7];
    context[22] = context[12];
    context[23] = context[13];
    context[24] = context[16];
    context[25] = context[17];
    context[26] = context[2];
    context[27] = context[3];
    // closed e.Collected0 as range 20
    // closed e.FuncName0 as range 22
    // closed e.BracketTerms0 as range 24
    context[29] = refalrts::tvar_left( context[28], context[26], context[27] );
    if( ! context[29] )
      continue;
    // closed e.Tokens$b as range 26
    //DEBUG: t.OpenPos0: 10
    //DEBUG: s.Kind0: 5
    //DEBUG: e.Collected0: 20
    //DEBUG: e.FuncName0: 22
    //DEBUG: e.BracketTerms0: 24
    //DEBUG: t.ErrorList$c: 28
    //DEBUG: e.Tokens$b: 26

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Kind0/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 } # Classic/30 Tile{ HalfReuse: s.Kind05 /19 AsIs: t.ErrorList$c/28 } Tile{ AsIs: (/8 } Tile{ AsIs: e.Collected0/20 } Tile{ AsIs: (/18 } Tile{ HalfReuse: # ADT-Brackets/9 AsIs: t.OpenPos0/10 AsIs: (/14 AsIs: e.FuncName0/22 AsIs: )/15 } Tile{ AsIs: e.BracketTerms0/24 } )/31 )/32 Tile{ AsIs: e.Tokens$b/26 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_ident(vm, context[30], identifiers[ident_Classic]);
    refalrts::alloc_close_bracket(vm, context[31]);
    refalrts::alloc_close_bracket(vm, context[32]);
    refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
    refalrts::reinit_svar( context[19], context[5] );
    refalrts::reinit_ident(context[9], identifiers[ident_ADTm_Brackets]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[8], context[32] );
    refalrts::link_brackets( context[18], context[31] );
    refalrts::link_brackets( context[14], context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[9], context[15] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[19], context[29] );
    res = refalrts::splice_elem( res, context[30] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoTokenChain:1$9=3@2/4 s.Kind0/5 (/8 e.Collected0/6 )/9 t.OpenPos0/10 (/14 e.FuncName0/12 )/15 (/18 e.BracketTerms0/16 )/19 e.dyn/2 >/1
  // closed e.Collected0 as range 6
  // closed e.FuncName0 as range 12
  // closed e.BracketTerms0 as range 16
  // closed e.dyn as range 2
  //DEBUG: t.OpenPos0: 10
  //DEBUG: s.Kind0: 5
  //DEBUG: e.Collected0: 6
  //DEBUG: e.FuncName0: 12
  //DEBUG: e.BracketTerms0: 16
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </20 Tile{ HalfReuse: & DoTokenChain:1$9=3@0/0 HalfReuse: # Classic/4 AsIs: s.Kind0/5 AsIs: (/8 AsIs: e.Collected0/6 AsIs: )/9 AsIs: t.OpenPos0/10 AsIs: (/14 AsIs: e.FuncName0/12 AsIs: )/15 AsIs: (/18 AsIs: e.BracketTerms0/16 AsIs: )/19 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[20]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoTokenChain_B1S9A3Z0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Classic]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[20] );
  refalrts::link_brackets( context[18], context[19] );
  refalrts::link_brackets( context[14], context[15] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[20] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoTokenChain_B1S9A3Z2("DoTokenChain:1$9=3@2", COOKIE1_, COOKIE2_, func_gen_DoTokenChain_B1S9A3Z2);


static refalrts::FnResult func_gen_DoTokenChain_B1S6A2Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & DoTokenChain:1$6=2@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoTokenChain:1$6=2@1/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 (/20 e.new5/18 )/21 e.new6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 18
  // closed e.new6 as range 2
  do {
    // </0 & DoTokenChain:1$6=2@1/4 s.Mode0/5 (/8 e.Collected0/22 )/9 (/12 e.OptionalFuncName/24 )/13 (/16 e.BracketTerms0/26 )/17 (/20 e.BracketTerms1/28 )/21 t.ErrorList$b/32 e.Tokens$b/30 >/1
    context[22] = context[6];
    context[23] = context[7];
    context[24] = context[10];
    context[25] = context[11];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[18];
    context[29] = context[19];
    context[30] = context[2];
    context[31] = context[3];
    // closed e.Collected0 as range 22
    // closed e.OptionalFuncName as range 24
    // closed e.BracketTerms0 as range 26
    // closed e.BracketTerms1 as range 28
    context[33] = refalrts::tvar_left( context[32], context[30], context[31] );
    if( ! context[33] )
      continue;
    // closed e.Tokens$b as range 30
    //DEBUG: s.Mode0: 5
    //DEBUG: e.Collected0: 22
    //DEBUG: e.OptionalFuncName: 24
    //DEBUG: e.BracketTerms0: 26
    //DEBUG: e.BracketTerms1: 28
    //DEBUG: t.ErrorList$b: 32
    //DEBUG: e.Tokens$b: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 AsIs: s.Mode0/5 HalfReuse: # Pattern/8 } Tile{ AsIs: t.ErrorList$b/32 } Tile{ AsIs: (/12 } Tile{ AsIs: e.Collected0/22 } Tile{ AsIs: (/16 } # Brackets/34 Tile{ AsIs: e.OptionalFuncName/24 } Tile{ AsIs: e.BracketTerms0/26 } Tile{ AsIs: )/13 } Tile{ HalfReuse: (/17 HalfReuse: # Brackets/20 AsIs: e.BracketTerms1/28 AsIs: )/21 } Tile{ AsIs: )/9 } Tile{ AsIs: e.Tokens$b/30 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_ident(vm, context[34], identifiers[ident_Brackets]);
    refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
    refalrts::reinit_ident(context[8], identifiers[ident_Pattern]);
    refalrts::reinit_open_bracket(context[17]);
    refalrts::reinit_ident(context[20], identifiers[ident_Brackets]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[12], context[9] );
    refalrts::link_brackets( context[17], context[21] );
    refalrts::link_brackets( context[16], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[17], context[21] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_elem( res, context[34] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoTokenChain:1$6=2@1/4 s.Mode0/5 (/8 e.Collected0/6 )/9 (/12 e.OptionalFuncName/10 )/13 (/16 e.BracketTerms0/14 )/17 (/20 e.BracketTerms1/18 )/21 e.dyn/2 >/1
  // closed e.Collected0 as range 6
  // closed e.OptionalFuncName as range 10
  // closed e.BracketTerms0 as range 14
  // closed e.BracketTerms1 as range 18
  // closed e.dyn as range 2
  //DEBUG: s.Mode0: 5
  //DEBUG: e.Collected0: 6
  //DEBUG: e.OptionalFuncName: 10
  //DEBUG: e.BracketTerms0: 14
  //DEBUG: e.BracketTerms1: 18
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain:1$6=2@0/4 AsIs: s.Mode0/5 HalfReuse: # Pattern/8 } Tile{ AsIs: (/12 } Tile{ AsIs: e.Collected0/6 } Tile{ AsIs: (/16 } Tile{ HalfReuse: # Brackets/9 } Tile{ AsIs: e.OptionalFuncName/10 } Tile{ AsIs: e.BracketTerms0/14 } Tile{ AsIs: )/13 } Tile{ AsIs: )/17 AsIs: (/20 AsIs: e.BracketTerms1/18 AsIs: )/21 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_DoTokenChain_B1S6A2Z0]);
  refalrts::reinit_ident(context[8], identifiers[ident_Pattern]);
  refalrts::reinit_ident(context[9], identifiers[ident_Brackets]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[12], context[17] );
  refalrts::link_brackets( context[16], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[17];
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_elem( res, context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoTokenChain_B1S6A2Z1("DoTokenChain:1$6=2@1", COOKIE1_, COOKIE2_, func_gen_DoTokenChain_B1S6A2Z1);


static refalrts::FnResult func_gen_DoTokenChain_B1S9A2Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 79 elems
  refalrts::Iter context[79];
  refalrts::zeros( context, 79 );
  // </0 & DoTokenChain:1$9=2@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoTokenChain:1$9=2@4/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 t.new4/17 (/21 e.new5/19 )/22 e.new6/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  context[18] = refalrts::tvar_left( context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.new5 as range 19
  // closed e.new6 as range 2
  do {
    // </0 & DoTokenChain:1$9=2@4/4 (/7 e.new11/23 )/8 (/11 e.new12/25 )/12 (/15 e.new13/27 )/16 t.new7/17 (/21 e.new14/29 )/22 t.new8/33 (/37 e.new9/35 )/38 e.new10/31 >/1
    context[23] = context[5];
    context[24] = context[6];
    context[25] = context[9];
    context[26] = context[10];
    context[27] = context[13];
    context[28] = context[14];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[2];
    context[32] = context[3];
    // closed e.new11 as range 23
    // closed e.new12 as range 25
    // closed e.new13 as range 27
    // closed e.new14 as range 29
    context[34] = refalrts::tvar_left( context[33], context[31], context[32] );
    if( ! context[34] )
      continue;
    context[35] = 0;
    context[36] = 0;
    context[37] = refalrts::brackets_left( context[35], context[36], context[31], context[32] );
    if( ! context[37] )
      continue;
    refalrts::bracket_pointers(context[37], context[38]);
    // closed e.new9 as range 35
    // closed e.new10 as range 31
    do {
      // </0 & DoTokenChain:1$9=2@4/4 (/7 e.new22/39 )/8 (/11 e.new23/41 )/12 (/15 e.new24/43 )/16 t.new15/17 (/21 e.new25/45 )/22 t.new16/33 (/37 e.new21/47 )/38 (/53 s.new17/55 t.new18/56 e.new19/51 )/54 e.new20/49 >/1
      context[39] = context[23];
      context[40] = context[24];
      context[41] = context[25];
      context[42] = context[26];
      context[43] = context[27];
      context[44] = context[28];
      context[45] = context[29];
      context[46] = context[30];
      context[47] = context[35];
      context[48] = context[36];
      context[49] = context[31];
      context[50] = context[32];
      context[51] = 0;
      context[52] = 0;
      context[53] = refalrts::brackets_left( context[51], context[52], context[49], context[50] );
      if( ! context[53] )
        continue;
      refalrts::bracket_pointers(context[53], context[54]);
      // closed e.new22 as range 39
      // closed e.new23 as range 41
      // closed e.new24 as range 43
      // closed e.new25 as range 45
      // closed e.new21 as range 47
      // closed e.new20 as range 49
      if( ! refalrts::svar_left( context[55], context[51], context[52] ) )
        continue;
      context[57] = refalrts::tvar_left( context[56], context[51], context[52] );
      if( ! context[57] )
        continue;
      // closed e.new19 as range 51
      do {
        // </0 & DoTokenChain:1$9=2@4/4 (/7 e.Collected0/58 )/8 (/11 e.OptionalFuncName/60 )/12 (/15 e.BracketTerms0/62 )/16 t.Pos/17 (/21 e.Value/64 )/22 t.ErrorList$b/33 (/37 e.BracketTerms/66 )/38 (/53 # TkCloseADT/55 t.1/56 )/54 e./68 >/1
        context[58] = context[39];
        context[59] = context[40];
        context[60] = context[41];
        context[61] = context[42];
        context[62] = context[43];
        context[63] = context[44];
        context[64] = context[45];
        context[65] = context[46];
        context[66] = context[47];
        context[67] = context[48];
        context[68] = context[49];
        context[69] = context[50];
        if( ! refalrts::ident_term( identifiers[ident_TkCloseADT], context[55] ) )
          continue;
        if( ! refalrts::empty_seq( context[51], context[52] ) )
          continue;
        // closed e.Collected0 as range 58
        // closed e.OptionalFuncName as range 60
        // closed e.BracketTerms0 as range 62
        // closed e.Value as range 64
        // closed e.BracketTerms as range 66
        // closed e. as range 68
        //DEBUG: t.Pos: 17
        //DEBUG: t.ErrorList$b: 33
        //DEBUG: t.1: 56
        //DEBUG: e.Collected0: 58
        //DEBUG: e.OptionalFuncName: 60
        //DEBUG: e.BracketTerms0: 62
        //DEBUG: e.Value: 64
        //DEBUG: e.BracketTerms: 66
        //DEBUG: e.: 68

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} (/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.1/56 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 HalfReuse: # Classic/7 } Tile{ HalfReuse: # Pattern/8 } Tile{ AsIs: t.ErrorList$b/33 AsIs: (/37 } Tile{ AsIs: e.Collected0/58 } Tile{ AsIs: (/15 } Tile{ Reuse: # Brackets/55 } Tile{ AsIs: e.OptionalFuncName/60 } Tile{ AsIs: e.BracketTerms0/62 } Tile{ AsIs: )/38 AsIs: (/53 } Tile{ HalfReuse: # ADT-Brackets/16 AsIs: t.Pos/17 AsIs: (/21 AsIs: e.Value/64 AsIs: )/22 } Tile{ AsIs: e.BracketTerms/66 } Tile{ AsIs: )/12 } Tile{ AsIs: )/54 AsIs: e./68 AsIs: >/1 ]] }
        refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
        refalrts::reinit_ident(context[7], identifiers[ident_Classic]);
        refalrts::reinit_ident(context[8], identifiers[ident_Pattern]);
        refalrts::update_ident(context[55], identifiers[ident_Brackets]);
        refalrts::reinit_ident(context[16], identifiers[ident_ADTm_Brackets]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[37], context[54] );
        refalrts::link_brackets( context[53], context[12] );
        refalrts::link_brackets( context[21], context[22] );
        refalrts::link_brackets( context[15], context[38] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[54];
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[66], context[67] );
        res = refalrts::splice_evar( res, context[16], context[22] );
        res = refalrts::splice_evar( res, context[38], context[53] );
        res = refalrts::splice_evar( res, context[62], context[63] );
        res = refalrts::splice_evar( res, context[60], context[61] );
        res = refalrts::splice_elem( res, context[55] );
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_evar( res, context[58], context[59] );
        res = refalrts::splice_evar( res, context[33], context[37] );
        res = refalrts::splice_elem( res, context[8] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoTokenChain:1$9=2@4/4 (/7 e.Collected0/58 )/8 (/11 e.OptionalFuncName/60 )/12 (/15 e.BracketTerms0/62 )/16 t.Pos/17 (/21 e.Value/64 )/22 t.ErrorList$b/33 (/37 e.BracketTerms/66 )/38 (/53 s.Type/55 t.1/56 e.2/68 )/54 e./70 >/1
      context[58] = context[39];
      context[59] = context[40];
      context[60] = context[41];
      context[61] = context[42];
      context[62] = context[43];
      context[63] = context[44];
      context[64] = context[45];
      context[65] = context[46];
      context[66] = context[47];
      context[67] = context[48];
      context[68] = context[51];
      context[69] = context[52];
      context[70] = context[49];
      context[71] = context[50];
      // closed e.Collected0 as range 58
      // closed e.OptionalFuncName as range 60
      // closed e.BracketTerms0 as range 62
      // closed e.Value as range 64
      // closed e.BracketTerms as range 66
      // closed e.2 as range 68
      // closed e. as range 70
      //DEBUG: t.Pos: 17
      //DEBUG: t.ErrorList$b: 33
      //DEBUG: t.1: 56
      //DEBUG: s.Type: 55
      //DEBUG: e.Collected0: 58
      //DEBUG: e.OptionalFuncName: 60
      //DEBUG: e.BracketTerms0: 62
      //DEBUG: e.Value: 64
      //DEBUG: e.BracketTerms: 66
      //DEBUG: e.2: 68
      //DEBUG: e.: 70

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain:1$9=3@4/4 AsIs: (/7 AsIs: e.Collected0/58 AsIs: )/8 AsIs: (/11 AsIs: e.OptionalFuncName/60 AsIs: )/12 AsIs: (/15 AsIs: e.BracketTerms0/62 AsIs: )/16 AsIs: t.Pos/17 AsIs: (/21 AsIs: e.Value/64 AsIs: )/22 } Tile{ AsIs: (/37 } Tile{ AsIs: e.BracketTerms/66 } )/72 </73 & EL-AddErrorAt/74 Tile{ AsIs: t.ErrorList$b/33 } t.1/56/75"Missed \']\'"/77 Tile{ HalfReuse: >/38 AsIs: (/53 AsIs: s.Type/55 AsIs: t.1/56 AsIs: e.2/68 AsIs: )/54 AsIs: e./70 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[72]);
      refalrts::alloc_open_call(vm, context[73]);
      refalrts::alloc_name(vm, context[74], functions[efunc_ELm_AddErrorAt]);
      refalrts::copy_evar(vm, context[75], context[76], context[56], context[57]);
      refalrts::alloc_chars(vm, context[77], context[78], "Missed \']\'", 10);
      refalrts::update_name(context[4], functions[efunc_gen_DoTokenChain_B1S9A3Z4]);
      refalrts::reinit_close_call(context[38]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[53], context[54] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[73] );
      refalrts::link_brackets( context[37], context[72] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[38];
      res = refalrts::splice_evar( res, context[75], context[78] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[72], context[74] );
      res = refalrts::splice_evar( res, context[66], context[67] );
      res = refalrts::splice_elem( res, context[37] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoTokenChain:1$9=2@4/4 (/7 e.Collected0/39 )/8 (/11 e.OptionalFuncName/41 )/12 (/15 e.BracketTerms0/43 )/16 t.Pos/17 (/21 e.Value/45 )/22 t.ErrorList$b/33 (/37 e.BracketTerms/47 )/38 e.Tokens$a/49 >/1
    context[39] = context[23];
    context[40] = context[24];
    context[41] = context[25];
    context[42] = context[26];
    context[43] = context[27];
    context[44] = context[28];
    context[45] = context[29];
    context[46] = context[30];
    context[47] = context[35];
    context[48] = context[36];
    context[49] = context[31];
    context[50] = context[32];
    // closed e.Collected0 as range 39
    // closed e.OptionalFuncName as range 41
    // closed e.BracketTerms0 as range 43
    // closed e.Value as range 45
    // closed e.BracketTerms as range 47
    // closed e.Tokens$a as range 49
    //DEBUG: t.Pos: 17
    //DEBUG: t.ErrorList$b: 33
    //DEBUG: e.Collected0: 39
    //DEBUG: e.OptionalFuncName: 41
    //DEBUG: e.BracketTerms0: 43
    //DEBUG: e.Value: 45
    //DEBUG: e.BracketTerms: 47
    //DEBUG: e.Tokens$a: 49

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain:1$9=3@4/4 AsIs: (/7 AsIs: e.Collected0/39 AsIs: )/8 AsIs: (/11 AsIs: e.OptionalFuncName/41 AsIs: )/12 AsIs: (/15 AsIs: e.BracketTerms0/43 AsIs: )/16 AsIs: t.Pos/17 AsIs: (/21 AsIs: e.Value/45 AsIs: )/22 } Tile{ AsIs: (/37 AsIs: e.BracketTerms/47 AsIs: )/38 } </51 & DoTokenChain:1$9=3:1*2/52 Tile{ AsIs: t.ErrorList$b/33 } Tile{ AsIs: e.Tokens$a/49 } >/53 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[51]);
    refalrts::alloc_name(vm, context[52], functions[efunc_gen_DoTokenChain_B1S9A3B1D2]);
    refalrts::alloc_close_call(vm, context[53]);
    refalrts::update_name(context[4], functions[efunc_gen_DoTokenChain_B1S9A3Z4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[53] );
    refalrts::push_stack( vm, context[51] );
    refalrts::link_brackets( context[37], context[38] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[53] );
    res = refalrts::splice_evar( res, context[49], context[50] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[51], context[52] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoTokenChain:1$9=2@4/4 (/7 e.Collected0/5 )/8 (/11 e.OptionalFuncName/9 )/12 (/15 e.BracketTerms0/13 )/16 t.Pos/17 (/21 e.Value/19 )/22 e.dyn/2 >/1
  // closed e.Collected0 as range 5
  // closed e.OptionalFuncName as range 9
  // closed e.BracketTerms0 as range 13
  // closed e.Value as range 19
  // closed e.dyn as range 2
  //DEBUG: t.Pos: 17
  //DEBUG: e.Collected0: 5
  //DEBUG: e.OptionalFuncName: 9
  //DEBUG: e.BracketTerms0: 13
  //DEBUG: e.Value: 19
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </15 } & DoTokenChain:1$9=2@0/23 Tile{ HalfReuse: # Classic/0 HalfReuse: # Pattern/4 AsIs: (/7 AsIs: e.Collected0/5 HalfReuse: (/8 HalfReuse: # Brackets/11 } Tile{ AsIs: e.OptionalFuncName/9 } Tile{ AsIs: e.BracketTerms0/13 } Tile{ AsIs: )/12 } Tile{ AsIs: )/16 AsIs: t.Pos/17 AsIs: (/21 AsIs: e.Value/19 AsIs: )/22 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[23], functions[efunc_gen_DoTokenChain_B1S9A2Z0]);
  refalrts::reinit_open_call(context[15]);
  refalrts::reinit_ident(context[0], identifiers[ident_Classic]);
  refalrts::reinit_ident(context[4], identifiers[ident_Pattern]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::reinit_ident(context[11], identifiers[ident_Brackets]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[15] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[7], context[16] );
  refalrts::link_brackets( context[8], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[16];
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[0], context[11] );
  res = refalrts::splice_elem( res, context[23] );
  res = refalrts::splice_elem( res, context[15] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoTokenChain_B1S9A2Z4("DoTokenChain:1$9=2@4", COOKIE1_, COOKIE2_, func_gen_DoTokenChain_B1S9A2Z4);


static refalrts::FnResult func_gen_DoTokenChain_B1S9A3Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 43 elems
  refalrts::Iter context[43];
  refalrts::zeros( context, 43 );
  // </0 & DoTokenChain:1$9=3@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoTokenChain:1$9=3@3/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 t.new4/17 (/21 e.new5/19 )/22 (/25 e.new6/23 )/26 e.new7/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  context[18] = refalrts::tvar_left( context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  // closed e.new5 as range 19
  // closed e.new6 as range 23
  // closed e.new7 as range 2
  do {
    // </0 & DoTokenChain:1$9=3@3/4 (/7 e.Collected0/27 )/8 (/11 e.OptionalFuncName/29 )/12 (/15 e.BracketTerms0/31 )/16 t.Pos/17 (/21 e.Value/33 )/22 (/25 e.BracketTerms1/35 )/26 t.ErrorList$c/39 e.Tokens$b/37 >/1
    context[27] = context[5];
    context[28] = context[6];
    context[29] = context[9];
    context[30] = context[10];
    context[31] = context[13];
    context[32] = context[14];
    context[33] = context[19];
    context[34] = context[20];
    context[35] = context[23];
    context[36] = context[24];
    context[37] = context[2];
    context[38] = context[3];
    // closed e.Collected0 as range 27
    // closed e.OptionalFuncName as range 29
    // closed e.BracketTerms0 as range 31
    // closed e.Value as range 33
    // closed e.BracketTerms1 as range 35
    context[40] = refalrts::tvar_left( context[39], context[37], context[38] );
    if( ! context[40] )
      continue;
    // closed e.Tokens$b as range 37
    //DEBUG: t.Pos: 17
    //DEBUG: e.Collected0: 27
    //DEBUG: e.OptionalFuncName: 29
    //DEBUG: e.BracketTerms0: 31
    //DEBUG: e.Value: 33
    //DEBUG: e.BracketTerms1: 35
    //DEBUG: t.ErrorList$c: 39
    //DEBUG: e.Tokens$b: 37

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 HalfReuse: # Extended/7 } Tile{ HalfReuse: # Pattern/26 AsIs: t.ErrorList$c/39 } (/41 Tile{ AsIs: e.Collected0/27 } Tile{ AsIs: (/25 } # Brackets/42 Tile{ AsIs: e.OptionalFuncName/29 } Tile{ AsIs: e.BracketTerms0/31 } Tile{ AsIs: )/12 AsIs: (/15 } Tile{ HalfReuse: # ADT-Brackets/16 AsIs: t.Pos/17 AsIs: (/21 AsIs: e.Value/33 AsIs: )/22 } Tile{ AsIs: e.BracketTerms1/35 } Tile{ AsIs: )/8 HalfReuse: )/11 } Tile{ AsIs: e.Tokens$b/37 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[41]);
    refalrts::alloc_ident(vm, context[42], identifiers[ident_Brackets]);
    refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
    refalrts::reinit_ident(context[7], identifiers[ident_Extended]);
    refalrts::reinit_ident(context[26], identifiers[ident_Pattern]);
    refalrts::reinit_ident(context[16], identifiers[ident_ADTm_Brackets]);
    refalrts::reinit_close_bracket(context[11]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[41], context[11] );
    refalrts::link_brackets( context[15], context[8] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[25], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[8], context[11] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[16], context[22] );
    res = refalrts::splice_evar( res, context[12], context[15] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_elem( res, context[42] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[41] );
    res = refalrts::splice_evar( res, context[26], context[40] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoTokenChain:1$9=3@3/4 (/7 e.Collected0/5 )/8 (/11 e.OptionalFuncName/9 )/12 (/15 e.BracketTerms0/13 )/16 t.Pos/17 (/21 e.Value/19 )/22 (/25 e.BracketTerms1/23 )/26 e.dyn/2 >/1
  // closed e.Collected0 as range 5
  // closed e.OptionalFuncName as range 9
  // closed e.BracketTerms0 as range 13
  // closed e.Value as range 19
  // closed e.BracketTerms1 as range 23
  // closed e.dyn as range 2
  //DEBUG: t.Pos: 17
  //DEBUG: e.Collected0: 5
  //DEBUG: e.OptionalFuncName: 9
  //DEBUG: e.BracketTerms0: 13
  //DEBUG: e.Value: 19
  //DEBUG: e.BracketTerms1: 23
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </15 } & DoTokenChain:1$9=3@0/27 Tile{ HalfReuse: # Extended/0 HalfReuse: # Pattern/4 AsIs: (/7 AsIs: e.Collected0/5 HalfReuse: (/8 HalfReuse: # Brackets/11 } Tile{ AsIs: e.OptionalFuncName/9 } Tile{ AsIs: e.BracketTerms0/13 } Tile{ AsIs: )/12 } Tile{ AsIs: )/16 AsIs: t.Pos/17 AsIs: (/21 AsIs: e.Value/19 AsIs: )/22 AsIs: (/25 AsIs: e.BracketTerms1/23 AsIs: )/26 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[27], functions[efunc_gen_DoTokenChain_B1S9A3Z0]);
  refalrts::reinit_open_call(context[15]);
  refalrts::reinit_ident(context[0], identifiers[ident_Extended]);
  refalrts::reinit_ident(context[4], identifiers[ident_Pattern]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::reinit_ident(context[11], identifiers[ident_Brackets]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[15] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[7], context[16] );
  refalrts::link_brackets( context[8], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[16];
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[0], context[11] );
  res = refalrts::splice_elem( res, context[27] );
  res = refalrts::splice_elem( res, context[15] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoTokenChain_B1S9A3Z3("DoTokenChain:1$9=3@3", COOKIE1_, COOKIE2_, func_gen_DoTokenChain_B1S9A3Z3);


static refalrts::FnResult func_gen_DoTokenChain_B1S9A2Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 80 elems
  refalrts::Iter context[80];
  refalrts::zeros( context, 80 );
  // </0 & DoTokenChain:1$9=2@5/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoTokenChain:1$9=2@5/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 t.new5/18 (/22 e.new6/20 )/23 e.new7/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  context[19] = refalrts::tvar_left( context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  context[20] = 0;
  context[21] = 0;
  context[22] = refalrts::brackets_left( context[20], context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[22], context[23]);
  // closed e.new6 as range 20
  // closed e.new7 as range 2
  do {
    // </0 & DoTokenChain:1$9=2@5/4 s.new8/5 (/8 e.new13/24 )/9 (/12 e.new14/26 )/13 (/16 e.new15/28 )/17 t.new9/18 (/22 e.new16/30 )/23 t.new10/34 (/38 e.new11/36 )/39 e.new12/32 >/1
    context[24] = context[6];
    context[25] = context[7];
    context[26] = context[10];
    context[27] = context[11];
    context[28] = context[14];
    context[29] = context[15];
    context[30] = context[20];
    context[31] = context[21];
    context[32] = context[2];
    context[33] = context[3];
    // closed e.new13 as range 24
    // closed e.new14 as range 26
    // closed e.new15 as range 28
    // closed e.new16 as range 30
    context[35] = refalrts::tvar_left( context[34], context[32], context[33] );
    if( ! context[35] )
      continue;
    context[36] = 0;
    context[37] = 0;
    context[38] = refalrts::brackets_left( context[36], context[37], context[32], context[33] );
    if( ! context[38] )
      continue;
    refalrts::bracket_pointers(context[38], context[39]);
    // closed e.new11 as range 36
    // closed e.new12 as range 32
    do {
      // </0 & DoTokenChain:1$9=2@5/4 s.new17/5 (/8 e.new25/40 )/9 (/12 e.new26/42 )/13 (/16 e.new27/44 )/17 t.new18/18 (/22 e.new28/46 )/23 t.new19/34 (/38 e.new24/48 )/39 (/54 s.new20/56 t.new21/57 e.new22/52 )/55 e.new23/50 >/1
      context[40] = context[24];
      context[41] = context[25];
      context[42] = context[26];
      context[43] = context[27];
      context[44] = context[28];
      context[45] = context[29];
      context[46] = context[30];
      context[47] = context[31];
      context[48] = context[36];
      context[49] = context[37];
      context[50] = context[32];
      context[51] = context[33];
      context[52] = 0;
      context[53] = 0;
      context[54] = refalrts::brackets_left( context[52], context[53], context[50], context[51] );
      if( ! context[54] )
        continue;
      refalrts::bracket_pointers(context[54], context[55]);
      // closed e.new25 as range 40
      // closed e.new26 as range 42
      // closed e.new27 as range 44
      // closed e.new28 as range 46
      // closed e.new24 as range 48
      // closed e.new23 as range 50
      if( ! refalrts::svar_left( context[56], context[52], context[53] ) )
        continue;
      context[58] = refalrts::tvar_left( context[57], context[52], context[53] );
      if( ! context[58] )
        continue;
      // closed e.new22 as range 52
      do {
        // </0 & DoTokenChain:1$9=2@5/4 s.Mode0/5 (/8 e.Collected0/59 )/9 (/12 e.OptionalFuncName/61 )/13 (/16 e.BracketTerms0/63 )/17 t.Pos/18 (/22 e.Value/65 )/23 t.ErrorList$b/34 (/38 e.BracketTerms/67 )/39 (/54 # TkCloseADT/56 t.1/57 )/55 e./69 >/1
        context[59] = context[40];
        context[60] = context[41];
        context[61] = context[42];
        context[62] = context[43];
        context[63] = context[44];
        context[64] = context[45];
        context[65] = context[46];
        context[66] = context[47];
        context[67] = context[48];
        context[68] = context[49];
        context[69] = context[50];
        context[70] = context[51];
        if( ! refalrts::ident_term( identifiers[ident_TkCloseADT], context[56] ) )
          continue;
        if( ! refalrts::empty_seq( context[52], context[53] ) )
          continue;
        // closed e.Collected0 as range 59
        // closed e.OptionalFuncName as range 61
        // closed e.BracketTerms0 as range 63
        // closed e.Value as range 65
        // closed e.BracketTerms as range 67
        // closed e. as range 69
        //DEBUG: t.Pos: 18
        //DEBUG: t.ErrorList$b: 34
        //DEBUG: t.1: 57
        //DEBUG: s.Mode0: 5
        //DEBUG: e.Collected0: 59
        //DEBUG: e.OptionalFuncName: 61
        //DEBUG: e.BracketTerms0: 63
        //DEBUG: e.Value: 65
        //DEBUG: e.BracketTerms: 67
        //DEBUG: e.: 69

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} )/9 (/12 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.1/57 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 AsIs: s.Mode0/5 HalfReuse: # Pattern/8 } Tile{ AsIs: t.ErrorList$b/34 AsIs: (/38 } Tile{ AsIs: e.Collected0/59 } Tile{ AsIs: (/16 } Tile{ Reuse: # Brackets/56 } Tile{ AsIs: e.OptionalFuncName/61 } Tile{ AsIs: e.BracketTerms0/63 } Tile{ AsIs: )/39 AsIs: (/54 } Tile{ HalfReuse: # ADT-Brackets/17 AsIs: t.Pos/18 AsIs: (/22 AsIs: e.Value/65 AsIs: )/23 } Tile{ AsIs: e.BracketTerms/67 } Tile{ AsIs: )/13 } Tile{ AsIs: )/55 AsIs: e./69 AsIs: >/1 ]] }
        refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
        refalrts::reinit_ident(context[8], identifiers[ident_Pattern]);
        refalrts::update_ident(context[56], identifiers[ident_Brackets]);
        refalrts::reinit_ident(context[17], identifiers[ident_ADTm_Brackets]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[38], context[55] );
        refalrts::link_brackets( context[54], context[13] );
        refalrts::link_brackets( context[22], context[23] );
        refalrts::link_brackets( context[16], context[39] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[55];
        res = refalrts::splice_elem( res, context[13] );
        res = refalrts::splice_evar( res, context[67], context[68] );
        res = refalrts::splice_evar( res, context[17], context[23] );
        res = refalrts::splice_evar( res, context[39], context[54] );
        res = refalrts::splice_evar( res, context[63], context[64] );
        res = refalrts::splice_evar( res, context[61], context[62] );
        res = refalrts::splice_elem( res, context[56] );
        res = refalrts::splice_elem( res, context[16] );
        res = refalrts::splice_evar( res, context[59], context[60] );
        res = refalrts::splice_evar( res, context[34], context[38] );
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoTokenChain:1$9=2@5/4 s.Mode0/5 (/8 e.Collected0/59 )/9 (/12 e.OptionalFuncName/61 )/13 (/16 e.BracketTerms0/63 )/17 t.Pos/18 (/22 e.Value/65 )/23 t.ErrorList$b/34 (/38 e.BracketTerms/67 )/39 (/54 s.Type/56 t.1/57 e.2/69 )/55 e./71 >/1
      context[59] = context[40];
      context[60] = context[41];
      context[61] = context[42];
      context[62] = context[43];
      context[63] = context[44];
      context[64] = context[45];
      context[65] = context[46];
      context[66] = context[47];
      context[67] = context[48];
      context[68] = context[49];
      context[69] = context[52];
      context[70] = context[53];
      context[71] = context[50];
      context[72] = context[51];
      // closed e.Collected0 as range 59
      // closed e.OptionalFuncName as range 61
      // closed e.BracketTerms0 as range 63
      // closed e.Value as range 65
      // closed e.BracketTerms as range 67
      // closed e.2 as range 69
      // closed e. as range 71
      //DEBUG: t.Pos: 18
      //DEBUG: t.ErrorList$b: 34
      //DEBUG: t.1: 57
      //DEBUG: s.Mode0: 5
      //DEBUG: s.Type: 56
      //DEBUG: e.Collected0: 59
      //DEBUG: e.OptionalFuncName: 61
      //DEBUG: e.BracketTerms0: 63
      //DEBUG: e.Value: 65
      //DEBUG: e.BracketTerms: 67
      //DEBUG: e.2: 69
      //DEBUG: e.: 71

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain:1$9=3@5/4 AsIs: s.Mode0/5 AsIs: (/8 AsIs: e.Collected0/59 AsIs: )/9 AsIs: (/12 AsIs: e.OptionalFuncName/61 AsIs: )/13 AsIs: (/16 AsIs: e.BracketTerms0/63 AsIs: )/17 AsIs: t.Pos/18 AsIs: (/22 AsIs: e.Value/65 AsIs: )/23 } Tile{ AsIs: (/38 } Tile{ AsIs: e.BracketTerms/67 } )/73 </74 & EL-AddErrorAt/75 Tile{ AsIs: t.ErrorList$b/34 } t.1/57/76"Missed \']\'"/78 Tile{ HalfReuse: >/39 AsIs: (/54 AsIs: s.Type/56 AsIs: t.1/57 AsIs: e.2/69 AsIs: )/55 AsIs: e./71 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[73]);
      refalrts::alloc_open_call(vm, context[74]);
      refalrts::alloc_name(vm, context[75], functions[efunc_ELm_AddErrorAt]);
      refalrts::copy_evar(vm, context[76], context[77], context[57], context[58]);
      refalrts::alloc_chars(vm, context[78], context[79], "Missed \']\'", 10);
      refalrts::update_name(context[4], functions[efunc_gen_DoTokenChain_B1S9A3Z5]);
      refalrts::reinit_close_call(context[39]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[54], context[55] );
      refalrts::push_stack( vm, context[39] );
      refalrts::push_stack( vm, context[74] );
      refalrts::link_brackets( context[38], context[73] );
      refalrts::link_brackets( context[22], context[23] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[39];
      res = refalrts::splice_evar( res, context[76], context[79] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[73], context[75] );
      res = refalrts::splice_evar( res, context[67], context[68] );
      res = refalrts::splice_elem( res, context[38] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoTokenChain:1$9=2@5/4 s.Mode0/5 (/8 e.Collected0/40 )/9 (/12 e.OptionalFuncName/42 )/13 (/16 e.BracketTerms0/44 )/17 t.Pos/18 (/22 e.Value/46 )/23 t.ErrorList$b/34 (/38 e.BracketTerms/48 )/39 e.Tokens$a/50 >/1
    context[40] = context[24];
    context[41] = context[25];
    context[42] = context[26];
    context[43] = context[27];
    context[44] = context[28];
    context[45] = context[29];
    context[46] = context[30];
    context[47] = context[31];
    context[48] = context[36];
    context[49] = context[37];
    context[50] = context[32];
    context[51] = context[33];
    // closed e.Collected0 as range 40
    // closed e.OptionalFuncName as range 42
    // closed e.BracketTerms0 as range 44
    // closed e.Value as range 46
    // closed e.BracketTerms as range 48
    // closed e.Tokens$a as range 50
    //DEBUG: t.Pos: 18
    //DEBUG: t.ErrorList$b: 34
    //DEBUG: s.Mode0: 5
    //DEBUG: e.Collected0: 40
    //DEBUG: e.OptionalFuncName: 42
    //DEBUG: e.BracketTerms0: 44
    //DEBUG: e.Value: 46
    //DEBUG: e.BracketTerms: 48
    //DEBUG: e.Tokens$a: 50

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain:1$9=3@5/4 AsIs: s.Mode0/5 AsIs: (/8 AsIs: e.Collected0/40 AsIs: )/9 AsIs: (/12 AsIs: e.OptionalFuncName/42 AsIs: )/13 AsIs: (/16 AsIs: e.BracketTerms0/44 AsIs: )/17 AsIs: t.Pos/18 AsIs: (/22 AsIs: e.Value/46 AsIs: )/23 } Tile{ AsIs: (/38 AsIs: e.BracketTerms/48 AsIs: )/39 } </52 & DoTokenChain:1$9=3:1*2/53 Tile{ AsIs: t.ErrorList$b/34 } Tile{ AsIs: e.Tokens$a/50 } >/54 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[52]);
    refalrts::alloc_name(vm, context[53], functions[efunc_gen_DoTokenChain_B1S9A3B1D2]);
    refalrts::alloc_close_call(vm, context[54]);
    refalrts::update_name(context[4], functions[efunc_gen_DoTokenChain_B1S9A3Z5]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[54] );
    refalrts::push_stack( vm, context[52] );
    refalrts::link_brackets( context[38], context[39] );
    refalrts::link_brackets( context[22], context[23] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[54] );
    res = refalrts::splice_evar( res, context[50], context[51] );
    res = refalrts::splice_evar( res, context[34], context[35] );
    res = refalrts::splice_evar( res, context[52], context[53] );
    res = refalrts::splice_evar( res, context[38], context[39] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoTokenChain:1$9=2@5/4 s.Mode0/5 (/8 e.Collected0/6 )/9 (/12 e.OptionalFuncName/10 )/13 (/16 e.BracketTerms0/14 )/17 t.Pos/18 (/22 e.Value/20 )/23 e.dyn/2 >/1
  // closed e.Collected0 as range 6
  // closed e.OptionalFuncName as range 10
  // closed e.BracketTerms0 as range 14
  // closed e.Value as range 20
  // closed e.dyn as range 2
  //DEBUG: t.Pos: 18
  //DEBUG: s.Mode0: 5
  //DEBUG: e.Collected0: 6
  //DEBUG: e.OptionalFuncName: 10
  //DEBUG: e.BracketTerms0: 14
  //DEBUG: e.Value: 20
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain:1$9=2@0/4 AsIs: s.Mode0/5 HalfReuse: # Pattern/8 } Tile{ AsIs: (/12 } Tile{ AsIs: e.Collected0/6 } Tile{ AsIs: (/16 } Tile{ HalfReuse: # Brackets/9 } Tile{ AsIs: e.OptionalFuncName/10 } Tile{ AsIs: e.BracketTerms0/14 } Tile{ AsIs: )/13 } Tile{ AsIs: )/17 AsIs: t.Pos/18 AsIs: (/22 AsIs: e.Value/20 AsIs: )/23 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_DoTokenChain_B1S9A2Z0]);
  refalrts::reinit_ident(context[8], identifiers[ident_Pattern]);
  refalrts::reinit_ident(context[9], identifiers[ident_Brackets]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[22], context[23] );
  refalrts::link_brackets( context[12], context[17] );
  refalrts::link_brackets( context[16], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[17];
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_elem( res, context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoTokenChain_B1S9A2Z5("DoTokenChain:1$9=2@5", COOKIE1_, COOKIE2_, func_gen_DoTokenChain_B1S9A2Z5);


static refalrts::FnResult func_gen_DoTokenChain_B1S12A2Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 41 elems
  refalrts::Iter context[41];
  refalrts::zeros( context, 41 );
  // </0 & DoTokenChain:1$12=2@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoTokenChain:1$12=2@1/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 t.new5/18 (/22 e.new6/20 )/23 e.new7/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  context[19] = refalrts::tvar_left( context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  context[20] = 0;
  context[21] = 0;
  context[22] = refalrts::brackets_left( context[20], context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[22], context[23]);
  // closed e.new6 as range 20
  // closed e.new7 as range 2
  do {
    // </0 & DoTokenChain:1$12=2@1/4 s.Mode0/5 (/8 e.Collected0/24 )/9 (/12 e.OptionalFuncName/26 )/13 (/16 e.BracketTerms/28 )/17 t.Pos0/18 (/22 e.Tokens0/30 )/23 t.ErrorList$a/34 >/1
    context[24] = context[6];
    context[25] = context[7];
    context[26] = context[10];
    context[27] = context[11];
    context[28] = context[14];
    context[29] = context[15];
    context[30] = context[20];
    context[31] = context[21];
    context[32] = context[2];
    context[33] = context[3];
    // closed e.Collected0 as range 24
    // closed e.OptionalFuncName as range 26
    // closed e.BracketTerms as range 28
    // closed e.Tokens0 as range 30
    context[35] = refalrts::tvar_left( context[34], context[32], context[33] );
    if( ! context[35] )
      continue;
    if( ! refalrts::empty_seq( context[32], context[33] ) )
      continue;
    //DEBUG: t.Pos0: 18
    //DEBUG: s.Mode0: 5
    //DEBUG: e.Collected0: 24
    //DEBUG: e.OptionalFuncName: 26
    //DEBUG: e.BracketTerms: 28
    //DEBUG: e.Tokens0: 30
    //DEBUG: t.ErrorList$a: 34

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain:1$12=3@1/4 AsIs: s.Mode0/5 AsIs: (/8 AsIs: e.Collected0/24 AsIs: )/9 AsIs: (/12 AsIs: e.OptionalFuncName/26 AsIs: )/13 AsIs: (/16 AsIs: e.BracketTerms/28 AsIs: )/17 } </36 & Block/37 Tile{ AsIs: t.ErrorList$a/34 } s.Mode0/5/38 (/39 # TkOpenBlock/40 Tile{ AsIs: t.Pos0/18 HalfReuse: )/22 AsIs: e.Tokens0/30 HalfReuse: >/23 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[36]);
    refalrts::alloc_name(vm, context[37], functions[efunc_Block]);
    refalrts::copy_stvar(vm, context[38], context[5]);
    refalrts::alloc_open_bracket(vm, context[39]);
    refalrts::alloc_ident(vm, context[40], identifiers[ident_TkOpenBlock]);
    refalrts::update_name(context[4], functions[efunc_gen_DoTokenChain_B1S12A3Z1]);
    refalrts::reinit_close_bracket(context[22]);
    refalrts::reinit_close_call(context[23]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[36] );
    refalrts::link_brackets( context[39], context[22] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[18], context[23] );
    res = refalrts::splice_evar( res, context[38], context[40] );
    res = refalrts::splice_evar( res, context[34], context[35] );
    res = refalrts::splice_evar( res, context[36], context[37] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoTokenChain:1$12=2@1/4 s.Mode0/5 (/8 e.Collected0/6 )/9 (/12 e.OptionalFuncName/10 )/13 (/16 e.BracketTerms/14 )/17 t.Pos0/18 (/22 e.Tokens0/20 )/23 e.dyn/2 >/1
  // closed e.Collected0 as range 6
  // closed e.OptionalFuncName as range 10
  // closed e.BracketTerms as range 14
  // closed e.Tokens0 as range 20
  // closed e.dyn as range 2
  //DEBUG: t.Pos0: 18
  //DEBUG: s.Mode0: 5
  //DEBUG: e.Collected0: 6
  //DEBUG: e.OptionalFuncName: 10
  //DEBUG: e.BracketTerms: 14
  //DEBUG: e.Tokens0: 20
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} (/16 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain:1$12=2@0/4 AsIs: s.Mode0/5 AsIs: (/8 AsIs: e.Collected0/6 HalfReuse: (/9 HalfReuse: # Brackets/12 } Tile{ AsIs: e.OptionalFuncName/10 } Tile{ AsIs: e.BracketTerms/14 } Tile{ AsIs: )/13 } Tile{ AsIs: )/17 AsIs: t.Pos0/18 AsIs: (/22 AsIs: e.Tokens0/20 AsIs: )/23 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_DoTokenChain_B1S12A2Z0]);
  refalrts::reinit_open_bracket(context[9]);
  refalrts::reinit_ident(context[12], identifiers[ident_Brackets]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[22], context[23] );
  refalrts::link_brackets( context[8], context[17] );
  refalrts::link_brackets( context[9], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[17];
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  refalrts::splice_to_freelist_open( vm, context[12], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoTokenChain_B1S12A2Z1("DoTokenChain:1$12=2@1", COOKIE1_, COOKIE2_, func_gen_DoTokenChain_B1S12A2Z1);


static refalrts::FnResult func_gen_DoTokenChain_B1S9A3Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 43 elems
  refalrts::Iter context[43];
  refalrts::zeros( context, 43 );
  // </0 & DoTokenChain:1$9=3@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoTokenChain:1$9=3@4/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 t.new4/17 (/21 e.new5/19 )/22 (/25 e.new6/23 )/26 e.new7/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  context[18] = refalrts::tvar_left( context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  // closed e.new5 as range 19
  // closed e.new6 as range 23
  // closed e.new7 as range 2
  do {
    // </0 & DoTokenChain:1$9=3@4/4 (/7 e.Collected0/27 )/8 (/11 e.OptionalFuncName/29 )/12 (/15 e.BracketTerms0/31 )/16 t.Pos/17 (/21 e.Value/33 )/22 (/25 e.BracketTerms1/35 )/26 t.ErrorList$c/39 e.Tokens$b/37 >/1
    context[27] = context[5];
    context[28] = context[6];
    context[29] = context[9];
    context[30] = context[10];
    context[31] = context[13];
    context[32] = context[14];
    context[33] = context[19];
    context[34] = context[20];
    context[35] = context[23];
    context[36] = context[24];
    context[37] = context[2];
    context[38] = context[3];
    // closed e.Collected0 as range 27
    // closed e.OptionalFuncName as range 29
    // closed e.BracketTerms0 as range 31
    // closed e.Value as range 33
    // closed e.BracketTerms1 as range 35
    context[40] = refalrts::tvar_left( context[39], context[37], context[38] );
    if( ! context[40] )
      continue;
    // closed e.Tokens$b as range 37
    //DEBUG: t.Pos: 17
    //DEBUG: e.Collected0: 27
    //DEBUG: e.OptionalFuncName: 29
    //DEBUG: e.BracketTerms0: 31
    //DEBUG: e.Value: 33
    //DEBUG: e.BracketTerms1: 35
    //DEBUG: t.ErrorList$c: 39
    //DEBUG: e.Tokens$b: 37

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 HalfReuse: # Classic/7 } Tile{ HalfReuse: # Pattern/26 AsIs: t.ErrorList$c/39 } (/41 Tile{ AsIs: e.Collected0/27 } Tile{ AsIs: (/25 } # Brackets/42 Tile{ AsIs: e.OptionalFuncName/29 } Tile{ AsIs: e.BracketTerms0/31 } Tile{ AsIs: )/12 AsIs: (/15 } Tile{ HalfReuse: # ADT-Brackets/16 AsIs: t.Pos/17 AsIs: (/21 AsIs: e.Value/33 AsIs: )/22 } Tile{ AsIs: e.BracketTerms1/35 } Tile{ AsIs: )/8 HalfReuse: )/11 } Tile{ AsIs: e.Tokens$b/37 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[41]);
    refalrts::alloc_ident(vm, context[42], identifiers[ident_Brackets]);
    refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
    refalrts::reinit_ident(context[7], identifiers[ident_Classic]);
    refalrts::reinit_ident(context[26], identifiers[ident_Pattern]);
    refalrts::reinit_ident(context[16], identifiers[ident_ADTm_Brackets]);
    refalrts::reinit_close_bracket(context[11]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[41], context[11] );
    refalrts::link_brackets( context[15], context[8] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[25], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[8], context[11] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[16], context[22] );
    res = refalrts::splice_evar( res, context[12], context[15] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_elem( res, context[42] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[41] );
    res = refalrts::splice_evar( res, context[26], context[40] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoTokenChain:1$9=3@4/4 (/7 e.Collected0/5 )/8 (/11 e.OptionalFuncName/9 )/12 (/15 e.BracketTerms0/13 )/16 t.Pos/17 (/21 e.Value/19 )/22 (/25 e.BracketTerms1/23 )/26 e.dyn/2 >/1
  // closed e.Collected0 as range 5
  // closed e.OptionalFuncName as range 9
  // closed e.BracketTerms0 as range 13
  // closed e.Value as range 19
  // closed e.BracketTerms1 as range 23
  // closed e.dyn as range 2
  //DEBUG: t.Pos: 17
  //DEBUG: e.Collected0: 5
  //DEBUG: e.OptionalFuncName: 9
  //DEBUG: e.BracketTerms0: 13
  //DEBUG: e.Value: 19
  //DEBUG: e.BracketTerms1: 23
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </15 } & DoTokenChain:1$9=3@0/27 Tile{ HalfReuse: # Classic/0 HalfReuse: # Pattern/4 AsIs: (/7 AsIs: e.Collected0/5 HalfReuse: (/8 HalfReuse: # Brackets/11 } Tile{ AsIs: e.OptionalFuncName/9 } Tile{ AsIs: e.BracketTerms0/13 } Tile{ AsIs: )/12 } Tile{ AsIs: )/16 AsIs: t.Pos/17 AsIs: (/21 AsIs: e.Value/19 AsIs: )/22 AsIs: (/25 AsIs: e.BracketTerms1/23 AsIs: )/26 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[27], functions[efunc_gen_DoTokenChain_B1S9A3Z0]);
  refalrts::reinit_open_call(context[15]);
  refalrts::reinit_ident(context[0], identifiers[ident_Classic]);
  refalrts::reinit_ident(context[4], identifiers[ident_Pattern]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::reinit_ident(context[11], identifiers[ident_Brackets]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[15] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[7], context[16] );
  refalrts::link_brackets( context[8], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[16];
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[0], context[11] );
  res = refalrts::splice_elem( res, context[27] );
  res = refalrts::splice_elem( res, context[15] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoTokenChain_B1S9A3Z4("DoTokenChain:1$9=3@4", COOKIE1_, COOKIE2_, func_gen_DoTokenChain_B1S9A3Z4);


static refalrts::FnResult func_gen_DoTokenChain_B1S9A3Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 43 elems
  refalrts::Iter context[43];
  refalrts::zeros( context, 43 );
  // </0 & DoTokenChain:1$9=3@5/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoTokenChain:1$9=3@5/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 t.new5/18 (/22 e.new6/20 )/23 (/26 e.new7/24 )/27 e.new8/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  context[19] = refalrts::tvar_left( context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  context[20] = 0;
  context[21] = 0;
  context[22] = refalrts::brackets_left( context[20], context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[22], context[23]);
  context[24] = 0;
  context[25] = 0;
  context[26] = refalrts::brackets_left( context[24], context[25], context[2], context[3] );
  if( ! context[26] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[26], context[27]);
  // closed e.new6 as range 20
  // closed e.new7 as range 24
  // closed e.new8 as range 2
  do {
    // </0 & DoTokenChain:1$9=3@5/4 s.Mode0/5 (/8 e.Collected0/28 )/9 (/12 e.OptionalFuncName/30 )/13 (/16 e.BracketTerms0/32 )/17 t.Pos/18 (/22 e.Value/34 )/23 (/26 e.BracketTerms1/36 )/27 t.ErrorList$c/40 e.Tokens$b/38 >/1
    context[28] = context[6];
    context[29] = context[7];
    context[30] = context[10];
    context[31] = context[11];
    context[32] = context[14];
    context[33] = context[15];
    context[34] = context[20];
    context[35] = context[21];
    context[36] = context[24];
    context[37] = context[25];
    context[38] = context[2];
    context[39] = context[3];
    // closed e.Collected0 as range 28
    // closed e.OptionalFuncName as range 30
    // closed e.BracketTerms0 as range 32
    // closed e.Value as range 34
    // closed e.BracketTerms1 as range 36
    context[41] = refalrts::tvar_left( context[40], context[38], context[39] );
    if( ! context[41] )
      continue;
    // closed e.Tokens$b as range 38
    //DEBUG: t.Pos: 18
    //DEBUG: s.Mode0: 5
    //DEBUG: e.Collected0: 28
    //DEBUG: e.OptionalFuncName: 30
    //DEBUG: e.BracketTerms0: 32
    //DEBUG: e.Value: 34
    //DEBUG: e.BracketTerms1: 36
    //DEBUG: t.ErrorList$c: 40
    //DEBUG: e.Tokens$b: 38

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 AsIs: s.Mode0/5 HalfReuse: # Pattern/8 } Tile{ AsIs: t.ErrorList$c/40 } Tile{ HalfReuse: (/27 } Tile{ AsIs: e.Collected0/28 } Tile{ AsIs: (/26 } # Brackets/42 Tile{ AsIs: e.OptionalFuncName/30 } Tile{ AsIs: e.BracketTerms0/32 } Tile{ AsIs: )/13 AsIs: (/16 } Tile{ HalfReuse: # ADT-Brackets/17 AsIs: t.Pos/18 AsIs: (/22 AsIs: e.Value/34 AsIs: )/23 } Tile{ AsIs: e.BracketTerms1/36 } Tile{ AsIs: )/9 HalfReuse: )/12 } Tile{ AsIs: e.Tokens$b/38 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_ident(vm, context[42], identifiers[ident_Brackets]);
    refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
    refalrts::reinit_ident(context[8], identifiers[ident_Pattern]);
    refalrts::reinit_open_bracket(context[27]);
    refalrts::reinit_ident(context[17], identifiers[ident_ADTm_Brackets]);
    refalrts::reinit_close_bracket(context[12]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[27], context[12] );
    refalrts::link_brackets( context[16], context[9] );
    refalrts::link_brackets( context[22], context[23] );
    refalrts::link_brackets( context[26], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[38], context[39] );
    res = refalrts::splice_evar( res, context[9], context[12] );
    res = refalrts::splice_evar( res, context[36], context[37] );
    res = refalrts::splice_evar( res, context[17], context[23] );
    res = refalrts::splice_evar( res, context[13], context[16] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_elem( res, context[42] );
    res = refalrts::splice_elem( res, context[26] );
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_elem( res, context[27] );
    res = refalrts::splice_evar( res, context[40], context[41] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoTokenChain:1$9=3@5/4 s.Mode0/5 (/8 e.Collected0/6 )/9 (/12 e.OptionalFuncName/10 )/13 (/16 e.BracketTerms0/14 )/17 t.Pos/18 (/22 e.Value/20 )/23 (/26 e.BracketTerms1/24 )/27 e.dyn/2 >/1
  // closed e.Collected0 as range 6
  // closed e.OptionalFuncName as range 10
  // closed e.BracketTerms0 as range 14
  // closed e.Value as range 20
  // closed e.BracketTerms1 as range 24
  // closed e.dyn as range 2
  //DEBUG: t.Pos: 18
  //DEBUG: s.Mode0: 5
  //DEBUG: e.Collected0: 6
  //DEBUG: e.OptionalFuncName: 10
  //DEBUG: e.BracketTerms0: 14
  //DEBUG: e.Value: 20
  //DEBUG: e.BracketTerms1: 24
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain:1$9=3@0/4 AsIs: s.Mode0/5 HalfReuse: # Pattern/8 } Tile{ AsIs: (/12 } Tile{ AsIs: e.Collected0/6 } Tile{ AsIs: (/16 } Tile{ HalfReuse: # Brackets/9 } Tile{ AsIs: e.OptionalFuncName/10 } Tile{ AsIs: e.BracketTerms0/14 } Tile{ AsIs: )/13 } Tile{ AsIs: )/17 AsIs: t.Pos/18 AsIs: (/22 AsIs: e.Value/20 AsIs: )/23 AsIs: (/26 AsIs: e.BracketTerms1/24 AsIs: )/27 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_DoTokenChain_B1S9A3Z0]);
  refalrts::reinit_ident(context[8], identifiers[ident_Pattern]);
  refalrts::reinit_ident(context[9], identifiers[ident_Brackets]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[26], context[27] );
  refalrts::link_brackets( context[22], context[23] );
  refalrts::link_brackets( context[12], context[17] );
  refalrts::link_brackets( context[16], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[17];
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_elem( res, context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoTokenChain_B1S9A3Z5("DoTokenChain:1$9=3@5", COOKIE1_, COOKIE2_, func_gen_DoTokenChain_B1S9A3Z5);


static refalrts::FnResult func_gen_DoTokenChain_B1S12A3Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & DoTokenChain:1$12=3@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoTokenChain:1$12=3@1/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 e.new5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 2
  do {
    // </0 & DoTokenChain:1$12=3@1/4 s.Mode0/5 (/8 e.Collected0/18 )/9 (/12 e.OptionalFuncName/20 )/13 (/16 e.BracketTerms/22 )/17 t.ErrorList$b/26 (/30 e.Body/28 )/31 e.Tokens$a/24 >/1
    context[18] = context[6];
    context[19] = context[7];
    context[20] = context[10];
    context[21] = context[11];
    context[22] = context[14];
    context[23] = context[15];
    context[24] = context[2];
    context[25] = context[3];
    // closed e.Collected0 as range 18
    // closed e.OptionalFuncName as range 20
    // closed e.BracketTerms as range 22
    context[27] = refalrts::tvar_left( context[26], context[24], context[25] );
    if( ! context[27] )
      continue;
    context[28] = 0;
    context[29] = 0;
    context[30] = refalrts::brackets_left( context[28], context[29], context[24], context[25] );
    if( ! context[30] )
      continue;
    refalrts::bracket_pointers(context[30], context[31]);
    // closed e.Body as range 28
    // closed e.Tokens$a as range 24
    //DEBUG: s.Mode0: 5
    //DEBUG: e.Collected0: 18
    //DEBUG: e.OptionalFuncName: 20
    //DEBUG: e.BracketTerms: 22
    //DEBUG: t.ErrorList$b: 26
    //DEBUG: e.Body: 28
    //DEBUG: e.Tokens$a: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain/4 AsIs: s.Mode0/5 HalfReuse: # Result/8 } Tile{ AsIs: t.ErrorList$b/26 AsIs: (/30 } Tile{ AsIs: e.Collected0/18 } Tile{ AsIs: (/12 } Tile{ HalfReuse: # Brackets/9 } Tile{ AsIs: e.OptionalFuncName/20 } Tile{ AsIs: e.BracketTerms/22 } Tile{ AsIs: )/13 AsIs: (/16 } # Closure/32 Tile{ AsIs: e.Body/28 } Tile{ AsIs: )/17 } Tile{ AsIs: )/31 AsIs: e.Tokens$a/24 AsIs: >/1 ]] }
    refalrts::alloc_ident(vm, context[32], identifiers[ident_Closure]);
    refalrts::update_name(context[4], functions[efunc_DoTokenChain]);
    refalrts::reinit_ident(context[8], identifiers[ident_Result]);
    refalrts::reinit_ident(context[9], identifiers[ident_Brackets]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[30], context[31] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[31];
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_elem( res, context[32] );
    res = refalrts::splice_evar( res, context[13], context[16] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[26], context[30] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoTokenChain:1$12=3@1/4 s.Mode0/5 (/8 e.Collected0/6 )/9 (/12 e.OptionalFuncName/10 )/13 (/16 e.BracketTerms/14 )/17 e.dyn/2 >/1
  // closed e.Collected0 as range 6
  // closed e.OptionalFuncName as range 10
  // closed e.BracketTerms as range 14
  // closed e.dyn as range 2
  //DEBUG: s.Mode0: 5
  //DEBUG: e.Collected0: 6
  //DEBUG: e.OptionalFuncName: 10
  //DEBUG: e.BracketTerms: 14
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} (/16 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoTokenChain:1$12=3@0/4 AsIs: s.Mode0/5 AsIs: (/8 AsIs: e.Collected0/6 HalfReuse: (/9 HalfReuse: # Brackets/12 } Tile{ AsIs: e.OptionalFuncName/10 } Tile{ AsIs: e.BracketTerms/14 } Tile{ AsIs: )/13 } Tile{ AsIs: )/17 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_DoTokenChain_B1S12A3Z0]);
  refalrts::reinit_open_bracket(context[9]);
  refalrts::reinit_ident(context[12], identifiers[ident_Brackets]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[8], context[17] );
  refalrts::link_brackets( context[9], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[17];
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  refalrts::splice_to_freelist_open( vm, context[12], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoTokenChain_B1S12A3Z1("DoTokenChain:1$12=3@1", COOKIE1_, COOKIE2_, func_gen_DoTokenChain_B1S12A3Z1);


//End of file
