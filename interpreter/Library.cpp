// This file automatically generated from 'Library.ref'
// Don't edit! Edit 'Library.ref' and recompile it

#include "refalrts.h"

#define cookie_ns cookie_ns_983424760_416719104
#define COOKIE1_ 983424760U
#define COOKIE2_ 416719104U

enum efunc {
  efunc_Mu = 0,
  efunc_u_u_Stepm_Drop = 1,
  efunc_u_u_Metau_Mu = 2,
  efunc_d_table = 3,
  efunc_Up = 4,
  efunc_Evm_met = 5,
  efunc_Residue = 6,
  efunc_u_u_Metau_Residue = 7,
  efunc_gen_Add_S2C1 = 8,
  efunc_Add = 9,
  efunc_Addm_Digits = 10,
  efunc_u_u_Stepm_Start = 11,
  efunc_NormArithmArg = 12,
  efunc_Addm_Normed = 13,
  efunc_u_u_Stepm_End = 14,
  efunc_gen_NormArithmArg_S1C1 = 15,
  efunc_gen_NormArithmArg_S2C1 = 16,
  efunc_gen_NormArithmArg_S2C2 = 17,
  efunc_gen_NormArithmArg_S3C1 = 18,
  efunc_gen_NormArithmArg_S3C2 = 19,
  efunc_gen_NormArithmArg_S4C1 = 20,
  efunc_gen_NormArithmArg_S4C2 = 21,
  efunc_gen_NormArithmArg_S5C1 = 22,
  efunc_gen_NormArithmArg_S5C2 = 23,
  efunc_NormNumber = 24,
  efunc_Type = 25,
  efunc_gen_NormNumber_S7C1 = 26,
  efunc_gen_NormNumber_S8C1 = 27,
  efunc_gen_NormNumber_S9C1 = 28,
  efunc_AllDigits = 29,
  efunc_AllDigitsm_SwFirst = 30,
  efunc_Addm_Nat = 31,
  efunc_Comparem_Align = 32,
  efunc_gen_Subm_Nat_B1 = 33,
  efunc_gen_Addm_Nat_S1B1 = 34,
  efunc_Arg = 35,
  efunc_Br = 36,
  efunc_Buried = 37,
  efunc_Card = 38,
  efunc_Getm_Aux = 39,
  efunc_Chr = 40,
  efunc_gen_Cp_B1 = 41,
  efunc_Cp = 42,
  efunc_gen_Dg_B1 = 43,
  efunc_Dg = 44,
  efunc_Dgall = 45,
  efunc_gen_Div_S1A1 = 46,
  efunc_gen_Div_S2C1 = 47,
  efunc_gen_Div_S2C2 = 48,
  efunc_Div = 49,
  efunc_Divmodm_Digits = 50,
  efunc_Divmodm_Normed = 51,
  efunc_gen_Divmod_S2C1 = 52,
  efunc_gen_Divmod_S2C2 = 53,
  efunc_Divmod = 54,
  efunc_gen_Divmodm_Nat_S1A1Z1 = 55,
  efunc_gen_Divmodm_Nat_S2A1Z1 = 56,
  efunc_gen_Divmodm_Nat_S2A1B1 = 57,
  efunc_gen_Divmodm_Nat_D2 = 58,
  efunc_gen_Divmodm_Nat_S1A1Z2 = 59,
  efunc_gen_Divmodm_Nat_S2A1Z2 = 60,
  efunc_gen_Divmodm_Nat_S1A1Z3 = 61,
  efunc_gen_Divmodm_Nat_S2A1Z3 = 62,
  efunc_gen_Divmodm_Nat_S1A1Z4 = 63,
  efunc_gen_Divmodm_Nat_S2A1Z4 = 64,
  efunc_gen_Divmodm_Nat_S1A1 = 65,
  efunc_gen_Divmodm_Nat_S1A1Z0 = 66,
  efunc_gen_Divmodm_Nat_S2A5 = 67,
  efunc_gen_Divmodm_Nat_S2A5Z0 = 68,
  efunc_gen_Divmodm_Nat_S2A5B1 = 69,
  efunc_gen_Divmodm_Nat_S2A4 = 70,
  efunc_Divmodm_Shl = 71,
  efunc_gen_Divmodm_Nat_S2A4Z0 = 72,
  efunc_gen_Divmodm_Nat_S2A3 = 73,
  efunc_Divmodm_Align = 74,
  efunc_gen_Divmodm_Align_S2A1 = 75,
  efunc_gen_Divmodm_CalcDigits_Z2 = 76,
  efunc_gen_Divmodm_Align_Z0 = 77,
  efunc_gen_Divmodm_Nat_S2A3Z0 = 78,
  efunc_gen_Divmodm_Nat_S2A2 = 79,
  efunc_gen_Divmodm_Nat_S2A2Z0 = 80,
  efunc_gen_Divmodm_Nat_S2A1 = 81,
  efunc_gen_Divmodm_Nat_S2A1Z0 = 82,
  efunc_Divmodm_Nat = 83,
  efunc_Divmodm_Natm_Normed = 84,
  efunc_LeadingZeros = 85,
  efunc_Divmodm_CalcDigits = 86,
  efunc_gen_Divmodm_CalcDigits_A1 = 87,
  efunc_Divmodm_GuessDigit = 88,
  efunc_gen_Divmodm_CalcDigits_A1Z1 = 89,
  efunc_gen_Divmodm_GetNextDigit_S2A1Z1 = 90,
  efunc_gen_Divmodm_CalcDigits_A1Z2 = 91,
  efunc_gen_Divmodm_GetNextDigit_S2A1Z2 = 92,
  efunc_gen_Divmodm_GetNextDigit_D2 = 93,
  efunc_gen_Divmodm_CalcDigits_B1D2 = 94,
  efunc_gen_Divmodm_CalcDigits_A1Z0 = 95,
  efunc_gen_Divmodm_GetNextDigit_S2A1 = 96,
  efunc_gen_Divmodm_CalcDigits_Z0 = 97,
  efunc_gen_Divmodm_AdjustDigit_Z1 = 98,
  efunc_Subm_Normed = 99,
  efunc_Mulm_Natm_Line = 100,
  efunc_gen_Divmodm_GetNextDigit_S2A1Z0 = 101,
  efunc_Divmodm_GetNextDigit = 102,
  efunc_Divmodm_AdjustDigit = 103,
  efunc_Subm_Digits = 104,
  efunc_gen_Divmodm_AdjustDigit_Z0 = 105,
  efunc_Explode = 106,
  efunc_First = 107,
  efunc_Get = 108,
  efunc_Autoopen = 109,
  efunc_ZeroHandle = 110,
  efunc_gen_Implode_S1B1 = 111,
  efunc_gen_DoImplode_Z2 = 112,
  efunc_gen_DoImplode_Z1D3 = 113,
  efunc_Implode = 114,
  efunc_gen_DoImplode_S4C1 = 115,
  efunc_gen_DoImplode_S5C1 = 116,
  efunc_DoImplode = 117,
  efunc_Implodeu_Ext = 118,
  efunc_gen_DoImplode_Z0 = 119,
  efunc_Last = 120,
  efunc_Lenw = 121,
  efunc_Lower = 122,
  efunc_gen_Mod_S1A1 = 123,
  efunc_gen_Mod_S2C1 = 124,
  efunc_gen_Mod_S2C2 = 125,
  efunc_Mod = 126,
  efunc_gen_Mul_S2C1 = 127,
  efunc_Mul = 128,
  efunc_Mulm_Digits = 129,
  efunc_Mulm_Normed = 130,
  efunc_Mulm_Nat = 131,
  efunc_gen_Mulm_Natm_Line_S2B1 = 132,
  efunc_Numb = 133,
  efunc_Neg = 134,
  efunc_DoNumb = 135,
  efunc_Numbm_Aux = 136,
  efunc_DoNumbm_AddDigit = 137,
  efunc_Open = 138,
  efunc_Ord = 139,
  efunc_Print = 140,
  efunc_Putm_Aux = 141,
  efunc_Prout = 142,
  efunc_Putoutm_Aux = 143,
  efunc_Proud = 144,
  efunc_Trout = 145,
  efunc_Put = 146,
  efunc_Putout = 147,
  efunc_gen_Rp_B1 = 148,
  efunc_Rp = 149,
  efunc_Step = 150,
  efunc_gen_Sub_S2C1 = 151,
  efunc_Sub = 152,
  efunc_DoSubm_Natm_Nat = 153,
  efunc_gen_Subm_Nat_B1Z0 = 154,
  efunc_Subm_Nat = 155,
  efunc_Subm_Natm_Nat = 156,
  efunc_gen_DoSubm_Natm_Nat_S1B2 = 157,
  efunc_gen_DoSubm_Natm_Nat_S1B1 = 158,
  efunc_gen_Symb_S2A1 = 159,
  efunc_Symbm_Nat = 160,
  efunc_gen_Symb_S2B1D4 = 161,
  efunc_Symb = 162,
  efunc_Symbm_Digit = 163,
  efunc_gen_Symbm_Nat_S2A2 = 164,
  efunc_gen_Symbm_Nat_S2A1 = 165,
  efunc_gen_Divmodm_Nat_S2A1Z5 = 166,
  efunc_Time = 167,
  efunc_Upper = 168,
  efunc_Sysfun = 169,
  efunc_ExistFile = 170,
  efunc_gen_Sysfunm_Xxin_B1 = 171,
  efunc_Xxoutm_Wrap = 172,
  efunc_gen_Openm_Auto_A1Z1 = 173,
  efunc_GetFreeHandle = 174,
  efunc_Xxoutm_Scan = 175,
  efunc_gen_Openm_Auto_D1 = 176,
  efunc_gen_Sysfunm_Xxin_B1S1A1 = 177,
  efunc_Xxinm_Scan = 178,
  efunc_gen_Openm_Auto_A1Z2 = 179,
  efunc_Sysfunm_Xxin = 180,
  efunc_gen_Xxinm_Scan_S14B1 = 181,
  efunc_Sysfunm_Xxinm_ERROR = 182,
  efunc_gen_Xxinm_Scan_S38B1 = 183,
  efunc_HexDigit = 184,
  efunc_Close = 185,
  efunc_gen_Quote_D2 = 186,
  efunc_Quote = 187,
  efunc_Sysfunm_Xxout = 188,
  efunc_gen_Xxoutm_Wrap_B1 = 189,
  efunc_Writem_Aux = 190,
  efunc_gen_Xxoutm_Scan_S1A1 = 191,
  efunc_gen_Xxoutm_Scan_S2A1 = 192,
  efunc_gen_Xxoutm_Scan_S4A1 = 193,
  efunc_gen_Xxoutm_Scan_S6A1 = 194,
  efunc_gen_Xxoutm_Scan_S7A1 = 195,
  efunc_gen_Xxoutm_Chars_Z1 = 196,
  efunc_Xxoutm_Chars = 197,
  efunc_gen_Xxoutm_Chars_S7A1 = 198,
  efunc_gen_Hex_D16 = 199,
  efunc_gen_Xxoutm_Chars_S7A1Z0 = 200,
  efunc_gen_Xxoutm_Chars_S1C1 = 201,
  efunc_gen_Xxoutm_Chars_Z0 = 202,
  efunc_Hex = 203,
  efunc_Freeze = 204,
  efunc_Freezer = 205,
  efunc_Dn = 206,
  efunc_GetEnv = 207,
  efunc_System = 208,
  efunc_Exit = 209,
  efunc_GetCurrentDirectory = 210,
  efunc_RemoveFile = 211,
  efunc_Explodeu_Ext = 212,
  efunc_TimeElapsed = 213,
  efunc_gen_Compare_S2C1 = 214,
  efunc_Compare = 215,
  efunc_Comparem_Digits = 216,
  efunc_Comparem_Normed = 217,
  efunc_Comparem_Nat = 218,
  efunc_Comparem_ByDigits = 219,
  efunc_DeSysfun = 220,
  efunc_XMLParse = 221,
  efunc_Random = 222,
  efunc_RandomDigit = 223,
  efunc_Write = 224,
  efunc_ListOfBuiltin = 225,
  efunc_SizeOf = 226,
  efunc_GetPID = 227,
  efunc_GetPPID = 228,
  efunc_gen_Openm_Auto_A1 = 229,
  efunc_gen_Openm_Auto_A1Z0 = 230,
  efunc_Openm_Auto = 231,
  efunc_SymbCompare = 232,
  efunc_WriteBytes = 233,
  efunc_ReadBytes = 234,
  efunc_FTell = 235,
  efunc_FSeek = 236,
  efunc_RenameFile = 237,
  efunc_Modulem_Load = 238,
  efunc_Modulem_Unload = 239,
  efunc_Modulem_Mu = 240,
  efunc_Modulem_LookupFunction = 241,
  efunc_Modulem_FunctionPtr = 242,
  efunc_Platform = 243,
  efunc_DirectorySeparators = 244,
  efunc_gen_DirectorySeparator_A1 = 245,
  efunc_DirectorySeparator = 246,
  efunc_gen_IsDirectorySeparator_B1 = 247,
  efunc_IsDirectorySeparator = 248,
  efunc_PathSeparator = 249,
  efunc_u_u_INIT = 250,
  efunc_u_u_FINAL = 251,
  efunc_gen_Divmodm_Nat_S2A2Z1 = 252,
  efunc_gen_Divmodm_Nat_S2A2Z2 = 253,
  efunc_gen_Divmodm_Nat_S2A2Z3 = 254,
  efunc_gen_Divmodm_Nat_S2A2Z4 = 255,
  efunc_gen_Divmodm_GetNextDigit_S2A1Z3 = 256,
  efunc_gen_Divmodm_GetNextDigit_S2A1Z4 = 257,
  efunc_gen_Subm_Nat_B1Z1 = 258,
  efunc_gen_Divmodm_Nat_S2A2Z5 = 259,
  efunc_gen_Xxoutm_Chars_Z1S1C1 = 260,
  efunc_gen_Xxoutm_Chars_S7A1Z1 = 261,
  efunc_gen_Divmodm_Nat_S2A3Z1 = 262,
  efunc_gen_Divmodm_Nat_S2A3Z2 = 263,
  efunc_gen_Divmodm_Nat_S2A3Z3 = 264,
  efunc_gen_Divmodm_Nat_S2A3Z4 = 265,
  efunc_gen_Divmodm_CalcDigits_A1Z3 = 266,
  efunc_gen_DoImplode_Z2S4C1 = 267,
  efunc_gen_DoImplode_Z2S5C1 = 268,
  efunc_gen_Divmodm_Nat_S2A4Z1 = 269,
  efunc_gen_Divmodm_Nat_S2A5Z1 = 270,
  efunc_gen_Divmodm_Nat_S2A4Z2 = 271,
  efunc_gen_Divmodm_Nat_S2A5Z2 = 272,
  efunc_gen_Divmodm_Nat_S2A4Z3 = 273,
  efunc_gen_Divmodm_Nat_S2A5Z3 = 274,
  efunc_gen_Divmodm_Nat_S2A4Z4 = 275,
  efunc_gen_Divmodm_Nat_S2A5Z4 = 276,
  efunc_gen_Divmodm_AdjustDigit_Z2 = 277,
  efunc_gen_Subm_Nat_B1Z2 = 278,
  efunc_gen_DoImplode_Z1D3S4C1 = 279,
  efunc_gen_DoImplode_Z1D3S5C1 = 280,
};


enum ident {
  ident_True = 0,
  ident_False = 1,
  ident_stdin = 2,
  ident_stdout = 3,
  ident_stderr = 4,
  ident_stout = 5,
  ident_General = 6,
  ident_Escapem_Hex = 7,
  ident_Escape = 8,
  ident_Quote = 9,
  ident_Word = 10,
  ident_Number = 11,
  ident_special = 12,
  ident_Add = 13,
  ident_regular = 14,
  ident_Arg = 15,
  ident_Br = 16,
  ident_Card = 17,
  ident_Chr = 18,
  ident_Cp = 19,
  ident_Dg = 20,
  ident_Dgall = 21,
  ident_Div = 22,
  ident_Divmod = 23,
  ident_Explode = 24,
  ident_First = 25,
  ident_Get = 26,
  ident_Implode = 27,
  ident_Last = 28,
  ident_Lenw = 29,
  ident_Lower = 30,
  ident_Mod = 31,
  ident_Mul = 32,
  ident_Numb = 33,
  ident_Open = 34,
  ident_Ord = 35,
  ident_Print = 36,
  ident_Prout = 37,
  ident_Put = 38,
  ident_Putout = 39,
  ident_Rp = 40,
  ident_Step = 41,
  ident_Sub = 42,
  ident_Symb = 43,
  ident_Time = 44,
  ident_Type = 45,
  ident_Upper = 46,
  ident_Sysfun = 47,
  ident_Freeze = 48,
  ident_Freezer = 49,
  ident_Dn = 50,
  ident_Up = 51,
  ident_Evm_met = 52,
  ident_Residue = 53,
  ident_GetEnv = 54,
  ident_System = 55,
  ident_Exit = 56,
  ident_Close = 57,
  ident_ExistFile = 58,
  ident_GetCurrentDirectory = 59,
  ident_RemoveFile = 60,
  ident_Implodeu_Ext = 61,
  ident_Explodeu_Ext = 62,
  ident_TimeElapsed = 63,
  ident_Compare = 64,
  ident_DeSysfun = 65,
  ident_XMLParse = 66,
  ident_Random = 67,
  ident_RandomDigit = 68,
  ident_Write = 69,
  ident_ListOfBuiltin = 70,
  ident_SizeOf = 71,
  ident_GetPID = 72,
  ident_GetPPID = 73,
  ident_Mu = 74,
  ident_CURRENT = 75,
  ident_BEGIN = 76,
  ident_END = 77,
  ident_Success = 78,
  ident_Fails = 79,
  ident_GLOBAL = 80,
  ident_CURRENTm_ANDm_GLOBAL = 81,
  ident_u_u_Metau_Residue = 82,
  ident_u_u_Metau_Mu = 83,
  ident_NormArithmArg = 84,
  ident_NormNumber = 85,
  ident_AllDigits = 86,
  ident_AllDigitsm_SwFirst = 87,
  ident_Addm_Normed = 88,
  ident_Addm_Nat = 89,
  ident_Addm_Digits = 90,
  ident_Buried = 91,
  ident_Divmodm_Digits = 92,
  ident_Divmodm_Normed = 93,
  ident_Divmodm_Nat = 94,
  ident_Divmodm_Shl = 95,
  ident_Divmodm_Natm_Normed = 96,
  ident_Divmodm_Align = 97,
  ident_Divmodm_CalcDigits = 98,
  ident_Divmodm_GetNextDigit = 99,
  ident_Divmodm_AdjustDigit = 100,
  ident_Divmodm_GuessDigit = 101,
  ident_ZeroHandle = 102,
  ident_Autoopen = 103,
  ident_Getm_Aux = 104,
  ident_DoImplode = 105,
  ident_Mulm_Digits = 106,
  ident_Mulm_Normed = 107,
  ident_Mulm_Nat = 108,
  ident_Mulm_Natm_Line = 109,
  ident_Numbm_Aux = 110,
  ident_DoNumb = 111,
  ident_DoNumbm_AddDigit = 112,
  ident_Proud = 113,
  ident_Trout = 114,
  ident_Putm_Aux = 115,
  ident_Putoutm_Aux = 116,
  ident_u_u_Stepm_Start = 117,
  ident_u_u_Stepm_End = 118,
  ident_u_u_Stepm_Drop = 119,
  ident_Subm_Digits = 120,
  ident_Subm_Normed = 121,
  ident_Neg = 122,
  ident_Subm_Nat = 123,
  ident_Subm_Natm_Nat = 124,
  ident_DoSubm_Natm_Nat = 125,
  ident_LeadingZeros = 126,
  ident_Symbm_Nat = 127,
  ident_Sysfunm_Xxin = 128,
  ident_Xxinm_Scan = 129,
  ident_HexDigit = 130,
  ident_Sysfunm_Xxinm_ERROR = 131,
  ident_Sysfunm_Xxout = 132,
  ident_Xxoutm_Wrap = 133,
  ident_Xxoutm_Scan = 134,
  ident_Xxoutm_Chars = 135,
  ident_Hex = 136,
  ident_Comparem_Normed = 137,
  ident_Comparem_Nat = 138,
  ident_Comparem_Align = 139,
  ident_Comparem_ByDigits = 140,
  ident_Comparem_Digits = 141,
  ident_Writem_Aux = 142,
  ident_Openm_Auto = 143,
  ident_GetFreeHandle = 144,
  ident_Symbm_Digit = 145,
  ident_SymbCompare = 146,
  ident_WriteBytes = 147,
  ident_ReadBytes = 148,
  ident_FTell = 149,
  ident_FSeek = 150,
  ident_RenameFile = 151,
  ident_Modulem_Load = 152,
  ident_Modulem_Unload = 153,
  ident_Modulem_Mu = 154,
  ident_Modulem_LookupFunction = 155,
  ident_Modulem_FunctionPtr = 156,
  ident_Platform = 157,
  ident_DirectorySeparators = 158,
  ident_DirectorySeparator = 159,
  ident_IsDirectorySeparator = 160,
  ident_PathSeparator = 161,
  ident_u_u_INIT = 162,
  ident_u_u_FINAL = 163,
};


static refalrts::FnResult func_Mu(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Mu/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg/2 HalfReuse: & $table/1 } >/8 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::reinit_name(context[1], functions[efunc_d_table]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Mu("Mu", COOKIE1_, COOKIE2_, func_Mu);


static refalrts::FnResult func_Residue(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Residue/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg/2 HalfReuse: & $table/1 } >/8 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::reinit_name(context[1], functions[efunc_d_table]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Residue("Residue", COOKIE1_, COOKIE2_, func_Residue);


static refalrts::FnResult func_u_u_Metau_Residue(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & __Meta_Residue/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_u_u_Metau_Residue("__Meta_Residue", COOKIE1_, COOKIE2_, func_u_u_Metau_Residue);

#line 2 "Library.ref"
#include <assert.h>
#include <ctype.h>
#include <errno.h>
#include <float.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <string>
#include <time.h>
#include <vector>

#include "refalrts-platform-specific.h"

#line 605 "Library.cpp"
#line 37 "Library.ref"
namespace cookie_ns {

refalrts::RefalFunction *function_for_name(
  refalrts::VM *vm, refalrts::RefalFunction *metatable, const char *name
) {
  if (name[0] != '\0' && name[1] == '\0') {
    switch (name[0]) {
      case '+': name = "Add"; break;
      case '/': name = "Div"; break;
      case '%': name = "Mod"; break;
      case '*': name = "Mul"; break;
      case '?': name = "Residue"; break;
      case '-': name = "Sub"; break;

      default:
        return 0;
    }
  }

  refalrts::RefalFunction *func =
    refalrts::function_for_name(vm, metatable, name);

  if (func == 0) {
    const refalrts::RefalFuncName func_name(name, 0, 0);
    refalrts::Module *current = refalrts::current_module(vm);

    func = refalrts::lookup_function_in_module(vm, current, func_name);
    if (func == 0) {
      func = refalrts::lookup_function_in_domain(vm, func_name);
    }
  }

  return func;
}

}  // namespace cookie_ns
#line 643 "Library.cpp"

static refalrts::FnResult func_u_u_Metau_Mu(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 77 "Library.ref"
  refalrts::Iter content_b = 0;
  refalrts::Iter content_e = 0;
  refalrts::Iter pfunc_name =
    refalrts::call_left(content_b, content_e, arg_begin, arg_end);

  refalrts::Iter tMuFunc = 0;
  if (! refalrts::tvar_left(tMuFunc, content_b, content_e)) {
    return refalrts::cRecognitionImpossible;
  }

  refalrts::Iter sTable = 0;
  if (
    ! refalrts::svar_right(sTable, content_b, content_e)
    || refalrts::cDataFunction != sTable->tag
    || ! refalrts::is_metatable(vm, sTable->function_info)
  ) {
    return refalrts::cRecognitionImpossible;
  }

  if (
    refalrts::cDataFunction == tMuFunc->tag
    || refalrts::cDataClosure == tMuFunc->tag
  ) {
    refalrts::splice_to_freelist(vm, pfunc_name, pfunc_name);
    refalrts::splice_to_freelist(vm, sTable, sTable);
    refalrts::push_stack(vm, arg_end);
    refalrts::push_stack(vm, arg_begin);
    return refalrts::cSuccess;
  }

  refalrts::RefalFunction *metatable = sTable->function_info;

  refalrts::RefalFunction *func;
  refalrts::Iter inner_b = 0, inner_e = 0;
  refalrts::Iter tMuFunc_end = tMuFunc;

  if (refalrts::cDataIdentifier == tMuFunc->tag) {
    func = refalrts::function_for_ident(vm, metatable, tMuFunc->ident_info);

    if (func == 0) {
      const char *name = tMuFunc->ident_info->name();
      func = cookie_ns::function_for_name(vm, metatable, name);
    }
  } else if (refalrts::brackets_term(inner_b, inner_e, tMuFunc)) {
    char name[300] = "";
    unsigned read = read_chars(name, sizeof(name) - 1, inner_b, inner_e);
    name[read] = '\0';

    // Слишком длинное имя функции или нашлись не литеры
    if (! refalrts::empty_seq(inner_b, inner_e)) {
      return refalrts::cRecognitionImpossible;
    }

    func = cookie_ns::function_for_name(vm, metatable, name);
    tMuFunc_end = tMuFunc->link_info;
  } else if (refalrts::cDataChar == tMuFunc->tag) {
    char name[2] = { tMuFunc->char_info, '\0' };
    func = cookie_ns::function_for_name(vm, metatable, name);
  } else {
    return refalrts::cRecognitionImpossible;
  }

  if (func == 0) {
    return refalrts::cRecognitionImpossible;
  }

  refalrts::update_name(pfunc_name, func);
  refalrts::splice_to_freelist(vm, tMuFunc, tMuFunc_end);
  refalrts::splice_to_freelist(vm, sTable, sTable);
  refalrts::push_stack(vm, arg_end);
  refalrts::push_stack(vm, arg_begin);
  return refalrts::cSuccess;
#line 723 "Library.cpp"
}

static refalrts::NativeReference nat_ref_u_u_Metau_Mu("__Meta_Mu", 0U, 0U, func_u_u_Metau_Mu);


static refalrts::FnResult func_Add(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Add/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Add/4 s.First/7 s.Second/8 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::svar_left( context[8], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    //DEBUG: s.First: 7
    //DEBUG: s.Second: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </9 & __Step-Drop/10 >/11 Tile{ AsIs: </0 Reuse: & Add-Digits/4 AsIs: s.First/7 AsIs: s.Second/8 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[9]);
    refalrts::alloc_name(vm, context[10], functions[efunc_u_u_Stepm_Drop]);
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::update_name(context[4], functions[efunc_Addm_Digits]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[0];
    res = refalrts::splice_evar( res, context[9], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Add/4 e.ArithmArg/2 >/1
  // closed e.ArithmArg as range 2
  //DEBUG: e.ArithmArg: 2
  //2: e.ArithmArg
  //13: e.ArithmArg

  refalrts::reset_allocator(vm);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_Add_S2C1]);
  refalrts::alloc_open_call(vm, context[8]);
  refalrts::alloc_name(vm, context[9], functions[efunc_u_u_Stepm_Start]);
  refalrts::alloc_close_call(vm, context[10]);
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_NormArithmArg]);
  refalrts::copy_evar(vm, context[13], context[14], context[2], context[3]);
  refalrts::alloc_close_call(vm, context[15]);
  refalrts::alloc_close_call(vm, context[6]);
  refalrts::push_stack( vm, context[6] );
  refalrts::push_stack( vm, context[5] );
  res = refalrts::splice_elem( res, context[6] );
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[11] );
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_elem( res, context[11] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[8] );
  res = refalrts::splice_elem( res, context[10] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
  if (rec_res != refalrts::cSuccess)
    return rec_res;
  refalrts::this_is_generated_function(vm);
  do {
    // </5 & Add$2?1/9 (/12 e.First/10 )/13 e.Second/7 >/6
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::call_left( context[7], context[8], context[5], context[6] );
    context[10] = 0;
    context[11] = 0;
    context[12] = refalrts::brackets_left( context[10], context[11], context[7], context[8] );
    if( ! context[12] )
      continue;
    refalrts::bracket_pointers(context[12], context[13]);
    // closed e.First as range 10
    // closed e.Second as range 7
    //DEBUG: e.ArithmArg: 2
    //DEBUG: e.First: 10
    //DEBUG: e.Second: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.ArithmArg/2 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: </5 Reuse: & Add-Normed/9 AsIs: (/12 AsIs: e.First/10 AsIs: )/13 AsIs: e.Second/7 AsIs: >/6 HalfReuse: </1 } Tile{ Reuse: & __Step-End/4 } Tile{ HalfReuse: >/0 } Tile{ ]] }
    refalrts::update_name(context[9], functions[efunc_Addm_Normed]);
    refalrts::reinit_open_call(context[1]);
    refalrts::update_name(context[4], functions[efunc_u_u_Stepm_End]);
    refalrts::reinit_close_call(context[0]);
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[6] );
    refalrts::push_stack( vm, context[5] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[0] );
    res = refalrts::splice_elem( res, context[4] );
    res = refalrts::splice_evar( res, context[5], context[1] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  refalrts::splice_to_freelist(vm, context[5], context[6]);
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_Add("Add", 0U, 0U, func_Add);


static refalrts::FnResult func_NormArithmArg(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 32 elems
  refalrts::Iter context[32];
  refalrts::zeros( context, 32 );
  // </0 & NormArithmArg/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & NormArithmArg/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & NormArithmArg/4 s.new3/7 e.new4/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      if( ! refalrts::svar_term( context[7], context[7] ) )
        continue;
      // closed e.new4 as range 9
      do {
        // </0 & NormArithmArg/4 0/7 e.Second/11 >/1
        context[11] = context[9];
        context[12] = context[10];
        if( ! refalrts::number_term( 0UL, context[7] ) )
          continue;
        // closed e.Second as range 11
        //DEBUG: e.Second: 11
        //11: e.Second
        //18: e.Second

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[13]);
        refalrts::alloc_name(vm, context[15], functions[efunc_gen_NormArithmArg_S1C1]);
        refalrts::alloc_open_call(vm, context[16]);
        refalrts::alloc_name(vm, context[17], functions[efunc_NormNumber]);
        refalrts::copy_evar(vm, context[18], context[19], context[11], context[12]);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_close_call(vm, context[14]);
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[13] );
        res = refalrts::splice_elem( res, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[16] );
        res = refalrts::splice_elem( res, context[20] );
        res = refalrts::splice_evar( res, context[18], context[19] );
        res = refalrts::splice_elem( res, context[17] );
        res = refalrts::splice_elem( res, context[16] );
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_elem( res, context[13] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </13 & NormArithmArg$1?1/17 s.SecondSign/18 e.Second$a/15 >/14
          context[15] = 0;
          context[16] = 0;
          context[17] = refalrts::call_left( context[15], context[16], context[13], context[14] );
          if( ! refalrts::svar_left( context[18], context[15], context[16] ) )
            continue;
          // closed e.Second$a as range 15
          //DEBUG: e.Second: 11
          //DEBUG: s.SecondSign: 18
          //DEBUG: e.Second$a: 15

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} e.Second/11 </13 & NormArithmArg$1?1/17 {REMOVED TILE} {REMOVED TILE} >/14 >/1 {REMOVED TILE}
          //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 0/4 HalfReuse: )/7 } Tile{ AsIs: s.SecondSign/18 } Tile{ AsIs: e.Second$a/15 } Tile{ ]] }
          refalrts::reinit_open_bracket(context[0]);
          refalrts::reinit_number(context[4], 0UL);
          refalrts::reinit_close_bracket(context[7]);
          refalrts::link_brackets( context[0], context[7] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[15], context[16] );
          res = refalrts::splice_elem( res, context[18] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[13], context[14]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NormArithmArg/4 s.First/7 e.Second/11 >/1
        context[11] = context[9];
        context[12] = context[10];
        // closed e.Second as range 11
        //DEBUG: s.First: 7
        //DEBUG: e.Second: 11
        //7: s.First
        //11: e.Second
        //18: s.First

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[13]);
        refalrts::alloc_name(vm, context[15], functions[efunc_gen_NormArithmArg_S2C1]);
        refalrts::alloc_open_call(vm, context[16]);
        refalrts::alloc_name(vm, context[17], functions[efunc_Type]);
        refalrts::copy_stvar(vm, context[18], context[7]);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_close_call(vm, context[14]);
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[13] );
        res = refalrts::splice_elem( res, context[14] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[16] );
        res = refalrts::splice_elem( res, context[19] );
        res = refalrts::splice_stvar( res, context[18] );
        res = refalrts::splice_elem( res, context[17] );
        res = refalrts::splice_elem( res, context[16] );
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_elem( res, context[13] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </13 & NormArithmArg$2?1/17 'N'/18 s.SubType/19 s.First$a/20 >/14
          context[15] = 0;
          context[16] = 0;
          context[17] = refalrts::call_left( context[15], context[16], context[13], context[14] );
          context[18] = refalrts::char_left( 'N', context[15], context[16] );
          if( ! context[18] )
            continue;
          if( ! refalrts::svar_left( context[19], context[15], context[16] ) )
            continue;
          if( ! refalrts::svar_left( context[20], context[15], context[16] ) )
            continue;
          if( ! refalrts::empty_seq( context[15], context[16] ) )
            continue;
          //DEBUG: s.First: 7
          //DEBUG: e.Second: 11
          //DEBUG: s.SubType: 19
          //DEBUG: s.First$a: 20
          //7: s.First
          //11: e.Second
          //19: s.SubType
          //20: s.First$a
          //26: e.Second

          refalrts::reset_allocator(vm);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::alloc_open_call(vm, context[21]);
          refalrts::alloc_name(vm, context[23], functions[efunc_gen_NormArithmArg_S2C2]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_NormNumber]);
          refalrts::copy_evar(vm, context[26], context[27], context[11], context[12]);
          refalrts::alloc_close_call(vm, context[28]);
          refalrts::alloc_close_call(vm, context[22]);
          refalrts::push_stack( vm, context[22] );
          refalrts::push_stack( vm, context[21] );
          res = refalrts::splice_elem( res, context[22] );
          refalrts::push_stack( vm, context[28] );
          refalrts::push_stack( vm, context[24] );
          res = refalrts::splice_elem( res, context[28] );
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_elem( res, context[25] );
          res = refalrts::splice_elem( res, context[24] );
          res = refalrts::splice_elem( res, context[23] );
          res = refalrts::splice_elem( res, context[21] );
          refalrts::use( res );
          refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
          if (rec_res != refalrts::cSuccess)
            return rec_res;
          refalrts::this_is_generated_function(vm);
          do {
            // </21 & NormArithmArg$2?2/25 s.SecondSign/26 e.Second$a/23 >/22
            context[23] = 0;
            context[24] = 0;
            context[25] = refalrts::call_left( context[23], context[24], context[21], context[22] );
            if( ! refalrts::svar_left( context[26], context[23], context[24] ) )
              continue;
            // closed e.Second$a as range 23
            //DEBUG: s.First: 7
            //DEBUG: e.Second: 11
            //DEBUG: s.SubType: 19
            //DEBUG: s.First$a: 20
            //DEBUG: s.SecondSign: 26
            //DEBUG: e.Second$a: 23

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} & NormArithmArg/4 s.First/7 e.Second/11 </13 & NormArithmArg$2?1/17 'N'/18 s.SubType/19 s.First$a/20 {REMOVED TILE} {REMOVED TILE} >/22 >/1 {REMOVED TILE}
            //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ HalfReuse: '+'/14 HalfReuse: s.First$a20 /21 HalfReuse: )/25 AsIs: s.SecondSign/26 } Tile{ AsIs: e.Second$a/23 } Tile{ ]] }
            refalrts::reinit_open_bracket(context[0]);
            refalrts::reinit_char(context[14], '+');
            refalrts::reinit_svar( context[21], context[20] );
            refalrts::reinit_close_bracket(context[25]);
            refalrts::link_brackets( context[0], context[25] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[23], context[24] );
            res = refalrts::splice_evar( res, context[14], context[26] );
            refalrts::splice_to_freelist_open( vm, context[0], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          refalrts::splice_to_freelist(vm, context[21], context[22]);
          continue;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[13], context[14]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & NormArithmArg/4 s.new5/7 s.new6/13 e.new7/11 >/1
      context[11] = context[9];
      context[12] = context[10];
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      // closed e.new7 as range 11
      do {
        // </0 & NormArithmArg/4 '+'/7 s.First/13 e.Second/14 >/1
        context[14] = context[11];
        context[15] = context[12];
        if( ! refalrts::char_term( '+', context[7] ) )
          continue;
        // closed e.Second as range 14
        //DEBUG: s.First: 13
        //DEBUG: e.Second: 14
        //13: s.First
        //14: e.Second
        //21: s.First

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[16]);
        refalrts::alloc_name(vm, context[18], functions[efunc_gen_NormArithmArg_S3C1]);
        refalrts::alloc_open_call(vm, context[19]);
        refalrts::alloc_name(vm, context[20], functions[efunc_Type]);
        refalrts::copy_stvar(vm, context[21], context[13]);
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[17]);
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[16] );
        res = refalrts::splice_elem( res, context[17] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[19] );
        res = refalrts::splice_elem( res, context[22] );
        res = refalrts::splice_stvar( res, context[21] );
        res = refalrts::splice_elem( res, context[20] );
        res = refalrts::splice_elem( res, context[19] );
        res = refalrts::splice_elem( res, context[18] );
        res = refalrts::splice_elem( res, context[16] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </16 & NormArithmArg$3?1/20 'N'/21 s.SubType/22 s.First$a/23 >/17
          context[18] = 0;
          context[19] = 0;
          context[20] = refalrts::call_left( context[18], context[19], context[16], context[17] );
          context[21] = refalrts::char_left( 'N', context[18], context[19] );
          if( ! context[21] )
            continue;
          if( ! refalrts::svar_left( context[22], context[18], context[19] ) )
            continue;
          if( ! refalrts::svar_left( context[23], context[18], context[19] ) )
            continue;
          if( ! refalrts::empty_seq( context[18], context[19] ) )
            continue;
          //DEBUG: s.First: 13
          //DEBUG: e.Second: 14
          //DEBUG: s.SubType: 22
          //DEBUG: s.First$a: 23
          //13: s.First
          //14: e.Second
          //22: s.SubType
          //23: s.First$a
          //29: e.Second

          refalrts::reset_allocator(vm);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[26], functions[efunc_gen_NormArithmArg_S3C2]);
          refalrts::alloc_open_call(vm, context[27]);
          refalrts::alloc_name(vm, context[28], functions[efunc_NormNumber]);
          refalrts::copy_evar(vm, context[29], context[30], context[14], context[15]);
          refalrts::alloc_close_call(vm, context[31]);
          refalrts::alloc_close_call(vm, context[25]);
          refalrts::push_stack( vm, context[25] );
          refalrts::push_stack( vm, context[24] );
          res = refalrts::splice_elem( res, context[25] );
          refalrts::push_stack( vm, context[31] );
          refalrts::push_stack( vm, context[27] );
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_evar( res, context[29], context[30] );
          res = refalrts::splice_elem( res, context[28] );
          res = refalrts::splice_elem( res, context[27] );
          res = refalrts::splice_elem( res, context[26] );
          res = refalrts::splice_elem( res, context[24] );
          refalrts::use( res );
          refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
          if (rec_res != refalrts::cSuccess)
            return rec_res;
          refalrts::this_is_generated_function(vm);
          do {
            // </24 & NormArithmArg$3?2/28 s.SecondSign/29 e.Second$a/26 >/25
            context[26] = 0;
            context[27] = 0;
            context[28] = refalrts::call_left( context[26], context[27], context[24], context[25] );
            if( ! refalrts::svar_left( context[29], context[26], context[27] ) )
              continue;
            // closed e.Second$a as range 26
            //DEBUG: s.First: 13
            //DEBUG: e.Second: 14
            //DEBUG: s.SubType: 22
            //DEBUG: s.First$a: 23
            //DEBUG: s.SecondSign: 29
            //DEBUG: e.Second$a: 26

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} & NormArithmArg/4 '+'/7 s.First/13 e.Second/14 </16 & NormArithmArg$3?1/20 'N'/21 s.SubType/22 s.First$a/23 {REMOVED TILE} {REMOVED TILE} >/25 >/1 {REMOVED TILE}
            //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ HalfReuse: '+'/17 HalfReuse: s.First$a23 /24 HalfReuse: )/28 AsIs: s.SecondSign/29 } Tile{ AsIs: e.Second$a/26 } Tile{ ]] }
            refalrts::reinit_open_bracket(context[0]);
            refalrts::reinit_char(context[17], '+');
            refalrts::reinit_svar( context[24], context[23] );
            refalrts::reinit_close_bracket(context[28]);
            refalrts::link_brackets( context[0], context[28] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[26], context[27] );
            res = refalrts::splice_evar( res, context[17], context[29] );
            refalrts::splice_to_freelist_open( vm, context[0], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          refalrts::splice_to_freelist(vm, context[24], context[25]);
          continue;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[16], context[17]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & NormArithmArg/4 '-'/7 s.First/13 e.Second/14 >/1
      context[14] = context[11];
      context[15] = context[12];
      if( ! refalrts::char_term( '-', context[7] ) )
        continue;
      // closed e.Second as range 14
      //DEBUG: s.First: 13
      //DEBUG: e.Second: 14
      //13: s.First
      //14: e.Second
      //21: s.First

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[16]);
      refalrts::alloc_name(vm, context[18], functions[efunc_gen_NormArithmArg_S4C1]);
      refalrts::alloc_open_call(vm, context[19]);
      refalrts::alloc_name(vm, context[20], functions[efunc_Type]);
      refalrts::copy_stvar(vm, context[21], context[13]);
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      res = refalrts::splice_elem( res, context[17] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[19] );
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_stvar( res, context[21] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_elem( res, context[19] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_elem( res, context[16] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </16 & NormArithmArg$4?1/20 'N'/21 s.SubType/22 s.First$a/23 >/17
        context[18] = 0;
        context[19] = 0;
        context[20] = refalrts::call_left( context[18], context[19], context[16], context[17] );
        context[21] = refalrts::char_left( 'N', context[18], context[19] );
        if( ! context[21] )
          continue;
        if( ! refalrts::svar_left( context[22], context[18], context[19] ) )
          continue;
        if( ! refalrts::svar_left( context[23], context[18], context[19] ) )
          continue;
        if( ! refalrts::empty_seq( context[18], context[19] ) )
          continue;
        //DEBUG: s.First: 13
        //DEBUG: e.Second: 14
        //DEBUG: s.SubType: 22
        //DEBUG: s.First$a: 23
        //13: s.First
        //14: e.Second
        //22: s.SubType
        //23: s.First$a
        //29: e.Second

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[26], functions[efunc_gen_NormArithmArg_S4C2]);
        refalrts::alloc_open_call(vm, context[27]);
        refalrts::alloc_name(vm, context[28], functions[efunc_NormNumber]);
        refalrts::copy_evar(vm, context[29], context[30], context[14], context[15]);
        refalrts::alloc_close_call(vm, context[31]);
        refalrts::alloc_close_call(vm, context[25]);
        refalrts::push_stack( vm, context[25] );
        refalrts::push_stack( vm, context[24] );
        res = refalrts::splice_elem( res, context[25] );
        refalrts::push_stack( vm, context[31] );
        refalrts::push_stack( vm, context[27] );
        res = refalrts::splice_elem( res, context[31] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_elem( res, context[28] );
        res = refalrts::splice_elem( res, context[27] );
        res = refalrts::splice_elem( res, context[26] );
        res = refalrts::splice_elem( res, context[24] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </24 & NormArithmArg$4?2/28 s.SecondSign/29 e.Second$a/26 >/25
          context[26] = 0;
          context[27] = 0;
          context[28] = refalrts::call_left( context[26], context[27], context[24], context[25] );
          if( ! refalrts::svar_left( context[29], context[26], context[27] ) )
            continue;
          // closed e.Second$a as range 26
          //DEBUG: s.First: 13
          //DEBUG: e.Second: 14
          //DEBUG: s.SubType: 22
          //DEBUG: s.First$a: 23
          //DEBUG: s.SecondSign: 29
          //DEBUG: e.Second$a: 26

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} & NormArithmArg/4 '-'/7 s.First/13 e.Second/14 </16 & NormArithmArg$4?1/20 'N'/21 s.SubType/22 s.First$a/23 {REMOVED TILE} {REMOVED TILE} >/25 >/1 {REMOVED TILE}
          //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ HalfReuse: '-'/17 HalfReuse: s.First$a23 /24 HalfReuse: )/28 AsIs: s.SecondSign/29 } Tile{ AsIs: e.Second$a/26 } Tile{ ]] }
          refalrts::reinit_open_bracket(context[0]);
          refalrts::reinit_char(context[17], '-');
          refalrts::reinit_svar( context[24], context[23] );
          refalrts::reinit_close_bracket(context[28]);
          refalrts::link_brackets( context[0], context[28] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[17], context[29] );
          refalrts::splice_to_freelist_open( vm, context[0], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[24], context[25]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[16], context[17]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & NormArithmArg/4 (/7 e.First/11 )/8 e.Second/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = 0;
    context[12] = 0;
    if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
      continue;
    // closed e.First as range 11
    // closed e.Second as range 9
    //DEBUG: e.First: 11
    //DEBUG: e.Second: 9
    //9: e.Second
    //11: e.First
    //18: e.First

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[15], functions[efunc_gen_NormArithmArg_S5C1]);
    refalrts::alloc_open_call(vm, context[16]);
    refalrts::alloc_name(vm, context[17], functions[efunc_NormNumber]);
    refalrts::copy_evar(vm, context[18], context[19], context[11], context[12]);
    refalrts::alloc_close_call(vm, context[20]);
    refalrts::alloc_close_call(vm, context[14]);
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[13] );
    res = refalrts::splice_elem( res, context[14] );
    refalrts::push_stack( vm, context[20] );
    refalrts::push_stack( vm, context[16] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_elem( res, context[15] );
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </13 & NormArithmArg$5?1/17 s.FirstSign/18 e.First$a/15 >/14
      context[15] = 0;
      context[16] = 0;
      context[17] = refalrts::call_left( context[15], context[16], context[13], context[14] );
      if( ! refalrts::svar_left( context[18], context[15], context[16] ) )
        continue;
      // closed e.First$a as range 15
      //DEBUG: e.First: 11
      //DEBUG: e.Second: 9
      //DEBUG: s.FirstSign: 18
      //DEBUG: e.First$a: 15
      //9: e.Second
      //11: e.First
      //15: e.First$a
      //18: s.FirstSign
      //24: e.Second

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[19]);
      refalrts::alloc_name(vm, context[21], functions[efunc_gen_NormArithmArg_S5C2]);
      refalrts::alloc_open_call(vm, context[22]);
      refalrts::alloc_name(vm, context[23], functions[efunc_NormNumber]);
      refalrts::copy_evar(vm, context[24], context[25], context[9], context[10]);
      refalrts::alloc_close_call(vm, context[26]);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[19] );
      res = refalrts::splice_elem( res, context[20] );
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[22] );
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_elem( res, context[21] );
      res = refalrts::splice_elem( res, context[19] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </19 & NormArithmArg$5?2/23 s.SecondSign/24 e.Second$a/21 >/20
        context[21] = 0;
        context[22] = 0;
        context[23] = refalrts::call_left( context[21], context[22], context[19], context[20] );
        if( ! refalrts::svar_left( context[24], context[21], context[22] ) )
          continue;
        // closed e.Second$a as range 21
        //DEBUG: e.First: 11
        //DEBUG: e.Second: 9
        //DEBUG: s.FirstSign: 18
        //DEBUG: e.First$a: 15
        //DEBUG: s.SecondSign: 24
        //DEBUG: e.Second$a: 21

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NormArithmArg/4 (/7 e.First/11 )/8 e.Second/9 </13 {REMOVED TILE} & NormArithmArg$5?2/23 s.SecondSign/24 {REMOVED TILE} >/20 >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: (/17 AsIs: s.FirstSign/18 AsIs: e.First$a/15 HalfReuse: )/14 HalfReuse: s.SecondSign24 /19 } Tile{ AsIs: e.Second$a/21 } Tile{ ]] }
        refalrts::reinit_open_bracket(context[17]);
        refalrts::reinit_close_bracket(context[14]);
        refalrts::reinit_svar( context[19], context[24] );
        refalrts::link_brackets( context[17], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[21], context[22] );
        res = refalrts::splice_evar( res, context[17], context[19] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[19], context[20]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[13], context[14]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & NormArithmArg/4 e.OtherArg/2 >/1
  // closed e.OtherArg as range 2
  //DEBUG: e.OtherArg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & NormArithmArg/4 e.OtherArg/2 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_NormArithmArg("NormArithmArg", COOKIE1_, COOKIE2_, func_NormArithmArg);


static refalrts::FnResult func_NormNumber(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & NormNumber/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & NormNumber/4 s.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & NormNumber/4 s.new3/7 0/10 e.new4/8 >/1
      context[8] = context[5];
      context[9] = context[6];
      context[10] = refalrts::number_left( 0UL, context[8], context[9] );
      if( ! context[10] )
        continue;
      // closed e.new4 as range 8
      do {
        // </0 & NormNumber/4 '+'/7 0/10 e.new5/11 >/1
        context[11] = context[8];
        context[12] = context[9];
        if( ! refalrts::char_term( '+', context[7] ) )
          continue;
        // closed e.new5 as range 11
        do {
          // </0 & NormNumber/4 '+'/7 0/10 >/1
          if( ! refalrts::empty_seq( context[11], context[12] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NormNumber/4 '+'/7 0/10 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 0/1 ]] }
          refalrts::reinit_number(context[1], 0UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & NormNumber/4 '+'/7 0/10 e.Digits/13 >/1
        context[13] = context[11];
        context[14] = context[12];
        // closed e.Digits as range 13
        //DEBUG: e.Digits: 13

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & NormNumber/7 HalfReuse: '+'/10 AsIs: e.Digits/13 AsIs: >/1 ]] }
        refalrts::reinit_open_call(context[4]);
        refalrts::reinit_name(context[7], functions[efunc_NormNumber]);
        refalrts::reinit_char(context[10], '+');
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[4] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[4];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & NormNumber/4 '-'/7 0/10 e.new5/11 >/1
      context[11] = context[8];
      context[12] = context[9];
      if( ! refalrts::char_term( '-', context[7] ) )
        continue;
      // closed e.new5 as range 11
      do {
        // </0 & NormNumber/4 '-'/7 0/10 >/1
        if( ! refalrts::empty_seq( context[11], context[12] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NormNumber/4 '-'/7 0/10 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 0/1 ]] }
        refalrts::reinit_number(context[1], 0UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & NormNumber/4 '-'/7 0/10 e.Digits/13 >/1
      context[13] = context[11];
      context[14] = context[12];
      // closed e.Digits as range 13
      //DEBUG: e.Digits: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & NormNumber/7 HalfReuse: '-'/10 AsIs: e.Digits/13 AsIs: >/1 ]] }
      refalrts::reinit_open_call(context[4]);
      refalrts::reinit_name(context[7], functions[efunc_NormNumber]);
      refalrts::reinit_char(context[10], '-');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NormNumber/4 0/7 e.new3/8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::number_term( 0UL, context[7] ) )
        continue;
      // closed e.new3 as range 8
      do {
        // </0 & NormNumber/4 0/7 >/1
        if( ! refalrts::empty_seq( context[8], context[9] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NormNumber/4 0/7 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 0/1 ]] }
        refalrts::reinit_number(context[1], 0UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & NormNumber/4 0/7 e.Digits/10 >/1
      context[10] = context[8];
      context[11] = context[9];
      // closed e.Digits as range 10
      //DEBUG: e.Digits: 10

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & NormNumber/4 HalfReuse: '+'/7 AsIs: e.Digits/10 AsIs: >/1 ]] }
      refalrts::reinit_char(context[7], '+');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NormNumber/4 '+'/7 e.Digits/8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::char_term( '+', context[7] ) )
        continue;
      // closed e.Digits as range 8
      //DEBUG: e.Digits: 8
      //8: e.Digits
      //15: e.Digits

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[12], functions[efunc_gen_NormNumber_S7C1]);
      refalrts::alloc_open_call(vm, context[13]);
      refalrts::alloc_name(vm, context[14], functions[efunc_AllDigits]);
      refalrts::copy_evar(vm, context[15], context[16], context[8], context[9]);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_close_call(vm, context[11]);
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[10] );
      res = refalrts::splice_elem( res, context[11] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[13] );
      res = refalrts::splice_elem( res, context[17] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_elem( res, context[10] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </10 & NormNumber$7?1/14 # True/15 >/11
        context[12] = 0;
        context[13] = 0;
        context[14] = refalrts::call_left( context[12], context[13], context[10], context[11] );
        context[15] = refalrts::ident_left( identifiers[ident_True], context[12], context[13] );
        if( ! context[15] )
          continue;
        if( ! refalrts::empty_seq( context[12], context[13] ) )
          continue;
        //DEBUG: e.Digits: 8

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} & NormNumber/4 '+'/7 {REMOVED TILE} </10 & NormNumber$7?1/14 # True/15 >/11 >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: '+'/0 } Tile{ AsIs: e.Digits/8 } Tile{ ]] }
        refalrts::reinit_char(context[0], '+');
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::splice_to_freelist_open( vm, context[0], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[10], context[11]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & NormNumber/4 '-'/7 e.Digits/8 >/1
    context[8] = context[5];
    context[9] = context[6];
    if( ! refalrts::char_term( '-', context[7] ) )
      continue;
    // closed e.Digits as range 8
    //DEBUG: e.Digits: 8
    //8: e.Digits
    //15: e.Digits

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[12], functions[efunc_gen_NormNumber_S8C1]);
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_AllDigits]);
    refalrts::copy_evar(vm, context[15], context[16], context[8], context[9]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[10] );
    res = refalrts::splice_elem( res, context[11] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[13] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_elem( res, context[10] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </10 & NormNumber$8?1/14 # True/15 >/11
      context[12] = 0;
      context[13] = 0;
      context[14] = refalrts::call_left( context[12], context[13], context[10], context[11] );
      context[15] = refalrts::ident_left( identifiers[ident_True], context[12], context[13] );
      if( ! context[15] )
        continue;
      if( ! refalrts::empty_seq( context[12], context[13] ) )
        continue;
      //DEBUG: e.Digits: 8

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & NormNumber/4 '-'/7 {REMOVED TILE} </10 & NormNumber$8?1/14 # True/15 >/11 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: '-'/0 } Tile{ AsIs: e.Digits/8 } Tile{ ]] }
      refalrts::reinit_char(context[0], '-');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[8], context[9] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[10], context[11]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NormNumber/4 e.Digits/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Digits as range 5
    //DEBUG: e.Digits: 5
    //5: e.Digits
    //12: e.Digits

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[7]);
    refalrts::alloc_name(vm, context[9], functions[efunc_gen_NormNumber_S9C1]);
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_Type]);
    refalrts::copy_evar(vm, context[12], context[13], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[14]);
    refalrts::alloc_close_call(vm, context[8]);
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[7] );
    res = refalrts::splice_elem( res, context[8] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[10] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_elem( res, context[7] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </7 & NormNumber$9?1/11 'N'/12 s.SubType/13 e.Digits$a/9 >/8
      context[9] = 0;
      context[10] = 0;
      context[11] = refalrts::call_left( context[9], context[10], context[7], context[8] );
      context[12] = refalrts::char_left( 'N', context[9], context[10] );
      if( ! context[12] )
        continue;
      if( ! refalrts::svar_left( context[13], context[9], context[10] ) )
        continue;
      // closed e.Digits$a as range 9
      //DEBUG: e.Digits: 5
      //DEBUG: s.SubType: 13
      //DEBUG: e.Digits$a: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} e.Digits/5 </7 & NormNumber$9?1/11 {REMOVED TILE} s.SubType/13 {REMOVED TILE} >/8 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & NormNumber/4 } Tile{ Reuse: '+'/12 } Tile{ AsIs: e.Digits$a/9 } Tile{ AsIs: >/1 ]] }
      refalrts::update_char(context[12], '+');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_elem( res, context[12] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[7], context[8]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & NormNumber/4 e.Digits/2 >/1
  // closed e.Digits as range 2
  //DEBUG: e.Digits: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & NormNumber/4 e.Digits/2 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_NormNumber("NormNumber", COOKIE1_, COOKIE2_, func_NormNumber);


static refalrts::FnResult func_AllDigits(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & AllDigits/4 e.Items/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Items as range 2
  //DEBUG: e.Items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & AllDigits-SwFirst/6 Tile{ AsIs: </0 Reuse: & Type/4 AsIs: e.Items/2 AsIs: >/1 } >/7 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_AllDigitsm_SwFirst]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_Type]);
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_AllDigits("AllDigits", COOKIE1_, COOKIE2_, func_AllDigits);


static refalrts::FnResult func_AllDigitsm_SwFirst(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & AllDigits-SwFirst/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & AllDigits-SwFirst/4 s.new1/5 s.new2/6 e.new3/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & AllDigits-SwFirst/4 'N'/5 s.new4/6 s.new5/9 e.new6/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    if( ! refalrts::char_term( 'N', context[5] ) )
      continue;
    if( ! refalrts::svar_left( context[9], context[7], context[8] ) )
      continue;
    // closed e.new6 as range 7
    do {
      // </0 & AllDigits-SwFirst/4 'N'/5 s.SubType/6 s.Digit/9 >/1
      if( ! refalrts::empty_seq( context[7], context[8] ) )
        continue;
      //DEBUG: s.SubType: 6
      //DEBUG: s.Digit: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & AllDigits-SwFirst/4 'N'/5 s.SubType/6 s.Digit/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
      refalrts::reinit_ident(context[1], identifiers[ident_True]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & AllDigits-SwFirst/4 'N'/5 s.SubType/6 s.Digit/9 e.Items/10 >/1
    context[10] = context[7];
    context[11] = context[8];
    // closed e.Items as range 10
    //DEBUG: s.SubType: 6
    //DEBUG: s.Digit: 9
    //DEBUG: e.Items: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} 'N'/5 s.SubType/6 s.Digit/9 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & AllDigits/4 } Tile{ AsIs: e.Items/10 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_AllDigits]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[10], context[11] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & AllDigits-SwFirst/4 s.Type/5 s.SubType/6 e.Expr/2 >/1
  // closed e.Expr as range 2
  //DEBUG: s.Type: 5
  //DEBUG: s.SubType: 6
  //DEBUG: e.Expr: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & AllDigits-SwFirst/4 s.Type/5 s.SubType/6 e.Expr/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_False]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_AllDigitsm_SwFirst("AllDigits-SwFirst", COOKIE1_, COOKIE2_, func_AllDigitsm_SwFirst);


static refalrts::FnResult func_Addm_Normed(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 36 elems
  refalrts::Iter context[36];
  refalrts::zeros( context, 36 );
  // </0 & Add-Normed/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Add-Normed/4 (/7 s.new1/9 e.new2/5 )/8 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new3 as range 2
  if( ! refalrts::svar_left( context[9], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 5
  do {
    // </0 & Add-Normed/4 (/7 s.new6/9 e.new7/10 )/8 s.new4/14 e.new5/12 >/1
    context[10] = context[5];
    context[11] = context[6];
    context[12] = context[2];
    context[13] = context[3];
    // closed e.new7 as range 10
    if( ! refalrts::svar_left( context[14], context[12], context[13] ) )
      continue;
    // closed e.new5 as range 12
    do {
      // </0 & Add-Normed/4 (/7 '+'/9 e.new10/15 )/8 s.new8/14 e.new9/17 >/1
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      context[18] = context[13];
      if( ! refalrts::char_term( '+', context[9] ) )
        continue;
      // closed e.new10 as range 15
      // closed e.new9 as range 17
      do {
        // </0 & Add-Normed/4 (/7 '+'/9 e.First/19 )/8 '+'/14 e.Second/21 >/1
        context[19] = context[15];
        context[20] = context[16];
        context[21] = context[17];
        context[22] = context[18];
        if( ! refalrts::char_term( '+', context[14] ) )
          continue;
        // closed e.First as range 19
        // closed e.Second as range 21
        //DEBUG: e.First: 19
        //DEBUG: e.Second: 21

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} '+'/9 {REMOVED TILE} )/8 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Add-Nat/4 AsIs: (/7 } Tile{ AsIs: e.First/19 } Tile{ HalfReuse: )/14 AsIs: e.Second/21 AsIs: >/1 ]] }
        refalrts::update_name(context[4], functions[efunc_Addm_Nat]);
        refalrts::reinit_close_bracket(context[14]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_evar( res, context[19], context[20] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Add-Normed/4 (/7 '+'/9 e.First/19 )/8 '-'/14 e.Second/21 >/1
        context[19] = context[15];
        context[20] = context[16];
        context[21] = context[17];
        context[22] = context[18];
        if( ! refalrts::char_term( '-', context[14] ) )
          continue;
        // closed e.First as range 19
        // closed e.Second as range 21
        //DEBUG: e.First: 19
        //DEBUG: e.Second: 21

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Sub-Nat:1/7 HalfReuse: (/9 AsIs: e.First/19 AsIs: )/8 HalfReuse: (/14 AsIs: e.Second/21 HalfReuse: )/1 } Tile{ AsIs: </0 } & Compare-Align/23 (/24 (/25 )/26 e.First/19/27 )/29 (/30 )/31 e.Second/21/32 >/34 >/35 Tile{ ]] }
        refalrts::alloc_name(vm, context[23], functions[efunc_Comparem_Align]);
        refalrts::alloc_open_bracket(vm, context[24]);
        refalrts::alloc_open_bracket(vm, context[25]);
        refalrts::alloc_close_bracket(vm, context[26]);
        refalrts::copy_evar(vm, context[27], context[28], context[19], context[20]);
        refalrts::alloc_close_bracket(vm, context[29]);
        refalrts::alloc_open_bracket(vm, context[30]);
        refalrts::alloc_close_bracket(vm, context[31]);
        refalrts::copy_evar(vm, context[32], context[33], context[21], context[22]);
        refalrts::alloc_close_call(vm, context[34]);
        refalrts::alloc_close_call(vm, context[35]);
        refalrts::reinit_open_call(context[4]);
        refalrts::reinit_name(context[7], functions[efunc_gen_Subm_Nat_B1]);
        refalrts::reinit_open_bracket(context[9]);
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::push_stack( vm, context[35] );
        refalrts::push_stack( vm, context[4] );
        refalrts::push_stack( vm, context[34] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[30], context[31] );
        refalrts::link_brackets( context[24], context[29] );
        refalrts::link_brackets( context[25], context[26] );
        refalrts::link_brackets( context[14], context[1] );
        refalrts::link_brackets( context[9], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[23], context[35] );
        res = refalrts::splice_elem( res, context[0] );
        res = refalrts::splice_evar( res, context[4], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Add-Normed/4 (/7 '+'/9 e.First/19 )/8 0/14 >/1
      context[19] = context[15];
      context[20] = context[16];
      if( ! refalrts::number_term( 0UL, context[14] ) )
        continue;
      if( ! refalrts::empty_seq( context[17], context[18] ) )
        continue;
      // closed e.First as range 19
      //DEBUG: e.First: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Add-Normed/4 (/7 '+'/9 {REMOVED TILE} )/8 0/14 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.First/19 } Tile{ ]] }
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[19], context[20] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Add-Normed/4 (/7 '-'/9 e.new10/15 )/8 s.new8/14 e.new9/17 >/1
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      context[18] = context[13];
      if( ! refalrts::char_term( '-', context[9] ) )
        continue;
      // closed e.new10 as range 15
      // closed e.new9 as range 17
      do {
        // </0 & Add-Normed/4 (/7 '-'/9 e.First/19 )/8 '+'/14 e.Second/21 >/1
        context[19] = context[15];
        context[20] = context[16];
        context[21] = context[17];
        context[22] = context[18];
        if( ! refalrts::char_term( '+', context[14] ) )
          continue;
        // closed e.First as range 19
        // closed e.Second as range 21
        //DEBUG: e.First: 19
        //DEBUG: e.Second: 21

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sub-Nat:1/4 AsIs: (/7 } e.Second/21/23 )/25 Tile{ HalfReuse: (/9 AsIs: e.First/19 AsIs: )/8 HalfReuse: </14 } & Compare-Align/26 (/27 (/28 )/29 Tile{ AsIs: e.Second/21 } )/30 (/31 )/32 e.First/19/33 >/35 Tile{ AsIs: >/1 ]] }
        refalrts::copy_evar(vm, context[23], context[24], context[21], context[22]);
        refalrts::alloc_close_bracket(vm, context[25]);
        refalrts::alloc_name(vm, context[26], functions[efunc_Comparem_Align]);
        refalrts::alloc_open_bracket(vm, context[27]);
        refalrts::alloc_open_bracket(vm, context[28]);
        refalrts::alloc_close_bracket(vm, context[29]);
        refalrts::alloc_close_bracket(vm, context[30]);
        refalrts::alloc_open_bracket(vm, context[31]);
        refalrts::alloc_close_bracket(vm, context[32]);
        refalrts::copy_evar(vm, context[33], context[34], context[19], context[20]);
        refalrts::alloc_close_call(vm, context[35]);
        refalrts::update_name(context[4], functions[efunc_gen_Subm_Nat_B1]);
        refalrts::reinit_open_bracket(context[9]);
        refalrts::reinit_open_call(context[14]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[35] );
        refalrts::push_stack( vm, context[14] );
        refalrts::link_brackets( context[31], context[32] );
        refalrts::link_brackets( context[27], context[30] );
        refalrts::link_brackets( context[28], context[29] );
        refalrts::link_brackets( context[9], context[8] );
        refalrts::link_brackets( context[7], context[25] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[30], context[35] );
        res = refalrts::splice_evar( res, context[21], context[22] );
        res = refalrts::splice_evar( res, context[26], context[29] );
        res = refalrts::splice_evar( res, context[9], context[14] );
        res = refalrts::splice_elem( res, context[25] );
        res = refalrts::splice_evar( res, context[23], context[24] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Add-Normed/4 (/7 '-'/9 e.First/19 )/8 '-'/14 e.Second/21 >/1
        context[19] = context[15];
        context[20] = context[16];
        context[21] = context[17];
        context[22] = context[18];
        if( ! refalrts::char_term( '-', context[14] ) )
          continue;
        // closed e.First as range 19
        // closed e.Second as range 21
        //DEBUG: e.First: 19
        //DEBUG: e.Second: 21

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} '-'/14 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: '-'/0 HalfReuse: </4 HalfReuse: & Add-Nat/7 HalfReuse: (/9 AsIs: e.First/19 AsIs: )/8 } Tile{ AsIs: e.Second/21 } Tile{ AsIs: >/1 ]] }
        refalrts::reinit_char(context[0], '-');
        refalrts::reinit_open_call(context[4]);
        refalrts::reinit_name(context[7], functions[efunc_Addm_Nat]);
        refalrts::reinit_open_bracket(context[9]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[4] );
        refalrts::link_brackets( context[9], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[21], context[22] );
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Add-Normed/4 (/7 '-'/9 e.First/19 )/8 0/14 >/1
      context[19] = context[15];
      context[20] = context[16];
      if( ! refalrts::number_term( 0UL, context[14] ) )
        continue;
      if( ! refalrts::empty_seq( context[17], context[18] ) )
        continue;
      // closed e.First as range 19
      //DEBUG: e.First: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & Add-Normed/4 (/7 '-'/9 {REMOVED TILE} )/8 0/14 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: '-'/0 } Tile{ AsIs: e.First/19 } Tile{ ]] }
      refalrts::reinit_char(context[0], '-');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[19], context[20] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Add-Normed/4 (/7 0/9 )/8 '+'/14 e.Second/15 >/1
    context[15] = context[12];
    context[16] = context[13];
    if( ! refalrts::char_term( '+', context[14] ) )
      continue;
    if( ! refalrts::number_term( 0UL, context[9] ) )
      continue;
    if( ! refalrts::empty_seq( context[10], context[11] ) )
      continue;
    // closed e.Second as range 15
    //DEBUG: e.Second: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Add-Normed/4 (/7 0/9 )/8 '+'/14 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.Second/15 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[15], context[16] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Add-Normed/4 (/7 0/9 )/8 e.NegOrZero/2 >/1
  if( ! refalrts::number_term( 0UL, context[9] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.NegOrZero as range 2
  //DEBUG: e.NegOrZero: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Add-Normed/4 (/7 0/9 )/8 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.NegOrZero/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Addm_Normed("Add-Normed", COOKIE1_, COOKIE2_, func_Addm_Normed);


static refalrts::FnResult func_gen_Addm_Nat_S1B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & Add-Nat$1:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Add-Nat$1:1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 s.new4/13 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  if( ! refalrts::svar_right( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & Add-Nat$1:1/4 (/7 e.First/14 )/8 (/11 e.Second/16 )/12 s.LastSum/13 >/1
    context[14] = context[5];
    context[15] = context[6];
    context[16] = context[9];
    context[17] = context[10];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.First as range 14
    // closed e.Second as range 16
    //DEBUG: s.LastSum: 13
    //DEBUG: e.First: 14
    //DEBUG: e.Second: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/11 {REMOVED TILE} {REMOVED TILE} s.LastSum/13 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Add-Nat/4 AsIs: (/7 AsIs: e.First/14 AsIs: )/8 } Tile{ AsIs: e.Second/16 } Tile{ HalfReuse: >/12 } Tile{ HalfReuse: s.LastSum13 /1 ]] }
    refalrts::update_name(context[4], functions[efunc_Addm_Nat]);
    refalrts::reinit_close_call(context[12]);
    refalrts::reinit_svar( context[1], context[13] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    refalrts::splice_to_freelist_open( vm, context[8], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Add-Nat$1:1/4 (/7 e.First/5 )/8 (/11 e.Second/9 )/12 1/14 s.LastSum/13 >/1
  context[14] = refalrts::number_left( 1UL, context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.First as range 5
  // closed e.Second as range 9
  //DEBUG: s.LastSum: 13
  //DEBUG: e.First: 5
  //DEBUG: e.Second: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LastSum/13 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Add-Nat/4 AsIs: (/7 AsIs: e.First/5 AsIs: )/8 HalfReuse: </11 } & Add-Nat/15 (/16 Tile{ AsIs: e.Second/9 } Tile{ AsIs: )/12 AsIs: 1/14 } >/17 >/18 Tile{ HalfReuse: s.LastSum13 /1 ]] }
  refalrts::alloc_name(vm, context[15], functions[efunc_Addm_Nat]);
  refalrts::alloc_open_bracket(vm, context[16]);
  refalrts::alloc_close_call(vm, context[17]);
  refalrts::alloc_close_call(vm, context[18]);
  refalrts::update_name(context[4], functions[efunc_Addm_Nat]);
  refalrts::reinit_open_call(context[11]);
  refalrts::reinit_svar( context[1], context[13] );
  refalrts::push_stack( vm, context[18] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[17] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[16], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[12], context[14] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::splice_to_freelist_open( vm, context[11], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Addm_Nat_S1B1("Add-Nat$1:1", COOKIE1_, COOKIE2_, func_gen_Addm_Nat_S1B1);


static refalrts::FnResult func_Addm_Nat(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & Add-Nat/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Add-Nat/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Add-Nat/4 (/7 e.First/9 s.FirstLast/13 )/8 e.Second/11 s.SecondLast/14 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    if( ! refalrts::svar_right( context[13], context[9], context[10] ) )
      continue;
    // closed e.First as range 9
    if( ! refalrts::svar_right( context[14], context[11], context[12] ) )
      continue;
    // closed e.Second as range 11
    //DEBUG: s.FirstLast: 13
    //DEBUG: e.First: 9
    //DEBUG: s.SecondLast: 14
    //DEBUG: e.Second: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Add-Nat$1:1/4 AsIs: (/7 } Tile{ AsIs: e.First/9 } )/15 (/16 Tile{ AsIs: e.Second/11 } Tile{ AsIs: )/8 } </17 & Add-Digits/18 Tile{ AsIs: s.FirstLast/13 } Tile{ AsIs: s.SecondLast/14 AsIs: >/1 } >/19 Tile{ ]] }
    refalrts::alloc_close_bracket(vm, context[15]);
    refalrts::alloc_open_bracket(vm, context[16]);
    refalrts::alloc_open_call(vm, context[17]);
    refalrts::alloc_name(vm, context[18], functions[efunc_Addm_Digits]);
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::update_name(context[4], functions[efunc_gen_Addm_Nat_S1B1]);
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[17] );
    refalrts::link_brackets( context[16], context[8] );
    refalrts::link_brackets( context[7], context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[14], context[1] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Add-Nat/4 (/7 e.First/5 )/8 e.Second/2 >/1
  // closed e.First as range 5
  // closed e.Second as range 2
  //DEBUG: e.First: 5
  //DEBUG: e.Second: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Add-Nat/4 (/7 {REMOVED TILE} )/8 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.First/5 } Tile{ AsIs: e.Second/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Addm_Nat("Add-Nat", COOKIE1_, COOKIE2_, func_Addm_Nat);

#line 251 "Library.ref"

#define ARITHM_PRELUDE \
  refalrts::Iter pFirst = 0, pSecond = 0; \
  refalrts::Iter pFunc \
    = refalrts::call_left(pFirst, pSecond, arg_begin, arg_end); \
  \
  if (pFirst->next != pSecond) { \
    return refalrts::cRecognitionImpossible; \
  } \
  \
  if ( \
    refalrts::cDataNumber != pFirst->tag \
    || refalrts::cDataNumber != pSecond->tag \
  ) { \
    return refalrts::cRecognitionImpossible; \
  } \
  \
  refalrts::RefalNumber first = pFirst->number_info; \
  refalrts::RefalNumber second = pSecond->number_info;

#line 2579 "Library.cpp"

static refalrts::FnResult func_Addm_Digits(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 275 "Library.ref"
  ARITHM_PRELUDE

  refalrts::RefalNumber sum = first + second;

  if (sum >= first) {
    pFirst->number_info = sum;
    refalrts::splice_to_freelist(vm, arg_begin, pFunc);
    refalrts::splice_to_freelist(vm, pSecond, arg_end);
  } else {
    pFirst->number_info = 1;
    pSecond->number_info = sum;
    refalrts::splice_to_freelist(vm, arg_begin, pFunc);
    refalrts::splice_to_freelist(vm, arg_end, arg_end);
  }

  return refalrts::cSuccess;
#line 2603 "Library.cpp"
}

static refalrts::NativeReference nat_ref_Addm_Digits("Add-Digits", COOKIE1_, COOKIE2_, func_Addm_Digits);


static refalrts::FnResult func_Arg(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 301 "Library.ref"
  refalrts::Iter content_b = 0;
  refalrts::Iter content_e = 0;
  refalrts::call_left(content_b, content_e, arg_begin, arg_end);

  refalrts::Iter pparam_no = 0;
  if (
    ! refalrts::svar_left(pparam_no, content_b, content_e)
    || ! refalrts::empty_seq(content_b, content_e)
    || refalrts::cDataNumber != pparam_no->tag
  ) {
    return refalrts::cRecognitionImpossible;
  }

  unsigned int param_no = static_cast<unsigned int>(pparam_no->number_info);

  refalrts::Iter param_begin = 0;
  refalrts::Iter param_end = 0;
  const char *param = refalrts::arg(vm, param_no);
  param = param ? param : "";
  refalrts::alloc_string(vm, param_begin, param_end, param);
  refalrts::splice_evar(arg_begin, param_begin, param_end);
  refalrts::splice_to_freelist(vm, arg_begin, arg_end);
  return refalrts::cSuccess;
#line 2638 "Library.cpp"
}

static refalrts::NativeReference nat_ref_Arg("Arg", 0U, 0U, func_Arg);


static refalrts::FnResult func_Br(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & Br/4 e.Key/5 '='/9 e.Value/7 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  refalrts::start_e_loop(vm);
  do {
    context[7] = context[2];
    context[8] = context[3];
    context[9] = refalrts::char_left( '=', context[7], context[8] );
    if( ! context[9] )
      continue;
    // closed e.Value as range 7
    //DEBUG: e.Key: 5
    //DEBUG: e.Value: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </10 & __Step-Start/11 >/12 </13 Tile{ HalfReuse: & Buried/0 HalfReuse: (/4 AsIs: e.Key/5 AsIs: '='/9 AsIs: e.Value/7 HalfReuse: )/1 } </14 & Buried/15 >/16 >/17 </18 & __Step-End/19 >/20 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_u_u_Stepm_Start]);
    refalrts::alloc_close_call(vm, context[12]);
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_open_call(vm, context[14]);
    refalrts::alloc_name(vm, context[15], functions[efunc_Buried]);
    refalrts::alloc_close_call(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::alloc_open_call(vm, context[18]);
    refalrts::alloc_name(vm, context[19], functions[efunc_u_u_Stepm_End]);
    refalrts::alloc_close_call(vm, context[20]);
    refalrts::reinit_name(context[0], functions[efunc_Buried]);
    refalrts::reinit_open_bracket(context[4]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::push_stack( vm, context[20] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[14] );
    refalrts::link_brackets( context[4], context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[14], context[20] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[10], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( refalrts::open_evar_advance( context[5], context[6], context[2], context[3] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_Br("Br", 0U, 0U, func_Br);


static refalrts::FnResult func_Card(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Card/4 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Step-Drop/4 AsIs: >/1 } </5 & Get-Aux/6 # stdin/7 >/8 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_Getm_Aux]);
  refalrts::alloc_ident(vm, context[7], identifiers[ident_stdin]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_u_u_Stepm_Drop]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Card("Card", 0U, 0U, func_Card);

#line 351 "Library.ref"
namespace {

template <typename Conv>
refalrts::FnResult convert(
  refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end, Conv conv
) {
  refalrts::Iter content_b = 0, content_e = 0;
  refalrts::Iter pfunc =
    refalrts::call_left(content_b, content_e, arg_begin, arg_end);

  while (! refalrts::empty_seq(content_b, content_e)) {
    if (conv.for_convert(content_b)) {
      conv.convert(content_b);
    }

    if (content_b->tag != refalrts::cDataOpenADT) {
      refalrts::move_left(content_b, content_e);
    } else {
      refalrts::Iter dummy;
      refalrts::tvar_left(dummy, content_b, content_e);
    }
  }

  refalrts::splice_to_freelist(vm, arg_begin, pfunc);
  refalrts::splice_to_freelist(vm, arg_end, arg_end);

  return refalrts::cSuccess;
}

struct ChrConv {
  bool for_convert(refalrts::Iter item) {
    return refalrts::cDataNumber == item->tag;
  }

  void convert(refalrts::Iter item) {
    item->tag = refalrts::cDataChar;
    item->char_info = static_cast<char>(item->number_info);
  }
};

}  // unnamed namespace
#line 2795 "Library.cpp"

static refalrts::FnResult func_Chr(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 396 "Library.ref"
  return convert(vm, arg_begin, arg_end, ChrConv());
#line 2804 "Library.cpp"
}

static refalrts::NativeReference nat_ref_Chr("Chr", 0U, 0U, func_Chr);


static refalrts::FnResult func_gen_Cp_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & Cp:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Cp:1/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Cp:1/4 (/7 e.Key/9 )/8 e.Values-B/13 (/19 e.Key/21 '='/23 e.Value/17 )/20 e.Values-E/15 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Key as range 9
    context[13] = 0;
    context[14] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[15] = context[11];
      context[16] = context[12];
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_left( context[17], context[18], context[15], context[16] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      if( ! refalrts::repeated_evar_left( vm, context[21], context[22], context[9], context[10], context[17], context[18] ) )
        continue;
      context[23] = refalrts::char_left( '=', context[17], context[18] );
      if( ! context[23] )
        continue;
      // closed e.Value as range 17
      // closed e.Values-E as range 15
      //DEBUG: e.Key: 9
      //DEBUG: e.Values-B: 13
      //DEBUG: e.Value: 17
      //DEBUG: e.Values-E: 15

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} e.Key/9 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } e.Value/17/24 </26 Tile{ HalfReuse: & Buried/8 AsIs: e.Values-B/13 AsIs: (/19 AsIs: e.Key/21 AsIs: '='/23 AsIs: e.Value/17 AsIs: )/20 AsIs: e.Values-E/15 AsIs: >/1 } Tile{ AsIs: </0 Reuse: & __Step-End/4 HalfReuse: >/7 } Tile{ ]] }
      refalrts::copy_evar(vm, context[24], context[25], context[17], context[18]);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::reinit_name(context[8], functions[efunc_Buried]);
      refalrts::update_name(context[4], functions[efunc_u_u_Stepm_End]);
      refalrts::reinit_close_call(context[7]);
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[26] );
      refalrts::link_brackets( context[19], context[20] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[0], context[7] );
      res = refalrts::splice_evar( res, context[8], context[1] );
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[13], context[14], context[11], context[12] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Cp:1/4 (/7 e.Key/5 )/8 e.Values/2 >/1
  // closed e.Key as range 5
  // closed e.Values as range 2
  //DEBUG: e.Key: 5
  //DEBUG: e.Values: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} e.Key/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Buried/4 } Tile{ AsIs: e.Values/2 } Tile{ HalfReuse: >/7 } Tile{ HalfReuse: </8 } & __Step-End/9 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[9], functions[efunc_u_u_Stepm_End]);
  refalrts::update_name(context[4], functions[efunc_Buried]);
  refalrts::reinit_close_call(context[7]);
  refalrts::reinit_open_call(context[8]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Cp_B1("Cp:1", COOKIE1_, COOKIE2_, func_gen_Cp_B1);


static refalrts::FnResult func_Cp(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Cp/4 e.Key/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Key as range 2
  //DEBUG: e.Key: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Cp:1/4 } (/5 Tile{ AsIs: e.Key/2 } )/6 </7 & __Step-Start/8 >/9 </10 & Buried/11 >/12 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[5]);
  refalrts::alloc_close_bracket(vm, context[6]);
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_u_u_Stepm_Start]);
  refalrts::alloc_close_call(vm, context[9]);
  refalrts::alloc_open_call(vm, context[10]);
  refalrts::alloc_name(vm, context[11], functions[efunc_Buried]);
  refalrts::alloc_close_call(vm, context[12]);
  refalrts::update_name(context[4], functions[efunc_gen_Cp_B1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[5], context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[6], context[12] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Cp("Cp", 0U, 0U, func_Cp);


static refalrts::FnResult func_gen_Dg_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & Dg:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Dg:1/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Dg:1/4 (/7 e.Key/9 )/8 e.Values-B/13 (/19 e.Key/21 '='/23 e.Value/17 )/20 e.Values-E/15 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Key as range 9
    context[13] = 0;
    context[14] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[15] = context[11];
      context[16] = context[12];
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_left( context[17], context[18], context[15], context[16] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      if( ! refalrts::repeated_evar_left( vm, context[21], context[22], context[9], context[10], context[17], context[18] ) )
        continue;
      context[23] = refalrts::char_left( '=', context[17], context[18] );
      if( ! context[23] )
        continue;
      // closed e.Value as range 17
      // closed e.Values-E as range 15
      //DEBUG: e.Key: 9
      //DEBUG: e.Values-B: 13
      //DEBUG: e.Value: 17
      //DEBUG: e.Values-E: 15

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} (/7 e.Key/9 )/8 {REMOVED TILE} {REMOVED TILE} e.Key/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.Value/17 } Tile{ AsIs: </0 Reuse: & Buried/4 } Tile{ AsIs: e.Values-B/13 } Tile{ AsIs: e.Values-E/15 } Tile{ HalfReuse: >/19 } Tile{ HalfReuse: </23 } Tile{ HalfReuse: & __Step-End/20 } Tile{ AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Buried]);
      refalrts::reinit_close_call(context[19]);
      refalrts::reinit_open_call(context[23]);
      refalrts::reinit_name(context[20], functions[efunc_u_u_Stepm_End]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[19] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_elem( res, context[19] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[13], context[14], context[11], context[12] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Dg:1/4 (/7 e.Key/5 )/8 e.Values/2 >/1
  // closed e.Key as range 5
  // closed e.Values as range 2
  //DEBUG: e.Key: 5
  //DEBUG: e.Values: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} e.Key/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Buried/4 } Tile{ AsIs: e.Values/2 } Tile{ HalfReuse: >/7 } Tile{ HalfReuse: </8 } & __Step-End/9 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[9], functions[efunc_u_u_Stepm_End]);
  refalrts::update_name(context[4], functions[efunc_Buried]);
  refalrts::reinit_close_call(context[7]);
  refalrts::reinit_open_call(context[8]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Dg_B1("Dg:1", COOKIE1_, COOKIE2_, func_gen_Dg_B1);


static refalrts::FnResult func_Dg(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Dg/4 e.Key/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Key as range 2
  //DEBUG: e.Key: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Dg:1/4 } (/5 Tile{ AsIs: e.Key/2 } )/6 </7 & __Step-Start/8 >/9 </10 & Buried/11 >/12 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[5]);
  refalrts::alloc_close_bracket(vm, context[6]);
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_u_u_Stepm_Start]);
  refalrts::alloc_close_call(vm, context[9]);
  refalrts::alloc_open_call(vm, context[10]);
  refalrts::alloc_name(vm, context[11], functions[efunc_Buried]);
  refalrts::alloc_close_call(vm, context[12]);
  refalrts::update_name(context[4], functions[efunc_gen_Dg_B1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[5], context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[6], context[12] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Dg("Dg", 0U, 0U, func_Dg);


static refalrts::FnResult func_Dgall(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & Dgall/4 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Step-Drop/4 AsIs: >/1 } </5 & Buried/6 >/7 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_Buried]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_u_u_Stepm_Drop]);
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Dgall("Dgall", 0U, 0U, func_Dgall);


static refalrts::FnResult func_gen_Div_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & Div$1=1/4 (/7 s.Div/9 )/8 s.Rem/10 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::svar_left( context[9], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Div: 9
  //DEBUG: s.Rem: 10

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.Div/9 )/8 s.Rem/10 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: s.Div9 /0 HalfReuse: </4 HalfReuse: & __Step-End/7 } Tile{ AsIs: >/1 ]] }
  refalrts::reinit_svar( context[0], context[9] );
  refalrts::reinit_open_call(context[4]);
  refalrts::reinit_name(context[7], functions[efunc_u_u_Stepm_End]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Div_S1A1("Div$1=1", COOKIE1_, COOKIE2_, func_gen_Div_S1A1);


static refalrts::FnResult func_Div(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & Div/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Div/4 s.First/7 s.Second/8 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::svar_left( context[8], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    //DEBUG: s.First: 7
    //DEBUG: s.Second: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </9 & Div$1=1/10 </11 & __Step-Start/12 >/13 Tile{ AsIs: </0 Reuse: & Divmod-Digits/4 AsIs: s.First/7 AsIs: s.Second/8 AsIs: >/1 } >/14 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[9]);
    refalrts::alloc_name(vm, context[10], functions[efunc_gen_Div_S1A1]);
    refalrts::alloc_open_call(vm, context[11]);
    refalrts::alloc_name(vm, context[12], functions[efunc_u_u_Stepm_Start]);
    refalrts::alloc_close_call(vm, context[13]);
    refalrts::alloc_close_call(vm, context[14]);
    refalrts::update_name(context[4], functions[efunc_Divmodm_Digits]);
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[9], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Div/4 e.ArithmArg/2 >/1
  // closed e.ArithmArg as range 2
  //DEBUG: e.ArithmArg: 2
  //2: e.ArithmArg
  //13: e.ArithmArg

  refalrts::reset_allocator(vm);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_Div_S2C1]);
  refalrts::alloc_open_call(vm, context[8]);
  refalrts::alloc_name(vm, context[9], functions[efunc_u_u_Stepm_Start]);
  refalrts::alloc_close_call(vm, context[10]);
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_NormArithmArg]);
  refalrts::copy_evar(vm, context[13], context[14], context[2], context[3]);
  refalrts::alloc_close_call(vm, context[15]);
  refalrts::alloc_close_call(vm, context[6]);
  refalrts::push_stack( vm, context[6] );
  refalrts::push_stack( vm, context[5] );
  res = refalrts::splice_elem( res, context[6] );
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[11] );
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_elem( res, context[11] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[8] );
  res = refalrts::splice_elem( res, context[10] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
  if (rec_res != refalrts::cSuccess)
    return rec_res;
  refalrts::this_is_generated_function(vm);
  do {
    // </5 & Div$2?1/9 (/12 e.First/10 )/13 e.Second/7 >/6
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::call_left( context[7], context[8], context[5], context[6] );
    context[10] = 0;
    context[11] = 0;
    context[12] = refalrts::brackets_left( context[10], context[11], context[7], context[8] );
    if( ! context[12] )
      continue;
    refalrts::bracket_pointers(context[12], context[13]);
    // closed e.First as range 10
    // closed e.Second as range 7
    //DEBUG: e.ArithmArg: 2
    //DEBUG: e.First: 10
    //DEBUG: e.Second: 7
    //2: e.ArithmArg
    //7: e.Second
    //10: e.First
    //20: e.First
    //23: e.Second

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[14]);
    refalrts::alloc_name(vm, context[16], functions[efunc_gen_Div_S2C2]);
    refalrts::alloc_open_call(vm, context[17]);
    refalrts::alloc_name(vm, context[18], functions[efunc_Divmodm_Normed]);
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::copy_evar(vm, context[20], context[21], context[10], context[11]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::copy_evar(vm, context[23], context[24], context[7], context[8]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::alloc_close_call(vm, context[15]);
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[14] );
    res = refalrts::splice_elem( res, context[15] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[17] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    refalrts::link_brackets( context[19], context[22] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_elem( res, context[14] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </14 & Div$2?2/18 (/21 e.Div/19 )/22 e.Mod/16 >/15
      context[16] = 0;
      context[17] = 0;
      context[18] = refalrts::call_left( context[16], context[17], context[14], context[15] );
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::brackets_left( context[19], context[20], context[16], context[17] );
      if( ! context[21] )
        continue;
      refalrts::bracket_pointers(context[21], context[22]);
      // closed e.Div as range 19
      // closed e.Mod as range 16
      //DEBUG: e.ArithmArg: 2
      //DEBUG: e.First: 10
      //DEBUG: e.Second: 7
      //DEBUG: e.Div: 19
      //DEBUG: e.Mod: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Div/4 e.ArithmArg/2 </5 & Div$2?1/9 (/12 e.First/10 )/13 e.Second/7 >/6 {REMOVED TILE} & Div$2?2/18 (/21 {REMOVED TILE} )/22 e.Mod/16 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.Div/19 } Tile{ AsIs: </14 } Tile{ HalfReuse: & __Step-End/15 AsIs: >/1 ]] }
      refalrts::reinit_name(context[15], functions[efunc_u_u_Stepm_End]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[15];
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[14], context[15]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  refalrts::splice_to_freelist(vm, context[5], context[6]);
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_Div("Div", 0U, 0U, func_Div);


static refalrts::FnResult func_Divmod(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 25 elems
  refalrts::Iter context[25];
  refalrts::zeros( context, 25 );
  // </0 & Divmod/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Divmod/4 s.First/7 s.Second/8 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::svar_left( context[8], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    //DEBUG: s.First: 7
    //DEBUG: s.Second: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </9 & __Step-Drop/10 >/11 Tile{ AsIs: </0 Reuse: & Divmod-Digits/4 AsIs: s.First/7 AsIs: s.Second/8 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[9]);
    refalrts::alloc_name(vm, context[10], functions[efunc_u_u_Stepm_Drop]);
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::update_name(context[4], functions[efunc_Divmodm_Digits]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[0];
    res = refalrts::splice_evar( res, context[9], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Divmod/4 e.ArithmArg/2 >/1
  // closed e.ArithmArg as range 2
  //DEBUG: e.ArithmArg: 2
  //2: e.ArithmArg
  //13: e.ArithmArg

  refalrts::reset_allocator(vm);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_Divmod_S2C1]);
  refalrts::alloc_open_call(vm, context[8]);
  refalrts::alloc_name(vm, context[9], functions[efunc_u_u_Stepm_Start]);
  refalrts::alloc_close_call(vm, context[10]);
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_NormArithmArg]);
  refalrts::copy_evar(vm, context[13], context[14], context[2], context[3]);
  refalrts::alloc_close_call(vm, context[15]);
  refalrts::alloc_close_call(vm, context[6]);
  refalrts::push_stack( vm, context[6] );
  refalrts::push_stack( vm, context[5] );
  res = refalrts::splice_elem( res, context[6] );
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[11] );
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_elem( res, context[11] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[8] );
  res = refalrts::splice_elem( res, context[10] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
  if (rec_res != refalrts::cSuccess)
    return rec_res;
  refalrts::this_is_generated_function(vm);
  do {
    // </5 & Divmod$2?1/9 (/12 e.First/10 )/13 s.Sign/14 e.Second/7 >/6
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::call_left( context[7], context[8], context[5], context[6] );
    context[10] = 0;
    context[11] = 0;
    context[12] = refalrts::brackets_left( context[10], context[11], context[7], context[8] );
    if( ! context[12] )
      continue;
    refalrts::bracket_pointers(context[12], context[13]);
    // closed e.First as range 10
    if( ! refalrts::svar_left( context[14], context[7], context[8] ) )
      continue;
    // closed e.Second as range 7
    //DEBUG: e.ArithmArg: 2
    //DEBUG: e.First: 10
    //DEBUG: s.Sign: 14
    //DEBUG: e.Second: 7
    //2: e.ArithmArg
    //7: e.Second
    //10: e.First
    //14: s.Sign

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[17], functions[efunc_gen_Divmod_S2C2]);
    refalrts::alloc_chars(vm, context[18], context[19], "+-", 2);
    refalrts::alloc_close_call(vm, context[16]);
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[15] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_elem( res, context[15] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </15 & Divmod$2?2/19 e.Signs-B/20 s.Sign/24 e.Signs-E/22 >/16
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::call_left( context[17], context[18], context[15], context[16] );
      context[20] = 0;
      context[21] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[22] = context[17];
        context[23] = context[18];
        if( ! refalrts::repeated_stvar_left( vm, context[24], context[14], context[22], context[23] ) )
          continue;
        // closed e.Signs-E as range 22
        //DEBUG: e.ArithmArg: 2
        //DEBUG: e.First: 10
        //DEBUG: s.Sign: 14
        //DEBUG: e.Second: 7
        //DEBUG: e.Signs-B: 20
        //DEBUG: e.Signs-E: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & Divmod/4 e.ArithmArg/2 {REMOVED TILE} e.Signs-B/20 s.Sign/24 e.Signs-E/22 >/16 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: </5 Reuse: & Divmod-Normed/9 AsIs: (/12 AsIs: e.First/10 AsIs: )/13 AsIs: s.Sign/14 AsIs: e.Second/7 AsIs: >/6 AsIs: </15 Reuse: & __Step-End/19 } Tile{ AsIs: >/1 ]] }
        refalrts::update_name(context[9], functions[efunc_Divmodm_Normed]);
        refalrts::update_name(context[19], functions[efunc_u_u_Stepm_End]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[6] );
        refalrts::push_stack( vm, context[5] );
        refalrts::link_brackets( context[12], context[13] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[5], context[19] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[20], context[21], context[17], context[18] ) );
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[15], context[16]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  refalrts::splice_to_freelist(vm, context[5], context[6]);
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_Divmod("Divmod", 0U, 0U, func_Divmod);


static refalrts::FnResult func_Divmodm_Digits(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 475 "Library.ref"
  ARITHM_PRELUDE

  if (0 == second) {
    return refalrts::cRecognitionImpossible;
  }

  refalrts::Iter pleft_bracket = arg_begin;
  refalrts::Iter pdiv = pFunc;
  refalrts::Iter pright_bracket = pFirst;
  refalrts::Iter pmod = pSecond;
  refalrts::link_brackets(pleft_bracket, pright_bracket);

  refalrts::reinit_open_bracket(pleft_bracket);
  refalrts::reinit_number(pdiv, first / second);
  refalrts::reinit_close_bracket(pright_bracket);
  refalrts::update_number(pmod, first % second);
  refalrts::splice_to_freelist(vm, arg_end, arg_end);

  return refalrts::cSuccess;
#line 3638 "Library.cpp"
}

static refalrts::NativeReference nat_ref_Divmodm_Digits("Divmod-Digits", COOKIE1_, COOKIE2_, func_Divmodm_Digits);


static refalrts::FnResult func_Divmodm_Normed(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 36 elems
  refalrts::Iter context[36];
  refalrts::zeros( context, 36 );
  // </0 & Divmod-Normed/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Divmod-Normed/4 (/7 s.new1/9 e.new2/5 )/8 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new3 as range 2
  if( ! refalrts::svar_left( context[9], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 5
  do {
    // </0 & Divmod-Normed/4 (/7 s.new6/9 e.new7/10 )/8 s.new4/14 e.new5/12 >/1
    context[10] = context[5];
    context[11] = context[6];
    context[12] = context[2];
    context[13] = context[3];
    // closed e.new7 as range 10
    if( ! refalrts::svar_left( context[14], context[12], context[13] ) )
      continue;
    // closed e.new5 as range 12
    do {
      // </0 & Divmod-Normed/4 (/7 '+'/9 e.new10/15 )/8 s.new8/14 e.new9/17 >/1
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      context[18] = context[13];
      if( ! refalrts::char_term( '+', context[9] ) )
        continue;
      // closed e.new10 as range 15
      // closed e.new9 as range 17
      do {
        // </0 & Divmod-Normed/4 (/7 '+'/9 e.new12/19 )/8 '+'/14 e.new11/21 >/1
        context[19] = context[15];
        context[20] = context[16];
        context[21] = context[17];
        context[22] = context[18];
        if( ! refalrts::char_term( '+', context[14] ) )
          continue;
        // closed e.new12 as range 19
        // closed e.new11 as range 21
        do {
          // </0 & Divmod-Normed/4 (/7 '+'/9 e.new15/23 )/8 '+'/14 s.new13/27 e.new14/25 >/1
          context[23] = context[19];
          context[24] = context[20];
          context[25] = context[21];
          context[26] = context[22];
          // closed e.new15 as range 23
          if( ! refalrts::svar_left( context[27], context[25], context[26] ) )
            continue;
          // closed e.new14 as range 25
          do {
            // </0 & Divmod-Normed/4 (/7 '+'/9 s.Numerator/30 )/8 '+'/14 s.Denominator/27 >/1
            context[28] = context[23];
            context[29] = context[24];
            if( ! refalrts::empty_seq( context[25], context[26] ) )
              continue;
            if( ! refalrts::svar_left( context[30], context[28], context[29] ) )
              continue;
            if( ! refalrts::empty_seq( context[28], context[29] ) )
              continue;
            //DEBUG: s.Denominator: 27
            //DEBUG: s.Numerator: 30

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} s.Denominator/27 {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-Nat$1=1@1/4 HalfReuse: </7 HalfReuse: & Divmod-Digits/9 AsIs: s.Numerator/30 HalfReuse: s.Denominator27 /8 HalfReuse: >/14 } Tile{ AsIs: >/1 ]] }
            refalrts::update_name(context[4], functions[efunc_gen_Divmodm_Nat_S1A1Z1]);
            refalrts::reinit_open_call(context[7]);
            refalrts::reinit_name(context[9], functions[efunc_Divmodm_Digits]);
            refalrts::reinit_svar( context[8], context[27] );
            refalrts::reinit_close_call(context[14]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[14] );
            refalrts::push_stack( vm, context[7] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            refalrts::splice_to_freelist_open( vm, context[14], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & Divmod-Normed/4 (/7 '+'/9 e.First/28 )/8 '+'/14 s.DenomFirst/27 e./30 >/1
          context[28] = context[23];
          context[29] = context[24];
          context[30] = context[25];
          context[31] = context[26];
          // closed e.First as range 28
          // closed e. as range 30
          //DEBUG: s.DenomFirst: 27
          //DEBUG: e.First: 28
          //DEBUG: e.: 30

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-Nat$2=1@1/4 HalfReuse: s.DenomFirst27 /7 HalfReuse: (/9 } Tile{ AsIs: e./30 } )/32 (/33 Tile{ AsIs: e.First/28 } )/34 Tile{ HalfReuse: </8 HalfReuse: & Divmod-Nat$2=1:1/14 AsIs: s.DenomFirst/27 } >/35 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_close_bracket(vm, context[32]);
          refalrts::alloc_open_bracket(vm, context[33]);
          refalrts::alloc_close_bracket(vm, context[34]);
          refalrts::alloc_close_call(vm, context[35]);
          refalrts::update_name(context[4], functions[efunc_gen_Divmodm_Nat_S2A1Z1]);
          refalrts::reinit_svar( context[7], context[27] );
          refalrts::reinit_open_bracket(context[9]);
          refalrts::reinit_open_call(context[8]);
          refalrts::reinit_name(context[14], functions[efunc_gen_Divmodm_Nat_S2A1B1]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[35] );
          refalrts::push_stack( vm, context[8] );
          refalrts::link_brackets( context[33], context[34] );
          refalrts::link_brackets( context[9], context[32] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_elem( res, context[35] );
          res = refalrts::splice_evar( res, context[8], context[27] );
          res = refalrts::splice_elem( res, context[34] );
          res = refalrts::splice_evar( res, context[28], context[29] );
          res = refalrts::splice_evar( res, context[32], context[33] );
          res = refalrts::splice_evar( res, context[30], context[31] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Divmod-Normed/4 (/7 '+'/9 e.First/23 )/8 '+'/14 e.Second/25 >/1
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        context[26] = context[22];
        // closed e.First as range 23
        // closed e.Second as range 25
        //DEBUG: e.First: 23
        //DEBUG: e.Second: 25

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-Nat*2/4 AsIs: (/7 } Tile{ AsIs: e.First/23 } Tile{ HalfReuse: )/9 } Tile{ AsIs: e.Second/25 } (/27 Tile{ AsIs: )/8 HalfReuse: (/14 } )/28 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[27]);
        refalrts::alloc_close_bracket(vm, context[28]);
        refalrts::update_name(context[4], functions[efunc_gen_Divmodm_Nat_D2]);
        refalrts::reinit_close_bracket(context[9]);
        refalrts::reinit_open_bracket(context[14]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[14], context[28] );
        refalrts::link_brackets( context[27], context[8] );
        refalrts::link_brackets( context[7], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[28] );
        res = refalrts::splice_evar( res, context[8], context[14] );
        res = refalrts::splice_elem( res, context[27] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_evar( res, context[23], context[24] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Divmod-Normed/4 (/7 '+'/9 e.new12/19 )/8 '-'/14 e.new11/21 >/1
      context[19] = context[15];
      context[20] = context[16];
      context[21] = context[17];
      context[22] = context[18];
      if( ! refalrts::char_term( '-', context[14] ) )
        continue;
      // closed e.new12 as range 19
      // closed e.new11 as range 21
      do {
        // </0 & Divmod-Normed/4 (/7 '+'/9 e.new15/23 )/8 '-'/14 s.new13/27 e.new14/25 >/1
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        context[26] = context[22];
        // closed e.new15 as range 23
        if( ! refalrts::svar_left( context[27], context[25], context[26] ) )
          continue;
        // closed e.new14 as range 25
        do {
          // </0 & Divmod-Normed/4 (/7 '+'/9 s.Numerator/30 )/8 '-'/14 s.Denominator/27 >/1
          context[28] = context[23];
          context[29] = context[24];
          if( ! refalrts::empty_seq( context[25], context[26] ) )
            continue;
          if( ! refalrts::svar_left( context[30], context[28], context[29] ) )
            continue;
          if( ! refalrts::empty_seq( context[28], context[29] ) )
            continue;
          //DEBUG: s.Denominator: 27
          //DEBUG: s.Numerator: 30

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Denominator/27 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-Nat$1=1@2/4 HalfReuse: </7 HalfReuse: & Divmod-Digits/9 AsIs: s.Numerator/30 HalfReuse: s.Denominator27 /8 HalfReuse: >/14 } Tile{ AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_gen_Divmodm_Nat_S1A1Z2]);
          refalrts::reinit_open_call(context[7]);
          refalrts::reinit_name(context[9], functions[efunc_Divmodm_Digits]);
          refalrts::reinit_svar( context[8], context[27] );
          refalrts::reinit_close_call(context[14]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[14] );
          refalrts::push_stack( vm, context[7] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, context[14], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Divmod-Normed/4 (/7 '+'/9 e.First/28 )/8 '-'/14 s.DenomFirst/27 e./30 >/1
        context[28] = context[23];
        context[29] = context[24];
        context[30] = context[25];
        context[31] = context[26];
        // closed e.First as range 28
        // closed e. as range 30
        //DEBUG: s.DenomFirst: 27
        //DEBUG: e.First: 28
        //DEBUG: e.: 30

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-Nat$2=1@2/4 HalfReuse: s.DenomFirst27 /7 HalfReuse: (/9 } Tile{ AsIs: e./30 } )/32 (/33 Tile{ AsIs: e.First/28 } )/34 Tile{ HalfReuse: </8 HalfReuse: & Divmod-Nat$2=1:1/14 AsIs: s.DenomFirst/27 } >/35 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[32]);
        refalrts::alloc_open_bracket(vm, context[33]);
        refalrts::alloc_close_bracket(vm, context[34]);
        refalrts::alloc_close_call(vm, context[35]);
        refalrts::update_name(context[4], functions[efunc_gen_Divmodm_Nat_S2A1Z2]);
        refalrts::reinit_svar( context[7], context[27] );
        refalrts::reinit_open_bracket(context[9]);
        refalrts::reinit_open_call(context[8]);
        refalrts::reinit_name(context[14], functions[efunc_gen_Divmodm_Nat_S2A1B1]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[35] );
        refalrts::push_stack( vm, context[8] );
        refalrts::link_brackets( context[33], context[34] );
        refalrts::link_brackets( context[9], context[32] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[8], context[27] );
        res = refalrts::splice_elem( res, context[34] );
        res = refalrts::splice_evar( res, context[28], context[29] );
        res = refalrts::splice_evar( res, context[32], context[33] );
        res = refalrts::splice_evar( res, context[30], context[31] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Divmod-Normed/4 (/7 '+'/9 e.First/23 )/8 '-'/14 e.Second/25 >/1
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      context[26] = context[22];
      // closed e.First as range 23
      // closed e.Second as range 25
      //DEBUG: e.First: 23
      //DEBUG: e.Second: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-Nat*2/4 AsIs: (/7 } Tile{ AsIs: e.First/23 } Tile{ HalfReuse: )/9 } Tile{ AsIs: e.Second/25 } Tile{ HalfReuse: (/8 AsIs: '-'/14 } )/27 (/28 )/29 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[27]);
      refalrts::alloc_open_bracket(vm, context[28]);
      refalrts::alloc_close_bracket(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_gen_Divmodm_Nat_D2]);
      refalrts::reinit_close_bracket(context[9]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[28], context[29] );
      refalrts::link_brackets( context[8], context[27] );
      refalrts::link_brackets( context[7], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[27], context[29] );
      res = refalrts::splice_evar( res, context[8], context[14] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Divmod-Normed/4 (/7 '-'/9 e.new10/15 )/8 s.new8/14 e.new9/17 >/1
    context[15] = context[10];
    context[16] = context[11];
    context[17] = context[12];
    context[18] = context[13];
    if( ! refalrts::char_term( '-', context[9] ) )
      continue;
    // closed e.new10 as range 15
    // closed e.new9 as range 17
    do {
      // </0 & Divmod-Normed/4 (/7 '-'/9 e.new12/19 )/8 '+'/14 e.new11/21 >/1
      context[19] = context[15];
      context[20] = context[16];
      context[21] = context[17];
      context[22] = context[18];
      if( ! refalrts::char_term( '+', context[14] ) )
        continue;
      // closed e.new12 as range 19
      // closed e.new11 as range 21
      do {
        // </0 & Divmod-Normed/4 (/7 '-'/9 e.new15/23 )/8 '+'/14 s.new13/27 e.new14/25 >/1
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        context[26] = context[22];
        // closed e.new15 as range 23
        if( ! refalrts::svar_left( context[27], context[25], context[26] ) )
          continue;
        // closed e.new14 as range 25
        do {
          // </0 & Divmod-Normed/4 (/7 '-'/9 s.Numerator/30 )/8 '+'/14 s.Denominator/27 >/1
          context[28] = context[23];
          context[29] = context[24];
          if( ! refalrts::empty_seq( context[25], context[26] ) )
            continue;
          if( ! refalrts::svar_left( context[30], context[28], context[29] ) )
            continue;
          if( ! refalrts::empty_seq( context[28], context[29] ) )
            continue;
          //DEBUG: s.Denominator: 27
          //DEBUG: s.Numerator: 30

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Denominator/27 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-Nat$1=1@3/4 HalfReuse: </7 HalfReuse: & Divmod-Digits/9 AsIs: s.Numerator/30 HalfReuse: s.Denominator27 /8 HalfReuse: >/14 } Tile{ AsIs: >/1 ]] }
          refalrts::update_name(context[4], functions[efunc_gen_Divmodm_Nat_S1A1Z3]);
          refalrts::reinit_open_call(context[7]);
          refalrts::reinit_name(context[9], functions[efunc_Divmodm_Digits]);
          refalrts::reinit_svar( context[8], context[27] );
          refalrts::reinit_close_call(context[14]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[14] );
          refalrts::push_stack( vm, context[7] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, context[14], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Divmod-Normed/4 (/7 '-'/9 e.First/28 )/8 '+'/14 s.DenomFirst/27 e./30 >/1
        context[28] = context[23];
        context[29] = context[24];
        context[30] = context[25];
        context[31] = context[26];
        // closed e.First as range 28
        // closed e. as range 30
        //DEBUG: s.DenomFirst: 27
        //DEBUG: e.First: 28
        //DEBUG: e.: 30

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-Nat$2=1@3/4 HalfReuse: s.DenomFirst27 /7 HalfReuse: (/9 } Tile{ AsIs: e./30 } )/32 (/33 Tile{ AsIs: e.First/28 } )/34 Tile{ HalfReuse: </8 HalfReuse: & Divmod-Nat$2=1:1/14 AsIs: s.DenomFirst/27 } >/35 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[32]);
        refalrts::alloc_open_bracket(vm, context[33]);
        refalrts::alloc_close_bracket(vm, context[34]);
        refalrts::alloc_close_call(vm, context[35]);
        refalrts::update_name(context[4], functions[efunc_gen_Divmodm_Nat_S2A1Z3]);
        refalrts::reinit_svar( context[7], context[27] );
        refalrts::reinit_open_bracket(context[9]);
        refalrts::reinit_open_call(context[8]);
        refalrts::reinit_name(context[14], functions[efunc_gen_Divmodm_Nat_S2A1B1]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[35] );
        refalrts::push_stack( vm, context[8] );
        refalrts::link_brackets( context[33], context[34] );
        refalrts::link_brackets( context[9], context[32] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[8], context[27] );
        res = refalrts::splice_elem( res, context[34] );
        res = refalrts::splice_evar( res, context[28], context[29] );
        res = refalrts::splice_evar( res, context[32], context[33] );
        res = refalrts::splice_evar( res, context[30], context[31] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Divmod-Normed/4 (/7 '-'/9 e.First/23 )/8 '+'/14 e.Second/25 >/1
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      context[26] = context[22];
      // closed e.First as range 23
      // closed e.Second as range 25
      //DEBUG: e.First: 23
      //DEBUG: e.Second: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-Nat*2/4 AsIs: (/7 } Tile{ AsIs: e.First/23 } )/27 Tile{ AsIs: e.Second/25 } (/28 Tile{ AsIs: '-'/9 } Tile{ AsIs: )/8 HalfReuse: (/14 } '-'/29 )/30 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[27]);
      refalrts::alloc_open_bracket(vm, context[28]);
      refalrts::alloc_char(vm, context[29], '-');
      refalrts::alloc_close_bracket(vm, context[30]);
      refalrts::update_name(context[4], functions[efunc_gen_Divmodm_Nat_D2]);
      refalrts::reinit_open_bracket(context[14]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[14], context[30] );
      refalrts::link_brackets( context[28], context[8] );
      refalrts::link_brackets( context[7], context[27] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[8], context[14] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_elem( res, context[28] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Divmod-Normed/4 (/7 '-'/9 e.new12/19 )/8 '-'/14 e.new11/21 >/1
    context[19] = context[15];
    context[20] = context[16];
    context[21] = context[17];
    context[22] = context[18];
    if( ! refalrts::char_term( '-', context[14] ) )
      continue;
    // closed e.new12 as range 19
    // closed e.new11 as range 21
    do {
      // </0 & Divmod-Normed/4 (/7 '-'/9 e.new15/23 )/8 '-'/14 s.new13/27 e.new14/25 >/1
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      context[26] = context[22];
      // closed e.new15 as range 23
      if( ! refalrts::svar_left( context[27], context[25], context[26] ) )
        continue;
      // closed e.new14 as range 25
      do {
        // </0 & Divmod-Normed/4 (/7 '-'/9 s.Numerator/30 )/8 '-'/14 s.Denominator/27 >/1
        context[28] = context[23];
        context[29] = context[24];
        if( ! refalrts::empty_seq( context[25], context[26] ) )
          continue;
        if( ! refalrts::svar_left( context[30], context[28], context[29] ) )
          continue;
        if( ! refalrts::empty_seq( context[28], context[29] ) )
          continue;
        //DEBUG: s.Denominator: 27
        //DEBUG: s.Numerator: 30

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Denominator/27 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-Nat$1=1@4/4 HalfReuse: </7 HalfReuse: & Divmod-Digits/9 AsIs: s.Numerator/30 HalfReuse: s.Denominator27 /8 HalfReuse: >/14 } Tile{ AsIs: >/1 ]] }
        refalrts::update_name(context[4], functions[efunc_gen_Divmodm_Nat_S1A1Z4]);
        refalrts::reinit_open_call(context[7]);
        refalrts::reinit_name(context[9], functions[efunc_Divmodm_Digits]);
        refalrts::reinit_svar( context[8], context[27] );
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[7] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, context[14], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Divmod-Normed/4 (/7 '-'/9 e.First/28 )/8 '-'/14 s.DenomFirst/27 e./30 >/1
      context[28] = context[23];
      context[29] = context[24];
      context[30] = context[25];
      context[31] = context[26];
      // closed e.First as range 28
      // closed e. as range 30
      //DEBUG: s.DenomFirst: 27
      //DEBUG: e.First: 28
      //DEBUG: e.: 30

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-Nat$2=1@4/4 HalfReuse: s.DenomFirst27 /7 HalfReuse: (/9 } Tile{ AsIs: e./30 } )/32 (/33 Tile{ AsIs: e.First/28 } )/34 Tile{ HalfReuse: </8 HalfReuse: & Divmod-Nat$2=1:1/14 AsIs: s.DenomFirst/27 } >/35 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[32]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::alloc_close_call(vm, context[35]);
      refalrts::update_name(context[4], functions[efunc_gen_Divmodm_Nat_S2A1Z4]);
      refalrts::reinit_svar( context[7], context[27] );
      refalrts::reinit_open_bracket(context[9]);
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[14], functions[efunc_gen_Divmodm_Nat_S2A1B1]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[35] );
      refalrts::push_stack( vm, context[8] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::link_brackets( context[9], context[32] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_evar( res, context[8], context[27] );
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Divmod-Normed/4 (/7 '-'/9 e.First/23 )/8 '-'/14 e.Second/25 >/1
    context[23] = context[19];
    context[24] = context[20];
    context[25] = context[21];
    context[26] = context[22];
    // closed e.First as range 23
    // closed e.Second as range 25
    //DEBUG: e.First: 23
    //DEBUG: e.Second: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-Nat*2/4 AsIs: (/7 } Tile{ AsIs: e.First/23 } )/27 Tile{ AsIs: e.Second/25 } (/28 Tile{ AsIs: )/8 HalfReuse: (/14 } Tile{ AsIs: '-'/9 } )/29 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[27]);
    refalrts::alloc_open_bracket(vm, context[28]);
    refalrts::alloc_close_bracket(vm, context[29]);
    refalrts::update_name(context[4], functions[efunc_gen_Divmodm_Nat_D2]);
    refalrts::reinit_open_bracket(context[14]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[14], context[29] );
    refalrts::link_brackets( context[28], context[8] );
    refalrts::link_brackets( context[7], context[27] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[8], context[14] );
    res = refalrts::splice_elem( res, context[28] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_elem( res, context[27] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Divmod-Normed/4 (/7 0/9 )/8 e.AnySecond/2 >/1
  if( ! refalrts::number_term( 0UL, context[9] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.AnySecond as range 2
  //DEBUG: e.AnySecond: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Divmod-Normed/4 {REMOVED TILE} e.AnySecond/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: 0/9 AsIs: )/8 } Tile{ HalfReuse: 0/1 ]] }
  refalrts::reinit_number(context[1], 0UL);
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Divmodm_Normed("Divmod-Normed", COOKIE1_, COOKIE2_, func_Divmodm_Normed);


static refalrts::FnResult func_gen_Divmodm_Nat_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & Divmod-Nat$1=1/4 (/7 e.QuotSign/5 )/8 (/11 e.RemSing/9 )/12 (/15 s.Quot/17 )/16 s.Rem/18 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.QuotSign as range 5
  // closed e.RemSing as range 9
  if( ! refalrts::svar_left( context[17], context[13], context[14] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[13], context[14] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[18], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.QuotSign: 5
  //DEBUG: e.RemSing: 9
  //DEBUG: s.Quot: 17
  //DEBUG: s.Rem: 18

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Divmod-Nat$1=1/4 {REMOVED TILE} (/15 s.Quot/17 )/16 s.Rem/18 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.QuotSign/5 HalfReuse: s.Quot17 /8 HalfReuse: )/11 AsIs: e.RemSing/9 HalfReuse: s.Rem18 /12 } Tile{ ]] }
  refalrts::reinit_svar( context[8], context[17] );
  refalrts::reinit_close_bracket(context[11]);
  refalrts::reinit_svar( context[12], context[18] );
  refalrts::link_brackets( context[7], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[12] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Divmodm_Nat_S1A1("Divmod-Nat$1=1", COOKIE1_, COOKIE2_, func_gen_Divmodm_Nat_S1A1);


static refalrts::FnResult func_gen_Divmodm_Nat_S2A5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & Divmod-Nat$2=5/4 (/7 e.QuotSign/5 )/8 (/11 e.Quot/9 )/12 (/15 e.RemSing/13 )/16 e.Rem$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.QuotSign as range 5
  // closed e.Quot as range 9
  // closed e.RemSing as range 13
  // closed e.Rem$a as range 2
  //DEBUG: e.QuotSign: 5
  //DEBUG: e.Quot: 9
  //DEBUG: e.RemSing: 13
  //DEBUG: e.Rem$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} & Divmod-Nat$2=5/4 (/7 {REMOVED TILE} )/8 (/11 {REMOVED TILE} )/12 (/15 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.QuotSign/5 } Tile{ AsIs: e.Quot/9 } Tile{ AsIs: )/16 } Tile{ AsIs: e.RemSing/13 } Tile{ AsIs: e.Rem$a/2 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::link_brackets( context[0], context[16] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, context[0], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Divmodm_Nat_S2A5("Divmod-Nat$2=5", COOKIE1_, COOKIE2_, func_gen_Divmodm_Nat_S2A5);


static refalrts::FnResult func_gen_Divmodm_Nat_S2A5B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & Divmod-Nat$2=5:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Divmod-Nat$2=5:1/4 e.new1/2 0/5 >/1
  context[5] = refalrts::number_right( 0UL, context[2], context[3] );
  if( ! context[5] )
    return refalrts::cRecognitionImpossible;
  // closed e.new1 as range 2
  do {
    // </0 & Divmod-Nat$2=5:1/4 0/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Divmod-Nat$2=5:1/4 0/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 0/1 ]] }
    refalrts::reinit_number(context[1], 0UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Divmod-Nat$2=5:1/4 e.Rem$a/2 0/5 >/1
  // closed e.Rem$a as range 2
  //DEBUG: e.Rem$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Divmod-Nat$2=5:1/4 {REMOVED TILE} 0/5 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Rem$a/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Divmodm_Nat_S2A5B1("Divmod-Nat$2=5:1", COOKIE1_, COOKIE2_, func_gen_Divmodm_Nat_S2A5B1);


static refalrts::FnResult func_gen_Divmodm_Nat_S2A4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 25 elems
  refalrts::Iter context[25];
  refalrts::zeros( context, 25 );
  // </0 & Divmod-Nat$2=4/4 (/7 e.QuotSign/5 )/8 (/11 e.RemSing/9 )/12 s.RestoreShift/13 (/16 e.Quot/14 )/17 e.Rem/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.QuotSign as range 5
  // closed e.RemSing as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.Quot as range 14
  // closed e.Rem as range 2
  //DEBUG: e.QuotSign: 5
  //DEBUG: e.RemSing: 9
  //DEBUG: s.RestoreShift: 13
  //DEBUG: e.Quot: 14
  //DEBUG: e.Rem: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.RestoreShift/13 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-Nat$2=5/4 AsIs: (/7 AsIs: e.QuotSign/5 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Quot/14 } Tile{ AsIs: )/12 } Tile{ AsIs: (/16 } Tile{ AsIs: e.RemSing/9 } )/18 </19 & Divmod-Nat$2=5:1/20 </21 & Divmod-Shl/22 Tile{ HalfReuse: s.RestoreShift13 /17 AsIs: e.Rem/2 AsIs: >/1 } >/23 >/24 Tile{ ]] }
  refalrts::alloc_close_bracket(vm, context[18]);
  refalrts::alloc_open_call(vm, context[19]);
  refalrts::alloc_name(vm, context[20], functions[efunc_gen_Divmodm_Nat_S2A5B1]);
  refalrts::alloc_open_call(vm, context[21]);
  refalrts::alloc_name(vm, context[22], functions[efunc_Divmodm_Shl]);
  refalrts::alloc_close_call(vm, context[23]);
  refalrts::alloc_close_call(vm, context[24]);
  refalrts::update_name(context[4], functions[efunc_gen_Divmodm_Nat_S2A5]);
  refalrts::reinit_svar( context[17], context[13] );
  refalrts::push_stack( vm, context[24] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[23] );
  refalrts::push_stack( vm, context[19] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[21] );
  refalrts::link_brackets( context[16], context[18] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[17], context[1] );
  res = refalrts::splice_evar( res, context[18], context[22] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  refalrts::splice_to_freelist_open( vm, context[11], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Divmodm_Nat_S2A4("Divmod-Nat$2=4", COOKIE1_, COOKIE2_, func_gen_Divmodm_Nat_S2A4);


static refalrts::FnResult func_gen_Divmodm_Nat_S2A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 36 elems
  refalrts::Iter context[36];
  refalrts::zeros( context, 36 );
  // </0 & Divmod-Nat$2=3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Divmod-Nat$2=3/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 s.new3/13 (/16 e.new4/14 )/17 e.new5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new4 as range 14
  // closed e.new5 as range 2
  do {
    // </0 & Divmod-Nat$2=3/4 (/7 e.QuotSign/18 )/8 (/11 e.RemSing/20 )/12 s.RestoreShift/13 (/16 s.N/26 e.0/22 )/17 s.D/27 e./24 >/1
    context[18] = context[5];
    context[19] = context[6];
    context[20] = context[9];
    context[21] = context[10];
    context[22] = context[14];
    context[23] = context[15];
    context[24] = context[2];
    context[25] = context[3];
    // closed e.QuotSign as range 18
    // closed e.RemSing as range 20
    if( ! refalrts::svar_left( context[26], context[22], context[23] ) )
      continue;
    // closed e.0 as range 22
    if( ! refalrts::svar_left( context[27], context[24], context[25] ) )
      continue;
    // closed e. as range 24
    //DEBUG: s.RestoreShift: 13
    //DEBUG: e.QuotSign: 18
    //DEBUG: e.RemSing: 20
    //DEBUG: s.N: 26
    //DEBUG: e.0: 22
    //DEBUG: s.D: 27
    //DEBUG: e.: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-Nat$2=4/4 AsIs: (/7 AsIs: e.QuotSign/18 AsIs: )/8 AsIs: (/11 AsIs: e.RemSing/20 AsIs: )/12 AsIs: s.RestoreShift/13 HalfReuse: </16 } & Divmod-Align/28 (/29 0/30 Tile{ AsIs: s.N/26 } )/31 (/32 Tile{ AsIs: e.0/22 } )/33 Tile{ HalfReuse: (/17 AsIs: s.D/27 } )/34 Tile{ AsIs: e./24 } >/35 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[28], functions[efunc_Divmodm_Align]);
    refalrts::alloc_open_bracket(vm, context[29]);
    refalrts::alloc_number(vm, context[30], 0UL);
    refalrts::alloc_close_bracket(vm, context[31]);
    refalrts::alloc_open_bracket(vm, context[32]);
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::alloc_close_bracket(vm, context[34]);
    refalrts::alloc_close_call(vm, context[35]);
    refalrts::update_name(context[4], functions[efunc_gen_Divmodm_Nat_S2A4]);
    refalrts::reinit_open_call(context[16]);
    refalrts::reinit_open_bracket(context[17]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[16] );
    refalrts::link_brackets( context[17], context[34] );
    refalrts::link_brackets( context[32], context[33] );
    refalrts::link_brackets( context[29], context[31] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[35] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_elem( res, context[34] );
    res = refalrts::splice_evar( res, context[17], context[27] );
    res = refalrts::splice_elem( res, context[33] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_elem( res, context[26] );
    res = refalrts::splice_evar( res, context[28], context[30] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Divmod-Nat$2=3/4 (/7 e.QuotSign/18 )/8 (/11 e.RemSing/20 )/12 s.RestoreShift/13 (/16 e.Numerator$a/22 )/17 >/1
    context[18] = context[5];
    context[19] = context[6];
    context[20] = context[9];
    context[21] = context[10];
    context[22] = context[14];
    context[23] = context[15];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.QuotSign as range 18
    // closed e.RemSing as range 20
    // closed e.Numerator$a as range 22
    //DEBUG: s.RestoreShift: 13
    //DEBUG: e.QuotSign: 18
    //DEBUG: e.RemSing: 20
    //DEBUG: e.Numerator$a: 22

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-Nat$2=4/4 AsIs: (/7 AsIs: e.QuotSign/18 AsIs: )/8 AsIs: (/11 AsIs: e.RemSing/20 AsIs: )/12 AsIs: s.RestoreShift/13 HalfReuse: </16 } & Divmod-Align$2=1/24 </25 & Divmod-CalcDigits@2/26 (/27 0/28 )/29 Tile{ AsIs: e.Numerator$a/22 } >/30 Tile{ HalfReuse: >/17 AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_Divmodm_Align_S2A1]);
    refalrts::alloc_open_call(vm, context[25]);
    refalrts::alloc_name(vm, context[26], functions[efunc_gen_Divmodm_CalcDigits_Z2]);
    refalrts::alloc_open_bracket(vm, context[27]);
    refalrts::alloc_number(vm, context[28], 0UL);
    refalrts::alloc_close_bracket(vm, context[29]);
    refalrts::alloc_close_call(vm, context[30]);
    refalrts::update_name(context[4], functions[efunc_gen_Divmodm_Nat_S2A4]);
    refalrts::reinit_open_call(context[16]);
    refalrts::reinit_close_call(context[17]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[30] );
    refalrts::push_stack( vm, context[25] );
    refalrts::link_brackets( context[27], context[29] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[17];
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[24], context[29] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Divmod-Nat$2=3/4 (/7 e.QuotSign/18 )/8 (/11 e.RemSing/20 )/12 s.RestoreShift/13 (/16 )/17 e.Denominator$a/22 >/1
    context[18] = context[5];
    context[19] = context[6];
    context[20] = context[9];
    context[21] = context[10];
    context[22] = context[2];
    context[23] = context[3];
    if( ! refalrts::empty_seq( context[14], context[15] ) )
      continue;
    // closed e.QuotSign as range 18
    // closed e.RemSing as range 20
    // closed e.Denominator$a as range 22
    //DEBUG: s.RestoreShift: 13
    //DEBUG: e.QuotSign: 18
    //DEBUG: e.RemSing: 20
    //DEBUG: e.Denominator$a: 22

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Denominator$a/22 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-Nat$2=5/4 AsIs: (/7 AsIs: e.QuotSign/18 AsIs: )/8 AsIs: (/11 } 0/24 )/25 (/26 Tile{ AsIs: e.RemSing/20 } )/27 </28 & Divmod-Nat$2=5:1/29 </30 Tile{ HalfReuse: & Divmod-Shl/12 AsIs: s.RestoreShift/13 HalfReuse: >/16 HalfReuse: >/17 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_number(vm, context[24], 0UL);
    refalrts::alloc_close_bracket(vm, context[25]);
    refalrts::alloc_open_bracket(vm, context[26]);
    refalrts::alloc_close_bracket(vm, context[27]);
    refalrts::alloc_open_call(vm, context[28]);
    refalrts::alloc_name(vm, context[29], functions[efunc_gen_Divmodm_Nat_S2A5B1]);
    refalrts::alloc_open_call(vm, context[30]);
    refalrts::update_name(context[4], functions[efunc_gen_Divmodm_Nat_S2A5]);
    refalrts::reinit_name(context[12], functions[efunc_Divmodm_Shl]);
    refalrts::reinit_close_call(context[16]);
    refalrts::reinit_close_call(context[17]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[30] );
    refalrts::link_brackets( context[26], context[27] );
    refalrts::link_brackets( context[11], context[25] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[12], context[17] );
    res = refalrts::splice_evar( res, context[27], context[30] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[24], context[26] );
    refalrts::splice_to_freelist_open( vm, context[11], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Divmod-Nat$2=3/4 (/7 e.QuotSign/5 )/8 (/11 e.RemSing/9 )/12 s.RestoreShift/13 (/16 e.Numerator$a/14 )/17 e.Denominator$a/2 >/1
  // closed e.QuotSign as range 5
  // closed e.RemSing as range 9
  // closed e.Numerator$a as range 14
  // closed e.Denominator$a as range 2
  //DEBUG: s.RestoreShift: 13
  //DEBUG: e.QuotSign: 5
  //DEBUG: e.RemSing: 9
  //DEBUG: e.Numerator$a: 14
  //DEBUG: e.Denominator$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-Nat$2=4/4 AsIs: (/7 AsIs: e.QuotSign/5 AsIs: )/8 AsIs: (/11 AsIs: e.RemSing/9 AsIs: )/12 AsIs: s.RestoreShift/13 HalfReuse: </16 } & Divmod-Align@0/18 (/19 0/20 )/21 (/22 Tile{ AsIs: e.Numerator$a/14 } )/23 (/24 Tile{ AsIs: )/17 AsIs: e.Denominator$a/2 AsIs: >/1 } >/25 Tile{ ]] }
  refalrts::alloc_name(vm, context[18], functions[efunc_gen_Divmodm_Align_Z0]);
  refalrts::alloc_open_bracket(vm, context[19]);
  refalrts::alloc_number(vm, context[20], 0UL);
  refalrts::alloc_close_bracket(vm, context[21]);
  refalrts::alloc_open_bracket(vm, context[22]);
  refalrts::alloc_close_bracket(vm, context[23]);
  refalrts::alloc_open_bracket(vm, context[24]);
  refalrts::alloc_close_call(vm, context[25]);
  refalrts::update_name(context[4], functions[efunc_gen_Divmodm_Nat_S2A4]);
  refalrts::reinit_open_call(context[16]);
  refalrts::push_stack( vm, context[25] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[16] );
  refalrts::link_brackets( context[24], context[17] );
  refalrts::link_brackets( context[22], context[23] );
  refalrts::link_brackets( context[19], context[21] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[25] );
  res = refalrts::splice_evar( res, context[17], context[1] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[18], context[22] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Divmodm_Nat_S2A3("Divmod-Nat$2=3", COOKIE1_, COOKIE2_, func_gen_Divmodm_Nat_S2A3);


static refalrts::FnResult func_gen_Divmodm_Nat_S2A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  // </0 & Divmod-Nat$2=2/4 (/7 e.QuotSign/5 )/8 (/11 e.RemSing/9 )/12 s.RestoreShift/13 s.NormShift/14 s.DenomFirst/15 (/18 e.Denominator/16 )/19 e.Numerator$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.QuotSign as range 5
  // closed e.RemSing as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[14], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[15], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[16] = 0;
  context[17] = 0;
  context[18] = refalrts::brackets_left( context[16], context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[18], context[19]);
  // closed e.Denominator as range 16
  // closed e.Numerator$a as range 2
  //DEBUG: e.QuotSign: 5
  //DEBUG: e.RemSing: 9
  //DEBUG: s.RestoreShift: 13
  //DEBUG: s.NormShift: 14
  //DEBUG: s.DenomFirst: 15
  //DEBUG: e.Denominator: 16
  //DEBUG: e.Numerator$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-Nat$2=3/4 AsIs: (/7 AsIs: e.QuotSign/5 AsIs: )/8 AsIs: (/11 AsIs: e.RemSing/9 AsIs: )/12 AsIs: s.RestoreShift/13 } Tile{ AsIs: (/18 } Tile{ AsIs: e.Numerator$a/2 } Tile{ AsIs: )/19 } </20 & Divmod-Shl/21 Tile{ AsIs: s.NormShift/14 AsIs: s.DenomFirst/15 } Tile{ AsIs: e.Denominator/16 } >/22 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[20]);
  refalrts::alloc_name(vm, context[21], functions[efunc_Divmodm_Shl]);
  refalrts::alloc_close_call(vm, context[22]);
  refalrts::update_name(context[4], functions[efunc_gen_Divmodm_Nat_S2A3]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[22] );
  refalrts::push_stack( vm, context[20] );
  refalrts::link_brackets( context[18], context[19] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[22] );
  res = refalrts::splice_evar( res, context[16], context[17] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[20], context[21] );
  res = refalrts::splice_elem( res, context[19] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[18] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Divmodm_Nat_S2A2("Divmod-Nat$2=2", COOKIE1_, COOKIE2_, func_gen_Divmodm_Nat_S2A2);


static refalrts::FnResult func_gen_Divmodm_Nat_S2A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & Divmod-Nat$2=1/4 (/7 e.QuotSign/5 )/8 (/11 e.RemSing/9 )/12 s.DenomFirst/13 (/16 e.Denominator/14 )/17 (/20 e.Numerator/18 )/21 s.NormShift/22 s.RestoreShift/23 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.QuotSign as range 5
  // closed e.RemSing as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.Denominator as range 14
  // closed e.Numerator as range 18
  if( ! refalrts::svar_left( context[22], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[23], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.QuotSign: 5
  //DEBUG: e.RemSing: 9
  //DEBUG: s.DenomFirst: 13
  //DEBUG: e.Denominator: 14
  //DEBUG: e.Numerator: 18
  //DEBUG: s.NormShift: 22
  //DEBUG: s.RestoreShift: 23

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-Nat$2=2/4 AsIs: (/7 AsIs: e.QuotSign/5 AsIs: )/8 AsIs: (/11 AsIs: e.RemSing/9 AsIs: )/12 } Tile{ AsIs: s.RestoreShift/23 } s.NormShift/22/24 Tile{ AsIs: s.DenomFirst/13 AsIs: (/16 AsIs: e.Denominator/14 AsIs: )/17 HalfReuse: </20 } Tile{ HalfReuse: & Divmod-Shl/21 AsIs: s.NormShift/22 } Tile{ AsIs: e.Numerator/18 } >/25 Tile{ AsIs: >/1 ]] }
  refalrts::copy_stvar(vm, context[24], context[22]);
  refalrts::alloc_close_call(vm, context[25]);
  refalrts::update_name(context[4], functions[efunc_gen_Divmodm_Nat_S2A2]);
  refalrts::reinit_open_call(context[20]);
  refalrts::reinit_name(context[21], functions[efunc_Divmodm_Shl]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[25] );
  refalrts::push_stack( vm, context[20] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[25] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[13], context[20] );
  res = refalrts::splice_elem( res, context[24] );
  res = refalrts::splice_elem( res, context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Divmodm_Nat_S2A1("Divmod-Nat$2=1", COOKIE1_, COOKIE2_, func_gen_Divmodm_Nat_S2A1);


static refalrts::FnResult func_gen_Divmodm_Nat_S2A1B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 514 "Library.ref"
        refalrts::Iter pfunc = arg_begin->next;
        assert(refalrts::cDataFunction == pfunc->tag);

        refalrts::Iter pvalue = pfunc->next;
        assert(refalrts::cDataNumber == pvalue->tag);

        refalrts::RefalNumber value = pvalue->number_info;
        assert(value != 0);

        int shift = 0;
        while ((value & (1 << 31)) == 0) {
          ++shift;
          value <<= 1;
        }

        refalrts::reinit_number(arg_begin, shift);
        refalrts::reinit_number(pfunc, 32 - shift);
        refalrts::splice_to_freelist(vm, pvalue, arg_end);
        return refalrts::cSuccess;
#line 4980 "Library.cpp"
}

static refalrts::NativeReference nat_ref_gen_Divmodm_Nat_S2A1B1("Divmod-Nat$2=1:1", COOKIE1_, COOKIE2_, func_gen_Divmodm_Nat_S2A1B1);


static refalrts::FnResult func_Divmodm_Nat(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & Divmod-Nat/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Divmod-Nat/4 (/7 e.new1/5 )/8 s.new2/17 e.new3/2 (/15 e.new4/13 )/16 (/11 e.new5/9 )/12 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_right( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_right( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new1 as range 5
  // closed e.new4 as range 13
  // closed e.new5 as range 9
  if( ! refalrts::svar_left( context[17], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & Divmod-Nat/4 (/7 s.Numerator/24 )/8 s.Denominator/17 (/15 e.QuotSign/20 )/16 (/11 e.RemSing/22 )/12 >/1
    context[18] = context[5];
    context[19] = context[6];
    context[20] = context[13];
    context[21] = context[14];
    context[22] = context[9];
    context[23] = context[10];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.QuotSign as range 20
    // closed e.RemSing as range 22
    if( ! refalrts::svar_left( context[24], context[18], context[19] ) )
      continue;
    if( ! refalrts::empty_seq( context[18], context[19] ) )
      continue;
    //DEBUG: s.Denominator: 17
    //DEBUG: e.QuotSign: 20
    //DEBUG: e.RemSing: 22
    //DEBUG: s.Numerator: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} s.Denominator/17 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-Nat$1=1/4 } Tile{ AsIs: (/15 AsIs: e.QuotSign/20 AsIs: )/16 AsIs: (/11 AsIs: e.RemSing/22 AsIs: )/12 HalfReuse: </1 } Tile{ HalfReuse: & Divmod-Digits/7 AsIs: s.Numerator/24 HalfReuse: s.Denominator17 /8 } >/25 >/26 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::update_name(context[4], functions[efunc_gen_Divmodm_Nat_S1A1]);
    refalrts::reinit_open_call(context[1]);
    refalrts::reinit_name(context[7], functions[efunc_Divmodm_Digits]);
    refalrts::reinit_svar( context[8], context[17] );
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[1] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[15], context[1] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Divmod-Nat/4 (/7 e.Numerator/5 )/8 s.DenomFirst/17 e.Denominator/2 (/15 e.QuotSign/13 )/16 (/11 e.RemSing/9 )/12 >/1
  // closed e.Numerator as range 5
  // closed e.Denominator as range 2
  // closed e.QuotSign as range 13
  // closed e.RemSing as range 9
  //DEBUG: s.DenomFirst: 17
  //DEBUG: e.Numerator: 5
  //DEBUG: e.Denominator: 2
  //DEBUG: e.QuotSign: 13
  //DEBUG: e.RemSing: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 } & Divmod-Nat$2=1/18 Tile{ AsIs: (/15 AsIs: e.QuotSign/13 AsIs: )/16 AsIs: (/11 AsIs: e.RemSing/9 AsIs: )/12 HalfReuse: s.DenomFirst17 /1 } (/19 Tile{ AsIs: e.Denominator/2 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.Numerator/5 AsIs: )/8 } </20 & Divmod-Nat$2=1:1/21 Tile{ AsIs: s.DenomFirst/17 } >/22 >/23 Tile{ ]] }
  refalrts::alloc_name(vm, context[18], functions[efunc_gen_Divmodm_Nat_S2A1]);
  refalrts::alloc_open_bracket(vm, context[19]);
  refalrts::alloc_open_call(vm, context[20]);
  refalrts::alloc_name(vm, context[21], functions[efunc_gen_Divmodm_Nat_S2A1B1]);
  refalrts::alloc_close_call(vm, context[22]);
  refalrts::alloc_close_call(vm, context[23]);
  refalrts::reinit_svar( context[1], context[17] );
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[23] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[22] );
  refalrts::push_stack( vm, context[20] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[19], context[4] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[22], context[23] );
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[20], context[21] );
  res = refalrts::splice_evar( res, context[4], context[8] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[19] );
  res = refalrts::splice_evar( res, context[15], context[1] );
  res = refalrts::splice_elem( res, context[18] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Divmodm_Nat("Divmod-Nat", COOKIE1_, COOKIE2_, func_Divmodm_Nat);


static refalrts::FnResult func_Divmodm_Shl(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 550 "Library.ref"
  refalrts::Iter digits_b = 0, digits_e = 0;
  refalrts::call_left(digits_b, digits_e, arg_begin, arg_end);

  refalrts::Iter pshift;
  if (
    ! refalrts::svar_left(pshift, digits_b, digits_e)
    && refalrts::cDataNumber != pshift->tag
    && refalrts::empty_seq(digits_b, digits_e)
  ) {
    return refalrts::cRecognitionImpossible;
  }

  refalrts::RefalNumber shift = pshift->number_info;
  if (shift > 32) {
    return refalrts::cRecognitionImpossible;
  }

  if (0 == shift) {
    refalrts::splice_to_freelist(vm, arg_begin, pshift);
    refalrts::splice_to_freelist(vm, arg_end, arg_end);
    return refalrts::cSuccess;
  }

  refalrts::Iter garbage_end = pshift;
  refalrts::reinit_number(arg_end, 0);
  if (shift < 32) {
    refalrts::Iter current = digits_e;
    while (current != pshift) {
      current->next->number_info |= current->number_info << shift;
      current->number_info >>= 32 - shift;
      current = current->prev;
    }

    if (0 == digits_b->number_info) {
      garbage_end = digits_b;
    }
  }

  refalrts::splice_to_freelist(vm, arg_begin, garbage_end);
  return refalrts::cSuccess;
#line 5168 "Library.cpp"
}

static refalrts::NativeReference nat_ref_Divmodm_Shl("Divmod-Shl", COOKIE1_, COOKIE2_, func_Divmodm_Shl);


static refalrts::FnResult func_Divmodm_Natm_Normed(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & Divmod-Nat-Normed/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Divmod-Nat-Normed/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Divmod-Nat-Normed/4 (/7 s.N/13 e.0/9 )/8 s.D/14 e./11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    if( ! refalrts::svar_left( context[13], context[9], context[10] ) )
      continue;
    // closed e.0 as range 9
    if( ! refalrts::svar_left( context[14], context[11], context[12] ) )
      continue;
    // closed e. as range 11
    //DEBUG: s.N: 13
    //DEBUG: e.0: 9
    //DEBUG: s.D: 14
    //DEBUG: e.: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-Align/4 AsIs: (/7 } 0/15 Tile{ AsIs: s.N/13 } )/16 (/17 Tile{ AsIs: e.0/9 } )/18 Tile{ HalfReuse: (/8 AsIs: s.D/14 } )/19 Tile{ AsIs: e./11 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_number(vm, context[15], 0UL);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_close_bracket(vm, context[18]);
    refalrts::alloc_close_bracket(vm, context[19]);
    refalrts::update_name(context[4], functions[efunc_Divmodm_Align]);
    refalrts::reinit_open_bracket(context[8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[8], context[19] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[7], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[8], context[14] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_elem( res, context[15] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Divmod-Nat-Normed/4 (/7 e.Numerator/9 )/8 >/1
    context[9] = context[5];
    context[10] = context[6];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Numerator as range 9
    //DEBUG: e.Numerator: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </11 & Divmod-Align$2=1/12 </13 & Divmod-CalcDigits@2/14 Tile{ HalfReuse: (/0 HalfReuse: 0/4 HalfReuse: )/7 AsIs: e.Numerator/9 HalfReuse: >/8 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[11]);
    refalrts::alloc_name(vm, context[12], functions[efunc_gen_Divmodm_Align_S2A1]);
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_gen_Divmodm_CalcDigits_Z2]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_number(context[4], 0UL);
    refalrts::reinit_close_bracket(context[7]);
    refalrts::reinit_close_call(context[8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[13] );
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[0];
    res = refalrts::splice_evar( res, context[11], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Divmod-Nat-Normed/4 (/7 )/8 e.Denominator/9 >/1
    context[9] = context[2];
    context[10] = context[3];
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    // closed e.Denominator as range 9
    //DEBUG: e.Denominator: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} )/8 e.Denominator/9 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 0/4 HalfReuse: )/7 } Tile{ ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_number(context[4], 0UL);
    refalrts::reinit_close_bracket(context[7]);
    refalrts::link_brackets( context[0], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Divmod-Nat-Normed/4 (/7 e.Numerator/5 )/8 e.Denominator/2 >/1
  // closed e.Numerator as range 5
  // closed e.Denominator as range 2
  //DEBUG: e.Numerator: 5
  //DEBUG: e.Denominator: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-Align@0/4 AsIs: (/7 } 0/9 )/10 (/11 Tile{ AsIs: e.Numerator/5 } )/12 (/13 Tile{ AsIs: )/8 AsIs: e.Denominator/2 AsIs: >/1 ]] }
  refalrts::alloc_number(vm, context[9], 0UL);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_close_bracket(vm, context[12]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_gen_Divmodm_Align_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[8] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[12], context[13] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[9], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Divmodm_Natm_Normed("Divmod-Nat-Normed", COOKIE1_, COOKIE2_, func_Divmodm_Natm_Normed);


static refalrts::FnResult func_gen_Divmodm_Align_S2A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Divmod-Align$2=1/4 e.Quot/2 (/7 e.Rest/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Quot as range 2
  // closed e.Rest as range 5
  //DEBUG: e.Quot: 2
  //DEBUG: e.Rest: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: (/1 } Tile{ AsIs: </0 Reuse: & LeadingZeros/4 AsIs: e.Quot/2 HalfReuse: >/7 } Tile{ AsIs: )/8 } Tile{ AsIs: e.Rest/5 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[1]);
  refalrts::update_name(context[4], functions[efunc_LeadingZeros]);
  refalrts::reinit_close_call(context[7]);
  refalrts::link_brackets( context[1], context[8] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_elem( res, context[1] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Divmodm_Align_S2A1("Divmod-Align$2=1", COOKIE1_, COOKIE2_, func_gen_Divmodm_Align_S2A1);


static refalrts::FnResult func_Divmodm_Align(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 29 elems
  refalrts::Iter context[29];
  refalrts::zeros( context, 29 );
  // </0 & Divmod-Align/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Divmod-Align/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 2
  do {
    // </0 & Divmod-Align/4 (/7 e.Numerator/17 )/8 (/11 s.N/25 e.NumerRest/19 )/12 (/15 e.Denominator/21 )/16 s.D/26 e.DenominRest/23 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.Numerator as range 17
    // closed e.Denominator as range 21
    if( ! refalrts::svar_left( context[25], context[19], context[20] ) )
      continue;
    // closed e.NumerRest as range 19
    if( ! refalrts::svar_left( context[26], context[23], context[24] ) )
      continue;
    // closed e.DenominRest as range 23
    //DEBUG: e.Numerator: 17
    //DEBUG: e.Denominator: 21
    //DEBUG: s.N: 25
    //DEBUG: e.NumerRest: 19
    //DEBUG: s.D: 26
    //DEBUG: e.DenominRest: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.N/25 {REMOVED TILE} {REMOVED TILE} s.D/26 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Divmod-Align/4 AsIs: (/7 AsIs: e.Numerator/17 HalfReuse: s.N25 /8 HalfReuse: )/11 } (/27 Tile{ AsIs: e.NumerRest/19 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.Denominator/21 HalfReuse: s.D26 /16 } )/28 Tile{ AsIs: e.DenominRest/23 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[27]);
    refalrts::alloc_close_bracket(vm, context[28]);
    refalrts::reinit_svar( context[8], context[25] );
    refalrts::reinit_close_bracket(context[11]);
    refalrts::reinit_svar( context[16], context[26] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[15], context[28] );
    refalrts::link_brackets( context[27], context[12] );
    refalrts::link_brackets( context[7], context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_elem( res, context[28] );
    res = refalrts::splice_evar( res, context[12], context[16] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[27] );
    refalrts::splice_to_freelist_open( vm, context[11], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Divmod-Align/4 (/7 e.Numerator/17 )/8 (/11 e.NumerRest/19 )/12 (/15 e.Denominator/21 )/16 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Numerator as range 17
    // closed e.NumerRest as range 19
    // closed e.Denominator as range 21
    //DEBUG: e.Numerator: 17
    //DEBUG: e.NumerRest: 19
    //DEBUG: e.Denominator: 21

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </15 } & Divmod-Align$2=1/23 Tile{ AsIs: </0 Reuse: & Divmod-CalcDigits/4 AsIs: (/7 AsIs: e.Numerator/17 AsIs: )/8 AsIs: (/11 AsIs: e.NumerRest/19 AsIs: )/12 } Tile{ AsIs: e.Denominator/21 } Tile{ HalfReuse: >/16 AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[23], functions[efunc_gen_Divmodm_Align_S2A1]);
    refalrts::reinit_open_call(context[15]);
    refalrts::update_name(context[4], functions[efunc_Divmodm_CalcDigits]);
    refalrts::reinit_close_call(context[16]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[16];
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[0], context[12] );
    res = refalrts::splice_elem( res, context[23] );
    res = refalrts::splice_elem( res, context[15] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Divmod-Align/4 (/7 0/17 e.Numerator/5 )/8 (/11 )/12 (/15 e.Denominator/13 )/16 e.DenominRest/2 >/1
  context[17] = refalrts::number_left( 0UL, context[5], context[6] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[9], context[10] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Numerator as range 5
  // closed e.Denominator as range 13
  // closed e.DenominRest as range 2
  //DEBUG: e.Numerator: 5
  //DEBUG: e.Denominator: 13
  //DEBUG: e.DenominRest: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Divmod-Align/4 {REMOVED TILE} {REMOVED TILE} )/8 (/11 )/12 (/15 e.Denominator/13 {REMOVED TILE} e.DenominRest/2 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: 0/17 } Tile{ AsIs: )/16 } Tile{ AsIs: e.Numerator/5 } Tile{ ]] }
  refalrts::link_brackets( context[7], context[16] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[7], context[17] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Divmodm_Align("Divmod-Align", COOKIE1_, COOKIE2_, func_Divmodm_Align);


static refalrts::FnResult func_gen_Divmodm_CalcDigits_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 53 elems
  refalrts::Iter context[53];
  refalrts::zeros( context, 53 );
  // </0 & Divmod-CalcDigits=1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Divmod-CalcDigits=1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 s.new3/13 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new4 as range 2
  do {
    // </0 & Divmod-CalcDigits=1/4 (/7 e.new7/14 )/8 (/11 s.new8/20 e.new9/16 )/12 s.new5/13 e.new6/18 >/1
    context[14] = context[5];
    context[15] = context[6];
    context[16] = context[9];
    context[17] = context[10];
    context[18] = context[2];
    context[19] = context[3];
    // closed e.new7 as range 14
    // closed e.new6 as range 18
    if( ! refalrts::svar_left( context[20], context[16], context[17] ) )
      continue;
    // closed e.new9 as range 16
    do {
      // </0 & Divmod-CalcDigits=1/4 (/7 s.new13/27 e.new14/21 )/8 (/11 s.new15/20 e.new16/23 )/12 s.new10/13 s.new11/28 e.new12/25 >/1
      context[21] = context[14];
      context[22] = context[15];
      context[23] = context[16];
      context[24] = context[17];
      context[25] = context[18];
      context[26] = context[19];
      // closed e.new16 as range 23
      if( ! refalrts::svar_left( context[27], context[21], context[22] ) )
        continue;
      // closed e.new14 as range 21
      if( ! refalrts::svar_left( context[28], context[25], context[26] ) )
        continue;
      // closed e.new12 as range 25
      do {
        // </0 & Divmod-CalcDigits=1/4 (/7 s.new19/27 e.new20/29 )/8 (/11 s.new21/20 e.new22/31 )/12 s.new17/13 s.new18/28 >/1
        context[29] = context[21];
        context[30] = context[22];
        context[31] = context[23];
        context[32] = context[24];
        if( ! refalrts::empty_seq( context[25], context[26] ) )
          continue;
        // closed e.new20 as range 29
        // closed e.new22 as range 31
        do {
          // </0 & Divmod-CalcDigits=1/4 (/7 s.D/27 )/8 (/11 s.NextDigit/20 e./33 )/12 s.QuotDigit/13 s.N1/28 >/1
          context[33] = context[31];
          context[34] = context[32];
          if( ! refalrts::empty_seq( context[29], context[30] ) )
            continue;
          // closed e. as range 33
          //DEBUG: s.D: 27
          //DEBUG: s.NextDigit: 20
          //DEBUG: s.QuotDigit: 13
          //DEBUG: s.N1: 28
          //DEBUG: e.: 33

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.QuotDigit/13 s.N1/28 {REMOVED TILE}
          //RESULT: Tile{ [[ HalfReuse: s.QuotDigit13 /0 HalfReuse: </4 HalfReuse: & Divmod-CalcDigits=1@1/7 AsIs: s.D/27 HalfReuse: (/8 } Tile{ AsIs: e./33 } Tile{ AsIs: )/12 } </35 & Divmod-GuessDigit/36 Tile{ HalfReuse: s.N128 /11 AsIs: s.NextDigit/20 } s.D/27/37 >/38 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[35]);
          refalrts::alloc_name(vm, context[36], functions[efunc_Divmodm_GuessDigit]);
          refalrts::copy_stvar(vm, context[37], context[27]);
          refalrts::alloc_close_call(vm, context[38]);
          refalrts::reinit_svar( context[0], context[13] );
          refalrts::reinit_open_call(context[4]);
          refalrts::reinit_name(context[7], functions[efunc_gen_Divmodm_CalcDigits_A1Z1]);
          refalrts::reinit_open_bracket(context[8]);
          refalrts::reinit_svar( context[11], context[28] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[4] );
          refalrts::push_stack( vm, context[38] );
          refalrts::push_stack( vm, context[35] );
          refalrts::link_brackets( context[8], context[12] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[37], context[38] );
          res = refalrts::splice_evar( res, context[11], context[20] );
          res = refalrts::splice_evar( res, context[35], context[36] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[33], context[34] );
          refalrts::splice_to_freelist_open( vm, context[8], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Divmod-CalcDigits=1/4 (/7 s.D/27 e.0/33 )/8 (/11 s.NextDigit/20 e./35 )/12 s.QuotDigit/13 s.N1/28 >/1
        context[33] = context[29];
        context[34] = context[30];
        context[35] = context[31];
        context[36] = context[32];
        // closed e.0 as range 33
        // closed e. as range 35
        //DEBUG: s.D: 27
        //DEBUG: s.NextDigit: 20
        //DEBUG: s.QuotDigit: 13
        //DEBUG: s.N1: 28
        //DEBUG: e.0: 33
        //DEBUG: e.: 35

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.QuotDigit/13 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: s.QuotDigit13 /0 HalfReuse: </4 HalfReuse: & Divmod-CalcDigits=1@2/7 AsIs: s.D/27 } (/37 Tile{ AsIs: e.0/33 } Tile{ AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e./35 } Tile{ AsIs: )/12 } </38 & Divmod-GetNextDigit$2=1@1/39 s.N1/28/40 Tile{ AsIs: s.NextDigit/20 } s.D/27/41 (/42 e.0/33/43 )/45 </46 & Divmod-GuessDigit/47 Tile{ AsIs: s.N1/28 } s.NextDigit/20/48 s.D/27/49 >/50 >/51 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[37]);
        refalrts::alloc_open_call(vm, context[38]);
        refalrts::alloc_name(vm, context[39], functions[efunc_gen_Divmodm_GetNextDigit_S2A1Z1]);
        refalrts::copy_stvar(vm, context[40], context[28]);
        refalrts::copy_stvar(vm, context[41], context[27]);
        refalrts::alloc_open_bracket(vm, context[42]);
        refalrts::copy_evar(vm, context[43], context[44], context[33], context[34]);
        refalrts::alloc_close_bracket(vm, context[45]);
        refalrts::alloc_open_call(vm, context[46]);
        refalrts::alloc_name(vm, context[47], functions[efunc_Divmodm_GuessDigit]);
        refalrts::copy_stvar(vm, context[48], context[20]);
        refalrts::copy_stvar(vm, context[49], context[27]);
        refalrts::alloc_close_call(vm, context[50]);
        refalrts::alloc_close_call(vm, context[51]);
        refalrts::reinit_svar( context[0], context[13] );
        refalrts::reinit_open_call(context[4]);
        refalrts::reinit_name(context[7], functions[efunc_gen_Divmodm_CalcDigits_A1Z2]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[4] );
        refalrts::push_stack( vm, context[51] );
        refalrts::push_stack( vm, context[38] );
        refalrts::push_stack( vm, context[50] );
        refalrts::push_stack( vm, context[46] );
        refalrts::link_brackets( context[42], context[45] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[37], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[48], context[51] );
        res = refalrts::splice_elem( res, context[28] );
        res = refalrts::splice_evar( res, context[41], context[47] );
        res = refalrts::splice_elem( res, context[20] );
        res = refalrts::splice_evar( res, context[38], context[40] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_evar( res, context[8], context[11] );
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_elem( res, context[37] );
        refalrts::splice_to_freelist_open( vm, context[27], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Divmod-CalcDigits=1/4 (/7 s.D/27 e.0/29 )/8 (/11 s.NextDigit/20 e./31 )/12 s.QuotDigit/13 s.N1/28 s.N2/35 e.2/33 >/1
      context[29] = context[21];
      context[30] = context[22];
      context[31] = context[23];
      context[32] = context[24];
      context[33] = context[25];
      context[34] = context[26];
      // closed e.0 as range 29
      // closed e. as range 31
      if( ! refalrts::svar_left( context[35], context[33], context[34] ) )
        continue;
      // closed e.2 as range 33
      //DEBUG: s.D: 27
      //DEBUG: s.NextDigit: 20
      //DEBUG: s.QuotDigit: 13
      //DEBUG: s.N1: 28
      //DEBUG: e.0: 29
      //DEBUG: e.: 31
      //DEBUG: s.N2: 35
      //DEBUG: e.2: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.QuotDigit/13 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: s.QuotDigit13 /0 HalfReuse: </4 HalfReuse: & Divmod-CalcDigits=1@2/7 AsIs: s.D/27 } (/36 Tile{ AsIs: e.0/29 } Tile{ AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e./31 } )/37 </38 & Divmod-GetNextDigit$2=1@2/39 Tile{ AsIs: s.N1/28 AsIs: s.N2/35 } (/40 Tile{ AsIs: e.2/33 } Tile{ AsIs: )/12 } Tile{ AsIs: s.NextDigit/20 } s.D/27/41 (/42 e.0/29/43 )/45 </46 & Divmod-GuessDigit/47 s.N1/28/48 s.N2/35/49 s.D/27/50 >/51 >/52 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::alloc_close_bracket(vm, context[37]);
      refalrts::alloc_open_call(vm, context[38]);
      refalrts::alloc_name(vm, context[39], functions[efunc_gen_Divmodm_GetNextDigit_S2A1Z2]);
      refalrts::alloc_open_bracket(vm, context[40]);
      refalrts::copy_stvar(vm, context[41], context[27]);
      refalrts::alloc_open_bracket(vm, context[42]);
      refalrts::copy_evar(vm, context[43], context[44], context[29], context[30]);
      refalrts::alloc_close_bracket(vm, context[45]);
      refalrts::alloc_open_call(vm, context[46]);
      refalrts::alloc_name(vm, context[47], functions[efunc_Divmodm_GuessDigit]);
      refalrts::copy_stvar(vm, context[48], context[28]);
      refalrts::copy_stvar(vm, context[49], context[35]);
      refalrts::copy_stvar(vm, context[50], context[27]);
      refalrts::alloc_close_call(vm, context[51]);
      refalrts::alloc_close_call(vm, context[52]);
      refalrts::reinit_svar( context[0], context[13] );
      refalrts::reinit_open_call(context[4]);
      refalrts::reinit_name(context[7], functions[efunc_gen_Divmodm_CalcDigits_A1Z2]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[4] );
      refalrts::push_stack( vm, context[52] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[51] );
      refalrts::push_stack( vm, context[46] );
      refalrts::link_brackets( context[42], context[45] );
      refalrts::link_brackets( context[40], context[12] );
      refalrts::link_brackets( context[11], context[37] );
      refalrts::link_brackets( context[36], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[41], context[52] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_elem( res, context[40] );
      res = refalrts::splice_evar( res, context[28], context[35] );
      res = refalrts::splice_evar( res, context[37], context[39] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[8], context[11] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_elem( res, context[36] );
      refalrts::splice_to_freelist_open( vm, context[27], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Divmod-CalcDigits=1/4 (/7 e.Denominator/21 )/8 (/11 s.NextDigit/20 e./23 )/12 s.QuotDigit/13 e.Rem/25 >/1
    context[21] = context[14];
    context[22] = context[15];
    context[23] = context[16];
    context[24] = context[17];
    context[25] = context[18];
    context[26] = context[19];
    // closed e.Denominator as range 21
    // closed e. as range 23
    // closed e.Rem as range 25
    //DEBUG: s.NextDigit: 20
    //DEBUG: s.QuotDigit: 13
    //DEBUG: e.Denominator: 21
    //DEBUG: e.: 23
    //DEBUG: e.Rem: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: s.QuotDigit/13 } Tile{ AsIs: </0 AsIs: & Divmod-CalcDigits=1/4 AsIs: (/7 AsIs: e.Denominator/21 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e./23 } Tile{ AsIs: )/12 } </27 & Divmod-GetNextDigit*2/28 (/29 Tile{ AsIs: e.Rem/25 } Tile{ AsIs: s.NextDigit/20 } )/30 e.Denominator/21/31 >/33 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[27]);
    refalrts::alloc_name(vm, context[28], functions[efunc_gen_Divmodm_GetNextDigit_D2]);
    refalrts::alloc_open_bracket(vm, context[29]);
    refalrts::alloc_close_bracket(vm, context[30]);
    refalrts::copy_evar(vm, context[31], context[32], context[21], context[22]);
    refalrts::alloc_close_call(vm, context[33]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[27] );
    refalrts::link_brackets( context[29], context[30] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[30], context[33] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[27], context[29] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[0], context[11] );
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Divmod-CalcDigits=1/4 (/7 e.Denominator/14 )/8 (/11 )/12 s.QuotDigit/13 e.Rem/16 >/1
    context[14] = context[5];
    context[15] = context[6];
    context[16] = context[2];
    context[17] = context[3];
    if( ! refalrts::empty_seq( context[9], context[10] ) )
      continue;
    // closed e.Denominator as range 14
    // closed e.Rem as range 16
    //DEBUG: s.QuotDigit: 13
    //DEBUG: e.Denominator: 14
    //DEBUG: e.Rem: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 e.Denominator/14 )/8 (/11 )/12 s.QuotDigit/13 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: s.QuotDigit13 /0 HalfReuse: (/4 } Tile{ AsIs: e.Rem/16 } Tile{ HalfReuse: )/1 ]] }
    refalrts::reinit_svar( context[0], context[13] );
    refalrts::reinit_open_bracket(context[4]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[4], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[16], context[17] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Divmod-CalcDigits=1/4 (/7 e.Denominator/5 )/8 (/11 e.NumerRest/9 )/12 s.QuotDigit/13 e.Rem/2 >/1
  // closed e.Denominator as range 5
  // closed e.NumerRest as range 9
  // closed e.Rem as range 2
  //DEBUG: s.QuotDigit: 13
  //DEBUG: e.Denominator: 5
  //DEBUG: e.NumerRest: 9
  //DEBUG: e.Rem: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & Divmod-CalcDigits:1*2/12 AsIs: s.QuotDigit/13 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Rem/2 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.Denominator/5 AsIs: )/8 } Tile{ AsIs: e.NumerRest/9 } Tile{ AsIs: >/1 ]] }
  refalrts::reinit_name(context[12], functions[efunc_gen_Divmodm_CalcDigits_B1D2]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[4], context[8] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[12], context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Divmodm_CalcDigits_A1("Divmod-CalcDigits=1", COOKIE1_, COOKIE2_, func_gen_Divmodm_CalcDigits_A1);


static refalrts::FnResult func_Divmodm_CalcDigits(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & Divmod-CalcDigits/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Divmod-CalcDigits/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & Divmod-CalcDigits/4 (/7 s.new6/19 s.new7/20 e.new8/13 )/8 (/11 e.new9/15 )/12 s.new4/21 e.new5/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.new9 as range 15
    if( ! refalrts::svar_left( context[19], context[13], context[14] ) )
      continue;
    if( ! refalrts::svar_left( context[20], context[13], context[14] ) )
      continue;
    // closed e.new8 as range 13
    if( ! refalrts::svar_left( context[21], context[17], context[18] ) )
      continue;
    // closed e.new5 as range 17
    do {
      // </0 & Divmod-CalcDigits/4 (/7 s.N1/19 s.N2/20 )/8 (/11 e.NumerRest/22 )/12 s.D/21 >/1
      context[22] = context[15];
      context[23] = context[16];
      if( ! refalrts::empty_seq( context[13], context[14] ) )
        continue;
      if( ! refalrts::empty_seq( context[17], context[18] ) )
        continue;
      // closed e.NumerRest as range 22
      //DEBUG: s.N1: 19
      //DEBUG: s.N2: 20
      //DEBUG: s.D: 21
      //DEBUG: e.NumerRest: 22

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </24 Tile{ HalfReuse: & Divmod-CalcDigits=1@1/12 AsIs: s.D/21 } (/25 Tile{ AsIs: e.NumerRest/22 } Tile{ HalfReuse: )/0 HalfReuse: </4 HalfReuse: & Divmod-GuessDigit/7 AsIs: s.N1/19 AsIs: s.N2/20 HalfReuse: s.D21 /8 HalfReuse: >/11 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[24]);
      refalrts::alloc_open_bracket(vm, context[25]);
      refalrts::reinit_name(context[12], functions[efunc_gen_Divmodm_CalcDigits_A1Z1]);
      refalrts::reinit_close_bracket(context[0]);
      refalrts::reinit_open_call(context[4]);
      refalrts::reinit_name(context[7], functions[efunc_Divmodm_GuessDigit]);
      refalrts::reinit_svar( context[8], context[21] );
      refalrts::reinit_close_call(context[11]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[4] );
      refalrts::link_brackets( context[25], context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[0], context[11] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_evar( res, context[12], context[21] );
      res = refalrts::splice_elem( res, context[24] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Divmod-CalcDigits/4 (/7 s.N1/19 s.N2/20 e.1/22 )/8 (/11 e.NumerRest/24 )/12 s.D/21 e./26 >/1
    context[22] = context[13];
    context[23] = context[14];
    context[24] = context[15];
    context[25] = context[16];
    context[26] = context[17];
    context[27] = context[18];
    // closed e.1 as range 22
    // closed e.NumerRest as range 24
    // closed e. as range 26
    //DEBUG: s.N1: 19
    //DEBUG: s.N2: 20
    //DEBUG: s.D: 21
    //DEBUG: e.1: 22
    //DEBUG: e.NumerRest: 24
    //DEBUG: e.: 26

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-CalcDigits=1@2/4 HalfReuse: s.D21 /7 } (/28 e./26/29 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.NumerRest/24 AsIs: )/12 } </31 & Divmod-GetNextDigit$2=1/32 Tile{ AsIs: s.N1/19 AsIs: s.N2/20 } (/33 Tile{ AsIs: e.1/22 } )/34 s.D/21/35 (/36 Tile{ AsIs: e./26 } )/37 </38 & Divmod-GuessDigit/39 s.N1/19/40 s.N2/20/41 Tile{ AsIs: s.D/21 } >/42 >/43 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[28]);
    refalrts::copy_evar(vm, context[29], context[30], context[26], context[27]);
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_name(vm, context[32], functions[efunc_gen_Divmodm_GetNextDigit_S2A1]);
    refalrts::alloc_open_bracket(vm, context[33]);
    refalrts::alloc_close_bracket(vm, context[34]);
    refalrts::copy_stvar(vm, context[35], context[21]);
    refalrts::alloc_open_bracket(vm, context[36]);
    refalrts::alloc_close_bracket(vm, context[37]);
    refalrts::alloc_open_call(vm, context[38]);
    refalrts::alloc_name(vm, context[39], functions[efunc_Divmodm_GuessDigit]);
    refalrts::copy_stvar(vm, context[40], context[19]);
    refalrts::copy_stvar(vm, context[41], context[20]);
    refalrts::alloc_close_call(vm, context[42]);
    refalrts::alloc_close_call(vm, context[43]);
    refalrts::update_name(context[4], functions[efunc_gen_Divmodm_CalcDigits_A1Z2]);
    refalrts::reinit_svar( context[7], context[21] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[43] );
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[42] );
    refalrts::push_stack( vm, context[38] );
    refalrts::link_brackets( context[36], context[37] );
    refalrts::link_brackets( context[33], context[34] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[28], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[42], context[43] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[37], context[41] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_evar( res, context[34], context[36] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_elem( res, context[33] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[8], context[12] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_elem( res, context[28] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Divmod-CalcDigits/4 (/7 e.Numerator/5 )/8 (/11 e.NumerRest/9 )/12 e.Denominator/2 >/1
  // closed e.Numerator as range 5
  // closed e.NumerRest as range 9
  // closed e.Denominator as range 2
  //DEBUG: e.Numerator: 5
  //DEBUG: e.NumerRest: 9
  //DEBUG: e.Denominator: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & Divmod-CalcDigits=1/14 (/15 e.Denominator/2/16 )/18 Tile{ AsIs: (/11 AsIs: e.NumerRest/9 AsIs: )/12 } Tile{ AsIs: </0 Reuse: & Divmod-GetNextDigit*2/4 AsIs: (/7 AsIs: e.Numerator/5 AsIs: )/8 } Tile{ AsIs: e.Denominator/2 } >/19 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_Divmodm_CalcDigits_A1]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::copy_evar(vm, context[16], context[17], context[2], context[3]);
  refalrts::alloc_close_bracket(vm, context[18]);
  refalrts::alloc_close_call(vm, context[19]);
  refalrts::update_name(context[4], functions[efunc_gen_Divmodm_GetNextDigit_D2]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[19] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[15], context[18] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[19] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[13], context[18] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Divmodm_CalcDigits("Divmod-CalcDigits", COOKIE1_, COOKIE2_, func_Divmodm_CalcDigits);


static refalrts::FnResult func_gen_Divmodm_GetNextDigit_S2A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & Divmod-GetNextDigit$2=1/4 s.N1/5 s.N2/6 (/9 e.Numerator/7 )/10 s.D/11 (/14 e.Denominator/12 )/15 s.QuotDigit/16 s.RemDigit/17 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Numerator as range 7
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  // closed e.Denominator as range 12
  if( ! refalrts::svar_left( context[16], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[17], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.N1: 5
  //DEBUG: s.N2: 6
  //DEBUG: e.Numerator: 7
  //DEBUG: s.D: 11
  //DEBUG: e.Denominator: 12
  //DEBUG: s.QuotDigit: 16
  //DEBUG: s.RemDigit: 17

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.RemDigit/17 {REMOVED TILE}
  //RESULT: Tile{ [[ } </18 & Divmod-AdjustDigit@1/19 Tile{ AsIs: s.QuotDigit/16 } (/20 </21 & Sub-Normed/22 Tile{ AsIs: (/9 } '+'/23 Tile{ AsIs: </0 Reuse: & LeadingZeros/4 AsIs: s.N1/5 AsIs: s.N2/6 } Tile{ AsIs: e.Numerator/7 } >/24 )/25 '+'/26 </27 & Mul-Nat-Line/28 Tile{ HalfReuse: s.D11 /14 AsIs: e.Denominator/12 HalfReuse: s.QuotDigit16 /15 } >/29 >/30 Tile{ AsIs: )/10 AsIs: s.D/11 } e.Denominator/12/31 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[18]);
  refalrts::alloc_name(vm, context[19], functions[efunc_gen_Divmodm_AdjustDigit_Z1]);
  refalrts::alloc_open_bracket(vm, context[20]);
  refalrts::alloc_open_call(vm, context[21]);
  refalrts::alloc_name(vm, context[22], functions[efunc_Subm_Normed]);
  refalrts::alloc_char(vm, context[23], '+');
  refalrts::alloc_close_call(vm, context[24]);
  refalrts::alloc_close_bracket(vm, context[25]);
  refalrts::alloc_char(vm, context[26], '+');
  refalrts::alloc_open_call(vm, context[27]);
  refalrts::alloc_name(vm, context[28], functions[efunc_Mulm_Natm_Line]);
  refalrts::alloc_close_call(vm, context[29]);
  refalrts::alloc_close_call(vm, context[30]);
  refalrts::copy_evar(vm, context[31], context[32], context[12], context[13]);
  refalrts::update_name(context[4], functions[efunc_LeadingZeros]);
  refalrts::reinit_svar( context[14], context[11] );
  refalrts::reinit_svar( context[15], context[16] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[18] );
  refalrts::link_brackets( context[20], context[10] );
  refalrts::push_stack( vm, context[30] );
  refalrts::push_stack( vm, context[21] );
  refalrts::push_stack( vm, context[29] );
  refalrts::push_stack( vm, context[27] );
  refalrts::link_brackets( context[9], context[25] );
  refalrts::push_stack( vm, context[24] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[31], context[32] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[24], context[28] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[0], context[6] );
  res = refalrts::splice_elem( res, context[23] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_evar( res, context[20], context[22] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Divmodm_GetNextDigit_S2A1("Divmod-GetNextDigit$2=1", COOKIE1_, COOKIE2_, func_gen_Divmodm_GetNextDigit_S2A1);


static refalrts::FnResult func_Divmodm_GetNextDigit(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & Divmod-GetNextDigit/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Divmod-GetNextDigit/4 (/7 s.new1/9 s.new2/10 e.new3/5 )/8 s.new4/11 e.new5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::svar_left( context[9], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 5
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new5 as range 2
  do {
    // </0 & Divmod-GetNextDigit/4 (/7 s.N1/9 s.N2/10 )/8 s.D/11 >/1
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: s.N1: 9
    //DEBUG: s.N2: 10
    //DEBUG: s.D: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.N1/9 s.N2/10 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-GuessDigit/4 HalfReuse: s.N19 /7 } Tile{ HalfReuse: s.N210 /8 AsIs: s.D/11 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_Divmodm_GuessDigit]);
    refalrts::reinit_svar( context[7], context[9] );
    refalrts::reinit_svar( context[8], context[10] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    refalrts::splice_to_freelist_open( vm, context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Divmod-GetNextDigit/4 (/7 s.N1/9 s.N2/10 e.Numerator/5 )/8 s.D/11 e.Denominator/2 >/1
  // closed e.Numerator as range 5
  // closed e.Denominator as range 2
  //DEBUG: s.N1: 9
  //DEBUG: s.N2: 10
  //DEBUG: s.D: 11
  //DEBUG: e.Numerator: 5
  //DEBUG: e.Denominator: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-GetNextDigit$2=1/4 HalfReuse: s.N19 /7 } s.N2/10/12 (/13 Tile{ AsIs: e.Numerator/5 } Tile{ AsIs: )/8 AsIs: s.D/11 } (/14 Tile{ AsIs: e.Denominator/2 } )/15 </16 & Divmod-GuessDigit/17 Tile{ AsIs: s.N1/9 AsIs: s.N2/10 } s.D/11/18 >/19 Tile{ AsIs: >/1 ]] }
  refalrts::copy_stvar(vm, context[12], context[10]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_open_bracket(vm, context[14]);
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::alloc_open_call(vm, context[16]);
  refalrts::alloc_name(vm, context[17], functions[efunc_Divmodm_GuessDigit]);
  refalrts::copy_stvar(vm, context[18], context[11]);
  refalrts::alloc_close_call(vm, context[19]);
  refalrts::update_name(context[4], functions[efunc_gen_Divmodm_GetNextDigit_S2A1]);
  refalrts::reinit_svar( context[7], context[9] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[19] );
  refalrts::push_stack( vm, context[16] );
  refalrts::link_brackets( context[14], context[15] );
  refalrts::link_brackets( context[13], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[15], context[17] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[8], context[11] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[12], context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Divmodm_GetNextDigit("Divmod-GetNextDigit", COOKIE1_, COOKIE2_, func_Divmodm_GetNextDigit);


static refalrts::FnResult func_Divmodm_AdjustDigit(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 40 elems
  refalrts::Iter context[40];
  refalrts::zeros( context, 40 );
  // </0 & Divmod-AdjustDigit/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Divmod-AdjustDigit/4 s.new1/9 e.new2/2 (/7 e.new3/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new3 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Divmod-AdjustDigit/4 s.QuotDigit/9 '-'/14 e.Rem/10 (/7 e.Denominator/12 )/8 >/1
    context[10] = context[2];
    context[11] = context[3];
    context[12] = context[5];
    context[13] = context[6];
    context[14] = refalrts::char_left( '-', context[10], context[11] );
    if( ! context[14] )
      continue;
    // closed e.Rem as range 10
    // closed e.Denominator as range 12
    //DEBUG: s.QuotDigit: 9
    //DEBUG: e.Rem: 10
    //DEBUG: e.Denominator: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </15 & Divmod-AdjustDigit/16 Tile{ AsIs: </0 Reuse: & Sub-Digits/4 AsIs: s.QuotDigit/9 HalfReuse: 1/14 } >/17 </18 & Sub-Nat:1/19 (/20 e.Denominator/12/21 )/23 (/24 Tile{ AsIs: e.Rem/10 } )/25 </26 & Compare-Align/27 (/28 (/29 )/30 e.Denominator/12/31 )/33 (/34 )/35 e.Rem/10/36 >/38 >/39 Tile{ AsIs: (/7 AsIs: e.Denominator/12 AsIs: )/8 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_Divmodm_AdjustDigit]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::alloc_open_call(vm, context[18]);
    refalrts::alloc_name(vm, context[19], functions[efunc_gen_Subm_Nat_B1]);
    refalrts::alloc_open_bracket(vm, context[20]);
    refalrts::copy_evar(vm, context[21], context[22], context[12], context[13]);
    refalrts::alloc_close_bracket(vm, context[23]);
    refalrts::alloc_open_bracket(vm, context[24]);
    refalrts::alloc_close_bracket(vm, context[25]);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_Comparem_Align]);
    refalrts::alloc_open_bracket(vm, context[28]);
    refalrts::alloc_open_bracket(vm, context[29]);
    refalrts::alloc_close_bracket(vm, context[30]);
    refalrts::copy_evar(vm, context[31], context[32], context[12], context[13]);
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::alloc_open_bracket(vm, context[34]);
    refalrts::alloc_close_bracket(vm, context[35]);
    refalrts::copy_evar(vm, context[36], context[37], context[10], context[11]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::alloc_close_call(vm, context[39]);
    refalrts::update_name(context[4], functions[efunc_Subm_Digits]);
    refalrts::reinit_number(context[14], 1UL);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[15] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::push_stack( vm, context[39] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[26] );
    refalrts::link_brackets( context[34], context[35] );
    refalrts::link_brackets( context[28], context[33] );
    refalrts::link_brackets( context[29], context[30] );
    refalrts::link_brackets( context[24], context[25] );
    refalrts::link_brackets( context[20], context[23] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    res = refalrts::splice_evar( res, context[25], context[39] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[17], context[24] );
    res = refalrts::splice_evar( res, context[0], context[14] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Divmod-AdjustDigit/4 s.QuotDigit/9 e.Rem/2 (/7 e.Denominator/5 )/8 >/1
  // closed e.Rem as range 2
  // closed e.Denominator as range 5
  //DEBUG: s.QuotDigit: 9
  //DEBUG: e.Rem: 2
  //DEBUG: e.Denominator: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} & Divmod-AdjustDigit/4 s.QuotDigit/9 {REMOVED TILE} (/7 e.Denominator/5 )/8 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: s.QuotDigit9 /0 } Tile{ AsIs: e.Rem/2 } Tile{ ]] }
  refalrts::reinit_svar( context[0], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, context[0], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Divmodm_AdjustDigit("Divmod-AdjustDigit", COOKIE1_, COOKIE2_, func_Divmodm_AdjustDigit);

#line 653 "Library.ref"
namespace cookie_ns {

void long_mul(
  refalrts::UInt32& res_high, refalrts::UInt32& res_low,
  refalrts::UInt32 first, refalrts::UInt32 second
);

}  // namespace cookie_ns
#line 6437 "Library.cpp"

static refalrts::FnResult func_Divmodm_GuessDigit(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 665 "Library.ref"
  refalrts::Iter content_b = 0, content_e = 0;
  refalrts::Iter pfunc =
    refalrts::call_left(content_b, content_e, arg_begin, arg_end);

  refalrts::Iter pN1 = 0, pN2 = 0, pD = 0;
  if (
    ! refalrts::svar_left(pN1, content_b, content_e)
    || refalrts::cDataNumber != pN1->tag
    || ! refalrts::svar_left(pN2, content_b, content_e)
    || refalrts::cDataNumber != pN2->tag
    || ! refalrts::svar_left(pD, content_b, content_e)
    || refalrts::cDataNumber != pD->tag
    || ! refalrts::empty_seq(content_b, content_e)
  ) {
    return refalrts::cRecognitionImpossible;
  }


  using refalrts::UInt32;
  UInt32 num_hi = pN1->number_info;
  UInt32 num_lo = pN2->number_info;
  UInt32 denom = pD->number_info;

  if (num_hi >= denom) {
    refalrts::reinit_number(arg_begin, 4294967295U);
    refalrts::reinit_char(pfunc, '*');
    refalrts::splice_to_freelist(vm, pN1, arg_end);
    return refalrts::cSuccess;
  }

  if (num_hi >= denom || (denom & (1 << 31)) == 0) {
    return refalrts::cRecognitionImpossible;
  }

  UInt32 denom_half_hi = denom >> 16;
  UInt32 quot_hi = num_hi / denom_half_hi;
  if (quot_hi >= 65536) {
    quot_hi = 65535;
  }

  UInt32 subst_hi, subst_lo;
  while (true) {
    cookie_ns::long_mul(subst_hi, subst_lo, quot_hi << 16, denom);

    if (subst_hi < num_hi || (subst_hi == num_hi && subst_lo <= num_lo)) {
      break;
    }
    --quot_hi;
  }

  if (subst_lo > num_lo) {
    --num_hi;
  }
  num_lo -= subst_lo;
  num_hi -= subst_hi;

  assert(num_hi < 65536);

  UInt32 num_major = (num_hi << 16) | (num_lo >> 16);
  assert(num_major < denom);
  UInt32 quot_lo = (num_major) / denom_half_hi;

  while (true) {
    cookie_ns::long_mul(subst_hi, subst_lo, quot_lo, denom);

    if (subst_hi < num_hi || (subst_hi == num_hi && subst_lo <= num_lo)) {
      break;
    }
    --quot_lo;
  }

  if (subst_lo > num_lo) {
    --num_hi;
  }
  num_lo -= subst_lo;
  num_hi -= subst_hi;

  assert(num_hi == 0);

  UInt32 quot = (quot_hi << 16) + quot_lo;
  UInt32 rem = num_lo;

  refalrts::reinit_number(arg_begin, quot);
  refalrts::reinit_number(pfunc, rem);
  refalrts::splice_to_freelist(vm, pN1, arg_end);

  return refalrts::cSuccess;
#line 6532 "Library.cpp"
}

static refalrts::NativeReference nat_ref_Divmodm_GuessDigit("Divmod-GuessDigit", COOKIE1_, COOKIE2_, func_Divmodm_GuessDigit);


static refalrts::FnResult func_Explode(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 762 "Library.ref"
  refalrts::Iter content_b = 0;
  refalrts::Iter content_e = 0;
  refalrts::call_left(content_b, content_e, arg_begin, arg_end);

  refalrts::Iter pident = 0;
  if (
    ! refalrts::svar_right(pident, content_b, content_e)
    || refalrts::cDataIdentifier != pident->tag
    || ! refalrts::empty_seq(content_b, content_e)
  ) {
    return refalrts::cRecognitionImpossible;
  }

  refalrts::reset_allocator(vm);
  refalrts::alloc_string(vm, content_b, content_e, pident->ident_info->name());
  refalrts::splice_evar(arg_begin, content_b, content_e);
  refalrts::splice_to_freelist(vm, arg_begin, arg_end);
  return refalrts::cSuccess;
#line 6562 "Library.cpp"
}

static refalrts::NativeReference nat_ref_Explode("Explode", 0U, 0U, func_Explode);


static refalrts::FnResult func_First(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 791 "Library.ref"
  refalrts::Iter pfunc_name = arg_begin->next;
  refalrts::Iter pcount = pfunc_name->next;

  if (refalrts::cDataNumber != pcount->tag) {
    return refalrts::cRecognitionImpossible;
  }

  refalrts::RefalNumber count = pcount->number_info;
  refalrts::Iter term = pcount->next;

  while(term != arg_end && count > 0) {
    if (
      refalrts::cDataOpenBracket == term->tag
      || refalrts::cDataOpenADT == term->tag
    ) {
      term = term->link_info;
    }

    term = term->next;
    --count;
  }

  refalrts::Iter open_bracket = pcount;
  refalrts::Iter close_bracket = arg_begin;
  refalrts::splice_stvar(term, close_bracket);
  refalrts::reinit_open_bracket(open_bracket);
  refalrts::reinit_close_bracket(close_bracket);
  refalrts::link_brackets(open_bracket, close_bracket);
  refalrts::splice_to_freelist(vm, pfunc_name, pfunc_name);
  refalrts::splice_to_freelist(vm, arg_end, arg_end);

  return refalrts::cSuccess;
#line 6606 "Library.cpp"
}

static refalrts::NativeReference nat_ref_First("First", 0U, 0U, func_First);


static refalrts::FnResult func_Get(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & Get/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Get/4 s.new1/5 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & Get/4 0/5 >/1
    if( ! refalrts::number_term( 0UL, context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Step-Start/4 HalfReuse: >/5 HalfReuse: </1 } & Autoopen/6 'r'/7 0/8 >/9 </10 & Get-Aux/11 # stdin/12 >/13 </14 & __Step-End/15 >/16 Tile{ ]] }
    refalrts::alloc_name(vm, context[6], functions[efunc_Autoopen]);
    refalrts::alloc_char(vm, context[7], 'r');
    refalrts::alloc_number(vm, context[8], 0UL);
    refalrts::alloc_close_call(vm, context[9]);
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_Getm_Aux]);
    refalrts::alloc_ident(vm, context[12], identifiers[ident_stdin]);
    refalrts::alloc_close_call(vm, context[13]);
    refalrts::alloc_open_call(vm, context[14]);
    refalrts::alloc_name(vm, context[15], functions[efunc_u_u_Stepm_End]);
    refalrts::alloc_close_call(vm, context[16]);
    refalrts::update_name(context[4], functions[efunc_u_u_Stepm_Start]);
    refalrts::reinit_close_call(context[5]);
    refalrts::reinit_open_call(context[1]);
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[5] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[16] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Get/4 s.FileNo/5 >/1
  //DEBUG: s.FileNo: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </6 & __Step-Start/7 >/8 </9 & Autoopen/10 'r'/11 s.FileNo/5/12 >/13 Tile{ AsIs: </0 Reuse: & Get-Aux/4 AsIs: s.FileNo/5 AsIs: >/1 } </14 & __Step-End/15 >/16 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_u_u_Stepm_Start]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_Autoopen]);
  refalrts::alloc_char(vm, context[11], 'r');
  refalrts::copy_stvar(vm, context[12], context[5]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::alloc_open_call(vm, context[14]);
  refalrts::alloc_name(vm, context[15], functions[efunc_u_u_Stepm_End]);
  refalrts::alloc_close_call(vm, context[16]);
  refalrts::update_name(context[4], functions[efunc_Getm_Aux]);
  refalrts::push_stack( vm, context[16] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[14], context[16] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[6], context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Get("Get", 0U, 0U, func_Get);


static refalrts::FnResult func_ZeroHandle(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & ZeroHandle/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & ZeroHandle/4 s.new1/5 s.new2/6 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & ZeroHandle/4 0/5 s.Default/6 >/1
    if( ! refalrts::number_term( 0UL, context[5] ) )
      continue;
    //DEBUG: s.Default: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & ZeroHandle/4 0/5 s.Default/6 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: s.Default6 /1 ]] }
    refalrts::reinit_svar( context[1], context[6] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ZeroHandle/4 s.FileNo/5 s.Default/6 >/1
  //DEBUG: s.FileNo: 5
  //DEBUG: s.Default: 6

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & ZeroHandle/4 s.FileNo/5 s.Default/6 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: s.FileNo5 /1 ]] }
  refalrts::reinit_svar( context[1], context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ZeroHandle("ZeroHandle", COOKIE1_, COOKIE2_, func_ZeroHandle);

#line 845 "Library.ref"
namespace {

#define USE_IDENT(ident_name) (identifiers[ident_ ## ident_name])

enum { cMaxFileHandles = 40 };
refalrts::GlobalRef<FILE*> g_file_handles(cMaxFileHandles);

bool file_handle_left(
  const refalrts::RefalIdentifier *identifiers,
  refalrts::Iter& pfile_handle, refalrts::Iter& first, refalrts::Iter& last
) {
  return refalrts::svar_left(pfile_handle, first, last)
    && (
      refalrts::cDataNumber == pfile_handle->tag
      || (
        refalrts::cDataIdentifier == pfile_handle->tag
        && (
          USE_IDENT(stdin) == pfile_handle->ident_info
          || USE_IDENT(stdout) == pfile_handle->ident_info
          || USE_IDENT(stderr) == pfile_handle->ident_info
          || USE_IDENT(stout) == pfile_handle->ident_info
        )
      )
    );
}

FILE *extract_file_handle(
  refalrts::VM *vm, const refalrts::RefalIdentifier *identifiers,
  refalrts::Iter pfile_handle
) {
  assert(
    refalrts::cDataNumber == pfile_handle->tag
    || refalrts::cDataIdentifier == pfile_handle->tag
  );

  if (refalrts::cDataNumber == pfile_handle->tag) {
    refalrts::RefalNumber file_no = pfile_handle->number_info % cMaxFileHandles;

    if (file_no == 0) {
      return 0;
    }

    return g_file_handles.ref(vm, file_no);
  } else if (refalrts::cDataIdentifier == pfile_handle->tag) {
    return
      USE_IDENT(stdin) == pfile_handle->ident_info ? stdin :
      USE_IDENT(stdout) == pfile_handle->ident_info ? stdout :
      USE_IDENT(stderr) == pfile_handle->ident_info ? stderr : stdout;
  } else {
    refalrts_switch_default_violation(pfile_handle->tag);
    return 0;   // предупреждение компилятора
  }
}

bool release_file_handle(refalrts::VM *vm, refalrts::Iter pfile_handle) {
  if (refalrts::cDataIdentifier == pfile_handle->tag) {
    return true;
  }

  assert(refalrts::cDataNumber == pfile_handle->tag);

  refalrts::RefalNumber file_no = pfile_handle->number_info % cMaxFileHandles;

  assert(g_file_handles.ref(vm, file_no) != 0);

  bool successful_closed = EOF != fclose(g_file_handles.ref(vm, file_no));
  g_file_handles.ref(vm, file_no) = 0;
  return successful_closed;
}

bool open_handle(
  refalrts::VM *vm,
  refalrts::RefalNumber file_no, const char *filename, const char *mode
) {
  if (0 != g_file_handles.ref(vm, file_no)) {
    return false;
  }

  char default_name[sizeof("REFAL4294967296.DAT")];
  if ((filename == 0 || strlen(filename) == 0)) {
    sprintf(default_name, "REFAL%d.DAT", file_no);
    filename = default_name;
  }

  return (g_file_handles.ref(vm, file_no) = fopen(filename, mode)) != 0;
}

bool reopen_handle(
  refalrts::VM *vm,
  refalrts::Iter pfile_handle, const char *filename, const char *mode
) {
  assert(refalrts::cDataNumber == pfile_handle->tag);

  refalrts::RefalNumber file_no = pfile_handle->number_info % cMaxFileHandles;

  if (g_file_handles.ref(vm, file_no) != 0) {
    if (! release_file_handle(vm, pfile_handle)) {
      return false;
    }
  }

  return open_handle(vm, file_no, filename, mode);
}

}  // unnamed namespace
#line 6875 "Library.cpp"

static refalrts::FnResult func_Autoopen(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 954 "Library.ref"
  refalrts::Iter content_b = 0;
  refalrts::Iter content_e = 0;
  refalrts::call_left(content_b, content_e, arg_begin, arg_end);

  refalrts::Iter pmode = 0;
  refalrts::Iter pfile_handle = 0;
  if (
    ! refalrts::svar_left(pmode, content_b, content_e)
    || refalrts::cDataChar != pmode->tag
    || ('r' != pmode->char_info && 'w' != pmode->char_info)
    || ! file_handle_left(identifiers, pfile_handle, content_b, content_e)
    || ! refalrts::empty_seq(content_b, content_e)
  ) {
    return refalrts::cRecognitionImpossible;
  }

  bool success = true;
  if (refalrts::cDataNumber == pfile_handle->tag) {
    refalrts::RefalNumber file_no = pfile_handle->number_info % cMaxFileHandles;

    if (0 != file_no && 0 == g_file_handles.ref(vm, file_no)) {
      char default_mode[] = { pmode->char_info, '\0' };
      success = open_handle(vm, file_no, 0, default_mode);
    }
  }

  if (! success) {
    return refalrts::cRecognitionImpossible;
  }

  refalrts::splice_to_freelist(vm, arg_begin, arg_end);
  return refalrts::cSuccess;
#line 6915 "Library.cpp"
}

static refalrts::NativeReference nat_ref_Autoopen("Autoopen", COOKIE1_, COOKIE2_, func_Autoopen);


static refalrts::FnResult func_Getm_Aux(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 991 "Library.ref"
  refalrts::Iter content_b = 0;
  refalrts::Iter content_e = 0;
  refalrts::call_left(content_b, content_e, arg_begin, arg_end);

  refalrts::Iter pfile_handle = 0;

  if (
    ! file_handle_left(identifiers, pfile_handle, content_b, content_e)
    || ! refalrts::empty_seq(content_b, content_e)
  ) {
    return refalrts::cRecognitionImpossible;
  }

  refalrts::reset_allocator(vm);

  FILE *handle = extract_file_handle(vm, identifiers, pfile_handle);
  if (! handle) {
    return refalrts::cRecognitionImpossible;
  }

  refalrts::Iter dummy = 0;
  int cur_char;
  while ((cur_char = getc(handle)) != EOF && cur_char != '\n') {
    /*
      Пользуемся тем фактом, что в данной реализации размещёные в свободной
      памяти узлы располагаются в последовательных адресах.
    */
    refalrts::alloc_char(vm, dummy, static_cast<char>(cur_char));
  }

  if (cur_char == EOF) {
    refalrts::alloc_number(vm, dummy, 0UL);
  }

  refalrts::splice_from_freelist(vm, arg_begin);
  refalrts::splice_to_freelist(vm, arg_begin, arg_end);
  return refalrts::cSuccess;
#line 6964 "Library.cpp"
}

static refalrts::NativeReference nat_ref_Getm_Aux("Get-Aux", COOKIE1_, COOKIE2_, func_Getm_Aux);


static refalrts::FnResult func_gen_Implode_S1B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & Implode$1:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Implode$1:1/4 (/7 e.new1/5 )/8 s.new2/9 s.new3/10 s.new4/11 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & Implode$1:1/4 (/7 e.new7/12 )/8 'L'/9 s.new5/10 s.new6/11 >/1
    context[12] = context[5];
    context[13] = context[6];
    if( ! refalrts::char_term( 'L', context[9] ) )
      continue;
    // closed e.new7 as range 12
    do {
      // </0 & Implode$1:1/4 (/7 s.new10/16 e.new11/14 )/8 'L'/9 s.new8/10 s.new9/11 >/1
      context[14] = context[12];
      context[15] = context[13];
      if( ! refalrts::svar_left( context[16], context[14], context[15] ) )
        continue;
      // closed e.new11 as range 14
      do {
        // </0 & Implode$1:1/4 (/7 '-'/16 e./17 )/8 'L'/9 s.SubType/10 s.Init$a/11 >/1
        context[17] = context[14];
        context[18] = context[15];
        if( ! refalrts::char_term( '-', context[16] ) )
          continue;
        // closed e. as range 17
        //DEBUG: s.SubType: 10
        //DEBUG: s.Init$a: 11
        //DEBUG: e.: 17

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.SubType/10 s.Init$a/11 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoImplode@2/4 AsIs: (/7 HalfReuse: s.Init$a11 /16 } Tile{ AsIs: )/8 Reuse: '-'/9 } Tile{ AsIs: e./17 } >/19 </20 & __Step-End/21 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_u_u_Stepm_End]);
        refalrts::update_name(context[4], functions[efunc_gen_DoImplode_Z2]);
        refalrts::reinit_svar( context[16], context[11] );
        refalrts::update_char(context[9], '-');
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[19], context[21] );
        res = refalrts::splice_evar( res, context[17], context[18] );
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::splice_to_freelist_open( vm, context[16], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Implode$1:1/4 (/7 '_'/16 e./17 )/8 'L'/9 s.SubType/10 s.Init$a/11 >/1
        context[17] = context[14];
        context[18] = context[15];
        if( ! refalrts::char_term( '_', context[16] ) )
          continue;
        // closed e. as range 17
        //DEBUG: s.SubType: 10
        //DEBUG: s.Init$a: 11
        //DEBUG: e.: 17

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.SubType/10 s.Init$a/11 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoImplode@2/4 AsIs: (/7 HalfReuse: s.Init$a11 /16 } Tile{ AsIs: )/8 Reuse: '_'/9 } Tile{ AsIs: e./17 } >/19 </20 & __Step-End/21 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_u_u_Stepm_End]);
        refalrts::update_name(context[4], functions[efunc_gen_DoImplode_Z2]);
        refalrts::reinit_svar( context[16], context[11] );
        refalrts::update_char(context[9], '_');
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[19], context[21] );
        res = refalrts::splice_evar( res, context[17], context[18] );
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::splice_to_freelist_open( vm, context[16], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Implode$1:1/4 (/7 '$'/16 e./17 )/8 'L'/9 s.SubType/10 s.Init$a/11 >/1
      context[17] = context[14];
      context[18] = context[15];
      if( ! refalrts::char_term( '$', context[16] ) )
        continue;
      // closed e. as range 17
      //DEBUG: s.SubType: 10
      //DEBUG: s.Init$a: 11
      //DEBUG: e.: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.SubType/10 s.Init$a/11 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoImplode@2/4 AsIs: (/7 HalfReuse: s.Init$a11 /16 } Tile{ AsIs: )/8 Reuse: '$'/9 } Tile{ AsIs: e./17 } >/19 </20 & __Step-End/21 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_call(vm, context[19]);
      refalrts::alloc_open_call(vm, context[20]);
      refalrts::alloc_name(vm, context[21], functions[efunc_u_u_Stepm_End]);
      refalrts::update_name(context[4], functions[efunc_gen_DoImplode_Z2]);
      refalrts::reinit_svar( context[16], context[11] );
      refalrts::update_char(context[9], '$');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[19] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[19], context[21] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[8], context[9] );
      refalrts::splice_to_freelist_open( vm, context[16], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Implode$1:1/4 (/7 e.Tail/14 )/8 'L'/9 s.SubType/10 s.Init$a/11 >/1
    context[14] = context[12];
    context[15] = context[13];
    // closed e.Tail as range 14
    //DEBUG: s.SubType: 10
    //DEBUG: s.Init$a: 11
    //DEBUG: e.Tail: 14

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.SubType/10 s.Init$a/11 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoImplode@1*3/4 HalfReuse: s.Init$a11 /7 AsIs: e.Tail/14 HalfReuse: >/8 HalfReuse: </9 } & __Step-End/16 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[16], functions[efunc_u_u_Stepm_End]);
    refalrts::update_name(context[4], functions[efunc_gen_DoImplode_Z1D3]);
    refalrts::reinit_svar( context[7], context[11] );
    refalrts::reinit_close_call(context[8]);
    refalrts::reinit_open_call(context[9]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[16] );
    refalrts::splice_to_freelist_open( vm, context[9], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Implode$1:1/4 (/7 e.Tail/5 )/8 s.Type/9 s.SubType/10 s.Init$a/11 >/1
  // closed e.Tail as range 5
  //DEBUG: s.Type: 9
  //DEBUG: s.SubType: 10
  //DEBUG: s.Init$a: 11
  //DEBUG: e.Tail: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Type/9 s.SubType/10 s.Init$a/11 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: 0/4 HalfReuse: s.Init$a11 /7 AsIs: e.Tail/5 HalfReuse: </8 } Tile{ HalfReuse: & __Step-End/0 } Tile{ AsIs: >/1 ]] }
  refalrts::reinit_number(context[4], 0UL);
  refalrts::reinit_svar( context[7], context[11] );
  refalrts::reinit_open_call(context[8]);
  refalrts::reinit_name(context[0], functions[efunc_u_u_Stepm_End]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[0] );
  res = refalrts::splice_evar( res, context[4], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Implode_S1B1("Implode$1:1", COOKIE1_, COOKIE2_, func_gen_Implode_S1B1);


static refalrts::FnResult func_Implode(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Implode/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Implode/4 s.Init/7 e.Tail/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    // closed e.Tail as range 5
    //DEBUG: s.Init: 7
    //DEBUG: e.Tail: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Implode$1:1/4 } (/8 Tile{ AsIs: e.Tail/5 } )/9 </10 & __Step-Start/11 >/12 </13 & Type/14 Tile{ AsIs: s.Init/7 } >/15 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[8]);
    refalrts::alloc_close_bracket(vm, context[9]);
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_u_u_Stepm_Start]);
    refalrts::alloc_close_call(vm, context[12]);
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_Type]);
    refalrts::alloc_close_call(vm, context[15]);
    refalrts::update_name(context[4], functions[efunc_gen_Implode_S1B1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[10] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[15] );
    res = refalrts::splice_elem( res, context[7] );
    res = refalrts::splice_evar( res, context[9], context[14] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_elem( res, context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Implode/4 e.InvalidExpr/2 >/1
  // closed e.InvalidExpr as range 2
  //DEBUG: e.InvalidExpr: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} & Implode/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: 0/0 } Tile{ AsIs: e.InvalidExpr/2 } Tile{ ]] }
  refalrts::reinit_number(context[0], 0UL);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, context[0], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Implode("Implode", 0U, 0U, func_Implode);


static refalrts::FnResult func_DoImplode(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & DoImplode/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoImplode/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & DoImplode/4 (/7 e.new5/9 )/8 s.new3/13 e.new4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new5 as range 9
    if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
      continue;
    // closed e.new4 as range 11
    do {
      // </0 & DoImplode/4 (/7 e.Scanned/14 )/8 '-'/13 e.Tail/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '-', context[13] ) )
        continue;
      // closed e.Scanned as range 14
      // closed e.Tail as range 16
      //DEBUG: e.Scanned: 14
      //DEBUG: e.Tail: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoImplode/4 AsIs: (/7 AsIs: e.Scanned/14 HalfReuse: '-'/8 HalfReuse: )/13 AsIs: e.Tail/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], '-');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoImplode/4 (/7 e.Scanned/14 )/8 '_'/13 e.Tail/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '_', context[13] ) )
        continue;
      // closed e.Scanned as range 14
      // closed e.Tail as range 16
      //DEBUG: e.Scanned: 14
      //DEBUG: e.Tail: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoImplode/4 AsIs: (/7 AsIs: e.Scanned/14 HalfReuse: '_'/8 HalfReuse: )/13 AsIs: e.Tail/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], '_');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoImplode/4 (/7 e.Scanned/14 )/8 '$'/13 e.Tail/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '$', context[13] ) )
        continue;
      // closed e.Scanned as range 14
      // closed e.Tail as range 16
      //DEBUG: e.Scanned: 14
      //DEBUG: e.Tail: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoImplode/4 AsIs: (/7 AsIs: e.Scanned/14 HalfReuse: '$'/8 HalfReuse: )/13 AsIs: e.Tail/16 AsIs: >/1 ]] }
      refalrts::reinit_char(context[8], '$');
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoImplode/4 (/7 e.Scanned/14 )/8 s.Next/13 e.Tail/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      // closed e.Scanned as range 14
      // closed e.Tail as range 16
      //DEBUG: s.Next: 13
      //DEBUG: e.Scanned: 14
      //DEBUG: e.Tail: 16
      //13: s.Next
      //14: e.Scanned
      //16: e.Tail
      //23: s.Next

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[20], functions[efunc_gen_DoImplode_S4C1]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Type]);
      refalrts::copy_stvar(vm, context[23], context[13]);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::alloc_close_call(vm, context[19]);
      refalrts::push_stack( vm, context[19] );
      refalrts::push_stack( vm, context[18] );
      res = refalrts::splice_elem( res, context[19] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_stvar( res, context[23] );
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_elem( res, context[21] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_elem( res, context[18] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </18 & DoImplode$4?1/22 'L'/23 s.SubType/24 s.Lettern/25 >/19
        context[20] = 0;
        context[21] = 0;
        context[22] = refalrts::call_left( context[20], context[21], context[18], context[19] );
        context[23] = refalrts::char_left( 'L', context[20], context[21] );
        if( ! context[23] )
          continue;
        if( ! refalrts::svar_left( context[24], context[20], context[21] ) )
          continue;
        if( ! refalrts::svar_left( context[25], context[20], context[21] ) )
          continue;
        if( ! refalrts::empty_seq( context[20], context[21] ) )
          continue;
        //DEBUG: s.Next: 13
        //DEBUG: e.Scanned: 14
        //DEBUG: e.Tail: 16
        //DEBUG: s.SubType: 24
        //DEBUG: s.Lettern: 25

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Next/13 {REMOVED TILE} </18 & DoImplode$4?1/22 {REMOVED TILE} s.SubType/24 s.Lettern/25 >/19 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoImplode/4 AsIs: (/7 AsIs: e.Scanned/14 HalfReuse: s.Lettern25 /8 } Tile{ HalfReuse: )/23 } Tile{ AsIs: e.Tail/16 } Tile{ AsIs: >/1 ]] }
        refalrts::reinit_svar( context[8], context[25] );
        refalrts::reinit_close_bracket(context[23]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[23] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_elem( res, context[23] );
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[18], context[19]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoImplode/4 (/7 e.Scanned/14 )/8 s.Next/13 e.Tail/16 >/1
    context[14] = context[9];
    context[15] = context[10];
    context[16] = context[11];
    context[17] = context[12];
    // closed e.Scanned as range 14
    // closed e.Tail as range 16
    //DEBUG: s.Next: 13
    //DEBUG: e.Scanned: 14
    //DEBUG: e.Tail: 16
    //13: s.Next
    //14: e.Scanned
    //16: e.Tail
    //23: s.Next

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[18]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_DoImplode_S5C1]);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_Type]);
    refalrts::copy_stvar(vm, context[23], context[13]);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[18] );
    res = refalrts::splice_elem( res, context[19] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[21] );
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_stvar( res, context[23] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_elem( res, context[18] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </18 & DoImplode$5?1/22 'D'/23 s.SubType/24 s.Digit/25 >/19
      context[20] = 0;
      context[21] = 0;
      context[22] = refalrts::call_left( context[20], context[21], context[18], context[19] );
      context[23] = refalrts::char_left( 'D', context[20], context[21] );
      if( ! context[23] )
        continue;
      if( ! refalrts::svar_left( context[24], context[20], context[21] ) )
        continue;
      if( ! refalrts::svar_left( context[25], context[20], context[21] ) )
        continue;
      if( ! refalrts::empty_seq( context[20], context[21] ) )
        continue;
      //DEBUG: s.Next: 13
      //DEBUG: e.Scanned: 14
      //DEBUG: e.Tail: 16
      //DEBUG: s.SubType: 24
      //DEBUG: s.Digit: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Next/13 {REMOVED TILE} </18 & DoImplode$5?1/22 {REMOVED TILE} s.SubType/24 s.Digit/25 >/19 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoImplode/4 AsIs: (/7 AsIs: e.Scanned/14 HalfReuse: s.Digit25 /8 } Tile{ HalfReuse: )/23 } Tile{ AsIs: e.Tail/16 } Tile{ AsIs: >/1 ]] }
      refalrts::reinit_svar( context[8], context[25] );
      refalrts::reinit_close_bracket(context[23]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[23] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_elem( res, context[23] );
      refalrts::splice_to_freelist_open( vm, context[8], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[18], context[19]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoImplode/4 (/7 e.Scanned/5 )/8 e.Other/2 >/1
  // closed e.Scanned as range 5
  // closed e.Other as range 2
  //DEBUG: e.Scanned: 5
  //DEBUG: e.Other: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Implode_Ext/4 } Tile{ AsIs: e.Scanned/5 } Tile{ AsIs: >/1 } Tile{ AsIs: e.Other/2 } Tile{ ]] }
  refalrts::update_name(context[4], functions[efunc_Implodeu_Ext]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoImplode("DoImplode", COOKIE1_, COOKIE2_, func_DoImplode);


static refalrts::FnResult func_Last(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 1070 "Library.ref"
  refalrts::Iter pfunc_name = arg_begin->next;
  refalrts::Iter pcount = pfunc_name->next;

  if (refalrts::cDataNumber != pcount->tag) {
    return refalrts::cRecognitionImpossible;
  }

  refalrts::RefalNumber count = pcount->number_info;
  refalrts::Iter term_end = arg_end->prev;

  while (term_end != pcount && count > 0) {
    if (
      refalrts::cDataCloseBracket == term_end->tag
      || refalrts::cDataCloseADT == term_end->tag
    ) {
      term_end = term_end->link_info;
    }

    term_end = term_end->prev;
    --count;
  }

  refalrts::Iter open_bracket = pcount;
  refalrts::Iter close_bracket = arg_begin;
  refalrts::splice_stvar(term_end->next, close_bracket);
  refalrts::reinit_open_bracket(open_bracket);
  refalrts::reinit_close_bracket(close_bracket);
  refalrts::link_brackets(open_bracket, close_bracket);
  refalrts::splice_to_freelist(vm, pfunc_name, pfunc_name);
  refalrts::splice_to_freelist(vm, arg_end, arg_end);

  return refalrts::cSuccess;
#line 7601 "Library.cpp"
}

static refalrts::NativeReference nat_ref_Last("Last", 0U, 0U, func_Last);


static refalrts::FnResult func_Lenw(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 1111 "Library.ref"
  refalrts::Iter pfunc_name = arg_begin->next;
  refalrts::RefalNumber count = 0;

  refalrts::Iter term = pfunc_name->next;

  while (term != arg_end) {
    if (
      refalrts::cDataOpenBracket == term->tag
      || refalrts::cDataOpenADT == term->tag
    ) {
      term = term->link_info;
    }

    ++count;
    term = term->next;
  }

  refalrts::Iter pcount = pfunc_name;
  refalrts::reinit_number(pcount, count);
  refalrts::splice_to_freelist(vm, arg_begin, arg_begin);
  refalrts::splice_to_freelist(vm, arg_end, arg_end);

  return refalrts::cSuccess;
#line 7636 "Library.cpp"
}

static refalrts::NativeReference nat_ref_Lenw("Lenw", 0U, 0U, func_Lenw);

#line 1142 "Library.ref"
namespace {

struct LowerConv {
  bool for_convert(refalrts::Iter item) {
    return refalrts::cDataChar == item->tag;
  }

  void convert(refalrts::Iter item) {
    item->char_info = static_cast<char>(tolower(item->char_info));
  }
};

}  // unnamed namespace
#line 7655 "Library.cpp"

static refalrts::FnResult func_Lower(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 1159 "Library.ref"
  return convert(vm, arg_begin, arg_end, LowerConv());
#line 7664 "Library.cpp"
}

static refalrts::NativeReference nat_ref_Lower("Lower", 0U, 0U, func_Lower);


static refalrts::FnResult func_gen_Mod_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & Mod$1=1/4 (/7 s.Div/9 )/8 s.Mod/10 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::svar_left( context[9], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Div: 9
  //DEBUG: s.Mod: 10

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.Div/9 )/8 s.Mod/10 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: s.Mod10 /0 HalfReuse: </4 HalfReuse: & __Step-End/7 } Tile{ AsIs: >/1 ]] }
  refalrts::reinit_svar( context[0], context[10] );
  refalrts::reinit_open_call(context[4]);
  refalrts::reinit_name(context[7], functions[efunc_u_u_Stepm_End]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Mod_S1A1("Mod$1=1", COOKIE1_, COOKIE2_, func_gen_Mod_S1A1);


static refalrts::FnResult func_Mod(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & Mod/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Mod/4 s.First/7 s.Second/8 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::svar_left( context[8], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    //DEBUG: s.First: 7
    //DEBUG: s.Second: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </9 & Mod$1=1/10 </11 & __Step-Start/12 >/13 Tile{ AsIs: </0 Reuse: & Divmod-Digits/4 AsIs: s.First/7 AsIs: s.Second/8 AsIs: >/1 } >/14 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[9]);
    refalrts::alloc_name(vm, context[10], functions[efunc_gen_Mod_S1A1]);
    refalrts::alloc_open_call(vm, context[11]);
    refalrts::alloc_name(vm, context[12], functions[efunc_u_u_Stepm_Start]);
    refalrts::alloc_close_call(vm, context[13]);
    refalrts::alloc_close_call(vm, context[14]);
    refalrts::update_name(context[4], functions[efunc_Divmodm_Digits]);
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[9], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Mod/4 e.ArithmArg/2 >/1
  // closed e.ArithmArg as range 2
  //DEBUG: e.ArithmArg: 2
  //2: e.ArithmArg
  //13: e.ArithmArg

  refalrts::reset_allocator(vm);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_Mod_S2C1]);
  refalrts::alloc_open_call(vm, context[8]);
  refalrts::alloc_name(vm, context[9], functions[efunc_u_u_Stepm_Start]);
  refalrts::alloc_close_call(vm, context[10]);
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_NormArithmArg]);
  refalrts::copy_evar(vm, context[13], context[14], context[2], context[3]);
  refalrts::alloc_close_call(vm, context[15]);
  refalrts::alloc_close_call(vm, context[6]);
  refalrts::push_stack( vm, context[6] );
  refalrts::push_stack( vm, context[5] );
  res = refalrts::splice_elem( res, context[6] );
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[11] );
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_elem( res, context[11] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[8] );
  res = refalrts::splice_elem( res, context[10] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
  if (rec_res != refalrts::cSuccess)
    return rec_res;
  refalrts::this_is_generated_function(vm);
  do {
    // </5 & Mod$2?1/9 (/12 e.First/10 )/13 e.Second/7 >/6
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::call_left( context[7], context[8], context[5], context[6] );
    context[10] = 0;
    context[11] = 0;
    context[12] = refalrts::brackets_left( context[10], context[11], context[7], context[8] );
    if( ! context[12] )
      continue;
    refalrts::bracket_pointers(context[12], context[13]);
    // closed e.First as range 10
    // closed e.Second as range 7
    //DEBUG: e.ArithmArg: 2
    //DEBUG: e.First: 10
    //DEBUG: e.Second: 7
    //2: e.ArithmArg
    //7: e.Second
    //10: e.First
    //20: e.First
    //23: e.Second

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[14]);
    refalrts::alloc_name(vm, context[16], functions[efunc_gen_Mod_S2C2]);
    refalrts::alloc_open_call(vm, context[17]);
    refalrts::alloc_name(vm, context[18], functions[efunc_Divmodm_Normed]);
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::copy_evar(vm, context[20], context[21], context[10], context[11]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::copy_evar(vm, context[23], context[24], context[7], context[8]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::alloc_close_call(vm, context[15]);
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[14] );
    res = refalrts::splice_elem( res, context[15] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[17] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    refalrts::link_brackets( context[19], context[22] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_elem( res, context[14] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </14 & Mod$2?2/18 (/21 e.Div/19 )/22 e.Mod/16 >/15
      context[16] = 0;
      context[17] = 0;
      context[18] = refalrts::call_left( context[16], context[17], context[14], context[15] );
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::brackets_left( context[19], context[20], context[16], context[17] );
      if( ! context[21] )
        continue;
      refalrts::bracket_pointers(context[21], context[22]);
      // closed e.Div as range 19
      // closed e.Mod as range 16
      //DEBUG: e.ArithmArg: 2
      //DEBUG: e.First: 10
      //DEBUG: e.Second: 7
      //DEBUG: e.Div: 19
      //DEBUG: e.Mod: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Mod/4 e.ArithmArg/2 </5 & Mod$2?1/9 (/12 e.First/10 )/13 e.Second/7 >/6 {REMOVED TILE} & Mod$2?2/18 (/21 e.Div/19 )/22 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.Mod/16 } Tile{ AsIs: </14 } Tile{ HalfReuse: & __Step-End/15 AsIs: >/1 ]] }
      refalrts::reinit_name(context[15], functions[efunc_u_u_Stepm_End]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[15];
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[16], context[17] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[14], context[15]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  refalrts::splice_to_freelist(vm, context[5], context[6]);
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_Mod("Mod", 0U, 0U, func_Mod);


static refalrts::FnResult func_Mul(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Mul/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Mul/4 s.First/7 s.Second/8 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::svar_left( context[8], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    //DEBUG: s.First: 7
    //DEBUG: s.Second: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </9 & __Step-Drop/10 >/11 Tile{ AsIs: </0 Reuse: & Mul-Digits/4 AsIs: s.First/7 AsIs: s.Second/8 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[9]);
    refalrts::alloc_name(vm, context[10], functions[efunc_u_u_Stepm_Drop]);
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::update_name(context[4], functions[efunc_Mulm_Digits]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[0];
    res = refalrts::splice_evar( res, context[9], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Mul/4 e.ArithmArg/2 >/1
  // closed e.ArithmArg as range 2
  //DEBUG: e.ArithmArg: 2
  //2: e.ArithmArg
  //13: e.ArithmArg

  refalrts::reset_allocator(vm);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_Mul_S2C1]);
  refalrts::alloc_open_call(vm, context[8]);
  refalrts::alloc_name(vm, context[9], functions[efunc_u_u_Stepm_Start]);
  refalrts::alloc_close_call(vm, context[10]);
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_NormArithmArg]);
  refalrts::copy_evar(vm, context[13], context[14], context[2], context[3]);
  refalrts::alloc_close_call(vm, context[15]);
  refalrts::alloc_close_call(vm, context[6]);
  refalrts::push_stack( vm, context[6] );
  refalrts::push_stack( vm, context[5] );
  res = refalrts::splice_elem( res, context[6] );
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[11] );
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_elem( res, context[11] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[8] );
  res = refalrts::splice_elem( res, context[10] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
  if (rec_res != refalrts::cSuccess)
    return rec_res;
  refalrts::this_is_generated_function(vm);
  do {
    // </5 & Mul$2?1/9 (/12 e.First/10 )/13 e.Second/7 >/6
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::call_left( context[7], context[8], context[5], context[6] );
    context[10] = 0;
    context[11] = 0;
    context[12] = refalrts::brackets_left( context[10], context[11], context[7], context[8] );
    if( ! context[12] )
      continue;
    refalrts::bracket_pointers(context[12], context[13]);
    // closed e.First as range 10
    // closed e.Second as range 7
    //DEBUG: e.ArithmArg: 2
    //DEBUG: e.First: 10
    //DEBUG: e.Second: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.ArithmArg/2 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: </5 Reuse: & Mul-Normed/9 AsIs: (/12 AsIs: e.First/10 AsIs: )/13 AsIs: e.Second/7 AsIs: >/6 HalfReuse: </1 } Tile{ Reuse: & __Step-End/4 } Tile{ HalfReuse: >/0 } Tile{ ]] }
    refalrts::update_name(context[9], functions[efunc_Mulm_Normed]);
    refalrts::reinit_open_call(context[1]);
    refalrts::update_name(context[4], functions[efunc_u_u_Stepm_End]);
    refalrts::reinit_close_call(context[0]);
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[6] );
    refalrts::push_stack( vm, context[5] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[0] );
    res = refalrts::splice_elem( res, context[4] );
    res = refalrts::splice_evar( res, context[5], context[1] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  refalrts::splice_to_freelist(vm, context[5], context[6]);
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_Mul("Mul", 0U, 0U, func_Mul);

#line 1194 "Library.ref"
void cookie_ns::long_mul(
  refalrts::UInt32& res_high, refalrts::UInt32& res_low,
  refalrts::UInt32 first, refalrts::UInt32 second
) {
  /*
    Double-word multiplication scheme:

    (x,y,z,t) = (F,i)*(S,e)     -- first * second

       S   e        (A,a) = F * S
     ---------      (B,b) = i * S
     |\ b|\ d|      (C,c) = F * e
    i| \ | \ |t     (D,d) = i * e
     |B \|D \|
     ---------      t = d
     |\ a|\ c|      (Z,z) = b + D + c
    F| \ | \ |z     (Y,y) = B + a + C + Z
     |A \|C \|      x = A + Y
     ---------
       x   y        (x,y) = (A, a) + B + C + Z
  */

  using refalrts::UInt32;

  UInt32 F = first >> 16;
  UInt32 i = first & 0xFFFFU;
  UInt32 S = second >> 16;
  UInt32 e = second & 0xFFFFU;

  UInt32 Aa = F * S;
  UInt32 Bb = i * S;
  UInt32 Cc = F * e;
  UInt32 Dd = i * e;

  UInt32 Zz = (Bb & 0xFFFFU) + (Dd >> 16) + (Cc & 0xFFFFU);
  res_low = (Zz << 16) + (Dd & 0xFFFFU);
  res_high = Aa + (Bb >> 16) + (Cc >> 16) + (Zz >> 16);
}
#line 8095 "Library.cpp"

static refalrts::FnResult func_Mulm_Digits(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 1236 "Library.ref"
  ARITHM_PRELUDE

  refalrts::UInt32 res_high, res_low;
  cookie_ns::long_mul(res_high, res_low, first, second);

  if (res_high > 0) {
    refalrts::reinit_number(arg_begin, res_high);
    refalrts::reinit_number(pFunc, res_low);
    refalrts::splice_to_freelist(vm, pFirst, arg_end);
  } else {
    refalrts::reinit_number(arg_begin, res_low);
    refalrts::splice_to_freelist(vm, pFunc, arg_end);
  }

  return refalrts::cSuccess;
#line 8118 "Library.cpp"
}

static refalrts::NativeReference nat_ref_Mulm_Digits("Mul-Digits", COOKIE1_, COOKIE2_, func_Mulm_Digits);


static refalrts::FnResult func_Mulm_Normed(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  // </0 & Mul-Normed/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Mul-Normed/4 (/7 s.new1/9 e.new2/5 )/8 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new3 as range 2
  if( ! refalrts::svar_left( context[9], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 5
  do {
    // </0 & Mul-Normed/4 (/7 s.new6/9 e.new7/10 )/8 s.new4/14 e.new5/12 >/1
    context[10] = context[5];
    context[11] = context[6];
    context[12] = context[2];
    context[13] = context[3];
    // closed e.new7 as range 10
    if( ! refalrts::svar_left( context[14], context[12], context[13] ) )
      continue;
    // closed e.new5 as range 12
    do {
      // </0 & Mul-Normed/4 (/7 '+'/9 e.new10/15 )/8 s.new8/14 e.new9/17 >/1
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      context[18] = context[13];
      if( ! refalrts::char_term( '+', context[9] ) )
        continue;
      // closed e.new10 as range 15
      // closed e.new9 as range 17
      do {
        // </0 & Mul-Normed/4 (/7 '+'/9 e.First/19 )/8 '+'/14 e.Second/21 >/1
        context[19] = context[15];
        context[20] = context[16];
        context[21] = context[17];
        context[22] = context[18];
        if( ! refalrts::char_term( '+', context[14] ) )
          continue;
        // closed e.First as range 19
        // closed e.Second as range 21
        //DEBUG: e.First: 19
        //DEBUG: e.Second: 21

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} '+'/9 {REMOVED TILE} )/8 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Mul-Nat/4 AsIs: (/7 } Tile{ AsIs: e.First/19 } Tile{ HalfReuse: )/14 AsIs: e.Second/21 AsIs: >/1 ]] }
        refalrts::update_name(context[4], functions[efunc_Mulm_Nat]);
        refalrts::reinit_close_bracket(context[14]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_evar( res, context[19], context[20] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Mul-Normed/4 (/7 '+'/9 e.First/19 )/8 '-'/14 e.Second/21 >/1
        context[19] = context[15];
        context[20] = context[16];
        context[21] = context[17];
        context[22] = context[18];
        if( ! refalrts::char_term( '-', context[14] ) )
          continue;
        // closed e.First as range 19
        // closed e.Second as range 21
        //DEBUG: e.First: 19
        //DEBUG: e.Second: 21

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} '-'/14 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: '-'/0 HalfReuse: </4 HalfReuse: & Mul-Nat/7 HalfReuse: (/9 AsIs: e.First/19 AsIs: )/8 } Tile{ AsIs: e.Second/21 } Tile{ AsIs: >/1 ]] }
        refalrts::reinit_char(context[0], '-');
        refalrts::reinit_open_call(context[4]);
        refalrts::reinit_name(context[7], functions[efunc_Mulm_Nat]);
        refalrts::reinit_open_bracket(context[9]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[4] );
        refalrts::link_brackets( context[9], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[21], context[22] );
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Mul-Normed/4 (/7 '+'/9 e.First/19 )/8 0/14 >/1
      context[19] = context[15];
      context[20] = context[16];
      if( ! refalrts::number_term( 0UL, context[14] ) )
        continue;
      if( ! refalrts::empty_seq( context[17], context[18] ) )
        continue;
      // closed e.First as range 19
      //DEBUG: e.First: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Mul-Normed/4 (/7 '+'/9 e.First/19 )/8 0/14 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 0/1 ]] }
      refalrts::reinit_number(context[1], 0UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Mul-Normed/4 (/7 '-'/9 e.new10/15 )/8 s.new8/14 e.new9/17 >/1
    context[15] = context[10];
    context[16] = context[11];
    context[17] = context[12];
    context[18] = context[13];
    if( ! refalrts::char_term( '-', context[9] ) )
      continue;
    // closed e.new10 as range 15
    // closed e.new9 as range 17
    do {
      // </0 & Mul-Normed/4 (/7 '-'/9 e.First/19 )/8 '+'/14 e.Second/21 >/1
      context[19] = context[15];
      context[20] = context[16];
      context[21] = context[17];
      context[22] = context[18];
      if( ! refalrts::char_term( '+', context[14] ) )
        continue;
      // closed e.First as range 19
      // closed e.Second as range 21
      //DEBUG: e.First: 19
      //DEBUG: e.Second: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} '+'/14 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: '-'/0 HalfReuse: </4 HalfReuse: & Mul-Nat/7 HalfReuse: (/9 AsIs: e.First/19 AsIs: )/8 } Tile{ AsIs: e.Second/21 } Tile{ AsIs: >/1 ]] }
      refalrts::reinit_char(context[0], '-');
      refalrts::reinit_open_call(context[4]);
      refalrts::reinit_name(context[7], functions[efunc_Mulm_Nat]);
      refalrts::reinit_open_bracket(context[9]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[4] );
      refalrts::link_brackets( context[9], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[21], context[22] );
      refalrts::splice_to_freelist_open( vm, context[8], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Mul-Normed/4 (/7 '-'/9 e.First/19 )/8 '-'/14 e.Second/21 >/1
      context[19] = context[15];
      context[20] = context[16];
      context[21] = context[17];
      context[22] = context[18];
      if( ! refalrts::char_term( '-', context[14] ) )
        continue;
      // closed e.First as range 19
      // closed e.Second as range 21
      //DEBUG: e.First: 19
      //DEBUG: e.Second: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} '-'/9 {REMOVED TILE} )/8 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Mul-Nat/4 AsIs: (/7 } Tile{ AsIs: e.First/19 } Tile{ HalfReuse: )/14 AsIs: e.Second/21 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Mulm_Nat]);
      refalrts::reinit_close_bracket(context[14]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[19], context[20] );
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Mul-Normed/4 (/7 '-'/9 e.First/19 )/8 0/14 >/1
    context[19] = context[15];
    context[20] = context[16];
    if( ! refalrts::number_term( 0UL, context[14] ) )
      continue;
    if( ! refalrts::empty_seq( context[17], context[18] ) )
      continue;
    // closed e.First as range 19
    //DEBUG: e.First: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Mul-Normed/4 (/7 '-'/9 e.First/19 )/8 0/14 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 0/1 ]] }
    refalrts::reinit_number(context[1], 0UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Mul-Normed/4 (/7 0/9 )/8 e.AnySecond/2 >/1
  if( ! refalrts::number_term( 0UL, context[9] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.AnySecond as range 2
  //DEBUG: e.AnySecond: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Mul-Normed/4 (/7 0/9 )/8 e.AnySecond/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: 0/1 ]] }
  refalrts::reinit_number(context[1], 0UL);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Mulm_Normed("Mul-Normed", COOKIE1_, COOKIE2_, func_Mulm_Normed);


static refalrts::FnResult func_Mulm_Nat(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & Mul-Nat/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Mul-Nat/4 (/7 e.new1/5 )/8 e.new2/2 s.new3/9 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_right( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Mul-Nat/4 (/7 e.First/10 )/8 s.SecondLast/9 >/1
    context[10] = context[5];
    context[11] = context[6];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.First as range 10
    //DEBUG: s.SecondLast: 9
    //DEBUG: e.First: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Mul-Nat-Line/4 } Tile{ AsIs: e.First/10 } Tile{ AsIs: s.SecondLast/9 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_Mulm_Natm_Line]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[9];
    res = refalrts::splice_evar( res, context[10], context[11] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Mul-Nat/4 (/7 e.First/5 )/8 e.Second/2 s.SecondLast/9 >/1
  // closed e.First as range 5
  // closed e.Second as range 2
  //DEBUG: s.SecondLast: 9
  //DEBUG: e.First: 5
  //DEBUG: e.Second: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </10 & Add-Nat/11 (/12 Tile{ AsIs: </0 AsIs: & Mul-Nat/4 AsIs: (/7 AsIs: e.First/5 AsIs: )/8 } Tile{ AsIs: e.Second/2 } >/13 0/14 )/15 </16 & Mul-Nat-Line/17 e.First/5/18 Tile{ AsIs: s.SecondLast/9 AsIs: >/1 } >/20 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[10]);
  refalrts::alloc_name(vm, context[11], functions[efunc_Addm_Nat]);
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::alloc_number(vm, context[14], 0UL);
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::alloc_open_call(vm, context[16]);
  refalrts::alloc_name(vm, context[17], functions[efunc_Mulm_Natm_Line]);
  refalrts::copy_evar(vm, context[18], context[19], context[5], context[6]);
  refalrts::alloc_close_call(vm, context[20]);
  refalrts::push_stack( vm, context[20] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[16] );
  refalrts::link_brackets( context[12], context[15] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[20] );
  res = refalrts::splice_evar( res, context[9], context[1] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_evar( res, context[13], context[17] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[10], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Mulm_Nat("Mul-Nat", COOKIE1_, COOKIE2_, func_Mulm_Nat);


static refalrts::FnResult func_gen_Mulm_Natm_Line_S2B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & Mul-Nat-Line$2:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Mul-Nat-Line$2:1/4 (/7 e.new1/5 )/8 e.new2/2 s.new3/10 s.new4/9 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_right( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_right( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Mul-Nat-Line$2:1/4 (/7 e.First/11 )/8 s.Second/15 s.MulHigh/10 s.MulLow/9 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.First as range 11
    if( ! refalrts::svar_left( context[15], context[13], context[14] ) )
      continue;
    if( ! refalrts::empty_seq( context[13], context[14] ) )
      continue;
    //DEBUG: s.MulHigh: 10
    //DEBUG: s.MulLow: 9
    //DEBUG: e.First: 11
    //DEBUG: s.Second: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.MulLow/9 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Add-Nat/4 AsIs: (/7 } </16 & Mul-Nat-Line/17 Tile{ AsIs: e.First/11 } Tile{ AsIs: s.Second/15 } >/18 Tile{ AsIs: )/8 } Tile{ AsIs: s.MulHigh/10 } >/19 Tile{ HalfReuse: s.MulLow9 /1 ]] }
    refalrts::alloc_open_call(vm, context[16]);
    refalrts::alloc_name(vm, context[17], functions[efunc_Mulm_Natm_Line]);
    refalrts::alloc_close_call(vm, context[18]);
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::update_name(context[4], functions[efunc_Addm_Nat]);
    refalrts::reinit_svar( context[1], context[9] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_elem( res, context[15] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    refalrts::splice_to_freelist_open( vm, context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Mul-Nat-Line$2:1/4 (/7 e.First/5 )/8 s.Second/10 s.MulLow/9 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.First as range 5
  //DEBUG: s.Second: 10
  //DEBUG: s.MulLow: 9
  //DEBUG: e.First: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.MulLow/9 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Mul-Nat-Line/4 } Tile{ AsIs: e.First/5 } Tile{ AsIs: s.Second/10 } Tile{ HalfReuse: >/8 } Tile{ HalfReuse: s.MulLow9 /1 ]] }
  refalrts::update_name(context[4], functions[efunc_Mulm_Natm_Line]);
  refalrts::reinit_close_call(context[8]);
  refalrts::reinit_svar( context[1], context[9] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_elem( res, context[10] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Mulm_Natm_Line_S2B1("Mul-Nat-Line$2:1", COOKIE1_, COOKIE2_, func_gen_Mulm_Natm_Line_S2B1);


static refalrts::FnResult func_Mulm_Natm_Line(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Mul-Nat-Line/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Mul-Nat-Line/4 e.new1/2 s.new2/6 s.new3/5 >/1
  if( ! refalrts::svar_right( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_right( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new1 as range 2
  do {
    // </0 & Mul-Nat-Line/4 s.FirstLast/6 s.Second/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: s.FirstLast: 6
    //DEBUG: s.Second: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Mul-Digits/4 AsIs: s.FirstLast/6 AsIs: s.Second/5 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_Mulm_Digits]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Mul-Nat-Line/4 e.First/2 s.FirstLast/6 s.Second/5 >/1
  // closed e.First as range 2
  //DEBUG: s.FirstLast: 6
  //DEBUG: s.Second: 5
  //DEBUG: e.First: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Mul-Nat-Line$2:1/4 } (/7 Tile{ AsIs: e.First/2 } )/8 s.Second/5/9 </10 & Mul-Digits/11 Tile{ AsIs: s.FirstLast/6 AsIs: s.Second/5 AsIs: >/1 } >/12 Tile{ ]] }
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_close_bracket(vm, context[8]);
  refalrts::copy_stvar(vm, context[9], context[5]);
  refalrts::alloc_open_call(vm, context[10]);
  refalrts::alloc_name(vm, context[11], functions[efunc_Mulm_Digits]);
  refalrts::alloc_close_call(vm, context[12]);
  refalrts::update_name(context[4], functions[efunc_gen_Mulm_Natm_Line_S2B1]);
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[10] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[6], context[1] );
  res = refalrts::splice_evar( res, context[8], context[11] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Mulm_Natm_Line("Mul-Nat-Line", COOKIE1_, COOKIE2_, func_Mulm_Natm_Line);


static refalrts::FnResult func_Numb(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & Numb/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Numb/4 s.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Numb/4 '-'/7 e.new3/8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::char_term( '-', context[7] ) )
        continue;
      // closed e.new3 as range 8
      do {
        // </0 & Numb/4 '-'/7 s.new4/12 e.new5/10 >/1
        context[10] = context[8];
        context[11] = context[9];
        if( ! refalrts::svar_left( context[12], context[10], context[11] ) )
          continue;
        // closed e.new5 as range 10
        do {
          // </0 & Numb/4 '-'/7 '0'/12 e./13 >/1
          context[13] = context[10];
          context[14] = context[11];
          if( ! refalrts::char_term( '0', context[12] ) )
            continue;
          // closed e. as range 13
          //DEBUG: e.: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Step-Start/4 HalfReuse: >/7 HalfReuse: </12 } & Neg/15 </16 & DoNumb/17 (/18 </19 & Add-Nat/20 (/21 </22 & Mul-Digits/23 0/24 10/25 >/26 )/27 0/28 >/29 )/30 Tile{ AsIs: e./13 } >/31 >/32 </33 & __Step-End/34 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_name(vm, context[15], functions[efunc_Neg]);
          refalrts::alloc_open_call(vm, context[16]);
          refalrts::alloc_name(vm, context[17], functions[efunc_DoNumb]);
          refalrts::alloc_open_bracket(vm, context[18]);
          refalrts::alloc_open_call(vm, context[19]);
          refalrts::alloc_name(vm, context[20], functions[efunc_Addm_Nat]);
          refalrts::alloc_open_bracket(vm, context[21]);
          refalrts::alloc_open_call(vm, context[22]);
          refalrts::alloc_name(vm, context[23], functions[efunc_Mulm_Digits]);
          refalrts::alloc_number(vm, context[24], 0UL);
          refalrts::alloc_number(vm, context[25], 10UL);
          refalrts::alloc_close_call(vm, context[26]);
          refalrts::alloc_close_bracket(vm, context[27]);
          refalrts::alloc_number(vm, context[28], 0UL);
          refalrts::alloc_close_call(vm, context[29]);
          refalrts::alloc_close_bracket(vm, context[30]);
          refalrts::alloc_close_call(vm, context[31]);
          refalrts::alloc_close_call(vm, context[32]);
          refalrts::alloc_open_call(vm, context[33]);
          refalrts::alloc_name(vm, context[34], functions[efunc_u_u_Stepm_End]);
          refalrts::update_name(context[4], functions[efunc_u_u_Stepm_Start]);
          refalrts::reinit_close_call(context[7]);
          refalrts::reinit_open_call(context[12]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[33] );
          refalrts::push_stack( vm, context[32] );
          refalrts::push_stack( vm, context[12] );
          refalrts::push_stack( vm, context[31] );
          refalrts::push_stack( vm, context[16] );
          refalrts::link_brackets( context[18], context[30] );
          refalrts::push_stack( vm, context[29] );
          refalrts::push_stack( vm, context[19] );
          refalrts::link_brackets( context[21], context[27] );
          refalrts::push_stack( vm, context[26] );
          refalrts::push_stack( vm, context[22] );
          refalrts::push_stack( vm, context[7] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[31], context[34] );
          res = refalrts::splice_evar( res, context[13], context[14] );
          res = refalrts::splice_evar( res, context[15], context[30] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Numb/4 '-'/7 '1'/12 e./13 >/1
          context[13] = context[10];
          context[14] = context[11];
          if( ! refalrts::char_term( '1', context[12] ) )
            continue;
          // closed e. as range 13
          //DEBUG: e.: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Step-Start/4 HalfReuse: >/7 HalfReuse: </12 } & Neg/15 </16 & DoNumb/17 (/18 </19 & Add-Nat/20 (/21 </22 & Mul-Digits/23 0/24 10/25 >/26 )/27 1/28 >/29 )/30 Tile{ AsIs: e./13 } >/31 >/32 </33 & __Step-End/34 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_name(vm, context[15], functions[efunc_Neg]);
          refalrts::alloc_open_call(vm, context[16]);
          refalrts::alloc_name(vm, context[17], functions[efunc_DoNumb]);
          refalrts::alloc_open_bracket(vm, context[18]);
          refalrts::alloc_open_call(vm, context[19]);
          refalrts::alloc_name(vm, context[20], functions[efunc_Addm_Nat]);
          refalrts::alloc_open_bracket(vm, context[21]);
          refalrts::alloc_open_call(vm, context[22]);
          refalrts::alloc_name(vm, context[23], functions[efunc_Mulm_Digits]);
          refalrts::alloc_number(vm, context[24], 0UL);
          refalrts::alloc_number(vm, context[25], 10UL);
          refalrts::alloc_close_call(vm, context[26]);
          refalrts::alloc_close_bracket(vm, context[27]);
          refalrts::alloc_number(vm, context[28], 1UL);
          refalrts::alloc_close_call(vm, context[29]);
          refalrts::alloc_close_bracket(vm, context[30]);
          refalrts::alloc_close_call(vm, context[31]);
          refalrts::alloc_close_call(vm, context[32]);
          refalrts::alloc_open_call(vm, context[33]);
          refalrts::alloc_name(vm, context[34], functions[efunc_u_u_Stepm_End]);
          refalrts::update_name(context[4], functions[efunc_u_u_Stepm_Start]);
          refalrts::reinit_close_call(context[7]);
          refalrts::reinit_open_call(context[12]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[33] );
          refalrts::push_stack( vm, context[32] );
          refalrts::push_stack( vm, context[12] );
          refalrts::push_stack( vm, context[31] );
          refalrts::push_stack( vm, context[16] );
          refalrts::link_brackets( context[18], context[30] );
          refalrts::push_stack( vm, context[29] );
          refalrts::push_stack( vm, context[19] );
          refalrts::link_brackets( context[21], context[27] );
          refalrts::push_stack( vm, context[26] );
          refalrts::push_stack( vm, context[22] );
          refalrts::push_stack( vm, context[7] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[31], context[34] );
          res = refalrts::splice_evar( res, context[13], context[14] );
          res = refalrts::splice_evar( res, context[15], context[30] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Numb/4 '-'/7 '2'/12 e./13 >/1
          context[13] = context[10];
          context[14] = context[11];
          if( ! refalrts::char_term( '2', context[12] ) )
            continue;
          // closed e. as range 13
          //DEBUG: e.: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Step-Start/4 HalfReuse: >/7 HalfReuse: </12 } & Neg/15 </16 & DoNumb/17 (/18 </19 & Add-Nat/20 (/21 </22 & Mul-Digits/23 0/24 10/25 >/26 )/27 2/28 >/29 )/30 Tile{ AsIs: e./13 } >/31 >/32 </33 & __Step-End/34 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_name(vm, context[15], functions[efunc_Neg]);
          refalrts::alloc_open_call(vm, context[16]);
          refalrts::alloc_name(vm, context[17], functions[efunc_DoNumb]);
          refalrts::alloc_open_bracket(vm, context[18]);
          refalrts::alloc_open_call(vm, context[19]);
          refalrts::alloc_name(vm, context[20], functions[efunc_Addm_Nat]);
          refalrts::alloc_open_bracket(vm, context[21]);
          refalrts::alloc_open_call(vm, context[22]);
          refalrts::alloc_name(vm, context[23], functions[efunc_Mulm_Digits]);
          refalrts::alloc_number(vm, context[24], 0UL);
          refalrts::alloc_number(vm, context[25], 10UL);
          refalrts::alloc_close_call(vm, context[26]);
          refalrts::alloc_close_bracket(vm, context[27]);
          refalrts::alloc_number(vm, context[28], 2UL);
          refalrts::alloc_close_call(vm, context[29]);
          refalrts::alloc_close_bracket(vm, context[30]);
          refalrts::alloc_close_call(vm, context[31]);
          refalrts::alloc_close_call(vm, context[32]);
          refalrts::alloc_open_call(vm, context[33]);
          refalrts::alloc_name(vm, context[34], functions[efunc_u_u_Stepm_End]);
          refalrts::update_name(context[4], functions[efunc_u_u_Stepm_Start]);
          refalrts::reinit_close_call(context[7]);
          refalrts::reinit_open_call(context[12]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[33] );
          refalrts::push_stack( vm, context[32] );
          refalrts::push_stack( vm, context[12] );
          refalrts::push_stack( vm, context[31] );
          refalrts::push_stack( vm, context[16] );
          refalrts::link_brackets( context[18], context[30] );
          refalrts::push_stack( vm, context[29] );
          refalrts::push_stack( vm, context[19] );
          refalrts::link_brackets( context[21], context[27] );
          refalrts::push_stack( vm, context[26] );
          refalrts::push_stack( vm, context[22] );
          refalrts::push_stack( vm, context[7] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[31], context[34] );
          res = refalrts::splice_evar( res, context[13], context[14] );
          res = refalrts::splice_evar( res, context[15], context[30] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Numb/4 '-'/7 '3'/12 e./13 >/1
          context[13] = context[10];
          context[14] = context[11];
          if( ! refalrts::char_term( '3', context[12] ) )
            continue;
          // closed e. as range 13
          //DEBUG: e.: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Step-Start/4 HalfReuse: >/7 HalfReuse: </12 } & Neg/15 </16 & DoNumb/17 (/18 </19 & Add-Nat/20 (/21 </22 & Mul-Digits/23 0/24 10/25 >/26 )/27 3/28 >/29 )/30 Tile{ AsIs: e./13 } >/31 >/32 </33 & __Step-End/34 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_name(vm, context[15], functions[efunc_Neg]);
          refalrts::alloc_open_call(vm, context[16]);
          refalrts::alloc_name(vm, context[17], functions[efunc_DoNumb]);
          refalrts::alloc_open_bracket(vm, context[18]);
          refalrts::alloc_open_call(vm, context[19]);
          refalrts::alloc_name(vm, context[20], functions[efunc_Addm_Nat]);
          refalrts::alloc_open_bracket(vm, context[21]);
          refalrts::alloc_open_call(vm, context[22]);
          refalrts::alloc_name(vm, context[23], functions[efunc_Mulm_Digits]);
          refalrts::alloc_number(vm, context[24], 0UL);
          refalrts::alloc_number(vm, context[25], 10UL);
          refalrts::alloc_close_call(vm, context[26]);
          refalrts::alloc_close_bracket(vm, context[27]);
          refalrts::alloc_number(vm, context[28], 3UL);
          refalrts::alloc_close_call(vm, context[29]);
          refalrts::alloc_close_bracket(vm, context[30]);
          refalrts::alloc_close_call(vm, context[31]);
          refalrts::alloc_close_call(vm, context[32]);
          refalrts::alloc_open_call(vm, context[33]);
          refalrts::alloc_name(vm, context[34], functions[efunc_u_u_Stepm_End]);
          refalrts::update_name(context[4], functions[efunc_u_u_Stepm_Start]);
          refalrts::reinit_close_call(context[7]);
          refalrts::reinit_open_call(context[12]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[33] );
          refalrts::push_stack( vm, context[32] );
          refalrts::push_stack( vm, context[12] );
          refalrts::push_stack( vm, context[31] );
          refalrts::push_stack( vm, context[16] );
          refalrts::link_brackets( context[18], context[30] );
          refalrts::push_stack( vm, context[29] );
          refalrts::push_stack( vm, context[19] );
          refalrts::link_brackets( context[21], context[27] );
          refalrts::push_stack( vm, context[26] );
          refalrts::push_stack( vm, context[22] );
          refalrts::push_stack( vm, context[7] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[31], context[34] );
          res = refalrts::splice_evar( res, context[13], context[14] );
          res = refalrts::splice_evar( res, context[15], context[30] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Numb/4 '-'/7 '4'/12 e./13 >/1
          context[13] = context[10];
          context[14] = context[11];
          if( ! refalrts::char_term( '4', context[12] ) )
            continue;
          // closed e. as range 13
          //DEBUG: e.: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Step-Start/4 HalfReuse: >/7 HalfReuse: </12 } & Neg/15 </16 & DoNumb/17 (/18 </19 & Add-Nat/20 (/21 </22 & Mul-Digits/23 0/24 10/25 >/26 )/27 4/28 >/29 )/30 Tile{ AsIs: e./13 } >/31 >/32 </33 & __Step-End/34 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_name(vm, context[15], functions[efunc_Neg]);
          refalrts::alloc_open_call(vm, context[16]);
          refalrts::alloc_name(vm, context[17], functions[efunc_DoNumb]);
          refalrts::alloc_open_bracket(vm, context[18]);
          refalrts::alloc_open_call(vm, context[19]);
          refalrts::alloc_name(vm, context[20], functions[efunc_Addm_Nat]);
          refalrts::alloc_open_bracket(vm, context[21]);
          refalrts::alloc_open_call(vm, context[22]);
          refalrts::alloc_name(vm, context[23], functions[efunc_Mulm_Digits]);
          refalrts::alloc_number(vm, context[24], 0UL);
          refalrts::alloc_number(vm, context[25], 10UL);
          refalrts::alloc_close_call(vm, context[26]);
          refalrts::alloc_close_bracket(vm, context[27]);
          refalrts::alloc_number(vm, context[28], 4UL);
          refalrts::alloc_close_call(vm, context[29]);
          refalrts::alloc_close_bracket(vm, context[30]);
          refalrts::alloc_close_call(vm, context[31]);
          refalrts::alloc_close_call(vm, context[32]);
          refalrts::alloc_open_call(vm, context[33]);
          refalrts::alloc_name(vm, context[34], functions[efunc_u_u_Stepm_End]);
          refalrts::update_name(context[4], functions[efunc_u_u_Stepm_Start]);
          refalrts::reinit_close_call(context[7]);
          refalrts::reinit_open_call(context[12]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[33] );
          refalrts::push_stack( vm, context[32] );
          refalrts::push_stack( vm, context[12] );
          refalrts::push_stack( vm, context[31] );
          refalrts::push_stack( vm, context[16] );
          refalrts::link_brackets( context[18], context[30] );
          refalrts::push_stack( vm, context[29] );
          refalrts::push_stack( vm, context[19] );
          refalrts::link_brackets( context[21], context[27] );
          refalrts::push_stack( vm, context[26] );
          refalrts::push_stack( vm, context[22] );
          refalrts::push_stack( vm, context[7] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[31], context[34] );
          res = refalrts::splice_evar( res, context[13], context[14] );
          res = refalrts::splice_evar( res, context[15], context[30] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Numb/4 '-'/7 '5'/12 e./13 >/1
          context[13] = context[10];
          context[14] = context[11];
          if( ! refalrts::char_term( '5', context[12] ) )
            continue;
          // closed e. as range 13
          //DEBUG: e.: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Step-Start/4 HalfReuse: >/7 HalfReuse: </12 } & Neg/15 </16 & DoNumb/17 (/18 </19 & Add-Nat/20 (/21 </22 & Mul-Digits/23 0/24 10/25 >/26 )/27 5/28 >/29 )/30 Tile{ AsIs: e./13 } >/31 >/32 </33 & __Step-End/34 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_name(vm, context[15], functions[efunc_Neg]);
          refalrts::alloc_open_call(vm, context[16]);
          refalrts::alloc_name(vm, context[17], functions[efunc_DoNumb]);
          refalrts::alloc_open_bracket(vm, context[18]);
          refalrts::alloc_open_call(vm, context[19]);
          refalrts::alloc_name(vm, context[20], functions[efunc_Addm_Nat]);
          refalrts::alloc_open_bracket(vm, context[21]);
          refalrts::alloc_open_call(vm, context[22]);
          refalrts::alloc_name(vm, context[23], functions[efunc_Mulm_Digits]);
          refalrts::alloc_number(vm, context[24], 0UL);
          refalrts::alloc_number(vm, context[25], 10UL);
          refalrts::alloc_close_call(vm, context[26]);
          refalrts::alloc_close_bracket(vm, context[27]);
          refalrts::alloc_number(vm, context[28], 5UL);
          refalrts::alloc_close_call(vm, context[29]);
          refalrts::alloc_close_bracket(vm, context[30]);
          refalrts::alloc_close_call(vm, context[31]);
          refalrts::alloc_close_call(vm, context[32]);
          refalrts::alloc_open_call(vm, context[33]);
          refalrts::alloc_name(vm, context[34], functions[efunc_u_u_Stepm_End]);
          refalrts::update_name(context[4], functions[efunc_u_u_Stepm_Start]);
          refalrts::reinit_close_call(context[7]);
          refalrts::reinit_open_call(context[12]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[33] );
          refalrts::push_stack( vm, context[32] );
          refalrts::push_stack( vm, context[12] );
          refalrts::push_stack( vm, context[31] );
          refalrts::push_stack( vm, context[16] );
          refalrts::link_brackets( context[18], context[30] );
          refalrts::push_stack( vm, context[29] );
          refalrts::push_stack( vm, context[19] );
          refalrts::link_brackets( context[21], context[27] );
          refalrts::push_stack( vm, context[26] );
          refalrts::push_stack( vm, context[22] );
          refalrts::push_stack( vm, context[7] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[31], context[34] );
          res = refalrts::splice_evar( res, context[13], context[14] );
          res = refalrts::splice_evar( res, context[15], context[30] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Numb/4 '-'/7 '6'/12 e./13 >/1
          context[13] = context[10];
          context[14] = context[11];
          if( ! refalrts::char_term( '6', context[12] ) )
            continue;
          // closed e. as range 13
          //DEBUG: e.: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Step-Start/4 HalfReuse: >/7 HalfReuse: </12 } & Neg/15 </16 & DoNumb/17 (/18 </19 & Add-Nat/20 (/21 </22 & Mul-Digits/23 0/24 10/25 >/26 )/27 6/28 >/29 )/30 Tile{ AsIs: e./13 } >/31 >/32 </33 & __Step-End/34 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_name(vm, context[15], functions[efunc_Neg]);
          refalrts::alloc_open_call(vm, context[16]);
          refalrts::alloc_name(vm, context[17], functions[efunc_DoNumb]);
          refalrts::alloc_open_bracket(vm, context[18]);
          refalrts::alloc_open_call(vm, context[19]);
          refalrts::alloc_name(vm, context[20], functions[efunc_Addm_Nat]);
          refalrts::alloc_open_bracket(vm, context[21]);
          refalrts::alloc_open_call(vm, context[22]);
          refalrts::alloc_name(vm, context[23], functions[efunc_Mulm_Digits]);
          refalrts::alloc_number(vm, context[24], 0UL);
          refalrts::alloc_number(vm, context[25], 10UL);
          refalrts::alloc_close_call(vm, context[26]);
          refalrts::alloc_close_bracket(vm, context[27]);
          refalrts::alloc_number(vm, context[28], 6UL);
          refalrts::alloc_close_call(vm, context[29]);
          refalrts::alloc_close_bracket(vm, context[30]);
          refalrts::alloc_close_call(vm, context[31]);
          refalrts::alloc_close_call(vm, context[32]);
          refalrts::alloc_open_call(vm, context[33]);
          refalrts::alloc_name(vm, context[34], functions[efunc_u_u_Stepm_End]);
          refalrts::update_name(context[4], functions[efunc_u_u_Stepm_Start]);
          refalrts::reinit_close_call(context[7]);
          refalrts::reinit_open_call(context[12]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[33] );
          refalrts::push_stack( vm, context[32] );
          refalrts::push_stack( vm, context[12] );
          refalrts::push_stack( vm, context[31] );
          refalrts::push_stack( vm, context[16] );
          refalrts::link_brackets( context[18], context[30] );
          refalrts::push_stack( vm, context[29] );
          refalrts::push_stack( vm, context[19] );
          refalrts::link_brackets( context[21], context[27] );
          refalrts::push_stack( vm, context[26] );
          refalrts::push_stack( vm, context[22] );
          refalrts::push_stack( vm, context[7] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[31], context[34] );
          res = refalrts::splice_evar( res, context[13], context[14] );
          res = refalrts::splice_evar( res, context[15], context[30] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Numb/4 '-'/7 '7'/12 e./13 >/1
          context[13] = context[10];
          context[14] = context[11];
          if( ! refalrts::char_term( '7', context[12] ) )
            continue;
          // closed e. as range 13
          //DEBUG: e.: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Step-Start/4 HalfReuse: >/7 HalfReuse: </12 } & Neg/15 </16 & DoNumb/17 (/18 </19 & Add-Nat/20 (/21 </22 & Mul-Digits/23 0/24 10/25 >/26 )/27 7/28 >/29 )/30 Tile{ AsIs: e./13 } >/31 >/32 </33 & __Step-End/34 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_name(vm, context[15], functions[efunc_Neg]);
          refalrts::alloc_open_call(vm, context[16]);
          refalrts::alloc_name(vm, context[17], functions[efunc_DoNumb]);
          refalrts::alloc_open_bracket(vm, context[18]);
          refalrts::alloc_open_call(vm, context[19]);
          refalrts::alloc_name(vm, context[20], functions[efunc_Addm_Nat]);
          refalrts::alloc_open_bracket(vm, context[21]);
          refalrts::alloc_open_call(vm, context[22]);
          refalrts::alloc_name(vm, context[23], functions[efunc_Mulm_Digits]);
          refalrts::alloc_number(vm, context[24], 0UL);
          refalrts::alloc_number(vm, context[25], 10UL);
          refalrts::alloc_close_call(vm, context[26]);
          refalrts::alloc_close_bracket(vm, context[27]);
          refalrts::alloc_number(vm, context[28], 7UL);
          refalrts::alloc_close_call(vm, context[29]);
          refalrts::alloc_close_bracket(vm, context[30]);
          refalrts::alloc_close_call(vm, context[31]);
          refalrts::alloc_close_call(vm, context[32]);
          refalrts::alloc_open_call(vm, context[33]);
          refalrts::alloc_name(vm, context[34], functions[efunc_u_u_Stepm_End]);
          refalrts::update_name(context[4], functions[efunc_u_u_Stepm_Start]);
          refalrts::reinit_close_call(context[7]);
          refalrts::reinit_open_call(context[12]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[33] );
          refalrts::push_stack( vm, context[32] );
          refalrts::push_stack( vm, context[12] );
          refalrts::push_stack( vm, context[31] );
          refalrts::push_stack( vm, context[16] );
          refalrts::link_brackets( context[18], context[30] );
          refalrts::push_stack( vm, context[29] );
          refalrts::push_stack( vm, context[19] );
          refalrts::link_brackets( context[21], context[27] );
          refalrts::push_stack( vm, context[26] );
          refalrts::push_stack( vm, context[22] );
          refalrts::push_stack( vm, context[7] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[31], context[34] );
          res = refalrts::splice_evar( res, context[13], context[14] );
          res = refalrts::splice_evar( res, context[15], context[30] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Numb/4 '-'/7 '8'/12 e./13 >/1
          context[13] = context[10];
          context[14] = context[11];
          if( ! refalrts::char_term( '8', context[12] ) )
            continue;
          // closed e. as range 13
          //DEBUG: e.: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Step-Start/4 HalfReuse: >/7 HalfReuse: </12 } & Neg/15 </16 & DoNumb/17 (/18 </19 & Add-Nat/20 (/21 </22 & Mul-Digits/23 0/24 10/25 >/26 )/27 8/28 >/29 )/30 Tile{ AsIs: e./13 } >/31 >/32 </33 & __Step-End/34 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_name(vm, context[15], functions[efunc_Neg]);
          refalrts::alloc_open_call(vm, context[16]);
          refalrts::alloc_name(vm, context[17], functions[efunc_DoNumb]);
          refalrts::alloc_open_bracket(vm, context[18]);
          refalrts::alloc_open_call(vm, context[19]);
          refalrts::alloc_name(vm, context[20], functions[efunc_Addm_Nat]);
          refalrts::alloc_open_bracket(vm, context[21]);
          refalrts::alloc_open_call(vm, context[22]);
          refalrts::alloc_name(vm, context[23], functions[efunc_Mulm_Digits]);
          refalrts::alloc_number(vm, context[24], 0UL);
          refalrts::alloc_number(vm, context[25], 10UL);
          refalrts::alloc_close_call(vm, context[26]);
          refalrts::alloc_close_bracket(vm, context[27]);
          refalrts::alloc_number(vm, context[28], 8UL);
          refalrts::alloc_close_call(vm, context[29]);
          refalrts::alloc_close_bracket(vm, context[30]);
          refalrts::alloc_close_call(vm, context[31]);
          refalrts::alloc_close_call(vm, context[32]);
          refalrts::alloc_open_call(vm, context[33]);
          refalrts::alloc_name(vm, context[34], functions[efunc_u_u_Stepm_End]);
          refalrts::update_name(context[4], functions[efunc_u_u_Stepm_Start]);
          refalrts::reinit_close_call(context[7]);
          refalrts::reinit_open_call(context[12]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[33] );
          refalrts::push_stack( vm, context[32] );
          refalrts::push_stack( vm, context[12] );
          refalrts::push_stack( vm, context[31] );
          refalrts::push_stack( vm, context[16] );
          refalrts::link_brackets( context[18], context[30] );
          refalrts::push_stack( vm, context[29] );
          refalrts::push_stack( vm, context[19] );
          refalrts::link_brackets( context[21], context[27] );
          refalrts::push_stack( vm, context[26] );
          refalrts::push_stack( vm, context[22] );
          refalrts::push_stack( vm, context[7] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[31], context[34] );
          res = refalrts::splice_evar( res, context[13], context[14] );
          res = refalrts::splice_evar( res, context[15], context[30] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Numb/4 '-'/7 '9'/12 e./13 >/1
        context[13] = context[10];
        context[14] = context[11];
        if( ! refalrts::char_term( '9', context[12] ) )
          continue;
        // closed e. as range 13
        //DEBUG: e.: 13

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Step-Start/4 HalfReuse: >/7 HalfReuse: </12 } & Neg/15 </16 & DoNumb/17 (/18 </19 & Add-Nat/20 (/21 </22 & Mul-Digits/23 0/24 10/25 >/26 )/27 9/28 >/29 )/30 Tile{ AsIs: e./13 } >/31 >/32 </33 & __Step-End/34 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_name(vm, context[15], functions[efunc_Neg]);
        refalrts::alloc_open_call(vm, context[16]);
        refalrts::alloc_name(vm, context[17], functions[efunc_DoNumb]);
        refalrts::alloc_open_bracket(vm, context[18]);
        refalrts::alloc_open_call(vm, context[19]);
        refalrts::alloc_name(vm, context[20], functions[efunc_Addm_Nat]);
        refalrts::alloc_open_bracket(vm, context[21]);
        refalrts::alloc_open_call(vm, context[22]);
        refalrts::alloc_name(vm, context[23], functions[efunc_Mulm_Digits]);
        refalrts::alloc_number(vm, context[24], 0UL);
        refalrts::alloc_number(vm, context[25], 10UL);
        refalrts::alloc_close_call(vm, context[26]);
        refalrts::alloc_close_bracket(vm, context[27]);
        refalrts::alloc_number(vm, context[28], 9UL);
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::alloc_close_bracket(vm, context[30]);
        refalrts::alloc_close_call(vm, context[31]);
        refalrts::alloc_close_call(vm, context[32]);
        refalrts::alloc_open_call(vm, context[33]);
        refalrts::alloc_name(vm, context[34], functions[efunc_u_u_Stepm_End]);
        refalrts::update_name(context[4], functions[efunc_u_u_Stepm_Start]);
        refalrts::reinit_close_call(context[7]);
        refalrts::reinit_open_call(context[12]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[33] );
        refalrts::push_stack( vm, context[32] );
        refalrts::push_stack( vm, context[12] );
        refalrts::push_stack( vm, context[31] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[18], context[30] );
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[19] );
        refalrts::link_brackets( context[21], context[27] );
        refalrts::push_stack( vm, context[26] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[7] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[31], context[34] );
        res = refalrts::splice_evar( res, context[13], context[14] );
        res = refalrts::splice_evar( res, context[15], context[30] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Numb/4 '-'/7 e.String/10 >/1
      context[10] = context[8];
      context[11] = context[9];
      // closed e.String as range 10
      //DEBUG: e.String: 10

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} e.String/10 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Step-Start/4 HalfReuse: >/7 } 0/12 </13 & __Step-End/14 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[12], 0UL);
      refalrts::alloc_open_call(vm, context[13]);
      refalrts::alloc_name(vm, context[14], functions[efunc_u_u_Stepm_End]);
      refalrts::update_name(context[4], functions[efunc_u_u_Stepm_Start]);
      refalrts::reinit_close_call(context[7]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[12], context[14] );
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Numb/4 '+'/7 e.new3/8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::char_term( '+', context[7] ) )
        continue;
      // closed e.new3 as range 8
      do {
        // </0 & Numb/4 '+'/7 s.new4/12 e.new5/10 >/1
        context[10] = context[8];
        context[11] = context[9];
        if( ! refalrts::svar_left( context[12], context[10], context[11] ) )
          continue;
        // closed e.new5 as range 10
        do {
          // </0 & Numb/4 '+'/7 '0'/12 e./13 >/1
          context[13] = context[10];
          context[14] = context[11];
          if( ! refalrts::char_term( '0', context[12] ) )
            continue;
          // closed e. as range 13
          //DEBUG: e.: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Step-Start/4 HalfReuse: >/7 HalfReuse: </12 } & DoNumb/15 (/16 </17 & Add-Nat/18 (/19 </20 & Mul-Digits/21 0/22 10/23 >/24 )/25 0/26 >/27 )/28 Tile{ AsIs: e./13 } >/29 </30 & __Step-End/31 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_name(vm, context[15], functions[efunc_DoNumb]);
          refalrts::alloc_open_bracket(vm, context[16]);
          refalrts::alloc_open_call(vm, context[17]);
          refalrts::alloc_name(vm, context[18], functions[efunc_Addm_Nat]);
          refalrts::alloc_open_bracket(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Mulm_Digits]);
          refalrts::alloc_number(vm, context[22], 0UL);
          refalrts::alloc_number(vm, context[23], 10UL);
          refalrts::alloc_close_call(vm, context[24]);
          refalrts::alloc_close_bracket(vm, context[25]);
          refalrts::alloc_number(vm, context[26], 0UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::alloc_close_bracket(vm, context[28]);
          refalrts::alloc_close_call(vm, context[29]);
          refalrts::alloc_open_call(vm, context[30]);
          refalrts::alloc_name(vm, context[31], functions[efunc_u_u_Stepm_End]);
          refalrts::update_name(context[4], functions[efunc_u_u_Stepm_Start]);
          refalrts::reinit_close_call(context[7]);
          refalrts::reinit_open_call(context[12]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[29] );
          refalrts::push_stack( vm, context[12] );
          refalrts::link_brackets( context[16], context[28] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[17] );
          refalrts::link_brackets( context[19], context[25] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[7] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[29], context[31] );
          res = refalrts::splice_evar( res, context[13], context[14] );
          res = refalrts::splice_evar( res, context[15], context[28] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Numb/4 '+'/7 '1'/12 e./13 >/1
          context[13] = context[10];
          context[14] = context[11];
          if( ! refalrts::char_term( '1', context[12] ) )
            continue;
          // closed e. as range 13
          //DEBUG: e.: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Step-Start/4 HalfReuse: >/7 HalfReuse: </12 } & DoNumb/15 (/16 </17 & Add-Nat/18 (/19 </20 & Mul-Digits/21 0/22 10/23 >/24 )/25 1/26 >/27 )/28 Tile{ AsIs: e./13 } >/29 </30 & __Step-End/31 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_name(vm, context[15], functions[efunc_DoNumb]);
          refalrts::alloc_open_bracket(vm, context[16]);
          refalrts::alloc_open_call(vm, context[17]);
          refalrts::alloc_name(vm, context[18], functions[efunc_Addm_Nat]);
          refalrts::alloc_open_bracket(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Mulm_Digits]);
          refalrts::alloc_number(vm, context[22], 0UL);
          refalrts::alloc_number(vm, context[23], 10UL);
          refalrts::alloc_close_call(vm, context[24]);
          refalrts::alloc_close_bracket(vm, context[25]);
          refalrts::alloc_number(vm, context[26], 1UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::alloc_close_bracket(vm, context[28]);
          refalrts::alloc_close_call(vm, context[29]);
          refalrts::alloc_open_call(vm, context[30]);
          refalrts::alloc_name(vm, context[31], functions[efunc_u_u_Stepm_End]);
          refalrts::update_name(context[4], functions[efunc_u_u_Stepm_Start]);
          refalrts::reinit_close_call(context[7]);
          refalrts::reinit_open_call(context[12]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[29] );
          refalrts::push_stack( vm, context[12] );
          refalrts::link_brackets( context[16], context[28] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[17] );
          refalrts::link_brackets( context[19], context[25] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[7] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[29], context[31] );
          res = refalrts::splice_evar( res, context[13], context[14] );
          res = refalrts::splice_evar( res, context[15], context[28] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Numb/4 '+'/7 '2'/12 e./13 >/1
          context[13] = context[10];
          context[14] = context[11];
          if( ! refalrts::char_term( '2', context[12] ) )
            continue;
          // closed e. as range 13
          //DEBUG: e.: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Step-Start/4 HalfReuse: >/7 HalfReuse: </12 } & DoNumb/15 (/16 </17 & Add-Nat/18 (/19 </20 & Mul-Digits/21 0/22 10/23 >/24 )/25 2/26 >/27 )/28 Tile{ AsIs: e./13 } >/29 </30 & __Step-End/31 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_name(vm, context[15], functions[efunc_DoNumb]);
          refalrts::alloc_open_bracket(vm, context[16]);
          refalrts::alloc_open_call(vm, context[17]);
          refalrts::alloc_name(vm, context[18], functions[efunc_Addm_Nat]);
          refalrts::alloc_open_bracket(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Mulm_Digits]);
          refalrts::alloc_number(vm, context[22], 0UL);
          refalrts::alloc_number(vm, context[23], 10UL);
          refalrts::alloc_close_call(vm, context[24]);
          refalrts::alloc_close_bracket(vm, context[25]);
          refalrts::alloc_number(vm, context[26], 2UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::alloc_close_bracket(vm, context[28]);
          refalrts::alloc_close_call(vm, context[29]);
          refalrts::alloc_open_call(vm, context[30]);
          refalrts::alloc_name(vm, context[31], functions[efunc_u_u_Stepm_End]);
          refalrts::update_name(context[4], functions[efunc_u_u_Stepm_Start]);
          refalrts::reinit_close_call(context[7]);
          refalrts::reinit_open_call(context[12]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[29] );
          refalrts::push_stack( vm, context[12] );
          refalrts::link_brackets( context[16], context[28] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[17] );
          refalrts::link_brackets( context[19], context[25] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[7] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[29], context[31] );
          res = refalrts::splice_evar( res, context[13], context[14] );
          res = refalrts::splice_evar( res, context[15], context[28] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Numb/4 '+'/7 '3'/12 e./13 >/1
          context[13] = context[10];
          context[14] = context[11];
          if( ! refalrts::char_term( '3', context[12] ) )
            continue;
          // closed e. as range 13
          //DEBUG: e.: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Step-Start/4 HalfReuse: >/7 HalfReuse: </12 } & DoNumb/15 (/16 </17 & Add-Nat/18 (/19 </20 & Mul-Digits/21 0/22 10/23 >/24 )/25 3/26 >/27 )/28 Tile{ AsIs: e./13 } >/29 </30 & __Step-End/31 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_name(vm, context[15], functions[efunc_DoNumb]);
          refalrts::alloc_open_bracket(vm, context[16]);
          refalrts::alloc_open_call(vm, context[17]);
          refalrts::alloc_name(vm, context[18], functions[efunc_Addm_Nat]);
          refalrts::alloc_open_bracket(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Mulm_Digits]);
          refalrts::alloc_number(vm, context[22], 0UL);
          refalrts::alloc_number(vm, context[23], 10UL);
          refalrts::alloc_close_call(vm, context[24]);
          refalrts::alloc_close_bracket(vm, context[25]);
          refalrts::alloc_number(vm, context[26], 3UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::alloc_close_bracket(vm, context[28]);
          refalrts::alloc_close_call(vm, context[29]);
          refalrts::alloc_open_call(vm, context[30]);
          refalrts::alloc_name(vm, context[31], functions[efunc_u_u_Stepm_End]);
          refalrts::update_name(context[4], functions[efunc_u_u_Stepm_Start]);
          refalrts::reinit_close_call(context[7]);
          refalrts::reinit_open_call(context[12]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[29] );
          refalrts::push_stack( vm, context[12] );
          refalrts::link_brackets( context[16], context[28] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[17] );
          refalrts::link_brackets( context[19], context[25] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[7] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[29], context[31] );
          res = refalrts::splice_evar( res, context[13], context[14] );
          res = refalrts::splice_evar( res, context[15], context[28] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Numb/4 '+'/7 '4'/12 e./13 >/1
          context[13] = context[10];
          context[14] = context[11];
          if( ! refalrts::char_term( '4', context[12] ) )
            continue;
          // closed e. as range 13
          //DEBUG: e.: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Step-Start/4 HalfReuse: >/7 HalfReuse: </12 } & DoNumb/15 (/16 </17 & Add-Nat/18 (/19 </20 & Mul-Digits/21 0/22 10/23 >/24 )/25 4/26 >/27 )/28 Tile{ AsIs: e./13 } >/29 </30 & __Step-End/31 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_name(vm, context[15], functions[efunc_DoNumb]);
          refalrts::alloc_open_bracket(vm, context[16]);
          refalrts::alloc_open_call(vm, context[17]);
          refalrts::alloc_name(vm, context[18], functions[efunc_Addm_Nat]);
          refalrts::alloc_open_bracket(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Mulm_Digits]);
          refalrts::alloc_number(vm, context[22], 0UL);
          refalrts::alloc_number(vm, context[23], 10UL);
          refalrts::alloc_close_call(vm, context[24]);
          refalrts::alloc_close_bracket(vm, context[25]);
          refalrts::alloc_number(vm, context[26], 4UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::alloc_close_bracket(vm, context[28]);
          refalrts::alloc_close_call(vm, context[29]);
          refalrts::alloc_open_call(vm, context[30]);
          refalrts::alloc_name(vm, context[31], functions[efunc_u_u_Stepm_End]);
          refalrts::update_name(context[4], functions[efunc_u_u_Stepm_Start]);
          refalrts::reinit_close_call(context[7]);
          refalrts::reinit_open_call(context[12]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[29] );
          refalrts::push_stack( vm, context[12] );
          refalrts::link_brackets( context[16], context[28] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[17] );
          refalrts::link_brackets( context[19], context[25] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[7] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[29], context[31] );
          res = refalrts::splice_evar( res, context[13], context[14] );
          res = refalrts::splice_evar( res, context[15], context[28] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Numb/4 '+'/7 '5'/12 e./13 >/1
          context[13] = context[10];
          context[14] = context[11];
          if( ! refalrts::char_term( '5', context[12] ) )
            continue;
          // closed e. as range 13
          //DEBUG: e.: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Step-Start/4 HalfReuse: >/7 HalfReuse: </12 } & DoNumb/15 (/16 </17 & Add-Nat/18 (/19 </20 & Mul-Digits/21 0/22 10/23 >/24 )/25 5/26 >/27 )/28 Tile{ AsIs: e./13 } >/29 </30 & __Step-End/31 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_name(vm, context[15], functions[efunc_DoNumb]);
          refalrts::alloc_open_bracket(vm, context[16]);
          refalrts::alloc_open_call(vm, context[17]);
          refalrts::alloc_name(vm, context[18], functions[efunc_Addm_Nat]);
          refalrts::alloc_open_bracket(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Mulm_Digits]);
          refalrts::alloc_number(vm, context[22], 0UL);
          refalrts::alloc_number(vm, context[23], 10UL);
          refalrts::alloc_close_call(vm, context[24]);
          refalrts::alloc_close_bracket(vm, context[25]);
          refalrts::alloc_number(vm, context[26], 5UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::alloc_close_bracket(vm, context[28]);
          refalrts::alloc_close_call(vm, context[29]);
          refalrts::alloc_open_call(vm, context[30]);
          refalrts::alloc_name(vm, context[31], functions[efunc_u_u_Stepm_End]);
          refalrts::update_name(context[4], functions[efunc_u_u_Stepm_Start]);
          refalrts::reinit_close_call(context[7]);
          refalrts::reinit_open_call(context[12]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[29] );
          refalrts::push_stack( vm, context[12] );
          refalrts::link_brackets( context[16], context[28] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[17] );
          refalrts::link_brackets( context[19], context[25] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[7] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[29], context[31] );
          res = refalrts::splice_evar( res, context[13], context[14] );
          res = refalrts::splice_evar( res, context[15], context[28] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Numb/4 '+'/7 '6'/12 e./13 >/1
          context[13] = context[10];
          context[14] = context[11];
          if( ! refalrts::char_term( '6', context[12] ) )
            continue;
          // closed e. as range 13
          //DEBUG: e.: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Step-Start/4 HalfReuse: >/7 HalfReuse: </12 } & DoNumb/15 (/16 </17 & Add-Nat/18 (/19 </20 & Mul-Digits/21 0/22 10/23 >/24 )/25 6/26 >/27 )/28 Tile{ AsIs: e./13 } >/29 </30 & __Step-End/31 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_name(vm, context[15], functions[efunc_DoNumb]);
          refalrts::alloc_open_bracket(vm, context[16]);
          refalrts::alloc_open_call(vm, context[17]);
          refalrts::alloc_name(vm, context[18], functions[efunc_Addm_Nat]);
          refalrts::alloc_open_bracket(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Mulm_Digits]);
          refalrts::alloc_number(vm, context[22], 0UL);
          refalrts::alloc_number(vm, context[23], 10UL);
          refalrts::alloc_close_call(vm, context[24]);
          refalrts::alloc_close_bracket(vm, context[25]);
          refalrts::alloc_number(vm, context[26], 6UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::alloc_close_bracket(vm, context[28]);
          refalrts::alloc_close_call(vm, context[29]);
          refalrts::alloc_open_call(vm, context[30]);
          refalrts::alloc_name(vm, context[31], functions[efunc_u_u_Stepm_End]);
          refalrts::update_name(context[4], functions[efunc_u_u_Stepm_Start]);
          refalrts::reinit_close_call(context[7]);
          refalrts::reinit_open_call(context[12]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[29] );
          refalrts::push_stack( vm, context[12] );
          refalrts::link_brackets( context[16], context[28] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[17] );
          refalrts::link_brackets( context[19], context[25] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[7] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[29], context[31] );
          res = refalrts::splice_evar( res, context[13], context[14] );
          res = refalrts::splice_evar( res, context[15], context[28] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Numb/4 '+'/7 '7'/12 e./13 >/1
          context[13] = context[10];
          context[14] = context[11];
          if( ! refalrts::char_term( '7', context[12] ) )
            continue;
          // closed e. as range 13
          //DEBUG: e.: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Step-Start/4 HalfReuse: >/7 HalfReuse: </12 } & DoNumb/15 (/16 </17 & Add-Nat/18 (/19 </20 & Mul-Digits/21 0/22 10/23 >/24 )/25 7/26 >/27 )/28 Tile{ AsIs: e./13 } >/29 </30 & __Step-End/31 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_name(vm, context[15], functions[efunc_DoNumb]);
          refalrts::alloc_open_bracket(vm, context[16]);
          refalrts::alloc_open_call(vm, context[17]);
          refalrts::alloc_name(vm, context[18], functions[efunc_Addm_Nat]);
          refalrts::alloc_open_bracket(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Mulm_Digits]);
          refalrts::alloc_number(vm, context[22], 0UL);
          refalrts::alloc_number(vm, context[23], 10UL);
          refalrts::alloc_close_call(vm, context[24]);
          refalrts::alloc_close_bracket(vm, context[25]);
          refalrts::alloc_number(vm, context[26], 7UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::alloc_close_bracket(vm, context[28]);
          refalrts::alloc_close_call(vm, context[29]);
          refalrts::alloc_open_call(vm, context[30]);
          refalrts::alloc_name(vm, context[31], functions[efunc_u_u_Stepm_End]);
          refalrts::update_name(context[4], functions[efunc_u_u_Stepm_Start]);
          refalrts::reinit_close_call(context[7]);
          refalrts::reinit_open_call(context[12]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[29] );
          refalrts::push_stack( vm, context[12] );
          refalrts::link_brackets( context[16], context[28] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[17] );
          refalrts::link_brackets( context[19], context[25] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[7] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[29], context[31] );
          res = refalrts::splice_evar( res, context[13], context[14] );
          res = refalrts::splice_evar( res, context[15], context[28] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Numb/4 '+'/7 '8'/12 e./13 >/1
          context[13] = context[10];
          context[14] = context[11];
          if( ! refalrts::char_term( '8', context[12] ) )
            continue;
          // closed e. as range 13
          //DEBUG: e.: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Step-Start/4 HalfReuse: >/7 HalfReuse: </12 } & DoNumb/15 (/16 </17 & Add-Nat/18 (/19 </20 & Mul-Digits/21 0/22 10/23 >/24 )/25 8/26 >/27 )/28 Tile{ AsIs: e./13 } >/29 </30 & __Step-End/31 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_name(vm, context[15], functions[efunc_DoNumb]);
          refalrts::alloc_open_bracket(vm, context[16]);
          refalrts::alloc_open_call(vm, context[17]);
          refalrts::alloc_name(vm, context[18], functions[efunc_Addm_Nat]);
          refalrts::alloc_open_bracket(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Mulm_Digits]);
          refalrts::alloc_number(vm, context[22], 0UL);
          refalrts::alloc_number(vm, context[23], 10UL);
          refalrts::alloc_close_call(vm, context[24]);
          refalrts::alloc_close_bracket(vm, context[25]);
          refalrts::alloc_number(vm, context[26], 8UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::alloc_close_bracket(vm, context[28]);
          refalrts::alloc_close_call(vm, context[29]);
          refalrts::alloc_open_call(vm, context[30]);
          refalrts::alloc_name(vm, context[31], functions[efunc_u_u_Stepm_End]);
          refalrts::update_name(context[4], functions[efunc_u_u_Stepm_Start]);
          refalrts::reinit_close_call(context[7]);
          refalrts::reinit_open_call(context[12]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[29] );
          refalrts::push_stack( vm, context[12] );
          refalrts::link_brackets( context[16], context[28] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[17] );
          refalrts::link_brackets( context[19], context[25] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[7] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[29], context[31] );
          res = refalrts::splice_evar( res, context[13], context[14] );
          res = refalrts::splice_evar( res, context[15], context[28] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Numb/4 '+'/7 '9'/12 e./13 >/1
        context[13] = context[10];
        context[14] = context[11];
        if( ! refalrts::char_term( '9', context[12] ) )
          continue;
        // closed e. as range 13
        //DEBUG: e.: 13

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Step-Start/4 HalfReuse: >/7 HalfReuse: </12 } & DoNumb/15 (/16 </17 & Add-Nat/18 (/19 </20 & Mul-Digits/21 0/22 10/23 >/24 )/25 9/26 >/27 )/28 Tile{ AsIs: e./13 } >/29 </30 & __Step-End/31 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_name(vm, context[15], functions[efunc_DoNumb]);
        refalrts::alloc_open_bracket(vm, context[16]);
        refalrts::alloc_open_call(vm, context[17]);
        refalrts::alloc_name(vm, context[18], functions[efunc_Addm_Nat]);
        refalrts::alloc_open_bracket(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Mulm_Digits]);
        refalrts::alloc_number(vm, context[22], 0UL);
        refalrts::alloc_number(vm, context[23], 10UL);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::alloc_close_bracket(vm, context[25]);
        refalrts::alloc_number(vm, context[26], 9UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::alloc_close_bracket(vm, context[28]);
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::alloc_open_call(vm, context[30]);
        refalrts::alloc_name(vm, context[31], functions[efunc_u_u_Stepm_End]);
        refalrts::update_name(context[4], functions[efunc_u_u_Stepm_Start]);
        refalrts::reinit_close_call(context[7]);
        refalrts::reinit_open_call(context[12]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[30] );
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[12] );
        refalrts::link_brackets( context[16], context[28] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[17] );
        refalrts::link_brackets( context[19], context[25] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[7] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[29], context[31] );
        res = refalrts::splice_evar( res, context[13], context[14] );
        res = refalrts::splice_evar( res, context[15], context[28] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Numb/4 '+'/7 e.String/10 >/1
      context[10] = context[8];
      context[11] = context[9];
      // closed e.String as range 10
      //DEBUG: e.String: 10

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} e.String/10 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Step-Start/4 HalfReuse: >/7 } 0/12 </13 & __Step-End/14 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[12], 0UL);
      refalrts::alloc_open_call(vm, context[13]);
      refalrts::alloc_name(vm, context[14], functions[efunc_u_u_Stepm_End]);
      refalrts::update_name(context[4], functions[efunc_u_u_Stepm_Start]);
      refalrts::reinit_close_call(context[7]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[12], context[14] );
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Numb/4 '0'/7 e./8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::char_term( '0', context[7] ) )
        continue;
      // closed e. as range 8
      //DEBUG: e.: 8

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Step-Start/4 HalfReuse: >/7 } </10 & DoNumb/11 (/12 </13 & Add-Nat/14 (/15 </16 & Mul-Digits/17 0/18 10/19 >/20 )/21 0/22 >/23 )/24 Tile{ AsIs: e./8 } >/25 </26 & __Step-End/27 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_DoNumb]);
      refalrts::alloc_open_bracket(vm, context[12]);
      refalrts::alloc_open_call(vm, context[13]);
      refalrts::alloc_name(vm, context[14], functions[efunc_Addm_Nat]);
      refalrts::alloc_open_bracket(vm, context[15]);
      refalrts::alloc_open_call(vm, context[16]);
      refalrts::alloc_name(vm, context[17], functions[efunc_Mulm_Digits]);
      refalrts::alloc_number(vm, context[18], 0UL);
      refalrts::alloc_number(vm, context[19], 10UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_close_bracket(vm, context[21]);
      refalrts::alloc_number(vm, context[22], 0UL);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::alloc_close_bracket(vm, context[24]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_u_u_Stepm_End]);
      refalrts::update_name(context[4], functions[efunc_u_u_Stepm_Start]);
      refalrts::reinit_close_call(context[7]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[10] );
      refalrts::link_brackets( context[12], context[24] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[13] );
      refalrts::link_brackets( context[15], context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[25], context[27] );
      res = refalrts::splice_evar( res, context[8], context[9] );
      res = refalrts::splice_evar( res, context[10], context[24] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Numb/4 '1'/7 e./8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::char_term( '1', context[7] ) )
        continue;
      // closed e. as range 8
      //DEBUG: e.: 8

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Step-Start/4 HalfReuse: >/7 } </10 & DoNumb/11 (/12 </13 & Add-Nat/14 (/15 </16 & Mul-Digits/17 0/18 10/19 >/20 )/21 1/22 >/23 )/24 Tile{ AsIs: e./8 } >/25 </26 & __Step-End/27 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_DoNumb]);
      refalrts::alloc_open_bracket(vm, context[12]);
      refalrts::alloc_open_call(vm, context[13]);
      refalrts::alloc_name(vm, context[14], functions[efunc_Addm_Nat]);
      refalrts::alloc_open_bracket(vm, context[15]);
      refalrts::alloc_open_call(vm, context[16]);
      refalrts::alloc_name(vm, context[17], functions[efunc_Mulm_Digits]);
      refalrts::alloc_number(vm, context[18], 0UL);
      refalrts::alloc_number(vm, context[19], 10UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_close_bracket(vm, context[21]);
      refalrts::alloc_number(vm, context[22], 1UL);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::alloc_close_bracket(vm, context[24]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_u_u_Stepm_End]);
      refalrts::update_name(context[4], functions[efunc_u_u_Stepm_Start]);
      refalrts::reinit_close_call(context[7]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[10] );
      refalrts::link_brackets( context[12], context[24] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[13] );
      refalrts::link_brackets( context[15], context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[25], context[27] );
      res = refalrts::splice_evar( res, context[8], context[9] );
      res = refalrts::splice_evar( res, context[10], context[24] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Numb/4 '2'/7 e./8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::char_term( '2', context[7] ) )
        continue;
      // closed e. as range 8
      //DEBUG: e.: 8

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Step-Start/4 HalfReuse: >/7 } </10 & DoNumb/11 (/12 </13 & Add-Nat/14 (/15 </16 & Mul-Digits/17 0/18 10/19 >/20 )/21 2/22 >/23 )/24 Tile{ AsIs: e./8 } >/25 </26 & __Step-End/27 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_DoNumb]);
      refalrts::alloc_open_bracket(vm, context[12]);
      refalrts::alloc_open_call(vm, context[13]);
      refalrts::alloc_name(vm, context[14], functions[efunc_Addm_Nat]);
      refalrts::alloc_open_bracket(vm, context[15]);
      refalrts::alloc_open_call(vm, context[16]);
      refalrts::alloc_name(vm, context[17], functions[efunc_Mulm_Digits]);
      refalrts::alloc_number(vm, context[18], 0UL);
      refalrts::alloc_number(vm, context[19], 10UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_close_bracket(vm, context[21]);
      refalrts::alloc_number(vm, context[22], 2UL);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::alloc_close_bracket(vm, context[24]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_u_u_Stepm_End]);
      refalrts::update_name(context[4], functions[efunc_u_u_Stepm_Start]);
      refalrts::reinit_close_call(context[7]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[10] );
      refalrts::link_brackets( context[12], context[24] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[13] );
      refalrts::link_brackets( context[15], context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[25], context[27] );
      res = refalrts::splice_evar( res, context[8], context[9] );
      res = refalrts::splice_evar( res, context[10], context[24] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Numb/4 '3'/7 e./8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::char_term( '3', context[7] ) )
        continue;
      // closed e. as range 8
      //DEBUG: e.: 8

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Step-Start/4 HalfReuse: >/7 } </10 & DoNumb/11 (/12 </13 & Add-Nat/14 (/15 </16 & Mul-Digits/17 0/18 10/19 >/20 )/21 3/22 >/23 )/24 Tile{ AsIs: e./8 } >/25 </26 & __Step-End/27 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_DoNumb]);
      refalrts::alloc_open_bracket(vm, context[12]);
      refalrts::alloc_open_call(vm, context[13]);
      refalrts::alloc_name(vm, context[14], functions[efunc_Addm_Nat]);
      refalrts::alloc_open_bracket(vm, context[15]);
      refalrts::alloc_open_call(vm, context[16]);
      refalrts::alloc_name(vm, context[17], functions[efunc_Mulm_Digits]);
      refalrts::alloc_number(vm, context[18], 0UL);
      refalrts::alloc_number(vm, context[19], 10UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_close_bracket(vm, context[21]);
      refalrts::alloc_number(vm, context[22], 3UL);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::alloc_close_bracket(vm, context[24]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_u_u_Stepm_End]);
      refalrts::update_name(context[4], functions[efunc_u_u_Stepm_Start]);
      refalrts::reinit_close_call(context[7]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[10] );
      refalrts::link_brackets( context[12], context[24] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[13] );
      refalrts::link_brackets( context[15], context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[25], context[27] );
      res = refalrts::splice_evar( res, context[8], context[9] );
      res = refalrts::splice_evar( res, context[10], context[24] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Numb/4 '4'/7 e./8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::char_term( '4', context[7] ) )
        continue;
      // closed e. as range 8
      //DEBUG: e.: 8

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Step-Start/4 HalfReuse: >/7 } </10 & DoNumb/11 (/12 </13 & Add-Nat/14 (/15 </16 & Mul-Digits/17 0/18 10/19 >/20 )/21 4/22 >/23 )/24 Tile{ AsIs: e./8 } >/25 </26 & __Step-End/27 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_DoNumb]);
      refalrts::alloc_open_bracket(vm, context[12]);
      refalrts::alloc_open_call(vm, context[13]);
      refalrts::alloc_name(vm, context[14], functions[efunc_Addm_Nat]);
      refalrts::alloc_open_bracket(vm, context[15]);
      refalrts::alloc_open_call(vm, context[16]);
      refalrts::alloc_name(vm, context[17], functions[efunc_Mulm_Digits]);
      refalrts::alloc_number(vm, context[18], 0UL);
      refalrts::alloc_number(vm, context[19], 10UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_close_bracket(vm, context[21]);
      refalrts::alloc_number(vm, context[22], 4UL);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::alloc_close_bracket(vm, context[24]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_u_u_Stepm_End]);
      refalrts::update_name(context[4], functions[efunc_u_u_Stepm_Start]);
      refalrts::reinit_close_call(context[7]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[10] );
      refalrts::link_brackets( context[12], context[24] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[13] );
      refalrts::link_brackets( context[15], context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[25], context[27] );
      res = refalrts::splice_evar( res, context[8], context[9] );
      res = refalrts::splice_evar( res, context[10], context[24] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Numb/4 '5'/7 e./8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::char_term( '5', context[7] ) )
        continue;
      // closed e. as range 8
      //DEBUG: e.: 8

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Step-Start/4 HalfReuse: >/7 } </10 & DoNumb/11 (/12 </13 & Add-Nat/14 (/15 </16 & Mul-Digits/17 0/18 10/19 >/20 )/21 5/22 >/23 )/24 Tile{ AsIs: e./8 } >/25 </26 & __Step-End/27 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_DoNumb]);
      refalrts::alloc_open_bracket(vm, context[12]);
      refalrts::alloc_open_call(vm, context[13]);
      refalrts::alloc_name(vm, context[14], functions[efunc_Addm_Nat]);
      refalrts::alloc_open_bracket(vm, context[15]);
      refalrts::alloc_open_call(vm, context[16]);
      refalrts::alloc_name(vm, context[17], functions[efunc_Mulm_Digits]);
      refalrts::alloc_number(vm, context[18], 0UL);
      refalrts::alloc_number(vm, context[19], 10UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_close_bracket(vm, context[21]);
      refalrts::alloc_number(vm, context[22], 5UL);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::alloc_close_bracket(vm, context[24]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_u_u_Stepm_End]);
      refalrts::update_name(context[4], functions[efunc_u_u_Stepm_Start]);
      refalrts::reinit_close_call(context[7]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[10] );
      refalrts::link_brackets( context[12], context[24] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[13] );
      refalrts::link_brackets( context[15], context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[25], context[27] );
      res = refalrts::splice_evar( res, context[8], context[9] );
      res = refalrts::splice_evar( res, context[10], context[24] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Numb/4 '6'/7 e./8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::char_term( '6', context[7] ) )
        continue;
      // closed e. as range 8
      //DEBUG: e.: 8

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Step-Start/4 HalfReuse: >/7 } </10 & DoNumb/11 (/12 </13 & Add-Nat/14 (/15 </16 & Mul-Digits/17 0/18 10/19 >/20 )/21 6/22 >/23 )/24 Tile{ AsIs: e./8 } >/25 </26 & __Step-End/27 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_DoNumb]);
      refalrts::alloc_open_bracket(vm, context[12]);
      refalrts::alloc_open_call(vm, context[13]);
      refalrts::alloc_name(vm, context[14], functions[efunc_Addm_Nat]);
      refalrts::alloc_open_bracket(vm, context[15]);
      refalrts::alloc_open_call(vm, context[16]);
      refalrts::alloc_name(vm, context[17], functions[efunc_Mulm_Digits]);
      refalrts::alloc_number(vm, context[18], 0UL);
      refalrts::alloc_number(vm, context[19], 10UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_close_bracket(vm, context[21]);
      refalrts::alloc_number(vm, context[22], 6UL);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::alloc_close_bracket(vm, context[24]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_u_u_Stepm_End]);
      refalrts::update_name(context[4], functions[efunc_u_u_Stepm_Start]);
      refalrts::reinit_close_call(context[7]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[10] );
      refalrts::link_brackets( context[12], context[24] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[13] );
      refalrts::link_brackets( context[15], context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[25], context[27] );
      res = refalrts::splice_evar( res, context[8], context[9] );
      res = refalrts::splice_evar( res, context[10], context[24] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Numb/4 '7'/7 e./8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::char_term( '7', context[7] ) )
        continue;
      // closed e. as range 8
      //DEBUG: e.: 8

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Step-Start/4 HalfReuse: >/7 } </10 & DoNumb/11 (/12 </13 & Add-Nat/14 (/15 </16 & Mul-Digits/17 0/18 10/19 >/20 )/21 7/22 >/23 )/24 Tile{ AsIs: e./8 } >/25 </26 & __Step-End/27 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_DoNumb]);
      refalrts::alloc_open_bracket(vm, context[12]);
      refalrts::alloc_open_call(vm, context[13]);
      refalrts::alloc_name(vm, context[14], functions[efunc_Addm_Nat]);
      refalrts::alloc_open_bracket(vm, context[15]);
      refalrts::alloc_open_call(vm, context[16]);
      refalrts::alloc_name(vm, context[17], functions[efunc_Mulm_Digits]);
      refalrts::alloc_number(vm, context[18], 0UL);
      refalrts::alloc_number(vm, context[19], 10UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_close_bracket(vm, context[21]);
      refalrts::alloc_number(vm, context[22], 7UL);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::alloc_close_bracket(vm, context[24]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_u_u_Stepm_End]);
      refalrts::update_name(context[4], functions[efunc_u_u_Stepm_Start]);
      refalrts::reinit_close_call(context[7]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[10] );
      refalrts::link_brackets( context[12], context[24] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[13] );
      refalrts::link_brackets( context[15], context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[25], context[27] );
      res = refalrts::splice_evar( res, context[8], context[9] );
      res = refalrts::splice_evar( res, context[10], context[24] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Numb/4 '8'/7 e./8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::char_term( '8', context[7] ) )
        continue;
      // closed e. as range 8
      //DEBUG: e.: 8

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Step-Start/4 HalfReuse: >/7 } </10 & DoNumb/11 (/12 </13 & Add-Nat/14 (/15 </16 & Mul-Digits/17 0/18 10/19 >/20 )/21 8/22 >/23 )/24 Tile{ AsIs: e./8 } >/25 </26 & __Step-End/27 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_DoNumb]);
      refalrts::alloc_open_bracket(vm, context[12]);
      refalrts::alloc_open_call(vm, context[13]);
      refalrts::alloc_name(vm, context[14], functions[efunc_Addm_Nat]);
      refalrts::alloc_open_bracket(vm, context[15]);
      refalrts::alloc_open_call(vm, context[16]);
      refalrts::alloc_name(vm, context[17], functions[efunc_Mulm_Digits]);
      refalrts::alloc_number(vm, context[18], 0UL);
      refalrts::alloc_number(vm, context[19], 10UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_close_bracket(vm, context[21]);
      refalrts::alloc_number(vm, context[22], 8UL);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::alloc_close_bracket(vm, context[24]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_u_u_Stepm_End]);
      refalrts::update_name(context[4], functions[efunc_u_u_Stepm_Start]);
      refalrts::reinit_close_call(context[7]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[10] );
      refalrts::link_brackets( context[12], context[24] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[13] );
      refalrts::link_brackets( context[15], context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[25], context[27] );
      res = refalrts::splice_evar( res, context[8], context[9] );
      res = refalrts::splice_evar( res, context[10], context[24] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Numb/4 '9'/7 e./8 >/1
    context[8] = context[5];
    context[9] = context[6];
    if( ! refalrts::char_term( '9', context[7] ) )
      continue;
    // closed e. as range 8
    //DEBUG: e.: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Step-Start/4 HalfReuse: >/7 } </10 & DoNumb/11 (/12 </13 & Add-Nat/14 (/15 </16 & Mul-Digits/17 0/18 10/19 >/20 )/21 9/22 >/23 )/24 Tile{ AsIs: e./8 } >/25 </26 & __Step-End/27 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_DoNumb]);
    refalrts::alloc_open_bracket(vm, context[12]);
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_Addm_Nat]);
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_open_call(vm, context[16]);
    refalrts::alloc_name(vm, context[17], functions[efunc_Mulm_Digits]);
    refalrts::alloc_number(vm, context[18], 0UL);
    refalrts::alloc_number(vm, context[19], 10UL);
    refalrts::alloc_close_call(vm, context[20]);
    refalrts::alloc_close_bracket(vm, context[21]);
    refalrts::alloc_number(vm, context[22], 9UL);
    refalrts::alloc_close_call(vm, context[23]);
    refalrts::alloc_close_bracket(vm, context[24]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_u_u_Stepm_End]);
    refalrts::update_name(context[4], functions[efunc_u_u_Stepm_Start]);
    refalrts::reinit_close_call(context[7]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[10] );
    refalrts::link_brackets( context[12], context[24] );
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[13] );
    refalrts::link_brackets( context[15], context[21] );
    refalrts::push_stack( vm, context[20] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[7] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[25], context[27] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    res = refalrts::splice_evar( res, context[10], context[24] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Numb/4 e.String/2 >/1
  // closed e.String as range 2
  //DEBUG: e.String: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} e.String/2 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Step-Start/4 } >/5 0/6 </7 & __Step-End/8 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_call(vm, context[5]);
  refalrts::alloc_number(vm, context[6], 0UL);
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_u_u_Stepm_End]);
  refalrts::update_name(context[4], functions[efunc_u_u_Stepm_Start]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[5], context[8] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Numb("Numb", 0U, 0U, func_Numb);


static refalrts::FnResult func_Numbm_Aux(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & Numb-Aux/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Numb-Aux/4 s.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Numb-Aux/4 '0'/7 e./8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::char_term( '0', context[7] ) )
        continue;
      // closed e. as range 8
      //DEBUG: e.: 8

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </10 & DoNumb/11 (/12 </13 & Add-Nat/14 (/15 </16 & Mul-Digits/17 0/18 10/19 >/20 )/21 Tile{ HalfReuse: 0/0 HalfReuse: >/4 HalfReuse: )/7 AsIs: e./8 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_DoNumb]);
      refalrts::alloc_open_bracket(vm, context[12]);
      refalrts::alloc_open_call(vm, context[13]);
      refalrts::alloc_name(vm, context[14], functions[efunc_Addm_Nat]);
      refalrts::alloc_open_bracket(vm, context[15]);
      refalrts::alloc_open_call(vm, context[16]);
      refalrts::alloc_name(vm, context[17], functions[efunc_Mulm_Digits]);
      refalrts::alloc_number(vm, context[18], 0UL);
      refalrts::alloc_number(vm, context[19], 10UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_close_bracket(vm, context[21]);
      refalrts::reinit_number(context[0], 0UL);
      refalrts::reinit_close_call(context[4]);
      refalrts::reinit_close_bracket(context[7]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[10] );
      refalrts::link_brackets( context[12], context[7] );
      refalrts::push_stack( vm, context[4] );
      refalrts::push_stack( vm, context[13] );
      refalrts::link_brackets( context[15], context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[10], context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Numb-Aux/4 '1'/7 e./8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::char_term( '1', context[7] ) )
        continue;
      // closed e. as range 8
      //DEBUG: e.: 8

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </10 & DoNumb/11 (/12 </13 & Add-Nat/14 (/15 </16 & Mul-Digits/17 0/18 10/19 >/20 )/21 Tile{ HalfReuse: 1/0 HalfReuse: >/4 HalfReuse: )/7 AsIs: e./8 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_DoNumb]);
      refalrts::alloc_open_bracket(vm, context[12]);
      refalrts::alloc_open_call(vm, context[13]);
      refalrts::alloc_name(vm, context[14], functions[efunc_Addm_Nat]);
      refalrts::alloc_open_bracket(vm, context[15]);
      refalrts::alloc_open_call(vm, context[16]);
      refalrts::alloc_name(vm, context[17], functions[efunc_Mulm_Digits]);
      refalrts::alloc_number(vm, context[18], 0UL);
      refalrts::alloc_number(vm, context[19], 10UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_close_bracket(vm, context[21]);
      refalrts::reinit_number(context[0], 1UL);
      refalrts::reinit_close_call(context[4]);
      refalrts::reinit_close_bracket(context[7]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[10] );
      refalrts::link_brackets( context[12], context[7] );
      refalrts::push_stack( vm, context[4] );
      refalrts::push_stack( vm, context[13] );
      refalrts::link_brackets( context[15], context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[10], context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Numb-Aux/4 '2'/7 e./8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::char_term( '2', context[7] ) )
        continue;
      // closed e. as range 8
      //DEBUG: e.: 8

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </10 & DoNumb/11 (/12 </13 & Add-Nat/14 (/15 </16 & Mul-Digits/17 0/18 10/19 >/20 )/21 Tile{ HalfReuse: 2/0 HalfReuse: >/4 HalfReuse: )/7 AsIs: e./8 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_DoNumb]);
      refalrts::alloc_open_bracket(vm, context[12]);
      refalrts::alloc_open_call(vm, context[13]);
      refalrts::alloc_name(vm, context[14], functions[efunc_Addm_Nat]);
      refalrts::alloc_open_bracket(vm, context[15]);
      refalrts::alloc_open_call(vm, context[16]);
      refalrts::alloc_name(vm, context[17], functions[efunc_Mulm_Digits]);
      refalrts::alloc_number(vm, context[18], 0UL);
      refalrts::alloc_number(vm, context[19], 10UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_close_bracket(vm, context[21]);
      refalrts::reinit_number(context[0], 2UL);
      refalrts::reinit_close_call(context[4]);
      refalrts::reinit_close_bracket(context[7]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[10] );
      refalrts::link_brackets( context[12], context[7] );
      refalrts::push_stack( vm, context[4] );
      refalrts::push_stack( vm, context[13] );
      refalrts::link_brackets( context[15], context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[10], context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Numb-Aux/4 '3'/7 e./8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::char_term( '3', context[7] ) )
        continue;
      // closed e. as range 8
      //DEBUG: e.: 8

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </10 & DoNumb/11 (/12 </13 & Add-Nat/14 (/15 </16 & Mul-Digits/17 0/18 10/19 >/20 )/21 Tile{ HalfReuse: 3/0 HalfReuse: >/4 HalfReuse: )/7 AsIs: e./8 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_DoNumb]);
      refalrts::alloc_open_bracket(vm, context[12]);
      refalrts::alloc_open_call(vm, context[13]);
      refalrts::alloc_name(vm, context[14], functions[efunc_Addm_Nat]);
      refalrts::alloc_open_bracket(vm, context[15]);
      refalrts::alloc_open_call(vm, context[16]);
      refalrts::alloc_name(vm, context[17], functions[efunc_Mulm_Digits]);
      refalrts::alloc_number(vm, context[18], 0UL);
      refalrts::alloc_number(vm, context[19], 10UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_close_bracket(vm, context[21]);
      refalrts::reinit_number(context[0], 3UL);
      refalrts::reinit_close_call(context[4]);
      refalrts::reinit_close_bracket(context[7]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[10] );
      refalrts::link_brackets( context[12], context[7] );
      refalrts::push_stack( vm, context[4] );
      refalrts::push_stack( vm, context[13] );
      refalrts::link_brackets( context[15], context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[10], context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Numb-Aux/4 '4'/7 e./8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::char_term( '4', context[7] ) )
        continue;
      // closed e. as range 8
      //DEBUG: e.: 8

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </10 & DoNumb/11 (/12 </13 & Add-Nat/14 (/15 </16 & Mul-Digits/17 0/18 10/19 >/20 )/21 Tile{ HalfReuse: 4/0 HalfReuse: >/4 HalfReuse: )/7 AsIs: e./8 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_DoNumb]);
      refalrts::alloc_open_bracket(vm, context[12]);
      refalrts::alloc_open_call(vm, context[13]);
      refalrts::alloc_name(vm, context[14], functions[efunc_Addm_Nat]);
      refalrts::alloc_open_bracket(vm, context[15]);
      refalrts::alloc_open_call(vm, context[16]);
      refalrts::alloc_name(vm, context[17], functions[efunc_Mulm_Digits]);
      refalrts::alloc_number(vm, context[18], 0UL);
      refalrts::alloc_number(vm, context[19], 10UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_close_bracket(vm, context[21]);
      refalrts::reinit_number(context[0], 4UL);
      refalrts::reinit_close_call(context[4]);
      refalrts::reinit_close_bracket(context[7]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[10] );
      refalrts::link_brackets( context[12], context[7] );
      refalrts::push_stack( vm, context[4] );
      refalrts::push_stack( vm, context[13] );
      refalrts::link_brackets( context[15], context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[10], context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Numb-Aux/4 '5'/7 e./8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::char_term( '5', context[7] ) )
        continue;
      // closed e. as range 8
      //DEBUG: e.: 8

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </10 & DoNumb/11 (/12 </13 & Add-Nat/14 (/15 </16 & Mul-Digits/17 0/18 10/19 >/20 )/21 Tile{ HalfReuse: 5/0 HalfReuse: >/4 HalfReuse: )/7 AsIs: e./8 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_DoNumb]);
      refalrts::alloc_open_bracket(vm, context[12]);
      refalrts::alloc_open_call(vm, context[13]);
      refalrts::alloc_name(vm, context[14], functions[efunc_Addm_Nat]);
      refalrts::alloc_open_bracket(vm, context[15]);
      refalrts::alloc_open_call(vm, context[16]);
      refalrts::alloc_name(vm, context[17], functions[efunc_Mulm_Digits]);
      refalrts::alloc_number(vm, context[18], 0UL);
      refalrts::alloc_number(vm, context[19], 10UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_close_bracket(vm, context[21]);
      refalrts::reinit_number(context[0], 5UL);
      refalrts::reinit_close_call(context[4]);
      refalrts::reinit_close_bracket(context[7]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[10] );
      refalrts::link_brackets( context[12], context[7] );
      refalrts::push_stack( vm, context[4] );
      refalrts::push_stack( vm, context[13] );
      refalrts::link_brackets( context[15], context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[10], context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Numb-Aux/4 '6'/7 e./8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::char_term( '6', context[7] ) )
        continue;
      // closed e. as range 8
      //DEBUG: e.: 8

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </10 & DoNumb/11 (/12 </13 & Add-Nat/14 (/15 </16 & Mul-Digits/17 0/18 10/19 >/20 )/21 Tile{ HalfReuse: 6/0 HalfReuse: >/4 HalfReuse: )/7 AsIs: e./8 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_DoNumb]);
      refalrts::alloc_open_bracket(vm, context[12]);
      refalrts::alloc_open_call(vm, context[13]);
      refalrts::alloc_name(vm, context[14], functions[efunc_Addm_Nat]);
      refalrts::alloc_open_bracket(vm, context[15]);
      refalrts::alloc_open_call(vm, context[16]);
      refalrts::alloc_name(vm, context[17], functions[efunc_Mulm_Digits]);
      refalrts::alloc_number(vm, context[18], 0UL);
      refalrts::alloc_number(vm, context[19], 10UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_close_bracket(vm, context[21]);
      refalrts::reinit_number(context[0], 6UL);
      refalrts::reinit_close_call(context[4]);
      refalrts::reinit_close_bracket(context[7]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[10] );
      refalrts::link_brackets( context[12], context[7] );
      refalrts::push_stack( vm, context[4] );
      refalrts::push_stack( vm, context[13] );
      refalrts::link_brackets( context[15], context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[10], context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Numb-Aux/4 '7'/7 e./8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::char_term( '7', context[7] ) )
        continue;
      // closed e. as range 8
      //DEBUG: e.: 8

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </10 & DoNumb/11 (/12 </13 & Add-Nat/14 (/15 </16 & Mul-Digits/17 0/18 10/19 >/20 )/21 Tile{ HalfReuse: 7/0 HalfReuse: >/4 HalfReuse: )/7 AsIs: e./8 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_DoNumb]);
      refalrts::alloc_open_bracket(vm, context[12]);
      refalrts::alloc_open_call(vm, context[13]);
      refalrts::alloc_name(vm, context[14], functions[efunc_Addm_Nat]);
      refalrts::alloc_open_bracket(vm, context[15]);
      refalrts::alloc_open_call(vm, context[16]);
      refalrts::alloc_name(vm, context[17], functions[efunc_Mulm_Digits]);
      refalrts::alloc_number(vm, context[18], 0UL);
      refalrts::alloc_number(vm, context[19], 10UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_close_bracket(vm, context[21]);
      refalrts::reinit_number(context[0], 7UL);
      refalrts::reinit_close_call(context[4]);
      refalrts::reinit_close_bracket(context[7]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[10] );
      refalrts::link_brackets( context[12], context[7] );
      refalrts::push_stack( vm, context[4] );
      refalrts::push_stack( vm, context[13] );
      refalrts::link_brackets( context[15], context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[10], context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Numb-Aux/4 '8'/7 e./8 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::char_term( '8', context[7] ) )
        continue;
      // closed e. as range 8
      //DEBUG: e.: 8

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </10 & DoNumb/11 (/12 </13 & Add-Nat/14 (/15 </16 & Mul-Digits/17 0/18 10/19 >/20 )/21 Tile{ HalfReuse: 8/0 HalfReuse: >/4 HalfReuse: )/7 AsIs: e./8 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[10]);
      refalrts::alloc_name(vm, context[11], functions[efunc_DoNumb]);
      refalrts::alloc_open_bracket(vm, context[12]);
      refalrts::alloc_open_call(vm, context[13]);
      refalrts::alloc_name(vm, context[14], functions[efunc_Addm_Nat]);
      refalrts::alloc_open_bracket(vm, context[15]);
      refalrts::alloc_open_call(vm, context[16]);
      refalrts::alloc_name(vm, context[17], functions[efunc_Mulm_Digits]);
      refalrts::alloc_number(vm, context[18], 0UL);
      refalrts::alloc_number(vm, context[19], 10UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_close_bracket(vm, context[21]);
      refalrts::reinit_number(context[0], 8UL);
      refalrts::reinit_close_call(context[4]);
      refalrts::reinit_close_bracket(context[7]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[10] );
      refalrts::link_brackets( context[12], context[7] );
      refalrts::push_stack( vm, context[4] );
      refalrts::push_stack( vm, context[13] );
      refalrts::link_brackets( context[15], context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[10], context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Numb-Aux/4 '9'/7 e./8 >/1
    context[8] = context[5];
    context[9] = context[6];
    if( ! refalrts::char_term( '9', context[7] ) )
      continue;
    // closed e. as range 8
    //DEBUG: e.: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </10 & DoNumb/11 (/12 </13 & Add-Nat/14 (/15 </16 & Mul-Digits/17 0/18 10/19 >/20 )/21 Tile{ HalfReuse: 9/0 HalfReuse: >/4 HalfReuse: )/7 AsIs: e./8 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_DoNumb]);
    refalrts::alloc_open_bracket(vm, context[12]);
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_Addm_Nat]);
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_open_call(vm, context[16]);
    refalrts::alloc_name(vm, context[17], functions[efunc_Mulm_Digits]);
    refalrts::alloc_number(vm, context[18], 0UL);
    refalrts::alloc_number(vm, context[19], 10UL);
    refalrts::alloc_close_call(vm, context[20]);
    refalrts::alloc_close_bracket(vm, context[21]);
    refalrts::reinit_number(context[0], 9UL);
    refalrts::reinit_close_call(context[4]);
    refalrts::reinit_close_bracket(context[7]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[10] );
    refalrts::link_brackets( context[12], context[7] );
    refalrts::push_stack( vm, context[4] );
    refalrts::push_stack( vm, context[13] );
    refalrts::link_brackets( context[15], context[21] );
    refalrts::push_stack( vm, context[20] );
    refalrts::push_stack( vm, context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[0];
    res = refalrts::splice_evar( res, context[10], context[21] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Numb-Aux/4 e.String/2 >/1
  // closed e.String as range 2
  //DEBUG: e.String: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Numb-Aux/4 e.String/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: 0/1 ]] }
  refalrts::reinit_number(context[1], 0UL);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Numbm_Aux("Numb-Aux", COOKIE1_, COOKIE2_, func_Numbm_Aux);


static refalrts::FnResult func_DoNumb(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & DoNumb/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoNumb/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & DoNumb/4 (/7 e.new5/9 )/8 s.new3/13 e.new4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new5 as range 9
    if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
      continue;
    // closed e.new4 as range 11
    do {
      // </0 & DoNumb/4 (/7 e.Value/14 )/8 '0'/13 e.Rest/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '0', context[13] ) )
        continue;
      // closed e.Value as range 14
      // closed e.Rest as range 16
      //DEBUG: e.Value: 14
      //DEBUG: e.Rest: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoNumb/4 AsIs: (/7 } </18 & Add-Nat/19 (/20 </21 & Mul-Nat-Line/22 Tile{ AsIs: e.Value/14 } 10/23 >/24 )/25 0/26 Tile{ HalfReuse: >/8 HalfReuse: )/13 AsIs: e.Rest/16 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Addm_Nat]);
      refalrts::alloc_open_bracket(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Mulm_Natm_Line]);
      refalrts::alloc_number(vm, context[23], 10UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::alloc_close_bracket(vm, context[25]);
      refalrts::alloc_number(vm, context[26], 0UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[18] );
      refalrts::link_brackets( context[20], context[25] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[23], context[26] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      res = refalrts::splice_evar( res, context[18], context[22] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoNumb/4 (/7 e.Value/14 )/8 '1'/13 e.Rest/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '1', context[13] ) )
        continue;
      // closed e.Value as range 14
      // closed e.Rest as range 16
      //DEBUG: e.Value: 14
      //DEBUG: e.Rest: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoNumb/4 AsIs: (/7 } </18 & Add-Nat/19 (/20 </21 & Mul-Nat-Line/22 Tile{ AsIs: e.Value/14 } 10/23 >/24 )/25 1/26 Tile{ HalfReuse: >/8 HalfReuse: )/13 AsIs: e.Rest/16 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Addm_Nat]);
      refalrts::alloc_open_bracket(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Mulm_Natm_Line]);
      refalrts::alloc_number(vm, context[23], 10UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::alloc_close_bracket(vm, context[25]);
      refalrts::alloc_number(vm, context[26], 1UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[18] );
      refalrts::link_brackets( context[20], context[25] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[23], context[26] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      res = refalrts::splice_evar( res, context[18], context[22] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoNumb/4 (/7 e.Value/14 )/8 '2'/13 e.Rest/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '2', context[13] ) )
        continue;
      // closed e.Value as range 14
      // closed e.Rest as range 16
      //DEBUG: e.Value: 14
      //DEBUG: e.Rest: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoNumb/4 AsIs: (/7 } </18 & Add-Nat/19 (/20 </21 & Mul-Nat-Line/22 Tile{ AsIs: e.Value/14 } 10/23 >/24 )/25 2/26 Tile{ HalfReuse: >/8 HalfReuse: )/13 AsIs: e.Rest/16 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Addm_Nat]);
      refalrts::alloc_open_bracket(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Mulm_Natm_Line]);
      refalrts::alloc_number(vm, context[23], 10UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::alloc_close_bracket(vm, context[25]);
      refalrts::alloc_number(vm, context[26], 2UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[18] );
      refalrts::link_brackets( context[20], context[25] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[23], context[26] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      res = refalrts::splice_evar( res, context[18], context[22] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoNumb/4 (/7 e.Value/14 )/8 '3'/13 e.Rest/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '3', context[13] ) )
        continue;
      // closed e.Value as range 14
      // closed e.Rest as range 16
      //DEBUG: e.Value: 14
      //DEBUG: e.Rest: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoNumb/4 AsIs: (/7 } </18 & Add-Nat/19 (/20 </21 & Mul-Nat-Line/22 Tile{ AsIs: e.Value/14 } 10/23 >/24 )/25 3/26 Tile{ HalfReuse: >/8 HalfReuse: )/13 AsIs: e.Rest/16 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Addm_Nat]);
      refalrts::alloc_open_bracket(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Mulm_Natm_Line]);
      refalrts::alloc_number(vm, context[23], 10UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::alloc_close_bracket(vm, context[25]);
      refalrts::alloc_number(vm, context[26], 3UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[18] );
      refalrts::link_brackets( context[20], context[25] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[23], context[26] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      res = refalrts::splice_evar( res, context[18], context[22] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoNumb/4 (/7 e.Value/14 )/8 '4'/13 e.Rest/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '4', context[13] ) )
        continue;
      // closed e.Value as range 14
      // closed e.Rest as range 16
      //DEBUG: e.Value: 14
      //DEBUG: e.Rest: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoNumb/4 AsIs: (/7 } </18 & Add-Nat/19 (/20 </21 & Mul-Nat-Line/22 Tile{ AsIs: e.Value/14 } 10/23 >/24 )/25 4/26 Tile{ HalfReuse: >/8 HalfReuse: )/13 AsIs: e.Rest/16 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Addm_Nat]);
      refalrts::alloc_open_bracket(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Mulm_Natm_Line]);
      refalrts::alloc_number(vm, context[23], 10UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::alloc_close_bracket(vm, context[25]);
      refalrts::alloc_number(vm, context[26], 4UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[18] );
      refalrts::link_brackets( context[20], context[25] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[23], context[26] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      res = refalrts::splice_evar( res, context[18], context[22] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoNumb/4 (/7 e.Value/14 )/8 '5'/13 e.Rest/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '5', context[13] ) )
        continue;
      // closed e.Value as range 14
      // closed e.Rest as range 16
      //DEBUG: e.Value: 14
      //DEBUG: e.Rest: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoNumb/4 AsIs: (/7 } </18 & Add-Nat/19 (/20 </21 & Mul-Nat-Line/22 Tile{ AsIs: e.Value/14 } 10/23 >/24 )/25 5/26 Tile{ HalfReuse: >/8 HalfReuse: )/13 AsIs: e.Rest/16 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Addm_Nat]);
      refalrts::alloc_open_bracket(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Mulm_Natm_Line]);
      refalrts::alloc_number(vm, context[23], 10UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::alloc_close_bracket(vm, context[25]);
      refalrts::alloc_number(vm, context[26], 5UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[18] );
      refalrts::link_brackets( context[20], context[25] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[23], context[26] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      res = refalrts::splice_evar( res, context[18], context[22] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoNumb/4 (/7 e.Value/14 )/8 '6'/13 e.Rest/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '6', context[13] ) )
        continue;
      // closed e.Value as range 14
      // closed e.Rest as range 16
      //DEBUG: e.Value: 14
      //DEBUG: e.Rest: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoNumb/4 AsIs: (/7 } </18 & Add-Nat/19 (/20 </21 & Mul-Nat-Line/22 Tile{ AsIs: e.Value/14 } 10/23 >/24 )/25 6/26 Tile{ HalfReuse: >/8 HalfReuse: )/13 AsIs: e.Rest/16 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Addm_Nat]);
      refalrts::alloc_open_bracket(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Mulm_Natm_Line]);
      refalrts::alloc_number(vm, context[23], 10UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::alloc_close_bracket(vm, context[25]);
      refalrts::alloc_number(vm, context[26], 6UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[18] );
      refalrts::link_brackets( context[20], context[25] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[23], context[26] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      res = refalrts::splice_evar( res, context[18], context[22] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoNumb/4 (/7 e.Value/14 )/8 '7'/13 e.Rest/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '7', context[13] ) )
        continue;
      // closed e.Value as range 14
      // closed e.Rest as range 16
      //DEBUG: e.Value: 14
      //DEBUG: e.Rest: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoNumb/4 AsIs: (/7 } </18 & Add-Nat/19 (/20 </21 & Mul-Nat-Line/22 Tile{ AsIs: e.Value/14 } 10/23 >/24 )/25 7/26 Tile{ HalfReuse: >/8 HalfReuse: )/13 AsIs: e.Rest/16 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Addm_Nat]);
      refalrts::alloc_open_bracket(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Mulm_Natm_Line]);
      refalrts::alloc_number(vm, context[23], 10UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::alloc_close_bracket(vm, context[25]);
      refalrts::alloc_number(vm, context[26], 7UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[18] );
      refalrts::link_brackets( context[20], context[25] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[23], context[26] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      res = refalrts::splice_evar( res, context[18], context[22] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoNumb/4 (/7 e.Value/14 )/8 '8'/13 e.Rest/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::char_term( '8', context[13] ) )
        continue;
      // closed e.Value as range 14
      // closed e.Rest as range 16
      //DEBUG: e.Value: 14
      //DEBUG: e.Rest: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoNumb/4 AsIs: (/7 } </18 & Add-Nat/19 (/20 </21 & Mul-Nat-Line/22 Tile{ AsIs: e.Value/14 } 10/23 >/24 )/25 8/26 Tile{ HalfReuse: >/8 HalfReuse: )/13 AsIs: e.Rest/16 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Addm_Nat]);
      refalrts::alloc_open_bracket(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Mulm_Natm_Line]);
      refalrts::alloc_number(vm, context[23], 10UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::alloc_close_bracket(vm, context[25]);
      refalrts::alloc_number(vm, context[26], 8UL);
      refalrts::reinit_close_call(context[8]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[18] );
      refalrts::link_brackets( context[20], context[25] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[23], context[26] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      res = refalrts::splice_evar( res, context[18], context[22] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoNumb/4 (/7 e.Value/14 )/8 '9'/13 e.Rest/16 >/1
    context[14] = context[9];
    context[15] = context[10];
    context[16] = context[11];
    context[17] = context[12];
    if( ! refalrts::char_term( '9', context[13] ) )
      continue;
    // closed e.Value as range 14
    // closed e.Rest as range 16
    //DEBUG: e.Value: 14
    //DEBUG: e.Rest: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoNumb/4 AsIs: (/7 } </18 & Add-Nat/19 (/20 </21 & Mul-Nat-Line/22 Tile{ AsIs: e.Value/14 } 10/23 >/24 )/25 9/26 Tile{ HalfReuse: >/8 HalfReuse: )/13 AsIs: e.Rest/16 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[18]);
    refalrts::alloc_name(vm, context[19], functions[efunc_Addm_Nat]);
    refalrts::alloc_open_bracket(vm, context[20]);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_Mulm_Natm_Line]);
    refalrts::alloc_number(vm, context[23], 10UL);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::alloc_close_bracket(vm, context[25]);
    refalrts::alloc_number(vm, context[26], 9UL);
    refalrts::reinit_close_call(context[8]);
    refalrts::reinit_close_bracket(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[13] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[18] );
    refalrts::link_brackets( context[20], context[25] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[21] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[23], context[26] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[18], context[22] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoNumb/4 (/7 e.Value/5 )/8 e.Rest/2 >/1
  // closed e.Value as range 5
  // closed e.Rest as range 2
  //DEBUG: e.Value: 5
  //DEBUG: e.Rest: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DoNumb/4 (/7 {REMOVED TILE} )/8 e.Rest/2 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Value/5 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoNumb("DoNumb", COOKIE1_, COOKIE2_, func_DoNumb);


static refalrts::FnResult func_DoNumbm_AddDigit(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & DoNumb-AddDigit/4 e.Value/2 s.Digit/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_right( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Value as range 2
  //DEBUG: s.Digit: 5
  //DEBUG: e.Value: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/6 Tile{ AsIs: </0 Reuse: & Add-Nat/4 } (/7 </8 & Mul-Nat-Line/9 Tile{ AsIs: e.Value/2 } 10/10 >/11 )/12 Tile{ AsIs: s.Digit/5 AsIs: >/1 } )/13 Tile{ ]] }
  refalrts::alloc_open_bracket(vm, context[6]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_open_call(vm, context[8]);
  refalrts::alloc_name(vm, context[9], functions[efunc_Mulm_Natm_Line]);
  refalrts::alloc_number(vm, context[10], 10UL);
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::alloc_close_bracket(vm, context[12]);
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_Addm_Nat]);
  refalrts::link_brackets( context[6], context[13] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[12] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[5], context[1] );
  res = refalrts::splice_evar( res, context[10], context[12] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[9] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_elem( res, context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoNumbm_AddDigit("DoNumb-AddDigit", COOKIE1_, COOKIE2_, func_DoNumbm_AddDigit);


static refalrts::FnResult func_Open(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 1331 "Library.ref"
  refalrts::Iter content_b = 0;
  refalrts::Iter content_e = 0;
  refalrts::call_left(content_b, content_e, arg_begin, arg_end);

  std::string mode;

  refalrts::Iter mode_b = 0;
  refalrts::Iter mode_e = 0;
  refalrts::Iter pmode = 0;

  if (! refalrts::tvar_left(pmode, content_b, content_e)) {
    return refalrts::cRecognitionImpossible;
  }

  if (refalrts::char_term('r', pmode) || refalrts::char_term('R', pmode)) {
    mode = "r";
  } else if (
    refalrts::char_term('w', pmode) || refalrts::char_term('W', pmode)
  ) {
    mode = "w";
  } else if (
    refalrts::char_term('a', pmode) || refalrts::char_term('A', pmode)
  ) {
    mode = "a";
  } else if (refalrts::brackets_term(mode_b, mode_e, pmode)) {
    char mode_str[100] = { '\0' };  // должно хватить
    unsigned len =
      refalrts::read_chars(mode_str, sizeof(mode_str) - 1, mode_b, mode_e);

    if (! refalrts::empty_seq(mode_b, mode_e) || len == 0) {
      return refalrts::cRecognitionImpossible;
    }

    mode = mode_str;
  } else if (refalrts::cDataIdentifier == pmode->tag) {
    mode = pmode->ident_info->name();
  } else {
    return refalrts::cRecognitionImpossible;
  }

  refalrts::Iter pfile_handle = 0;
  if (
    ! file_handle_left(identifiers, pfile_handle, content_b, content_e)
    || refalrts::cDataNumber != pfile_handle->tag
  ) {
    return refalrts::cRecognitionImpossible;
  }

  char filename[FILENAME_MAX + 1] = { '\0' };
  refalrts::read_chars(filename, FILENAME_MAX, content_b, content_e);

  if (! refalrts::empty_seq(content_b, content_e)) {
    return refalrts::cRecognitionImpossible;
  }

  if (! reopen_handle(vm, pfile_handle, filename, mode.c_str())) {
    return refalrts::cRecognitionImpossible;
  }

  refalrts::splice_to_freelist(vm, arg_begin, arg_end);
  return refalrts::cSuccess;
#line 11591 "Library.cpp"
}

static refalrts::NativeReference nat_ref_Open("Open", 0U, 0U, func_Open);

#line 1400 "Library.ref"
namespace {

struct OrdConv {
  bool for_convert(refalrts::Iter item) {
    return refalrts::cDataChar == item->tag;
  }

  void convert(refalrts::Iter item) {
    item->tag = refalrts::cDataNumber;
    item->number_info = static_cast<unsigned char>(item->char_info);
  }
};

}  // unnamed namespace
#line 11611 "Library.cpp"

static refalrts::FnResult func_Ord(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 1418 "Library.ref"
  return convert(vm, arg_begin, arg_end, OrdConv());
#line 11620 "Library.cpp"
}

static refalrts::NativeReference nat_ref_Ord("Ord", 0U, 0U, func_Ord);


static refalrts::FnResult func_Print(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Print/4 e.AnyExpression/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.AnyExpression as range 2
  //DEBUG: e.AnyExpression: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 </8 Tile{ HalfReuse: & Put-Aux/0 HalfReuse: # stdout/4 AsIs: e.AnyExpression/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::alloc_open_call(vm, context[8]);
  refalrts::reinit_name(context[0], functions[efunc_Putm_Aux]);
  refalrts::reinit_ident(context[4], identifiers[ident_stdout]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Print("Print", 0U, 0U, func_Print);


static refalrts::FnResult func_Prout(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Prout/4 e.AnyExpression/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.AnyExpression as range 2
  //DEBUG: e.AnyExpression: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 </8 Tile{ HalfReuse: & Putout-Aux/0 HalfReuse: # stdout/4 AsIs: e.AnyExpression/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::alloc_open_call(vm, context[8]);
  refalrts::reinit_name(context[0], functions[efunc_Putoutm_Aux]);
  refalrts::reinit_ident(context[4], identifiers[ident_stdout]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Prout("Prout", 0U, 0U, func_Prout);


static refalrts::FnResult func_Proud(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & Proud/4 e.AnyExpression/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.AnyExpression as range 2
  //DEBUG: e.AnyExpression: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Putout-Aux/0 HalfReuse: # stdout/4 AsIs: e.AnyExpression/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_Putoutm_Aux]);
  refalrts::reinit_ident(context[4], identifiers[ident_stdout]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Proud("Proud", 0U, 0U, func_Proud);


static refalrts::FnResult func_Trout(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & Trout/4 e.AnyExpression/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.AnyExpression as range 2
  //DEBUG: e.AnyExpression: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Putout-Aux/0 HalfReuse: # stdout/4 AsIs: e.AnyExpression/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_Putoutm_Aux]);
  refalrts::reinit_ident(context[4], identifiers[ident_stdout]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Trout("Trout", 0U, 0U, func_Trout);


static refalrts::FnResult func_Put(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & Put/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Put/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Put/4 0/5 e.AnyExpression/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::number_term( 0UL, context[5] ) )
      continue;
    // closed e.AnyExpression as range 6
    //DEBUG: e.AnyExpression: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </8 & __Step-Start/9 >/10 </11 & Autoopen/12 'w'/13 0/14 >/15 Tile{ AsIs: </0 Reuse: & Put-Aux/4 HalfReuse: # stderr/5 AsIs: e.AnyExpression/6 AsIs: >/1 } </16 & __Step-End/17 >/18 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[8]);
    refalrts::alloc_name(vm, context[9], functions[efunc_u_u_Stepm_Start]);
    refalrts::alloc_close_call(vm, context[10]);
    refalrts::alloc_open_call(vm, context[11]);
    refalrts::alloc_name(vm, context[12], functions[efunc_Autoopen]);
    refalrts::alloc_char(vm, context[13], 'w');
    refalrts::alloc_number(vm, context[14], 0UL);
    refalrts::alloc_close_call(vm, context[15]);
    refalrts::alloc_open_call(vm, context[16]);
    refalrts::alloc_name(vm, context[17], functions[efunc_u_u_Stepm_End]);
    refalrts::alloc_close_call(vm, context[18]);
    refalrts::update_name(context[4], functions[efunc_Putm_Aux]);
    refalrts::reinit_ident(context[5], identifiers[ident_stderr]);
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[16], context[18] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[8], context[15] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Put/4 s.FileNo/5 e.AnyExpression/2 >/1
  // closed e.AnyExpression as range 2
  //DEBUG: s.FileNo: 5
  //DEBUG: e.AnyExpression: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </6 & __Step-Start/7 >/8 </9 & Autoopen/10 'w'/11 s.FileNo/5/12 >/13 Tile{ AsIs: </0 Reuse: & Put-Aux/4 AsIs: s.FileNo/5 AsIs: e.AnyExpression/2 AsIs: >/1 } </14 & __Step-End/15 >/16 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_u_u_Stepm_Start]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_Autoopen]);
  refalrts::alloc_char(vm, context[11], 'w');
  refalrts::copy_stvar(vm, context[12], context[5]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::alloc_open_call(vm, context[14]);
  refalrts::alloc_name(vm, context[15], functions[efunc_u_u_Stepm_End]);
  refalrts::alloc_close_call(vm, context[16]);
  refalrts::update_name(context[4], functions[efunc_Putm_Aux]);
  refalrts::push_stack( vm, context[16] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[14], context[16] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[6], context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Put("Put", 0U, 0U, func_Put);

#line 1457 "Library.ref"
namespace cookie_ns {

enum {
  cFlags_Transparent    = 1 << 5,
  cFlags_NoEOL          = 1 << 8,
};

extern refalrts::FnResult fwrite_line(
  refalrts::VM *vm, const refalrts::RefalIdentifier *identifiers,
  refalrts::Iter arg_begin, refalrts::Iter arg_end, unsigned flags
);

}  // namespace cookie_ns
#line 11902 "Library.cpp"

static refalrts::FnResult func_Putm_Aux(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 1474 "Library.ref"
  return cookie_ns::fwrite_line(
    vm, identifiers, arg_begin, arg_end, cookie_ns::cFlags_Transparent
  );
#line 11913 "Library.cpp"
}

static refalrts::NativeReference nat_ref_Putm_Aux("Put-Aux", COOKIE1_, COOKIE2_, func_Putm_Aux);

#line 1481 "Library.ref"
refalrts::FnResult cookie_ns::fwrite_line(
  refalrts::VM *vm, const refalrts::RefalIdentifier *identifiers,
  refalrts::Iter arg_begin, refalrts::Iter arg_end, unsigned flags
) {
  refalrts::Iter content_b = 0;
  refalrts::Iter content_e = 0;
  refalrts::call_left(content_b, content_e, arg_begin, arg_end);

  refalrts::Iter pfile_handle = 0;

  if (! file_handle_left(identifiers, pfile_handle, content_b, content_e)) {
    return refalrts::cRecognitionImpossible;
  }

  FILE *handle = extract_file_handle(vm, identifiers, pfile_handle);
  if (! handle) {
    return refalrts::cRecognitionImpossible;
  }

  if (ferror(handle)) {
    return refalrts::cRecognitionImpossible;
  }

  if (stderr == handle) {
    fflush(stdout);
  }

  int printf_res = 0;

  for (
    refalrts::Iter p = content_b, end = content_e;
    printf_res >= 0 && ! refalrts::empty_seq(p, end);
    refalrts::move_left(p, end)
  ) {
    switch(p->tag) {
      case refalrts::cDataChar:
        printf_res = fprintf(handle, "%c", p->char_info);
        break;

      case refalrts::cDataNumber:
        printf_res = fprintf(handle, "%u ", p->number_info);
        break;

      case refalrts::cDataFunction:
        printf_res = fprintf(
          handle, "%s ", refalrts::function_name(p->function_info)->name
        );
        break;

      case refalrts::cDataIdentifier:
        printf_res = fprintf(handle, "%s ", p->ident_info->name());
        break;

      case refalrts::cDataOpenADT:
        printf_res = fprintf(handle, "[");
        break;

      case refalrts::cDataCloseADT:
        printf_res = fprintf(handle, "]");
        break;

      case refalrts::cDataOpenBracket:
        printf_res = fprintf(handle, "(");
        break;

      case refalrts::cDataCloseBracket:
        printf_res = fprintf(handle, ")");
        break;

      case refalrts::cDataFile:
        printf_res = fprintf(handle, "*%p", p->file_info);
        break;

      case refalrts::cDataClosure:
        printf_res = fprintf(handle, "{ ");
        p = refalrts::unwrap_closure(p);
        break;

      case refalrts::cDataClosureHead:
        printf_res = fprintf(handle, "[%u] ", p->number_info);
        break;

      case refalrts::cDataUnwrappedClosure:
        printf_res = fprintf(handle, "} ");
        refalrts::wrap_closure(p);
        break;

      default:
        refalrts_switch_default_violation(p->tag);
    }
  }

  if (printf_res >= 0 && ! (flags & cFlags_NoEOL)) {
    printf_res = fprintf(handle, "\n");
  }

  if (printf_res < 0) {
    return refalrts::cRecognitionImpossible;
  }

  if (flags & cFlags_Transparent) {
    refalrts::splice_evar(arg_begin, content_b, content_e);
  }

  refalrts::splice_to_freelist(vm, arg_begin, arg_end);
  return refalrts::cSuccess;
}
#line 12026 "Library.cpp"

static refalrts::FnResult func_Putout(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & Putout/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Putout/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Putout/4 0/5 e.AnyExpression/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::number_term( 0UL, context[5] ) )
      continue;
    // closed e.AnyExpression as range 6
    //DEBUG: e.AnyExpression: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </8 & __Step-Start/9 >/10 </11 & Autoopen/12 'w'/13 0/14 >/15 Tile{ AsIs: </0 Reuse: & Putout-Aux/4 HalfReuse: # stderr/5 AsIs: e.AnyExpression/6 AsIs: >/1 } </16 & __Step-End/17 >/18 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[8]);
    refalrts::alloc_name(vm, context[9], functions[efunc_u_u_Stepm_Start]);
    refalrts::alloc_close_call(vm, context[10]);
    refalrts::alloc_open_call(vm, context[11]);
    refalrts::alloc_name(vm, context[12], functions[efunc_Autoopen]);
    refalrts::alloc_char(vm, context[13], 'w');
    refalrts::alloc_number(vm, context[14], 0UL);
    refalrts::alloc_close_call(vm, context[15]);
    refalrts::alloc_open_call(vm, context[16]);
    refalrts::alloc_name(vm, context[17], functions[efunc_u_u_Stepm_End]);
    refalrts::alloc_close_call(vm, context[18]);
    refalrts::update_name(context[4], functions[efunc_Putoutm_Aux]);
    refalrts::reinit_ident(context[5], identifiers[ident_stderr]);
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[16], context[18] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[8], context[15] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Putout/4 s.FileNo/5 e.AnyExpression/2 >/1
  // closed e.AnyExpression as range 2
  //DEBUG: s.FileNo: 5
  //DEBUG: e.AnyExpression: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </6 & __Step-Start/7 >/8 </9 & Autoopen/10 'w'/11 s.FileNo/5/12 >/13 Tile{ AsIs: </0 Reuse: & Putout-Aux/4 AsIs: s.FileNo/5 AsIs: e.AnyExpression/2 AsIs: >/1 } </14 & __Step-End/15 >/16 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_u_u_Stepm_Start]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_Autoopen]);
  refalrts::alloc_char(vm, context[11], 'w');
  refalrts::copy_stvar(vm, context[12], context[5]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::alloc_open_call(vm, context[14]);
  refalrts::alloc_name(vm, context[15], functions[efunc_u_u_Stepm_End]);
  refalrts::alloc_close_call(vm, context[16]);
  refalrts::update_name(context[4], functions[efunc_Putoutm_Aux]);
  refalrts::push_stack( vm, context[16] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[14], context[16] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[6], context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Putout("Putout", 0U, 0U, func_Putout);


static refalrts::FnResult func_Putoutm_Aux(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 1604 "Library.ref"
  return cookie_ns::fwrite_line(vm, identifiers, arg_begin, arg_end, 0);
#line 12140 "Library.cpp"
}

static refalrts::NativeReference nat_ref_Putoutm_Aux("Putout-Aux", COOKIE1_, COOKIE2_, func_Putoutm_Aux);


static refalrts::FnResult func_gen_Rp_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 30 elems
  refalrts::Iter context[30];
  refalrts::zeros( context, 30 );
  // </0 & Rp:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Rp:1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & Rp:1/4 (/7 e.Key/13 )/8 (/11 e.NewValue/15 )/12 e.Values-B/19 (/25 e.Key/27 '='/29 e.OldValue/23 )/26 e.Values-E/21 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Key as range 13
    // closed e.NewValue as range 15
    context[19] = 0;
    context[20] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[21] = context[17];
      context[22] = context[18];
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      if( ! refalrts::repeated_evar_left( vm, context[27], context[28], context[13], context[14], context[23], context[24] ) )
        continue;
      context[29] = refalrts::char_left( '=', context[23], context[24] );
      if( ! context[29] )
        continue;
      // closed e.OldValue as range 23
      // closed e.Values-E as range 21
      //DEBUG: e.Key: 13
      //DEBUG: e.NewValue: 15
      //DEBUG: e.Values-B: 19
      //DEBUG: e.OldValue: 23
      //DEBUG: e.Values-E: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} e.Key/13 )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.OldValue/23 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & Buried/12 AsIs: e.Values-B/19 AsIs: (/25 AsIs: e.Key/27 AsIs: '='/29 } Tile{ AsIs: e.NewValue/15 } Tile{ AsIs: )/26 AsIs: e.Values-E/21 AsIs: >/1 } Tile{ HalfReuse: </11 } Tile{ Reuse: & __Step-End/4 HalfReuse: >/7 } Tile{ ]] }
      refalrts::reinit_name(context[12], functions[efunc_Buried]);
      refalrts::reinit_open_call(context[11]);
      refalrts::update_name(context[4], functions[efunc_u_u_Stepm_End]);
      refalrts::reinit_close_call(context[7]);
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[25], context[26] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[4], context[7] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[26], context[1] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[12], context[29] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[19], context[20], context[17], context[18] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Rp:1/4 (/7 e.Key/5 )/8 (/11 e.NewValue/9 )/12 e.Values/2 >/1
  // closed e.Key as range 5
  // closed e.NewValue as range 9
  // closed e.Values as range 2
  //DEBUG: e.Key: 5
  //DEBUG: e.NewValue: 9
  //DEBUG: e.Values: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Buried/4 AsIs: (/7 AsIs: e.Key/5 HalfReuse: '='/8 } Tile{ AsIs: e.NewValue/9 } Tile{ AsIs: )/12 AsIs: e.Values/2 AsIs: >/1 } Tile{ HalfReuse: </11 } & __Step-End/13 >/14 Tile{ ]] }
  refalrts::alloc_name(vm, context[13], functions[efunc_u_u_Stepm_End]);
  refalrts::alloc_close_call(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_Buried]);
  refalrts::reinit_char(context[8], '=');
  refalrts::reinit_open_call(context[11]);
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[12], context[1] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Rp_B1("Rp:1", COOKIE1_, COOKIE2_, func_gen_Rp_B1);


static refalrts::FnResult func_Rp(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & Rp/4 e.Key/5 '='/9 e.NewValue/7 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  refalrts::start_e_loop(vm);
  do {
    context[7] = context[2];
    context[8] = context[3];
    context[9] = refalrts::char_left( '=', context[7], context[8] );
    if( ! context[9] )
      continue;
    // closed e.NewValue as range 7
    //DEBUG: e.Key: 5
    //DEBUG: e.NewValue: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Rp:1/4 } Tile{ HalfReuse: (/9 } Tile{ AsIs: e.Key/5 } )/10 (/11 Tile{ AsIs: e.NewValue/7 } )/12 </13 & __Step-Start/14 >/15 </16 & Buried/17 >/18 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[10]);
    refalrts::alloc_open_bracket(vm, context[11]);
    refalrts::alloc_close_bracket(vm, context[12]);
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_u_u_Stepm_Start]);
    refalrts::alloc_close_call(vm, context[15]);
    refalrts::alloc_open_call(vm, context[16]);
    refalrts::alloc_name(vm, context[17], functions[efunc_Buried]);
    refalrts::alloc_close_call(vm, context[18]);
    refalrts::update_name(context[4], functions[efunc_gen_Rp_B1]);
    refalrts::reinit_open_bracket(context[9]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[13] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[12], context[18] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_elem( res, context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( refalrts::open_evar_advance( context[5], context[6], context[2], context[3] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_Rp("Rp", 0U, 0U, func_Rp);

#line 1630 "Library.ref"
namespace cookie_ns {

extern unsigned long raw_step(refalrts::VM *vm);
refalrts::GlobalRef<unsigned long> g_correction;

}  // namespace cookie_ns
#line 12347 "Library.cpp"

static refalrts::FnResult func_Step(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 1640 "Library.ref"
  refalrts::Iter content_b = 0, content_e = 0;
  refalrts::Iter pfunc =
    refalrts::call_left(content_b, content_e, arg_begin, arg_end);

  if (! refalrts::empty_seq(content_b, content_e)) {
    return refalrts::cRecognitionImpossible;
  }

  refalrts::RefalNumber step =
    static_cast<refalrts::RefalNumber>(
      cookie_ns::raw_step(vm) - cookie_ns::g_correction.ref(vm)
    );

  refalrts::reinit_number(arg_begin, step);
  refalrts::splice_to_freelist(vm, pfunc, arg_end);

  return refalrts::cSuccess;
#line 12372 "Library.cpp"
}

static refalrts::NativeReference nat_ref_Step("Step", 0U, 0U, func_Step);

#line 1661 "Library.ref"
unsigned long cookie_ns::raw_step(refalrts::VM *vm) {
  double perfomance_counters[
    refalrts::cPerformanceCounter_COUNTERS_NUMBER
  ];

  refalrts::read_performance_counters(vm, perfomance_counters);
  return static_cast<unsigned long>(
    perfomance_counters[refalrts::cPerformanceCounter_TotalSteps]
  );
}

namespace cookie_ns {

refalrts::GlobalRef<unsigned long> g_start_step;

}  // namespace cookie_ns
#line 12394 "Library.cpp"

static refalrts::FnResult func_u_u_Stepm_Start(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 1686 "Library.ref"
  if (0 != cookie_ns::g_start_step.ref(vm)) {
    return refalrts::cRecognitionImpossible;
  }
  cookie_ns::g_start_step.ref(vm) = cookie_ns::raw_step(vm);

  refalrts::splice_to_freelist(vm, arg_begin, arg_end);
  return refalrts::cSuccess;
#line 12409 "Library.cpp"
}

static refalrts::NativeReference nat_ref_u_u_Stepm_Start("__Step-Start", 0U, 0U, func_u_u_Stepm_Start);


static refalrts::FnResult func_u_u_Stepm_End(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 1698 "Library.ref"
  if (0 == cookie_ns::g_start_step.ref(vm)) {
    return refalrts::cRecognitionImpossible;
  }
  cookie_ns::g_correction.ref(vm) +=
    (cookie_ns::raw_step(vm) - cookie_ns::g_start_step.ref(vm)) + 1;
  cookie_ns::g_start_step.ref(vm) = 0;

  refalrts::splice_to_freelist(vm, arg_begin, arg_end);
  return refalrts::cSuccess;
#line 12430 "Library.cpp"
}

static refalrts::NativeReference nat_ref_u_u_Stepm_End("__Step-End", 0U, 0U, func_u_u_Stepm_End);


static refalrts::FnResult func_u_u_Stepm_Drop(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 1712 "Library.ref"
  /* Шаг вызова себя и шаг предыдущей функции */
  cookie_ns::g_correction.ref(vm) += 2;

  refalrts::splice_to_freelist(vm, arg_begin, arg_end);
  return refalrts::cSuccess;
#line 12447 "Library.cpp"
}

static refalrts::NativeReference nat_ref_u_u_Stepm_Drop("__Step-Drop", 0U, 0U, func_u_u_Stepm_Drop);


static refalrts::FnResult func_Sub(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Sub/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Sub/4 s.First/7 s.Second/8 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::svar_left( context[8], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    //DEBUG: s.First: 7
    //DEBUG: s.Second: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </9 & __Step-Drop/10 >/11 Tile{ AsIs: </0 Reuse: & Sub-Digits/4 AsIs: s.First/7 AsIs: s.Second/8 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[9]);
    refalrts::alloc_name(vm, context[10], functions[efunc_u_u_Stepm_Drop]);
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::update_name(context[4], functions[efunc_Subm_Digits]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[0];
    res = refalrts::splice_evar( res, context[9], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Sub/4 e.ArithmArg/2 >/1
  // closed e.ArithmArg as range 2
  //DEBUG: e.ArithmArg: 2
  //2: e.ArithmArg
  //13: e.ArithmArg

  refalrts::reset_allocator(vm);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_Sub_S2C1]);
  refalrts::alloc_open_call(vm, context[8]);
  refalrts::alloc_name(vm, context[9], functions[efunc_u_u_Stepm_Start]);
  refalrts::alloc_close_call(vm, context[10]);
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_NormArithmArg]);
  refalrts::copy_evar(vm, context[13], context[14], context[2], context[3]);
  refalrts::alloc_close_call(vm, context[15]);
  refalrts::alloc_close_call(vm, context[6]);
  refalrts::push_stack( vm, context[6] );
  refalrts::push_stack( vm, context[5] );
  res = refalrts::splice_elem( res, context[6] );
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[11] );
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_elem( res, context[11] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[8] );
  res = refalrts::splice_elem( res, context[10] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
  if (rec_res != refalrts::cSuccess)
    return rec_res;
  refalrts::this_is_generated_function(vm);
  do {
    // </5 & Sub$2?1/9 (/12 e.First/10 )/13 e.Second/7 >/6
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::call_left( context[7], context[8], context[5], context[6] );
    context[10] = 0;
    context[11] = 0;
    context[12] = refalrts::brackets_left( context[10], context[11], context[7], context[8] );
    if( ! context[12] )
      continue;
    refalrts::bracket_pointers(context[12], context[13]);
    // closed e.First as range 10
    // closed e.Second as range 7
    //DEBUG: e.ArithmArg: 2
    //DEBUG: e.First: 10
    //DEBUG: e.Second: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.ArithmArg/2 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: </5 Reuse: & Sub-Normed/9 AsIs: (/12 AsIs: e.First/10 AsIs: )/13 AsIs: e.Second/7 AsIs: >/6 HalfReuse: </1 } Tile{ Reuse: & __Step-End/4 } Tile{ HalfReuse: >/0 } Tile{ ]] }
    refalrts::update_name(context[9], functions[efunc_Subm_Normed]);
    refalrts::reinit_open_call(context[1]);
    refalrts::update_name(context[4], functions[efunc_u_u_Stepm_End]);
    refalrts::reinit_close_call(context[0]);
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[6] );
    refalrts::push_stack( vm, context[5] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[0] );
    res = refalrts::splice_elem( res, context[4] );
    res = refalrts::splice_evar( res, context[5], context[1] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  refalrts::splice_to_freelist(vm, context[5], context[6]);
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_Sub("Sub", 0U, 0U, func_Sub);


static refalrts::FnResult func_Subm_Digits(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 1735 "Library.ref"
  ARITHM_PRELUDE

  if (first >= second) {
    refalrts::reinit_number(arg_begin, first - second);
    refalrts::splice_to_freelist(vm, pFunc, arg_end);
  } else {
    refalrts::reinit_char(arg_begin, '-');
    refalrts::reinit_number(pFunc, second - first);
    refalrts::splice_to_freelist(vm, pFirst, arg_end);
  }

  return refalrts::cSuccess;
#line 12608 "Library.cpp"
}

static refalrts::NativeReference nat_ref_Subm_Digits("Sub-Digits", COOKIE1_, COOKIE2_, func_Subm_Digits);


static refalrts::FnResult func_Subm_Normed(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & Sub-Normed/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Sub-Normed/4 (/7 s.new1/9 e.new2/5 )/8 s.new3/10 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::svar_left( context[9], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 5
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new4 as range 2
  do {
    // </0 & Sub-Normed/4 (/7 '+'/9 e.new7/11 )/8 s.new5/10 e.new6/13 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    if( ! refalrts::char_term( '+', context[9] ) )
      continue;
    // closed e.new7 as range 11
    // closed e.new6 as range 13
    do {
      // </0 & Sub-Normed/4 (/7 '+'/9 e.First/15 )/8 '+'/10 e.Second/17 >/1
      context[15] = context[11];
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      if( ! refalrts::char_term( '+', context[10] ) )
        continue;
      // closed e.First as range 15
      // closed e.Second as range 17
      //DEBUG: e.First: 15
      //DEBUG: e.Second: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Sub-Nat:1/7 HalfReuse: (/9 AsIs: e.First/15 AsIs: )/8 HalfReuse: (/10 AsIs: e.Second/17 HalfReuse: )/1 } Tile{ AsIs: </0 } & Compare-Align/19 (/20 (/21 )/22 e.First/15/23 )/25 (/26 )/27 e.Second/17/28 >/30 >/31 Tile{ ]] }
      refalrts::alloc_name(vm, context[19], functions[efunc_Comparem_Align]);
      refalrts::alloc_open_bracket(vm, context[20]);
      refalrts::alloc_open_bracket(vm, context[21]);
      refalrts::alloc_close_bracket(vm, context[22]);
      refalrts::copy_evar(vm, context[23], context[24], context[15], context[16]);
      refalrts::alloc_close_bracket(vm, context[25]);
      refalrts::alloc_open_bracket(vm, context[26]);
      refalrts::alloc_close_bracket(vm, context[27]);
      refalrts::copy_evar(vm, context[28], context[29], context[17], context[18]);
      refalrts::alloc_close_call(vm, context[30]);
      refalrts::alloc_close_call(vm, context[31]);
      refalrts::reinit_open_call(context[4]);
      refalrts::reinit_name(context[7], functions[efunc_gen_Subm_Nat_B1]);
      refalrts::reinit_open_bracket(context[9]);
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[4] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[26], context[27] );
      refalrts::link_brackets( context[20], context[25] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::link_brackets( context[10], context[1] );
      refalrts::link_brackets( context[9], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[19], context[31] );
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_evar( res, context[4], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Sub-Normed/4 (/7 '+'/9 e.First/15 )/8 '-'/10 e.Second/17 >/1
      context[15] = context[11];
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      if( ! refalrts::char_term( '-', context[10] ) )
        continue;
      // closed e.First as range 15
      // closed e.Second as range 17
      //DEBUG: e.First: 15
      //DEBUG: e.Second: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} '+'/9 {REMOVED TILE} )/8 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Add-Nat/4 AsIs: (/7 } Tile{ AsIs: e.First/15 } Tile{ HalfReuse: )/10 AsIs: e.Second/17 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Addm_Nat]);
      refalrts::reinit_close_bracket(context[10]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[10];
      res = refalrts::splice_evar( res, context[15], context[16] );
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Sub-Normed/4 (/7 '+'/9 e.First/15 )/8 0/10 >/1
    context[15] = context[11];
    context[16] = context[12];
    if( ! refalrts::number_term( 0UL, context[10] ) )
      continue;
    if( ! refalrts::empty_seq( context[13], context[14] ) )
      continue;
    // closed e.First as range 15
    //DEBUG: e.First: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Sub-Normed/4 (/7 '+'/9 {REMOVED TILE} )/8 0/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.First/15 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[15], context[16] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Sub-Normed/4 (/7 '-'/9 e.new7/11 )/8 s.new5/10 e.new6/13 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    if( ! refalrts::char_term( '-', context[9] ) )
      continue;
    // closed e.new7 as range 11
    // closed e.new6 as range 13
    do {
      // </0 & Sub-Normed/4 (/7 '-'/9 e.First/15 )/8 '+'/10 e.Second/17 >/1
      context[15] = context[11];
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      if( ! refalrts::char_term( '+', context[10] ) )
        continue;
      // closed e.First as range 15
      // closed e.Second as range 17
      //DEBUG: e.First: 15
      //DEBUG: e.Second: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} '+'/10 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: '-'/0 HalfReuse: </4 HalfReuse: & Add-Nat/7 HalfReuse: (/9 AsIs: e.First/15 AsIs: )/8 } Tile{ AsIs: e.Second/17 } Tile{ AsIs: >/1 ]] }
      refalrts::reinit_char(context[0], '-');
      refalrts::reinit_open_call(context[4]);
      refalrts::reinit_name(context[7], functions[efunc_Addm_Nat]);
      refalrts::reinit_open_bracket(context[9]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[4] );
      refalrts::link_brackets( context[9], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[17], context[18] );
      refalrts::splice_to_freelist_open( vm, context[8], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Sub-Normed/4 (/7 '-'/9 e.First/15 )/8 '-'/10 e.Second/17 >/1
      context[15] = context[11];
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      if( ! refalrts::char_term( '-', context[10] ) )
        continue;
      // closed e.First as range 15
      // closed e.Second as range 17
      //DEBUG: e.First: 15
      //DEBUG: e.Second: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </19 Tile{ HalfReuse: & Neg/0 HalfReuse: </4 HalfReuse: & Sub-Nat:1/7 HalfReuse: (/9 AsIs: e.First/15 AsIs: )/8 HalfReuse: (/10 AsIs: e.Second/17 HalfReuse: )/1 } </20 & Compare-Align/21 (/22 (/23 )/24 e.First/15/25 )/27 (/28 )/29 e.Second/17/30 >/32 >/33 >/34 Tile{ ]] }
      refalrts::alloc_open_call(vm, context[19]);
      refalrts::alloc_open_call(vm, context[20]);
      refalrts::alloc_name(vm, context[21], functions[efunc_Comparem_Align]);
      refalrts::alloc_open_bracket(vm, context[22]);
      refalrts::alloc_open_bracket(vm, context[23]);
      refalrts::alloc_close_bracket(vm, context[24]);
      refalrts::copy_evar(vm, context[25], context[26], context[15], context[16]);
      refalrts::alloc_close_bracket(vm, context[27]);
      refalrts::alloc_open_bracket(vm, context[28]);
      refalrts::alloc_close_bracket(vm, context[29]);
      refalrts::copy_evar(vm, context[30], context[31], context[17], context[18]);
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::alloc_close_call(vm, context[33]);
      refalrts::alloc_close_call(vm, context[34]);
      refalrts::reinit_name(context[0], functions[efunc_Neg]);
      refalrts::reinit_open_call(context[4]);
      refalrts::reinit_name(context[7], functions[efunc_gen_Subm_Nat_B1]);
      refalrts::reinit_open_bracket(context[9]);
      refalrts::reinit_open_bracket(context[10]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::push_stack( vm, context[34] );
      refalrts::push_stack( vm, context[19] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[4] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[28], context[29] );
      refalrts::link_brackets( context[22], context[27] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[10], context[1] );
      refalrts::link_brackets( context[9], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[20], context[34] );
      res = refalrts::splice_evar( res, context[0], context[1] );
      res = refalrts::splice_elem( res, context[19] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Sub-Normed/4 (/7 '-'/9 e.First/15 )/8 0/10 >/1
    context[15] = context[11];
    context[16] = context[12];
    if( ! refalrts::number_term( 0UL, context[10] ) )
      continue;
    if( ! refalrts::empty_seq( context[13], context[14] ) )
      continue;
    // closed e.First as range 15
    //DEBUG: e.First: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} & Sub-Normed/4 (/7 '-'/9 {REMOVED TILE} )/8 0/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: '-'/0 } Tile{ AsIs: e.First/15 } Tile{ ]] }
    refalrts::reinit_char(context[0], '-');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[15], context[16] );
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Sub-Normed/4 (/7 0/9 )/8 s.new5/10 e.new6/2 >/1
  if( ! refalrts::number_term( 0UL, context[9] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new6 as range 2
  do {
    // </0 & Sub-Normed/4 (/7 0/9 )/8 '+'/10 e.Second/11 >/1
    context[11] = context[2];
    context[12] = context[3];
    if( ! refalrts::char_term( '+', context[10] ) )
      continue;
    // closed e.Second as range 11
    //DEBUG: e.Second: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} & Sub-Normed/4 (/7 0/9 )/8 '+'/10 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: '-'/0 } Tile{ AsIs: e.Second/11 } Tile{ ]] }
    refalrts::reinit_char(context[0], '-');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Sub-Normed/4 (/7 0/9 )/8 '-'/10 e.Second/11 >/1
    context[11] = context[2];
    context[12] = context[3];
    if( ! refalrts::char_term( '-', context[10] ) )
      continue;
    // closed e.Second as range 11
    //DEBUG: e.Second: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Sub-Normed/4 (/7 0/9 )/8 '-'/10 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.Second/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Sub-Normed/4 (/7 0/9 )/8 0/10 >/1
  if( ! refalrts::number_term( 0UL, context[10] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Sub-Normed/4 (/7 0/9 )/8 0/10 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: 0/1 ]] }
  refalrts::reinit_number(context[1], 0UL);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Subm_Normed("Sub-Normed", COOKIE1_, COOKIE2_, func_Subm_Normed);


static refalrts::FnResult func_Neg(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & Neg/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Neg/4 s.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Neg/4 0/7 >/1
      if( ! refalrts::number_term( 0UL, context[7] ) )
        continue;
      if( ! refalrts::empty_seq( context[5], context[6] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Neg/4 0/7 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 0/1 ]] }
      refalrts::reinit_number(context[1], 0UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Neg/4 '-'/7 e.Digits/8 >/1
    context[8] = context[5];
    context[9] = context[6];
    if( ! refalrts::char_term( '-', context[7] ) )
      continue;
    // closed e.Digits as range 8
    //DEBUG: e.Digits: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Neg/4 '-'/7 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.Digits/8 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Neg/4 e.Digits/2 >/1
  // closed e.Digits as range 2
  //DEBUG: e.Digits: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} & Neg/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: '-'/0 } Tile{ AsIs: e.Digits/2 } Tile{ ]] }
  refalrts::reinit_char(context[0], '-');
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, context[0], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Neg("Neg", COOKIE1_, COOKIE2_, func_Neg);


static refalrts::FnResult func_gen_Subm_Nat_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & Sub-Nat:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Sub-Nat:1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 s.new3/13 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & Sub-Nat:1/4 (/7 e.First/14 )/8 (/11 e.Second/16 )/12 '+'/13 >/1
    context[14] = context[5];
    context[15] = context[6];
    context[16] = context[9];
    context[17] = context[10];
    if( ! refalrts::char_term( '+', context[13] ) )
      continue;
    // closed e.First as range 14
    // closed e.Second as range 16
    //DEBUG: e.First: 14
    //DEBUG: e.Second: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </12 } Tile{ HalfReuse: & LeadingZeros/11 } Tile{ AsIs: </0 Reuse: & DoSub-Nat-Nat/4 AsIs: (/7 AsIs: e.First/14 AsIs: )/8 } Tile{ AsIs: e.Second/16 } Tile{ HalfReuse: >/13 AsIs: >/1 ]] }
    refalrts::reinit_open_call(context[12]);
    refalrts::reinit_name(context[11], functions[efunc_LeadingZeros]);
    refalrts::update_name(context[4], functions[efunc_DoSubm_Natm_Nat]);
    refalrts::reinit_close_call(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[13];
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_elem( res, context[12] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Sub-Nat:1/4 (/7 e.First/14 )/8 (/11 e.Second/16 )/12 '-'/13 >/1
    context[14] = context[5];
    context[15] = context[6];
    context[16] = context[9];
    context[17] = context[10];
    if( ! refalrts::char_term( '-', context[13] ) )
      continue;
    // closed e.First as range 14
    // closed e.Second as range 16
    //DEBUG: e.First: 14
    //DEBUG: e.Second: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } '-'/18 Tile{ AsIs: </0 Reuse: & LeadingZeros/4 HalfReuse: </7 } Tile{ HalfReuse: & DoSub-Nat-Nat/8 AsIs: (/11 AsIs: e.Second/16 AsIs: )/12 } Tile{ AsIs: e.First/14 } Tile{ HalfReuse: >/13 AsIs: >/1 ]] }
    refalrts::alloc_char(vm, context[18], '-');
    refalrts::update_name(context[4], functions[efunc_LeadingZeros]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[8], functions[efunc_DoSubm_Natm_Nat]);
    refalrts::reinit_close_call(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[7] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[13];
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[8], context[12] );
    res = refalrts::splice_evar( res, context[0], context[7] );
    res = refalrts::splice_elem( res, context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Sub-Nat:1/4 (/7 e.First/5 )/8 (/11 e.Second/9 )/12 '0'/13 >/1
  if( ! refalrts::char_term( '0', context[13] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.First as range 5
  // closed e.Second as range 9
  //DEBUG: e.First: 5
  //DEBUG: e.Second: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Sub-Nat:1/4 (/7 e.First/5 )/8 (/11 e.Second/9 )/12 '0'/13 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: 0/1 ]] }
  refalrts::reinit_number(context[1], 0UL);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Subm_Nat_B1("Sub-Nat:1", COOKIE1_, COOKIE2_, func_gen_Subm_Nat_B1);


static refalrts::FnResult func_Subm_Nat(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & Sub-Nat/4 (/7 e.First/5 )/8 e.Second/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.First as range 5
  // closed e.Second as range 2
  //DEBUG: e.First: 5
  //DEBUG: e.Second: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sub-Nat:1/4 AsIs: (/7 AsIs: e.First/5 AsIs: )/8 } (/9 e.Second/2/10 )/12 </13 & Compare-Align/14 (/15 (/16 )/17 e.First/5/18 )/20 (/21 )/22 Tile{ AsIs: e.Second/2 } >/23 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::copy_evar(vm, context[10], context[11], context[2], context[3]);
  refalrts::alloc_close_bracket(vm, context[12]);
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_Comparem_Align]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_open_bracket(vm, context[16]);
  refalrts::alloc_close_bracket(vm, context[17]);
  refalrts::copy_evar(vm, context[18], context[19], context[5], context[6]);
  refalrts::alloc_close_bracket(vm, context[20]);
  refalrts::alloc_open_bracket(vm, context[21]);
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_close_call(vm, context[23]);
  refalrts::update_name(context[4], functions[efunc_gen_Subm_Nat_B1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[23] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[15], context[20] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[9], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[23] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[22] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Subm_Nat("Sub-Nat", COOKIE1_, COOKIE2_, func_Subm_Nat);


static refalrts::FnResult func_Subm_Natm_Nat(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & Sub-Nat-Nat/4 (/7 e.First/5 )/8 e.Second/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.First as range 5
  // closed e.Second as range 2
  //DEBUG: e.First: 5
  //DEBUG: e.Second: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & LeadingZeros/10 Tile{ AsIs: </0 Reuse: & DoSub-Nat-Nat/4 AsIs: (/7 AsIs: e.First/5 AsIs: )/8 AsIs: e.Second/2 AsIs: >/1 } >/11 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_LeadingZeros]);
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_DoSubm_Natm_Nat]);
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Subm_Natm_Nat("Sub-Nat-Nat", COOKIE1_, COOKIE2_, func_Subm_Natm_Nat);


static refalrts::FnResult func_gen_DoSubm_Natm_Nat_S1B2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & DoSub-Nat-Nat$1:2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoSub-Nat-Nat$1:2/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 s.new4/13 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  if( ! refalrts::svar_right( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & DoSub-Nat-Nat$1:2/4 (/7 e.First/14 )/8 (/11 e.Second/16 )/12 s.LastDigit/13 >/1
    context[14] = context[5];
    context[15] = context[6];
    context[16] = context[9];
    context[17] = context[10];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.First as range 14
    // closed e.Second as range 16
    //DEBUG: s.LastDigit: 13
    //DEBUG: e.First: 14
    //DEBUG: e.Second: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/11 {REMOVED TILE} {REMOVED TILE} s.LastDigit/13 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoSub-Nat-Nat/4 AsIs: (/7 AsIs: e.First/14 AsIs: )/8 } Tile{ AsIs: e.Second/16 } Tile{ HalfReuse: >/12 } Tile{ HalfReuse: s.LastDigit13 /1 ]] }
    refalrts::update_name(context[4], functions[efunc_DoSubm_Natm_Nat]);
    refalrts::reinit_close_call(context[12]);
    refalrts::reinit_svar( context[1], context[13] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    refalrts::splice_to_freelist_open( vm, context[8], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoSub-Nat-Nat$1:2/4 (/7 e.First/5 )/8 (/11 e.Second/9 )/12 '*'/14 s.LastDigit/13 >/1
  context[14] = refalrts::char_left( '*', context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.First as range 5
  // closed e.Second as range 9
  //DEBUG: s.LastDigit: 13
  //DEBUG: e.First: 5
  //DEBUG: e.Second: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LastDigit/13 {REMOVED TILE}
  //RESULT: Tile{ [[ } </15 Tile{ HalfReuse: & DoSub-Nat-Nat/14 } (/16 </17 & LeadingZeros/18 Tile{ AsIs: </0 Reuse: & DoSub-Nat-Nat/4 AsIs: (/7 AsIs: e.First/5 AsIs: )/8 HalfReuse: 1/11 } >/19 >/20 Tile{ AsIs: )/12 } Tile{ AsIs: e.Second/9 } >/21 Tile{ HalfReuse: s.LastDigit13 /1 ]] }
  refalrts::alloc_open_call(vm, context[15]);
  refalrts::alloc_open_bracket(vm, context[16]);
  refalrts::alloc_open_call(vm, context[17]);
  refalrts::alloc_name(vm, context[18], functions[efunc_LeadingZeros]);
  refalrts::alloc_close_call(vm, context[19]);
  refalrts::alloc_close_call(vm, context[20]);
  refalrts::alloc_close_call(vm, context[21]);
  refalrts::reinit_name(context[14], functions[efunc_DoSubm_Natm_Nat]);
  refalrts::update_name(context[4], functions[efunc_DoSubm_Natm_Nat]);
  refalrts::reinit_number(context[11], 1UL);
  refalrts::reinit_svar( context[1], context[13] );
  refalrts::push_stack( vm, context[21] );
  refalrts::push_stack( vm, context[15] );
  refalrts::link_brackets( context[16], context[12] );
  refalrts::push_stack( vm, context[20] );
  refalrts::push_stack( vm, context[17] );
  refalrts::push_stack( vm, context[19] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[21] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[0], context[11] );
  res = refalrts::splice_evar( res, context[16], context[18] );
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_elem( res, context[15] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoSubm_Natm_Nat_S1B2("DoSub-Nat-Nat$1:2", COOKIE1_, COOKIE2_, func_gen_DoSubm_Natm_Nat_S1B2);


static refalrts::FnResult func_gen_DoSubm_Natm_Nat_S1B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 1787 "Library.ref"
        ARITHM_PRELUDE

        refalrts::RefalNumber diff = first - second;

        if (diff <= first) {
          pFirst->number_info = diff;
          refalrts::splice_to_freelist(vm, arg_begin, pFunc);
          refalrts::splice_to_freelist(vm, pSecond, arg_end);
        } else {
          refalrts::reinit_char(pFirst, '*');
          pSecond->number_info = diff;
          refalrts::splice_to_freelist(vm, arg_begin, pFunc);
          refalrts::splice_to_freelist(vm, arg_end, arg_end);
        }

        return refalrts::cSuccess;
#line 13419 "Library.cpp"
}

static refalrts::NativeReference nat_ref_gen_DoSubm_Natm_Nat_S1B1("DoSub-Nat-Nat$1:1", COOKIE1_, COOKIE2_, func_gen_DoSubm_Natm_Nat_S1B1);


static refalrts::FnResult func_DoSubm_Natm_Nat(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & DoSub-Nat-Nat/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoSub-Nat-Nat/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & DoSub-Nat-Nat/4 (/7 e.First/9 s.FirstLast/13 )/8 e.Second/11 s.SecondLast/14 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    if( ! refalrts::svar_right( context[13], context[9], context[10] ) )
      continue;
    // closed e.First as range 9
    if( ! refalrts::svar_right( context[14], context[11], context[12] ) )
      continue;
    // closed e.Second as range 11
    //DEBUG: s.FirstLast: 13
    //DEBUG: e.First: 9
    //DEBUG: s.SecondLast: 14
    //DEBUG: e.Second: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoSub-Nat-Nat$1:2/4 AsIs: (/7 } Tile{ AsIs: e.First/9 } )/15 (/16 Tile{ AsIs: e.Second/11 } Tile{ AsIs: )/8 } </17 & DoSub-Nat-Nat$1:1/18 Tile{ AsIs: s.FirstLast/13 } Tile{ AsIs: s.SecondLast/14 AsIs: >/1 } >/19 Tile{ ]] }
    refalrts::alloc_close_bracket(vm, context[15]);
    refalrts::alloc_open_bracket(vm, context[16]);
    refalrts::alloc_open_call(vm, context[17]);
    refalrts::alloc_name(vm, context[18], functions[efunc_gen_DoSubm_Natm_Nat_S1B1]);
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::update_name(context[4], functions[efunc_gen_DoSubm_Natm_Nat_S1B2]);
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[17] );
    refalrts::link_brackets( context[16], context[8] );
    refalrts::link_brackets( context[7], context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[14], context[1] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoSub-Nat-Nat/4 (/7 e.First/5 )/8 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.First as range 5
  //DEBUG: e.First: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DoSub-Nat-Nat/4 (/7 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.First/5 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoSubm_Natm_Nat("DoSub-Nat-Nat", COOKIE1_, COOKIE2_, func_DoSubm_Natm_Nat);


static refalrts::FnResult func_LeadingZeros(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & LeadingZeros/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & LeadingZeros/4 0/7 e.new1/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = refalrts::number_left( 0UL, context[5], context[6] );
    if( ! context[7] )
      continue;
    // closed e.new1 as range 5
    do {
      // </0 & LeadingZeros/4 0/7 >/1
      if( ! refalrts::empty_seq( context[5], context[6] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & LeadingZeros/4 0/7 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 0/1 ]] }
      refalrts::reinit_number(context[1], 0UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & LeadingZeros/4 0/7 e.Digits/8 >/1
    context[8] = context[5];
    context[9] = context[6];
    // closed e.Digits as range 8
    //DEBUG: e.Digits: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & LeadingZeros/7 AsIs: e.Digits/8 AsIs: >/1 ]] }
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[7], functions[efunc_LeadingZeros]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[4];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & LeadingZeros/4 e.Digits/2 >/1
  // closed e.Digits as range 2
  //DEBUG: e.Digits: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & LeadingZeros/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Digits/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_LeadingZeros("LeadingZeros", COOKIE1_, COOKIE2_, func_LeadingZeros);


static refalrts::FnResult func_gen_Symb_S2A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & Symb$2=1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Symb$2=1/4 s.new1/5 s.new2/6 e.new3/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & Symb$2=1/4 s.new4/5 0/6 e.new5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    if( ! refalrts::number_term( 0UL, context[6] ) )
      continue;
    // closed e.new5 as range 7
    do {
      // </0 & Symb$2=1/4 0/5 0/6 e.NormedNumber/9 >/1
      context[9] = context[7];
      context[10] = context[8];
      if( ! refalrts::number_term( 0UL, context[5] ) )
        continue;
      // closed e.NormedNumber as range 9
      //DEBUG: e.NormedNumber: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} e.NormedNumber/9 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: '0'/0 HalfReuse: </4 HalfReuse: & __Step-End/5 HalfReuse: >/6 } Tile{ ]] }
      refalrts::reinit_char(context[0], '0');
      refalrts::reinit_open_call(context[4]);
      refalrts::reinit_name(context[5], functions[efunc_u_u_Stepm_End]);
      refalrts::reinit_close_call(context[6]);
      refalrts::push_stack( vm, context[6] );
      refalrts::push_stack( vm, context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      refalrts::splice_to_freelist_open( vm, context[6], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Symb$2=1/4 s.First/5 0/6 e.NormedNumber/9 >/1
    context[9] = context[7];
    context[10] = context[8];
    // closed e.NormedNumber as range 9
    //DEBUG: s.First: 5
    //DEBUG: e.NormedNumber: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.First/5 {REMOVED TILE} e.NormedNumber/9 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: s.First5 /0 HalfReuse: '0'/4 } Tile{ HalfReuse: </6 } & __Step-End/11 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[11], functions[efunc_u_u_Stepm_End]);
    refalrts::reinit_svar( context[0], context[5] );
    refalrts::reinit_char(context[4], '0');
    refalrts::reinit_open_call(context[6]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[6] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_elem( res, context[6] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Symb$2=1/4 s.First/5 s.First/6 e.NormedNumber/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    if( ! refalrts::repeated_stvar_term( vm, context[6], context[5] ) )
      continue;
    // closed e.NormedNumber as range 7
    //DEBUG: s.First: 5
    //DEBUG: e.NormedNumber: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} s.First/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: s.First/6 } Tile{ AsIs: </0 Reuse: & Symb-Nat/4 } Tile{ AsIs: e.NormedNumber/7 } >/9 </10 & __Step-End/11 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[9]);
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_u_u_Stepm_End]);
    refalrts::update_name(context[4], functions[efunc_Symbm_Nat]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[11] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_elem( res, context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Symb$2=1/4 s.First/5 '+'/6 e.NormedNumber/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    if( ! refalrts::char_term( '+', context[6] ) )
      continue;
    // closed e.NormedNumber as range 7
    //DEBUG: s.First: 5
    //DEBUG: e.NormedNumber: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.First/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Symb-Nat/4 } Tile{ AsIs: e.NormedNumber/7 } >/9 Tile{ HalfReuse: </6 } & __Step-End/10 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[9]);
    refalrts::alloc_name(vm, context[10], functions[efunc_u_u_Stepm_End]);
    refalrts::update_name(context[4], functions[efunc_Symbm_Nat]);
    refalrts::reinit_open_call(context[6]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[6] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_elem( res, context[6] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Symb$2=1/4 s.First/5 s.NormedSign/6 e.NormedNumber/2 >/1
  // closed e.NormedNumber as range 2
  //DEBUG: s.First: 5
  //DEBUG: s.NormedSign: 6
  //DEBUG: e.NormedNumber: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Symb$2:1*4/4 } (/7 Tile{ AsIs: e.NormedNumber/2 } )/8 Tile{ AsIs: s.First/5 AsIs: s.NormedSign/6 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_close_bracket(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_gen_Symb_S2B1D4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Symb_S2A1("Symb$2=1", COOKIE1_, COOKIE2_, func_gen_Symb_S2A1);


static refalrts::FnResult func_Symb(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Symb/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Symb/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Symb/4 s.Number/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: s.Number: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </6 & __Step-Drop/7 >/8 Tile{ AsIs: </0 Reuse: & Symb-Digit/4 AsIs: s.Number/5 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[6]);
    refalrts::alloc_name(vm, context[7], functions[efunc_u_u_Stepm_Drop]);
    refalrts::alloc_close_call(vm, context[8]);
    refalrts::update_name(context[4], functions[efunc_Symbm_Digit]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[6] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[0];
    res = refalrts::splice_evar( res, context[6], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Symb/4 s.First/5 e.Tail/2 >/1
  // closed e.Tail as range 2
  //DEBUG: s.First: 5
  //DEBUG: e.Tail: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </6 & Symb$2=1/7 s.First/5/8 </9 & __Step-Start/10 >/11 Tile{ AsIs: </0 Reuse: & NormNumber/4 AsIs: s.First/5 AsIs: e.Tail/2 AsIs: >/1 } >/12 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_Symb_S2A1]);
  refalrts::copy_stvar(vm, context[8], context[5]);
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_u_u_Stepm_Start]);
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::alloc_close_call(vm, context[12]);
  refalrts::update_name(context[4], functions[efunc_NormNumber]);
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[6] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[6], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Symb("Symb", 0U, 0U, func_Symb);


static refalrts::FnResult func_gen_Symbm_Nat_S2A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Symb-Nat$2=2/4 (/7 e.Div/5 )/8 (/11 e.Zeros/9 )/12 e.StrDigits/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.Div as range 5
  // closed e.Zeros as range 9
  // closed e.StrDigits as range 2
  //DEBUG: e.Div: 5
  //DEBUG: e.Zeros: 9
  //DEBUG: e.StrDigits: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 (/11 e.Zeros/9 )/12 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Symb-Nat/4 } Tile{ AsIs: e.Div/5 } Tile{ AsIs: >/1 } Tile{ AsIs: e.StrDigits/2 } Tile{ ]] }
  refalrts::update_name(context[4], functions[efunc_Symbm_Nat]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Symbm_Nat_S2A2("Symb-Nat$2=2", COOKIE1_, COOKIE2_, func_gen_Symbm_Nat_S2A2);


static refalrts::FnResult func_gen_Symbm_Nat_S2A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & Symb-Nat$2=1/4 (/7 e.Div/5 )/8 s.Mod/9 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Div as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.Div: 5
  //DEBUG: s.Mod: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Symb-Nat$2=2/4 AsIs: (/7 AsIs: e.Div/5 AsIs: )/8 } </10 & Last/11 9/12"000000000"/13 </15 & Symb-Digit/16 Tile{ AsIs: s.Mod/9 AsIs: >/1 } >/17 >/18 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[10]);
  refalrts::alloc_name(vm, context[11], functions[efunc_Last]);
  refalrts::alloc_number(vm, context[12], 9UL);
  refalrts::alloc_chars(vm, context[13], context[14], "000000000", 9);
  refalrts::alloc_open_call(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_Symbm_Digit]);
  refalrts::alloc_close_call(vm, context[17]);
  refalrts::alloc_close_call(vm, context[18]);
  refalrts::update_name(context[4], functions[efunc_gen_Symbm_Nat_S2A2]);
  refalrts::push_stack( vm, context[18] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[17] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[15] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[9], context[1] );
  res = refalrts::splice_evar( res, context[10], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Symbm_Nat_S2A1("Symb-Nat$2=1", COOKIE1_, COOKIE2_, func_gen_Symbm_Nat_S2A1);


static refalrts::FnResult func_Symbm_Nat(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Symb-Nat/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Symb-Nat/4 s.new1/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    do {
      // </0 & Symb-Nat/4 s.Number/7 >/1
      //DEBUG: s.Number: 7

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Symb-Digit/4 AsIs: s.Number/7 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Symbm_Digit]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Symb-Nat/4 s.Numerator/7 >/1
    //DEBUG: s.Numerator: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </8 & Symb-Nat$2=1/9 </10 & Divmod-Nat$1=1@1/11 Tile{ AsIs: </0 Reuse: & Divmod-Digits/4 AsIs: s.Numerator/7 HalfReuse: 1000000000/1 } >/12 >/13 >/14 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[8]);
    refalrts::alloc_name(vm, context[9], functions[efunc_gen_Symbm_Nat_S2A1]);
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_gen_Divmodm_Nat_S1A1Z1]);
    refalrts::alloc_close_call(vm, context[12]);
    refalrts::alloc_close_call(vm, context[13]);
    refalrts::alloc_close_call(vm, context[14]);
    refalrts::update_name(context[4], functions[efunc_Divmodm_Digits]);
    refalrts::reinit_number(context[1], 1000000000UL);
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[12], context[14] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[8], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Symb-Nat/4 e.Number/2 >/1
  // closed e.Number as range 2
  //DEBUG: e.Number: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Symb-Nat$2=1/4 } </5 & Divmod-Nat$2=1@5/6 (/7 Tile{ AsIs: e.Number/2 } )/8 </9 & Divmod-Nat$2=1:1/10 1000000000/11 >/12 >/13 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_Divmodm_Nat_S2A1Z5]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_close_bracket(vm, context[8]);
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Divmodm_Nat_S2A1B1]);
  refalrts::alloc_number(vm, context[11], 1000000000UL);
  refalrts::alloc_close_call(vm, context[12]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_gen_Symbm_Nat_S2A1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[8], context[13] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Symbm_Nat("Symb-Nat", COOKIE1_, COOKIE2_, func_Symbm_Nat);


static refalrts::FnResult func_Time(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 1856 "Library.ref"
  refalrts::Iter content_b = 0, content_e = 0;
  refalrts::call_left(content_b, content_e, arg_begin, arg_end);

  if (! refalrts::empty_seq(content_b, content_e)) {
    return refalrts::cRecognitionImpossible;
  }

  refalrts::reset_allocator(vm);

  time_t timer;
  time(&timer);
  char *str_time = ctime(&timer);

  char *newline = strchr(str_time, '\n');
  if (newline) {
    *newline = '\0';
  }

  refalrts::alloc_string(vm, content_b, content_e, str_time);
  refalrts::splice_evar(arg_begin, content_b, content_e);
  refalrts::splice_to_freelist(vm, arg_begin, arg_end);
  return refalrts::cSuccess;
#line 14104 "Library.cpp"
}

static refalrts::NativeReference nat_ref_Time("Time", 0U, 0U, func_Time);


static refalrts::FnResult func_Type(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 1909 "Library.ref"
  refalrts::Iter content_b = 0;
  refalrts::Iter content_e = 0;
  refalrts::Iter pfunc_name =
    refalrts::call_left(content_b, content_e, arg_begin, arg_end);

  char type = '*';
  char subtype = '0';

  if (! refalrts::empty_seq(content_b, content_e)) {
    switch (content_b->tag) {
    case refalrts::cDataChar:
      {
        char ch = content_b->char_info;

        if (isdigit(ch)) {
          type = 'D';
        } else {
          if (isalpha(ch)) {
            type = 'L';
          } else if (isprint(ch)) {
            type = 'P';
          } else {
            type = 'O';
          }

          if (isupper(ch)) {
            subtype = 'u';
          } else {
            subtype = 'l';
          }
        }
      }
      break;

    case refalrts::cDataNumber:
      type = 'N';
      break;

    case refalrts::cDataFunction:
      type = 'F';
      subtype = 'g';
      break;

    case refalrts::cDataIdentifier:
      {
        const char *name = content_b->ident_info->name();

        type = 'W';
        subtype = 'q';
        if (isalpha(*name)) {
          while (
            *name != '\0' && (isalnum(*name) || *name == '_' || *name == '-')
          ) {
            ++name;
          }

          if (*name == '\0') {
            subtype = 'i';
          }
        }
      }
      break;

    case refalrts::cDataOpenADT:
      type = 'B';
      subtype = 'a';
      break;

    case refalrts::cDataOpenBracket:
      type = 'B';
      break;

    case refalrts::cDataFile:
      type = 'H';
      break;

    case refalrts::cDataClosure:
      type = 'F';
      subtype = 'c';
      break;

    default:
      refalrts_switch_default_violation(content_b->tag);
      // break;
    }
  }

  refalrts::reinit_char(arg_begin, type);
  refalrts::reinit_char(pfunc_name, subtype);
  refalrts::splice_to_freelist(vm, arg_end, arg_end);

  return refalrts::cSuccess;
#line 14208 "Library.cpp"
}

static refalrts::NativeReference nat_ref_Type("Type", 0U, 0U, func_Type);

#line 2009 "Library.ref"
namespace {

struct UpperConv {
  bool for_convert(refalrts::Iter item) {
    return refalrts::cDataChar == item->tag;
  }

  void convert(refalrts::Iter item) {
    item->char_info = static_cast<char>(toupper(item->char_info));
  }
};

}  // unnamed namespace
#line 14227 "Library.cpp"

static refalrts::FnResult func_Upper(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 2026 "Library.ref"
  return convert(vm, arg_begin, arg_end, UpperConv());
#line 14236 "Library.cpp"
}

static refalrts::NativeReference nat_ref_Upper("Upper", 0U, 0U, func_Upper);


static refalrts::FnResult func_Sysfun(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & Sysfun/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Sysfun/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Sysfun/4 1/5 e.FileName/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::number_term( 1UL, context[5] ) )
      continue;
    // closed e.FileName as range 6
    //DEBUG: e.FileName: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </8 & __Step-Start/9 >/10 Tile{ AsIs: </0 Reuse: & Sysfun-Xxin:1/4 HalfReuse: (/5 AsIs: e.FileName/6 HalfReuse: )/1 } </11 & ExistFile/12 e.FileName/6/13 >/15 >/16 </17 & __Step-End/18 >/19 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[8]);
    refalrts::alloc_name(vm, context[9], functions[efunc_u_u_Stepm_Start]);
    refalrts::alloc_close_call(vm, context[10]);
    refalrts::alloc_open_call(vm, context[11]);
    refalrts::alloc_name(vm, context[12], functions[efunc_ExistFile]);
    refalrts::copy_evar(vm, context[13], context[14], context[6], context[7]);
    refalrts::alloc_close_call(vm, context[15]);
    refalrts::alloc_close_call(vm, context[16]);
    refalrts::alloc_open_call(vm, context[17]);
    refalrts::alloc_name(vm, context[18], functions[efunc_u_u_Stepm_End]);
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::update_name(context[4], functions[efunc_gen_Sysfunm_Xxin_B1]);
    refalrts::reinit_open_bracket(context[5]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[11] );
    refalrts::link_brackets( context[5], context[1] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[19] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[8], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Sysfun/4 2/5 e.new3/2 (/8 s.new4/10 e.new5/6 )/9 >/1
  if( ! refalrts::number_term( 2UL, context[5] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_right( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new3 as range 2
  if( ! refalrts::svar_left( context[10], context[6], context[7] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new5 as range 6
  do {
    // </0 & Sysfun/4 2/5 s.FileNameChar/15 e./11 (/8 s.Width/10 e.ObjectExpression/13 )/9 >/1
    context[11] = context[2];
    context[12] = context[3];
    context[13] = context[6];
    context[14] = context[7];
    // closed e.ObjectExpression as range 13
    if( ! refalrts::svar_left( context[15], context[11], context[12] ) )
      continue;
    // closed e. as range 11
    //DEBUG: s.Width: 10
    //DEBUG: e.ObjectExpression: 13
    //DEBUG: s.FileNameChar: 15
    //DEBUG: e.: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Step-Start/4 HalfReuse: >/5 } </16 & Xxout-Wrap/17 </18 & Open-Auto=1@1/19 Tile{ AsIs: s.FileNameChar/15 } (/20 Tile{ AsIs: e./11 } )/21 </22 & GetFreeHandle/23 >/24 Tile{ HalfReuse: >/8 AsIs: s.Width/10 } </25 & Xxout-Scan/26 </27 & Type/28 Tile{ AsIs: e.ObjectExpression/13 } >/29 >/30 >/31 </32 Tile{ HalfReuse: & __Step-End/9 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[16]);
    refalrts::alloc_name(vm, context[17], functions[efunc_Xxoutm_Wrap]);
    refalrts::alloc_open_call(vm, context[18]);
    refalrts::alloc_name(vm, context[19], functions[efunc_gen_Openm_Auto_A1Z1]);
    refalrts::alloc_open_bracket(vm, context[20]);
    refalrts::alloc_close_bracket(vm, context[21]);
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_name(vm, context[23], functions[efunc_GetFreeHandle]);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::alloc_open_call(vm, context[25]);
    refalrts::alloc_name(vm, context[26], functions[efunc_Xxoutm_Scan]);
    refalrts::alloc_open_call(vm, context[27]);
    refalrts::alloc_name(vm, context[28], functions[efunc_Type]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::alloc_close_call(vm, context[30]);
    refalrts::alloc_close_call(vm, context[31]);
    refalrts::alloc_open_call(vm, context[32]);
    refalrts::update_name(context[4], functions[efunc_u_u_Stepm_Start]);
    refalrts::reinit_close_call(context[5]);
    refalrts::reinit_close_call(context[8]);
    refalrts::reinit_name(context[9], functions[efunc_u_u_Stepm_End]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[32] );
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[30] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[22] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::push_stack( vm, context[5] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[9];
    res = refalrts::splice_evar( res, context[29], context[32] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[25], context[28] );
    res = refalrts::splice_evar( res, context[8], context[10] );
    res = refalrts::splice_evar( res, context[21], context[24] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_elem( res, context[15] );
    res = refalrts::splice_evar( res, context[16], context[19] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Sysfun/4 2/5 e.FileName/2 (/8 s.Width/10 e.ObjectExpression/6 )/9 >/1
  // closed e.FileName as range 2
  // closed e.ObjectExpression as range 6
  //DEBUG: s.Width: 10
  //DEBUG: e.FileName: 2
  //DEBUG: e.ObjectExpression: 6

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 & __Step-Start/12 >/13 </14 & Xxout-Wrap/15 Tile{ AsIs: </0 Reuse: & Open-Auto*1/4 HalfReuse: 'w'/5 AsIs: e.FileName/2 HalfReuse: >/8 AsIs: s.Width/10 } </16 & Xxout-Scan/17 </18 & Type/19 Tile{ AsIs: e.ObjectExpression/6 } >/20 >/21 >/22 </23 Tile{ HalfReuse: & __Step-End/9 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_u_u_Stepm_Start]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::alloc_open_call(vm, context[14]);
  refalrts::alloc_name(vm, context[15], functions[efunc_Xxoutm_Wrap]);
  refalrts::alloc_open_call(vm, context[16]);
  refalrts::alloc_name(vm, context[17], functions[efunc_Xxoutm_Scan]);
  refalrts::alloc_open_call(vm, context[18]);
  refalrts::alloc_name(vm, context[19], functions[efunc_Type]);
  refalrts::alloc_close_call(vm, context[20]);
  refalrts::alloc_close_call(vm, context[21]);
  refalrts::alloc_close_call(vm, context[22]);
  refalrts::alloc_open_call(vm, context[23]);
  refalrts::update_name(context[4], functions[efunc_gen_Openm_Auto_D1]);
  refalrts::reinit_char(context[5], 'w');
  refalrts::reinit_close_call(context[8]);
  refalrts::reinit_name(context[9], functions[efunc_u_u_Stepm_End]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[23] );
  refalrts::push_stack( vm, context[22] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[21] );
  refalrts::push_stack( vm, context[16] );
  refalrts::push_stack( vm, context[20] );
  refalrts::push_stack( vm, context[18] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_evar( res, context[20], context[23] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[16], context[19] );
  res = refalrts::splice_evar( res, context[0], context[10] );
  res = refalrts::splice_evar( res, context[11], context[15] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Sysfun("Sysfun", 0U, 0U, func_Sysfun);


static refalrts::FnResult func_gen_Sysfunm_Xxin_B1S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & Sysfun-Xxin:1$1=1/4 s.FileNo/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.FileNo: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxin-Scan/4 AsIs: s.FileNo/5 HalfReuse: # General/1 } (/6 '^'/7 )/8 </9 & Type/10 </11 & Get-Aux/12 s.FileNo/5/13 >/14 >/15 >/16 Tile{ ]] }
  refalrts::alloc_open_bracket(vm, context[6]);
  refalrts::alloc_char(vm, context[7], '^');
  refalrts::alloc_close_bracket(vm, context[8]);
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_Type]);
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_Getm_Aux]);
  refalrts::copy_stvar(vm, context[13], context[5]);
  refalrts::alloc_close_call(vm, context[14]);
  refalrts::alloc_close_call(vm, context[15]);
  refalrts::alloc_close_call(vm, context[16]);
  refalrts::update_name(context[4], functions[efunc_Xxinm_Scan]);
  refalrts::reinit_ident(context[1], identifiers[ident_General]);
  refalrts::push_stack( vm, context[16] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[6], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[6], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Sysfunm_Xxin_B1S1A1("Sysfun-Xxin:1$1=1", COOKIE1_, COOKIE2_, func_gen_Sysfunm_Xxin_B1S1A1);


static refalrts::FnResult func_gen_Sysfunm_Xxin_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & Sysfun-Xxin:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Sysfun-Xxin:1/4 (/7 e.new1/5 )/8 s.new2/9 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & Sysfun-Xxin:1/4 (/7 e.new3/10 )/8 # True/9 >/1
    context[10] = context[5];
    context[11] = context[6];
    if( ! refalrts::ident_term( identifiers[ident_True], context[9] ) )
      continue;
    // closed e.new3 as range 10
    do {
      // </0 & Sysfun-Xxin:1/4 (/7 s.FileNameChar/14 e./12 )/8 # True/9 >/1
      context[12] = context[10];
      context[13] = context[11];
      if( ! refalrts::svar_left( context[14], context[12], context[13] ) )
        continue;
      // closed e. as range 12
      //DEBUG: s.FileNameChar: 14
      //DEBUG: e.: 12

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sysfun-Xxin:1$1=1/4 HalfReuse: </7 } & Open-Auto=1@2/15 Tile{ AsIs: s.FileNameChar/14 } (/16 Tile{ AsIs: e./12 } )/17 </18 & GetFreeHandle/19 Tile{ HalfReuse: >/8 HalfReuse: >/9 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[15], functions[efunc_gen_Openm_Auto_A1Z2]);
      refalrts::alloc_open_bracket(vm, context[16]);
      refalrts::alloc_close_bracket(vm, context[17]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_GetFreeHandle]);
      refalrts::update_name(context[4], functions[efunc_gen_Sysfunm_Xxin_B1S1A1]);
      refalrts::reinit_open_call(context[7]);
      refalrts::reinit_close_call(context[8]);
      refalrts::reinit_close_call(context[9]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[9] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[18] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[17], context[19] );
      res = refalrts::splice_evar( res, context[12], context[13] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_elem( res, context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Sysfun-Xxin:1/4 (/7 e.FileName/12 )/8 # True/9 >/1
    context[12] = context[10];
    context[13] = context[11];
    // closed e.FileName as range 12
    //DEBUG: e.FileName: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </1 } & Sysfun-Xxin:1$1=1/14 Tile{ AsIs: </0 Reuse: & Open-Auto*1/4 HalfReuse: 'r'/7 AsIs: e.FileName/12 HalfReuse: >/8 HalfReuse: >/9 } Tile{ ]] }
    refalrts::alloc_name(vm, context[14], functions[efunc_gen_Sysfunm_Xxin_B1S1A1]);
    refalrts::reinit_open_call(context[1]);
    refalrts::update_name(context[4], functions[efunc_gen_Openm_Auto_D1]);
    refalrts::reinit_char(context[7], 'r');
    refalrts::reinit_close_call(context[8]);
    refalrts::reinit_close_call(context[9]);
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_elem( res, context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Sysfun-Xxin:1/4 (/7 e.FileName/5 )/8 # False/9 >/1
  if( ! refalrts::ident_term( identifiers[ident_False], context[9] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.FileName as range 5
  //DEBUG: e.FileName: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Sysfun-Xxin:1/4 (/7 e.FileName/5 )/8 # False/9 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Sysfunm_Xxin_B1("Sysfun-Xxin:1", COOKIE1_, COOKIE2_, func_gen_Sysfunm_Xxin_B1);


static refalrts::FnResult func_Sysfunm_Xxin(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & Sysfun-Xxin/4 e.FileName/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.FileName as range 2
  //DEBUG: e.FileName: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & Sysfun-Xxin:1/6 (/7 e.FileName/2/8 )/10 Tile{ AsIs: </0 Reuse: & ExistFile/4 AsIs: e.FileName/2 AsIs: >/1 } >/11 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_Sysfunm_Xxin_B1]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::copy_evar(vm, context[8], context[9], context[2], context[3]);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_ExistFile]);
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Sysfunm_Xxin("Sysfun-Xxin", COOKIE1_, COOKIE2_, func_Sysfunm_Xxin);


static refalrts::FnResult func_gen_Xxinm_Scan_S14B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 34 elems
  refalrts::Iter context[34];
  refalrts::zeros( context, 34 );
  // </0 & Xxin-Scan$14:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Xxin-Scan$14:1/4 s.new1/5 s.new2/6 t.new3/7 (/11 e.new4/9 )/12 (/15 e.new5/13 )/16 (/19 e.new6/17 )/20 e.new7/2 s.new8/21 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.new4 as range 9
  // closed e.new5 as range 13
  // closed e.new6 as range 17
  if( ! refalrts::svar_right( context[21], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new7 as range 2
  do {
    // </0 & Xxin-Scan$14:1/4 s.FileNo/5 s.State/6 t.Stack/7 (/11 e.Scanned/22 )/12 (/15 e.Digits/24 )/16 (/19 e.Tail/26 )/20 s.Char/30 s.Digit/21 >/1
    context[22] = context[9];
    context[23] = context[10];
    context[24] = context[13];
    context[25] = context[14];
    context[26] = context[17];
    context[27] = context[18];
    context[28] = context[2];
    context[29] = context[3];
    // closed e.Scanned as range 22
    // closed e.Digits as range 24
    // closed e.Tail as range 26
    if( ! refalrts::svar_left( context[30], context[28], context[29] ) )
      continue;
    if( ! refalrts::empty_seq( context[28], context[29] ) )
      continue;
    //DEBUG: t.Stack: 7
    //DEBUG: s.FileNo: 5
    //DEBUG: s.State: 6
    //DEBUG: s.Digit: 21
    //DEBUG: e.Scanned: 22
    //DEBUG: e.Digits: 24
    //DEBUG: e.Tail: 26
    //DEBUG: s.Char: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Char/30 s.Digit/21 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxin-Scan/4 AsIs: s.FileNo/5 } Tile{ HalfReuse: # Escape-Hex/20 } Tile{ AsIs: (/11 } Tile{ HalfReuse: (/12 } Tile{ AsIs: s.State/6 AsIs: t.Stack/7 } Tile{ AsIs: e.Scanned/22 } Tile{ HalfReuse: )/15 AsIs: e.Digits/24 HalfReuse: s.Digit21 /16 HalfReuse: )/19 } </31 & Type/32 Tile{ AsIs: e.Tail/26 } >/33 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_name(vm, context[32], functions[efunc_Type]);
    refalrts::alloc_close_call(vm, context[33]);
    refalrts::update_name(context[4], functions[efunc_Xxinm_Scan]);
    refalrts::reinit_ident(context[20], identifiers[ident_Escapem_Hex]);
    refalrts::reinit_open_bracket(context[12]);
    refalrts::reinit_close_bracket(context[15]);
    refalrts::reinit_svar( context[16], context[21] );
    refalrts::reinit_close_bracket(context[19]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[31] );
    refalrts::link_brackets( context[11], context[19] );
    refalrts::link_brackets( context[12], context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[33] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[15], context[19] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[6], context[8] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_elem( res, context[20] );
    refalrts::splice_to_freelist_open( vm, context[5], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Xxin-Scan$14:1/4 s.FileNo/5 s.State/6 t.Stack/7 (/11 e.Scanned/9 )/12 (/15 e.Digits/13 )/16 (/19 e.Tail/17 )/20 s.Char/21 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Scanned as range 9
  // closed e.Digits as range 13
  // closed e.Tail as range 17
  //DEBUG: t.Stack: 7
  //DEBUG: s.FileNo: 5
  //DEBUG: s.State: 6
  //DEBUG: s.Char: 21
  //DEBUG: e.Scanned: 9
  //DEBUG: e.Digits: 13
  //DEBUG: e.Tail: 17

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.FileNo/5 s.State/6 t.Stack/7 {REMOVED TILE} e.Scanned/9 {REMOVED TILE} e.Digits/13 {REMOVED TILE} e.Tail/17 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sysfun-Xxin-ERROR/4 } Tile{ HalfReuse: 'U'/16 HalfReuse: 'n'/19 } Tile{ HalfReuse: 'k'/12 HalfReuse: 'n'/15 } Tile{ HalfReuse: 'o'/11 }"wn escape sequence \\"/22 Tile{ HalfReuse: 'x'/20 AsIs: s.Char/21 AsIs: >/1 ]] }
  refalrts::alloc_chars(vm, context[22], context[23], "wn escape sequence \\", 20);
  refalrts::update_name(context[4], functions[efunc_Sysfunm_Xxinm_ERROR]);
  refalrts::reinit_char(context[16], 'U');
  refalrts::reinit_char(context[19], 'n');
  refalrts::reinit_char(context[12], 'k');
  refalrts::reinit_char(context[15], 'n');
  refalrts::reinit_char(context[11], 'o');
  refalrts::reinit_char(context[20], 'x');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[20];
  res = refalrts::splice_evar( res, context[22], context[23] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[12], context[15] );
  res = refalrts::splice_evar( res, context[16], context[19] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Xxinm_Scan_S14B1("Xxin-Scan$14:1", COOKIE1_, COOKIE2_, func_gen_Xxinm_Scan_S14B1);


static refalrts::FnResult func_gen_Xxinm_Scan_S38B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 25 elems
  refalrts::Iter context[25];
  refalrts::zeros( context, 25 );
  // </0 & Xxin-Scan$38:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Xxin-Scan$38:1/4 s.new1/5 t.new2/6 (/10 e.new3/8 )/11 (/14 e.new4/12 )/15 e.new5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = refalrts::tvar_left( context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  context[8] = 0;
  context[9] = 0;
  context[10] = refalrts::brackets_left( context[8], context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[10], context[11]);
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  // closed e.new3 as range 8
  // closed e.new4 as range 12
  // closed e.new5 as range 2
  do {
    // </0 & Xxin-Scan$38:1/4 s.FileNo/5 t.Stack/6 (/10 e.Scanned/16 )/11 (/14 e.Tail/18 )/15 s.OneMacroDigit/22 >/1
    context[16] = context[8];
    context[17] = context[9];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[2];
    context[21] = context[3];
    // closed e.Scanned as range 16
    // closed e.Tail as range 18
    if( ! refalrts::svar_left( context[22], context[20], context[21] ) )
      continue;
    if( ! refalrts::empty_seq( context[20], context[21] ) )
      continue;
    //DEBUG: t.Stack: 6
    //DEBUG: s.FileNo: 5
    //DEBUG: e.Scanned: 16
    //DEBUG: e.Tail: 18
    //DEBUG: s.OneMacroDigit: 22

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxin-Scan/4 AsIs: s.FileNo/5 } # General/23 Tile{ AsIs: (/10 } Tile{ AsIs: t.Stack/6 } Tile{ AsIs: e.Scanned/16 } Tile{ AsIs: s.OneMacroDigit/22 } )/24 Tile{ HalfReuse: </11 HalfReuse: & Type/14 AsIs: e.Tail/18 HalfReuse: >/15 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_ident(vm, context[23], identifiers[ident_General]);
    refalrts::alloc_close_bracket(vm, context[24]);
    refalrts::update_name(context[4], functions[efunc_Xxinm_Scan]);
    refalrts::reinit_open_call(context[11]);
    refalrts::reinit_name(context[14], functions[efunc_Type]);
    refalrts::reinit_close_call(context[15]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[11] );
    refalrts::link_brackets( context[10], context[24] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[11], context[15] );
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_elem( res, context[23] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Xxin-Scan$38:1/4 s.FileNo/5 t.Stack/6 (/10 e.Scanned/8 )/11 (/14 e.Tail/12 )/15 e.SeveralMacrodigits/2 >/1
  // closed e.Scanned as range 8
  // closed e.Tail as range 12
  // closed e.SeveralMacrodigits as range 2
  //DEBUG: t.Stack: 6
  //DEBUG: s.FileNo: 5
  //DEBUG: e.Scanned: 8
  //DEBUG: e.Tail: 12
  //DEBUG: e.SeveralMacrodigits: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.FileNo/5 t.Stack/6 {REMOVED TILE} e.Scanned/8 {REMOVED TILE} e.Tail/12 {REMOVED TILE} e.SeveralMacrodigits/2 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sysfun-Xxin-ERROR/4 } Tile{ HalfReuse: 'V'/10 } Tile{ HalfReuse: 'e'/11 HalfReuse: 'r'/14 } Tile{ HalfReuse: 'y'/15 }" long macrodigit is read"/16 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_chars(vm, context[16], context[17], " long macrodigit is read", 24);
  refalrts::update_name(context[4], functions[efunc_Sysfunm_Xxinm_ERROR]);
  refalrts::reinit_char(context[10], 'V');
  refalrts::reinit_char(context[11], 'e');
  refalrts::reinit_char(context[14], 'r');
  refalrts::reinit_char(context[15], 'y');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[16], context[17] );
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[11], context[14] );
  res = refalrts::splice_elem( res, context[10] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Xxinm_Scan_S38B1("Xxin-Scan$38:1", COOKIE1_, COOKIE2_, func_gen_Xxinm_Scan_S38B1);


static refalrts::FnResult func_Xxinm_Scan(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 60 elems
  refalrts::Iter context[60];
  refalrts::zeros( context, 60 );
  // </0 & Xxin-Scan/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Xxin-Scan/4 s.new1/7 s.new2/8 (/11 t.new3/15 e.new4/9 )/12 s.new5/13 s.new6/14 e.new7/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::svar_left( context[8], context[5], context[6] ) )
      continue;
    context[9] = 0;
    context[10] = 0;
    context[11] = refalrts::brackets_left( context[9], context[10], context[5], context[6] );
    if( ! context[11] )
      continue;
    refalrts::bracket_pointers(context[11], context[12]);
    if( ! refalrts::svar_left( context[13], context[5], context[6] ) )
      continue;
    if( ! refalrts::svar_left( context[14], context[5], context[6] ) )
      continue;
    // closed e.new7 as range 5
    context[16] = refalrts::tvar_left( context[15], context[9], context[10] );
    if( ! context[16] )
      continue;
    // closed e.new4 as range 9
    do {
      // </0 & Xxin-Scan/4 s.FileNo/7 s.State/8 (/11 t.Stack/15 e.Scanned/17 )/12 '*'/13 s.0/14 >/1
      context[17] = context[9];
      context[18] = context[10];
      if( ! refalrts::char_term( '*', context[13] ) )
        continue;
      if( ! refalrts::empty_seq( context[5], context[6] ) )
        continue;
      // closed e.Scanned as range 17
      //DEBUG: t.Stack: 15
      //DEBUG: s.FileNo: 7
      //DEBUG: s.State: 8
      //DEBUG: s.0: 14
      //DEBUG: e.Scanned: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.0/14 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Xxin-Scan/4 AsIs: s.FileNo/7 AsIs: s.State/8 AsIs: (/11 AsIs: t.Stack/15 AsIs: e.Scanned/17 AsIs: )/12 HalfReuse: </13 } & Type/19 </20 & Get-Aux/21 s.FileNo/7/22 >/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[19], functions[efunc_Type]);
      refalrts::alloc_open_call(vm, context[20]);
      refalrts::alloc_name(vm, context[21], functions[efunc_Getm_Aux]);
      refalrts::copy_stvar(vm, context[22], context[7]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::reinit_open_call(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[19], context[24] );
      refalrts::splice_to_freelist_open( vm, context[13], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxin-Scan/4 s.new8/7 s.new9/8 (/11 (/15 s.new13/23 t.new14/24 e.new15/21 )/16 e.new16/17 )/12 s.new10/13 s.new11/14 e.new12/19 >/1
      context[17] = context[9];
      context[18] = context[10];
      context[19] = context[5];
      context[20] = context[6];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[15] ) )
        continue;
      // closed e.new16 as range 17
      // closed e.new12 as range 19
      if( ! refalrts::svar_left( context[23], context[21], context[22] ) )
        continue;
      context[25] = refalrts::tvar_left( context[24], context[21], context[22] );
      if( ! context[25] )
        continue;
      // closed e.new15 as range 21
      do {
        // </0 & Xxin-Scan/4 s.new17/7 # Escape/8 (/11 (/15 s.new22/23 t.new23/24 e.new24/26 )/16 )/12 s.new18/13 s.new19/14 s.new20/30 e.new21/28 >/1
        context[26] = context[21];
        context[27] = context[22];
        context[28] = context[19];
        context[29] = context[20];
        if( ! refalrts::ident_term( identifiers[ident_Escape], context[8] ) )
          continue;
        if( ! refalrts::empty_seq( context[17], context[18] ) )
          continue;
        // closed e.new24 as range 26
        if( ! refalrts::svar_left( context[30], context[28], context[29] ) )
          continue;
        // closed e.new21 as range 28
        do {
          // </0 & Xxin-Scan/4 s.FileNo/7 # Escape/8 (/11 (/15 s.State/23 t.Stack/24 e.Scanned/31 )/16 )/12 s.T/13 s.S/14 '\\'/30 e.Tail/33 >/1
          context[31] = context[26];
          context[32] = context[27];
          context[33] = context[28];
          context[34] = context[29];
          if( ! refalrts::char_term( '\\', context[30] ) )
            continue;
          // closed e.Scanned as range 31
          // closed e.Tail as range 33
          //DEBUG: t.Stack: 24
          //DEBUG: s.FileNo: 7
          //DEBUG: s.State: 23
          //DEBUG: s.T: 13
          //DEBUG: s.S: 14
          //DEBUG: e.Scanned: 31
          //DEBUG: e.Tail: 33

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.State/23 {REMOVED TILE} s.T/13 s.S/14 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & Xxin-Scan/4 AsIs: s.FileNo/7 HalfReuse: s.State23 /8 AsIs: (/11 } Tile{ AsIs: t.Stack/24 AsIs: e.Scanned/31 HalfReuse: '\\'/16 AsIs: )/12 } Tile{ HalfReuse: </15 } Tile{ HalfReuse: & Type/30 AsIs: e.Tail/33 AsIs: >/1 } >/35 Tile{ ]] }
          refalrts::alloc_close_call(vm, context[35]);
          refalrts::reinit_svar( context[8], context[23] );
          refalrts::reinit_char(context[16], '\\');
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[30], functions[efunc_Type]);
          refalrts::push_stack( vm, context[35] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_elem( res, context[35] );
          res = refalrts::splice_evar( res, context[30], context[1] );
          res = refalrts::splice_elem( res, context[15] );
          res = refalrts::splice_evar( res, context[24], context[12] );
          refalrts::splice_to_freelist_open( vm, context[11], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Xxin-Scan/4 s.FileNo/7 # Escape/8 (/11 (/15 s.State/23 t.Stack/24 e.Scanned/31 )/16 )/12 s.T/13 s.S/14 '\''/30 e.Tail/33 >/1
          context[31] = context[26];
          context[32] = context[27];
          context[33] = context[28];
          context[34] = context[29];
          if( ! refalrts::char_term( '\'', context[30] ) )
            continue;
          // closed e.Scanned as range 31
          // closed e.Tail as range 33
          //DEBUG: t.Stack: 24
          //DEBUG: s.FileNo: 7
          //DEBUG: s.State: 23
          //DEBUG: s.T: 13
          //DEBUG: s.S: 14
          //DEBUG: e.Scanned: 31
          //DEBUG: e.Tail: 33

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.State/23 {REMOVED TILE} s.T/13 s.S/14 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & Xxin-Scan/4 AsIs: s.FileNo/7 HalfReuse: s.State23 /8 AsIs: (/11 } Tile{ AsIs: t.Stack/24 AsIs: e.Scanned/31 HalfReuse: '\''/16 AsIs: )/12 } Tile{ HalfReuse: </15 } Tile{ HalfReuse: & Type/30 AsIs: e.Tail/33 AsIs: >/1 } >/35 Tile{ ]] }
          refalrts::alloc_close_call(vm, context[35]);
          refalrts::reinit_svar( context[8], context[23] );
          refalrts::reinit_char(context[16], '\'');
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[30], functions[efunc_Type]);
          refalrts::push_stack( vm, context[35] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_elem( res, context[35] );
          res = refalrts::splice_evar( res, context[30], context[1] );
          res = refalrts::splice_elem( res, context[15] );
          res = refalrts::splice_evar( res, context[24], context[12] );
          refalrts::splice_to_freelist_open( vm, context[11], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Xxin-Scan/4 s.FileNo/7 # Escape/8 (/11 (/15 s.State/23 t.Stack/24 e.Scanned/31 )/16 )/12 s.T/13 s.S/14 '\"'/30 e.Tail/33 >/1
          context[31] = context[26];
          context[32] = context[27];
          context[33] = context[28];
          context[34] = context[29];
          if( ! refalrts::char_term( '\"', context[30] ) )
            continue;
          // closed e.Scanned as range 31
          // closed e.Tail as range 33
          //DEBUG: t.Stack: 24
          //DEBUG: s.FileNo: 7
          //DEBUG: s.State: 23
          //DEBUG: s.T: 13
          //DEBUG: s.S: 14
          //DEBUG: e.Scanned: 31
          //DEBUG: e.Tail: 33

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.State/23 {REMOVED TILE} s.T/13 s.S/14 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & Xxin-Scan/4 AsIs: s.FileNo/7 HalfReuse: s.State23 /8 AsIs: (/11 } Tile{ AsIs: t.Stack/24 AsIs: e.Scanned/31 HalfReuse: '\"'/16 AsIs: )/12 } Tile{ HalfReuse: </15 } Tile{ HalfReuse: & Type/30 AsIs: e.Tail/33 AsIs: >/1 } >/35 Tile{ ]] }
          refalrts::alloc_close_call(vm, context[35]);
          refalrts::reinit_svar( context[8], context[23] );
          refalrts::reinit_char(context[16], '\"');
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[30], functions[efunc_Type]);
          refalrts::push_stack( vm, context[35] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_elem( res, context[35] );
          res = refalrts::splice_evar( res, context[30], context[1] );
          res = refalrts::splice_elem( res, context[15] );
          res = refalrts::splice_evar( res, context[24], context[12] );
          refalrts::splice_to_freelist_open( vm, context[11], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Xxin-Scan/4 s.FileNo/7 # Escape/8 (/11 (/15 s.State/23 t.Stack/24 e.Scanned/31 )/16 )/12 s.T/13 s.S/14 '('/30 e.Tail/33 >/1
          context[31] = context[26];
          context[32] = context[27];
          context[33] = context[28];
          context[34] = context[29];
          if( ! refalrts::char_term( '(', context[30] ) )
            continue;
          // closed e.Scanned as range 31
          // closed e.Tail as range 33
          //DEBUG: t.Stack: 24
          //DEBUG: s.FileNo: 7
          //DEBUG: s.State: 23
          //DEBUG: s.T: 13
          //DEBUG: s.S: 14
          //DEBUG: e.Scanned: 31
          //DEBUG: e.Tail: 33

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.State/23 {REMOVED TILE} s.T/13 s.S/14 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & Xxin-Scan/4 AsIs: s.FileNo/7 HalfReuse: s.State23 /8 AsIs: (/11 } Tile{ AsIs: t.Stack/24 AsIs: e.Scanned/31 HalfReuse: '('/16 AsIs: )/12 } Tile{ HalfReuse: </15 } Tile{ HalfReuse: & Type/30 AsIs: e.Tail/33 AsIs: >/1 } >/35 Tile{ ]] }
          refalrts::alloc_close_call(vm, context[35]);
          refalrts::reinit_svar( context[8], context[23] );
          refalrts::reinit_char(context[16], '(');
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[30], functions[efunc_Type]);
          refalrts::push_stack( vm, context[35] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_elem( res, context[35] );
          res = refalrts::splice_evar( res, context[30], context[1] );
          res = refalrts::splice_elem( res, context[15] );
          res = refalrts::splice_evar( res, context[24], context[12] );
          refalrts::splice_to_freelist_open( vm, context[11], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Xxin-Scan/4 s.FileNo/7 # Escape/8 (/11 (/15 s.State/23 t.Stack/24 e.Scanned/31 )/16 )/12 s.T/13 s.S/14 ')'/30 e.Tail/33 >/1
          context[31] = context[26];
          context[32] = context[27];
          context[33] = context[28];
          context[34] = context[29];
          if( ! refalrts::char_term( ')', context[30] ) )
            continue;
          // closed e.Scanned as range 31
          // closed e.Tail as range 33
          //DEBUG: t.Stack: 24
          //DEBUG: s.FileNo: 7
          //DEBUG: s.State: 23
          //DEBUG: s.T: 13
          //DEBUG: s.S: 14
          //DEBUG: e.Scanned: 31
          //DEBUG: e.Tail: 33

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.State/23 {REMOVED TILE} s.T/13 s.S/14 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & Xxin-Scan/4 AsIs: s.FileNo/7 HalfReuse: s.State23 /8 AsIs: (/11 } Tile{ AsIs: t.Stack/24 AsIs: e.Scanned/31 HalfReuse: ')'/16 AsIs: )/12 } Tile{ HalfReuse: </15 } Tile{ HalfReuse: & Type/30 AsIs: e.Tail/33 AsIs: >/1 } >/35 Tile{ ]] }
          refalrts::alloc_close_call(vm, context[35]);
          refalrts::reinit_svar( context[8], context[23] );
          refalrts::reinit_char(context[16], ')');
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[30], functions[efunc_Type]);
          refalrts::push_stack( vm, context[35] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_elem( res, context[35] );
          res = refalrts::splice_evar( res, context[30], context[1] );
          res = refalrts::splice_elem( res, context[15] );
          res = refalrts::splice_evar( res, context[24], context[12] );
          refalrts::splice_to_freelist_open( vm, context[11], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Xxin-Scan/4 s.FileNo/7 # Escape/8 (/11 (/15 s.State/23 t.Stack/24 e.Scanned/31 )/16 )/12 s.T/13 s.S/14 '<'/30 e.Tail/33 >/1
          context[31] = context[26];
          context[32] = context[27];
          context[33] = context[28];
          context[34] = context[29];
          if( ! refalrts::char_term( '<', context[30] ) )
            continue;
          // closed e.Scanned as range 31
          // closed e.Tail as range 33
          //DEBUG: t.Stack: 24
          //DEBUG: s.FileNo: 7
          //DEBUG: s.State: 23
          //DEBUG: s.T: 13
          //DEBUG: s.S: 14
          //DEBUG: e.Scanned: 31
          //DEBUG: e.Tail: 33

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.State/23 {REMOVED TILE} s.T/13 s.S/14 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & Xxin-Scan/4 AsIs: s.FileNo/7 HalfReuse: s.State23 /8 AsIs: (/11 } Tile{ AsIs: t.Stack/24 AsIs: e.Scanned/31 HalfReuse: '<'/16 AsIs: )/12 } Tile{ HalfReuse: </15 } Tile{ HalfReuse: & Type/30 AsIs: e.Tail/33 AsIs: >/1 } >/35 Tile{ ]] }
          refalrts::alloc_close_call(vm, context[35]);
          refalrts::reinit_svar( context[8], context[23] );
          refalrts::reinit_char(context[16], '<');
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[30], functions[efunc_Type]);
          refalrts::push_stack( vm, context[35] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_elem( res, context[35] );
          res = refalrts::splice_evar( res, context[30], context[1] );
          res = refalrts::splice_elem( res, context[15] );
          res = refalrts::splice_evar( res, context[24], context[12] );
          refalrts::splice_to_freelist_open( vm, context[11], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Xxin-Scan/4 s.FileNo/7 # Escape/8 (/11 (/15 s.State/23 t.Stack/24 e.Scanned/31 )/16 )/12 s.T/13 s.S/14 '>'/30 e.Tail/33 >/1
          context[31] = context[26];
          context[32] = context[27];
          context[33] = context[28];
          context[34] = context[29];
          if( ! refalrts::char_term( '>', context[30] ) )
            continue;
          // closed e.Scanned as range 31
          // closed e.Tail as range 33
          //DEBUG: t.Stack: 24
          //DEBUG: s.FileNo: 7
          //DEBUG: s.State: 23
          //DEBUG: s.T: 13
          //DEBUG: s.S: 14
          //DEBUG: e.Scanned: 31
          //DEBUG: e.Tail: 33

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.State/23 {REMOVED TILE} s.T/13 s.S/14 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & Xxin-Scan/4 AsIs: s.FileNo/7 HalfReuse: s.State23 /8 AsIs: (/11 } Tile{ AsIs: t.Stack/24 AsIs: e.Scanned/31 HalfReuse: '>'/16 AsIs: )/12 } Tile{ HalfReuse: </15 } Tile{ HalfReuse: & Type/30 AsIs: e.Tail/33 AsIs: >/1 } >/35 Tile{ ]] }
          refalrts::alloc_close_call(vm, context[35]);
          refalrts::reinit_svar( context[8], context[23] );
          refalrts::reinit_char(context[16], '>');
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[30], functions[efunc_Type]);
          refalrts::push_stack( vm, context[35] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_elem( res, context[35] );
          res = refalrts::splice_evar( res, context[30], context[1] );
          res = refalrts::splice_elem( res, context[15] );
          res = refalrts::splice_evar( res, context[24], context[12] );
          refalrts::splice_to_freelist_open( vm, context[11], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Xxin-Scan/4 s.FileNo/7 # Escape/8 (/11 (/15 s.State/23 t.Stack/24 e.Scanned/31 )/16 )/12 s.T/13 s.S/14 'n'/30 e.Tail/33 >/1
          context[31] = context[26];
          context[32] = context[27];
          context[33] = context[28];
          context[34] = context[29];
          if( ! refalrts::char_term( 'n', context[30] ) )
            continue;
          // closed e.Scanned as range 31
          // closed e.Tail as range 33
          //DEBUG: t.Stack: 24
          //DEBUG: s.FileNo: 7
          //DEBUG: s.State: 23
          //DEBUG: s.T: 13
          //DEBUG: s.S: 14
          //DEBUG: e.Scanned: 31
          //DEBUG: e.Tail: 33

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.State/23 {REMOVED TILE} s.T/13 s.S/14 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & Xxin-Scan/4 AsIs: s.FileNo/7 HalfReuse: s.State23 /8 AsIs: (/11 } Tile{ AsIs: t.Stack/24 AsIs: e.Scanned/31 HalfReuse: '\n'/16 AsIs: )/12 } Tile{ HalfReuse: </15 } Tile{ HalfReuse: & Type/30 AsIs: e.Tail/33 AsIs: >/1 } >/35 Tile{ ]] }
          refalrts::alloc_close_call(vm, context[35]);
          refalrts::reinit_svar( context[8], context[23] );
          refalrts::reinit_char(context[16], '\n');
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[30], functions[efunc_Type]);
          refalrts::push_stack( vm, context[35] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_elem( res, context[35] );
          res = refalrts::splice_evar( res, context[30], context[1] );
          res = refalrts::splice_elem( res, context[15] );
          res = refalrts::splice_evar( res, context[24], context[12] );
          refalrts::splice_to_freelist_open( vm, context[11], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Xxin-Scan/4 s.FileNo/7 # Escape/8 (/11 (/15 s.State/23 t.Stack/24 e.Scanned/31 )/16 )/12 s.T/13 s.S/14 't'/30 e.Tail/33 >/1
          context[31] = context[26];
          context[32] = context[27];
          context[33] = context[28];
          context[34] = context[29];
          if( ! refalrts::char_term( 't', context[30] ) )
            continue;
          // closed e.Scanned as range 31
          // closed e.Tail as range 33
          //DEBUG: t.Stack: 24
          //DEBUG: s.FileNo: 7
          //DEBUG: s.State: 23
          //DEBUG: s.T: 13
          //DEBUG: s.S: 14
          //DEBUG: e.Scanned: 31
          //DEBUG: e.Tail: 33

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.State/23 {REMOVED TILE} s.T/13 s.S/14 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & Xxin-Scan/4 AsIs: s.FileNo/7 HalfReuse: s.State23 /8 AsIs: (/11 } Tile{ AsIs: t.Stack/24 AsIs: e.Scanned/31 HalfReuse: '\t'/16 AsIs: )/12 } Tile{ HalfReuse: </15 } Tile{ HalfReuse: & Type/30 AsIs: e.Tail/33 AsIs: >/1 } >/35 Tile{ ]] }
          refalrts::alloc_close_call(vm, context[35]);
          refalrts::reinit_svar( context[8], context[23] );
          refalrts::reinit_char(context[16], '\t');
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[30], functions[efunc_Type]);
          refalrts::push_stack( vm, context[35] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_elem( res, context[35] );
          res = refalrts::splice_evar( res, context[30], context[1] );
          res = refalrts::splice_elem( res, context[15] );
          res = refalrts::splice_evar( res, context[24], context[12] );
          refalrts::splice_to_freelist_open( vm, context[11], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Xxin-Scan/4 s.FileNo/7 # Escape/8 (/11 (/15 s.State/23 t.Stack/24 e.Scanned/31 )/16 )/12 s.T/13 s.S/14 'r'/30 e.Tail/33 >/1
          context[31] = context[26];
          context[32] = context[27];
          context[33] = context[28];
          context[34] = context[29];
          if( ! refalrts::char_term( 'r', context[30] ) )
            continue;
          // closed e.Scanned as range 31
          // closed e.Tail as range 33
          //DEBUG: t.Stack: 24
          //DEBUG: s.FileNo: 7
          //DEBUG: s.State: 23
          //DEBUG: s.T: 13
          //DEBUG: s.S: 14
          //DEBUG: e.Scanned: 31
          //DEBUG: e.Tail: 33

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.State/23 {REMOVED TILE} s.T/13 s.S/14 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & Xxin-Scan/4 AsIs: s.FileNo/7 HalfReuse: s.State23 /8 AsIs: (/11 } Tile{ AsIs: t.Stack/24 AsIs: e.Scanned/31 HalfReuse: '\r'/16 AsIs: )/12 } Tile{ HalfReuse: </15 } Tile{ HalfReuse: & Type/30 AsIs: e.Tail/33 AsIs: >/1 } >/35 Tile{ ]] }
          refalrts::alloc_close_call(vm, context[35]);
          refalrts::reinit_svar( context[8], context[23] );
          refalrts::reinit_char(context[16], '\r');
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[30], functions[efunc_Type]);
          refalrts::push_stack( vm, context[35] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_elem( res, context[35] );
          res = refalrts::splice_evar( res, context[30], context[1] );
          res = refalrts::splice_elem( res, context[15] );
          res = refalrts::splice_evar( res, context[24], context[12] );
          refalrts::splice_to_freelist_open( vm, context[11], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Xxin-Scan/4 s.FileNo/7 # Escape/8 (/11 (/15 s.State/23 t.Stack/24 e.Scanned/31 )/16 )/12 s.T/13 s.S/14 'x'/30 e.Tail/33 >/1
        context[31] = context[26];
        context[32] = context[27];
        context[33] = context[28];
        context[34] = context[29];
        if( ! refalrts::char_term( 'x', context[30] ) )
          continue;
        // closed e.Scanned as range 31
        // closed e.Tail as range 33
        //DEBUG: t.Stack: 24
        //DEBUG: s.FileNo: 7
        //DEBUG: s.State: 23
        //DEBUG: s.T: 13
        //DEBUG: s.S: 14
        //DEBUG: e.Scanned: 31
        //DEBUG: e.Tail: 33

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.T/13 s.S/14 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Xxin-Scan/4 AsIs: s.FileNo/7 Reuse: # Escape-Hex/8 AsIs: (/11 AsIs: (/15 AsIs: s.State/23 AsIs: t.Stack/24 AsIs: e.Scanned/31 AsIs: )/16 AsIs: )/12 } </35 Tile{ HalfReuse: & Type/30 AsIs: e.Tail/33 AsIs: >/1 } >/36 Tile{ ]] }
        refalrts::alloc_open_call(vm, context[35]);
        refalrts::alloc_close_call(vm, context[36]);
        refalrts::update_ident(context[8], identifiers[ident_Escapem_Hex]);
        refalrts::reinit_name(context[30], functions[efunc_Type]);
        refalrts::push_stack( vm, context[36] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[35] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[36] );
        res = refalrts::splice_evar( res, context[30], context[1] );
        res = refalrts::splice_elem( res, context[35] );
        refalrts::splice_to_freelist_open( vm, context[12], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxin-Scan/4 s.new17/7 # Escape-Hex/8 (/11 (/15 s.new21/23 t.new22/24 e.new23/26 )/16 e.new24/28 )/12 s.new18/13 s.new19/14 e.new20/30 >/1
        context[26] = context[21];
        context[27] = context[22];
        context[28] = context[17];
        context[29] = context[18];
        context[30] = context[19];
        context[31] = context[20];
        if( ! refalrts::ident_term( identifiers[ident_Escapem_Hex], context[8] ) )
          continue;
        // closed e.new23 as range 26
        // closed e.new24 as range 28
        // closed e.new20 as range 30
        do {
          // </0 & Xxin-Scan/4 s.FileNo/7 # Escape-Hex/8 (/11 (/15 s.State/23 t.Stack/24 e.Scanned/32 )/16 s.D1/38 s.D2/39 )/12 s.T/13 s.S/14 e.Tail/36 >/1
          context[32] = context[26];
          context[33] = context[27];
          context[34] = context[28];
          context[35] = context[29];
          context[36] = context[30];
          context[37] = context[31];
          // closed e.Scanned as range 32
          // closed e.Tail as range 36
          if( ! refalrts::svar_left( context[38], context[34], context[35] ) )
            continue;
          if( ! refalrts::svar_left( context[39], context[34], context[35] ) )
            continue;
          if( ! refalrts::empty_seq( context[34], context[35] ) )
            continue;
          //DEBUG: t.Stack: 24
          //DEBUG: s.FileNo: 7
          //DEBUG: s.State: 23
          //DEBUG: s.T: 13
          //DEBUG: s.S: 14
          //DEBUG: e.Scanned: 32
          //DEBUG: e.Tail: 36
          //DEBUG: s.D1: 38
          //DEBUG: s.D2: 39

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.State/23 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & Xxin-Scan/4 AsIs: s.FileNo/7 HalfReuse: s.State23 /8 AsIs: (/11 } Tile{ AsIs: t.Stack/24 AsIs: e.Scanned/32 HalfReuse: </16 } & Chr/40 </41 Tile{ HalfReuse: & Add-Digits/15 } </42 & Mul-Digits/43 Tile{ AsIs: s.D1/38 } 16/44 >/45 Tile{ AsIs: s.D2/39 } >/46 >/47 Tile{ AsIs: )/12 AsIs: s.T/13 AsIs: s.S/14 AsIs: e.Tail/36 AsIs: >/1 ]] }
          refalrts::alloc_name(vm, context[40], functions[efunc_Chr]);
          refalrts::alloc_open_call(vm, context[41]);
          refalrts::alloc_open_call(vm, context[42]);
          refalrts::alloc_name(vm, context[43], functions[efunc_Mulm_Digits]);
          refalrts::alloc_number(vm, context[44], 16UL);
          refalrts::alloc_close_call(vm, context[45]);
          refalrts::alloc_close_call(vm, context[46]);
          refalrts::alloc_close_call(vm, context[47]);
          refalrts::reinit_svar( context[8], context[23] );
          refalrts::reinit_open_call(context[16]);
          refalrts::reinit_name(context[15], functions[efunc_Addm_Digits]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::push_stack( vm, context[47] );
          refalrts::push_stack( vm, context[16] );
          refalrts::push_stack( vm, context[46] );
          refalrts::push_stack( vm, context[41] );
          refalrts::push_stack( vm, context[45] );
          refalrts::push_stack( vm, context[42] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[12];
          res = refalrts::splice_evar( res, context[46], context[47] );
          res = refalrts::splice_elem( res, context[39] );
          res = refalrts::splice_evar( res, context[44], context[45] );
          res = refalrts::splice_elem( res, context[38] );
          res = refalrts::splice_evar( res, context[42], context[43] );
          res = refalrts::splice_elem( res, context[15] );
          res = refalrts::splice_evar( res, context[40], context[41] );
          res = refalrts::splice_evar( res, context[24], context[16] );
          refalrts::splice_to_freelist_open( vm, context[11], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Xxin-Scan/4 s.new25/7 # Escape-Hex/8 (/11 (/15 s.new30/23 t.new31/24 e.new32/32 )/16 e.new33/34 )/12 s.new26/13 s.new27/14 s.new28/38 e.new29/36 >/1
        context[32] = context[26];
        context[33] = context[27];
        context[34] = context[28];
        context[35] = context[29];
        context[36] = context[30];
        context[37] = context[31];
        // closed e.new32 as range 32
        // closed e.new33 as range 34
        if( ! refalrts::svar_left( context[38], context[36], context[37] ) )
          continue;
        // closed e.new29 as range 36
        do {
          // </0 & Xxin-Scan/4 s.FileNo/7 # Escape-Hex/8 (/11 (/15 s.State/23 t.Stack/24 e.Scanned/39 )/16 e.Digits/41 )/12 s.T/13 s.S/14 s.Char/38 e.Tail/43 >/1
          context[39] = context[32];
          context[40] = context[33];
          context[41] = context[34];
          context[42] = context[35];
          context[43] = context[36];
          context[44] = context[37];
          // closed e.Scanned as range 39
          // closed e.Digits as range 41
          // closed e.Tail as range 43
          //DEBUG: t.Stack: 24
          //DEBUG: s.FileNo: 7
          //DEBUG: s.State: 23
          //DEBUG: s.T: 13
          //DEBUG: s.S: 14
          //DEBUG: s.Char: 38
          //DEBUG: e.Scanned: 39
          //DEBUG: e.Digits: 41
          //DEBUG: e.Tail: 43

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.State/23 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.T/13 s.S/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxin-Scan$14:1/4 AsIs: s.FileNo/7 HalfReuse: s.State23 /8 } Tile{ AsIs: t.Stack/24 } Tile{ AsIs: (/15 } Tile{ AsIs: e.Scanned/39 } )/45 Tile{ HalfReuse: (/16 AsIs: e.Digits/41 AsIs: )/12 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Tail/43 } )/46 Tile{ AsIs: s.Char/38 } </47 & HexDigit/48 s.Char/38/49 >/50 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_close_bracket(vm, context[45]);
          refalrts::alloc_close_bracket(vm, context[46]);
          refalrts::alloc_open_call(vm, context[47]);
          refalrts::alloc_name(vm, context[48], functions[efunc_HexDigit]);
          refalrts::copy_stvar(vm, context[49], context[38]);
          refalrts::alloc_close_call(vm, context[50]);
          refalrts::update_name(context[4], functions[efunc_gen_Xxinm_Scan_S14B1]);
          refalrts::reinit_svar( context[8], context[23] );
          refalrts::reinit_open_bracket(context[16]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[50] );
          refalrts::push_stack( vm, context[47] );
          refalrts::link_brackets( context[11], context[46] );
          refalrts::link_brackets( context[16], context[12] );
          refalrts::link_brackets( context[15], context[45] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[47], context[50] );
          res = refalrts::splice_elem( res, context[38] );
          res = refalrts::splice_elem( res, context[46] );
          res = refalrts::splice_evar( res, context[43], context[44] );
          res = refalrts::splice_elem( res, context[11] );
          res = refalrts::splice_evar( res, context[16], context[12] );
          res = refalrts::splice_elem( res, context[45] );
          res = refalrts::splice_evar( res, context[39], context[40] );
          res = refalrts::splice_elem( res, context[15] );
          res = refalrts::splice_evar( res, context[24], context[25] );
          refalrts::splice_to_freelist_open( vm, context[8], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Xxin-Scan/4 s.FileNo/7 # Escape-Hex/8 (/11 (/15 s.State/23 t.Stack/24 e.Scanned/39 )/16 e.Digits/41 )/12 'N'/13 s.0/14 0/38 >/1
        context[39] = context[32];
        context[40] = context[33];
        context[41] = context[34];
        context[42] = context[35];
        if( ! refalrts::char_term( 'N', context[13] ) )
          continue;
        if( ! refalrts::number_term( 0UL, context[38] ) )
          continue;
        if( ! refalrts::empty_seq( context[36], context[37] ) )
          continue;
        // closed e.Scanned as range 39
        // closed e.Digits as range 41
        //DEBUG: t.Stack: 24
        //DEBUG: s.FileNo: 7
        //DEBUG: s.State: 23
        //DEBUG: s.0: 14
        //DEBUG: e.Scanned: 39
        //DEBUG: e.Digits: 41

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.FileNo/7 {REMOVED TILE} s.State/23 t.Stack/24 e.Scanned/39 {REMOVED TILE} e.Digits/41 {REMOVED TILE} s.0/14 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sysfun-Xxin-ERROR/4 } 'U'/43 Tile{ HalfReuse: 'n'/12 Reuse: 'e'/13 } Tile{ HalfReuse: 'x'/8 HalfReuse: 'p'/11 HalfReuse: 'e'/15 } Tile{ HalfReuse: 'c'/16 }"ted EOF in \\x.."/44 Tile{ HalfReuse: '.'/38 AsIs: >/1 ]] }
        refalrts::alloc_char(vm, context[43], 'U');
        refalrts::alloc_chars(vm, context[44], context[45], "ted EOF in \\x..", 15);
        refalrts::update_name(context[4], functions[efunc_Sysfunm_Xxinm_ERROR]);
        refalrts::reinit_char(context[12], 'n');
        refalrts::update_char(context[13], 'e');
        refalrts::reinit_char(context[8], 'x');
        refalrts::reinit_char(context[11], 'p');
        refalrts::reinit_char(context[15], 'e');
        refalrts::reinit_char(context[16], 'c');
        refalrts::reinit_char(context[38], '.');
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[38];
        res = refalrts::splice_evar( res, context[44], context[45] );
        res = refalrts::splice_elem( res, context[16] );
        res = refalrts::splice_evar( res, context[8], context[15] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        res = refalrts::splice_elem( res, context[43] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Xxin-Scan/4 s.new17/7 # Escape/8 (/11 (/15 s.new22/23 t.new23/24 e.new24/26 )/16 )/12 s.new18/13 s.new19/14 s.new20/30 e.new21/28 >/1
      context[26] = context[21];
      context[27] = context[22];
      context[28] = context[19];
      context[29] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_Escape], context[8] ) )
        continue;
      if( ! refalrts::empty_seq( context[17], context[18] ) )
        continue;
      // closed e.new24 as range 26
      if( ! refalrts::svar_left( context[30], context[28], context[29] ) )
        continue;
      // closed e.new21 as range 28
      do {
        // </0 & Xxin-Scan/4 s.FileNo/7 # Escape/8 (/11 (/15 s.State/23 t.Stack/24 e.Scanned/31 )/16 )/12 'N'/13 s.0/14 0/30 >/1
        context[31] = context[26];
        context[32] = context[27];
        if( ! refalrts::char_term( 'N', context[13] ) )
          continue;
        if( ! refalrts::number_term( 0UL, context[30] ) )
          continue;
        if( ! refalrts::empty_seq( context[28], context[29] ) )
          continue;
        // closed e.Scanned as range 31
        //DEBUG: t.Stack: 24
        //DEBUG: s.FileNo: 7
        //DEBUG: s.State: 23
        //DEBUG: s.0: 14
        //DEBUG: e.Scanned: 31

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.FileNo/7 {REMOVED TILE} s.State/23 t.Stack/24 e.Scanned/31 {REMOVED TILE} s.0/14 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sysfun-Xxin-ERROR/4 } 'U'/33 Tile{ HalfReuse: 'n'/16 HalfReuse: 'e'/12 Reuse: 'x'/13 } Tile{ HalfReuse: 'p'/8 HalfReuse: 'e'/11 HalfReuse: 'c'/15 }"ted EOF in escape sequenc"/34 Tile{ HalfReuse: 'e'/30 AsIs: >/1 ]] }
        refalrts::alloc_char(vm, context[33], 'U');
        refalrts::alloc_chars(vm, context[34], context[35], "ted EOF in escape sequenc", 25);
        refalrts::update_name(context[4], functions[efunc_Sysfunm_Xxinm_ERROR]);
        refalrts::reinit_char(context[16], 'n');
        refalrts::reinit_char(context[12], 'e');
        refalrts::update_char(context[13], 'x');
        refalrts::reinit_char(context[8], 'p');
        refalrts::reinit_char(context[11], 'e');
        refalrts::reinit_char(context[15], 'c');
        refalrts::reinit_char(context[30], 'e');
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[30];
        res = refalrts::splice_evar( res, context[34], context[35] );
        res = refalrts::splice_evar( res, context[8], context[15] );
        res = refalrts::splice_evar( res, context[16], context[13] );
        res = refalrts::splice_elem( res, context[33] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Xxin-Scan/4 s.FileNo/7 # Escape/8 (/11 (/15 s.State/23 t.Stack/24 e.Scanned/31 )/16 )/12 s.T/13 s.S/14 s.Next/30 e.Tail/33 >/1
      context[31] = context[26];
      context[32] = context[27];
      context[33] = context[28];
      context[34] = context[29];
      // closed e.Scanned as range 31
      // closed e.Tail as range 33
      //DEBUG: t.Stack: 24
      //DEBUG: s.FileNo: 7
      //DEBUG: s.State: 23
      //DEBUG: s.T: 13
      //DEBUG: s.S: 14
      //DEBUG: s.Next: 30
      //DEBUG: e.Scanned: 31
      //DEBUG: e.Tail: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.FileNo/7 {REMOVED TILE} s.State/23 t.Stack/24 e.Scanned/31 {REMOVED TILE} s.T/13 s.S/14 {REMOVED TILE} e.Tail/33 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sysfun-Xxin-ERROR/4 } 'B'/35 Tile{ HalfReuse: 'a'/8 HalfReuse: 'd'/11 HalfReuse: ' '/15 } 'e'/36 Tile{ HalfReuse: 's'/16 HalfReuse: 'c'/12 }"ape sequence \\"/37 Tile{ AsIs: s.Next/30 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_char(vm, context[35], 'B');
      refalrts::alloc_char(vm, context[36], 'e');
      refalrts::alloc_chars(vm, context[37], context[38], "ape sequence \\", 14);
      refalrts::update_name(context[4], functions[efunc_Sysfunm_Xxinm_ERROR]);
      refalrts::reinit_char(context[8], 'a');
      refalrts::reinit_char(context[11], 'd');
      refalrts::reinit_char(context[15], ' ');
      refalrts::reinit_char(context[16], 's');
      refalrts::reinit_char(context[12], 'c');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_evar( res, context[16], context[12] );
      res = refalrts::splice_elem( res, context[36] );
      res = refalrts::splice_evar( res, context[8], context[15] );
      res = refalrts::splice_elem( res, context[35] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Xxin-Scan/4 s.new8/7 s.new9/8 (/11 t.new14/15 e.new15/17 )/12 s.new10/13 s.new11/14 s.new12/21 e.new13/19 >/1
    context[17] = context[9];
    context[18] = context[10];
    context[19] = context[5];
    context[20] = context[6];
    // closed e.new15 as range 17
    if( ! refalrts::svar_left( context[21], context[19], context[20] ) )
      continue;
    // closed e.new13 as range 19
    do {
      // </0 & Xxin-Scan/4 s.FileNo/7 s.State/8 (/11 t.Stack/15 e.Scanned/22 )/12 s.T/13 s.S/14 '\\'/21 e.Tail/24 >/1
      context[22] = context[17];
      context[23] = context[18];
      context[24] = context[19];
      context[25] = context[20];
      if( ! refalrts::char_term( '\\', context[21] ) )
        continue;
      // closed e.Scanned as range 22
      // closed e.Tail as range 24
      //DEBUG: t.Stack: 15
      //DEBUG: s.FileNo: 7
      //DEBUG: s.State: 8
      //DEBUG: s.T: 13
      //DEBUG: s.S: 14
      //DEBUG: e.Scanned: 22
      //DEBUG: e.Tail: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.State/8 {REMOVED TILE} s.T/13 s.S/14 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Xxin-Scan/4 AsIs: s.FileNo/7 } # Escape/26 (/27 (/28 Tile{ HalfReuse: s.State8 /11 AsIs: t.Stack/15 AsIs: e.Scanned/22 AsIs: )/12 } )/29 </30 Tile{ HalfReuse: & Type/21 AsIs: e.Tail/24 AsIs: >/1 } >/31 Tile{ ]] }
      refalrts::alloc_ident(vm, context[26], identifiers[ident_Escape]);
      refalrts::alloc_open_bracket(vm, context[27]);
      refalrts::alloc_open_bracket(vm, context[28]);
      refalrts::alloc_close_bracket(vm, context[29]);
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_close_call(vm, context[31]);
      refalrts::reinit_svar( context[11], context[8] );
      refalrts::reinit_name(context[21], functions[efunc_Type]);
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[30] );
      refalrts::link_brackets( context[27], context[29] );
      refalrts::link_brackets( context[28], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_evar( res, context[21], context[1] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[26], context[28] );
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxin-Scan/4 s.new16/7 # General/8 (/11 t.new21/15 e.new22/22 )/12 s.new17/13 s.new18/14 s.new19/21 e.new20/24 >/1
      context[22] = context[17];
      context[23] = context[18];
      context[24] = context[19];
      context[25] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_General], context[8] ) )
        continue;
      // closed e.new22 as range 22
      // closed e.new20 as range 24
      do {
        // </0 & Xxin-Scan/4 s.FileNo/7 # General/8 (/11 t.Stack/15 e.Scanned/26 )/12 s.T/13 s.S/14 '('/21 e.Tail/28 >/1
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        context[29] = context[25];
        if( ! refalrts::char_term( '(', context[21] ) )
          continue;
        // closed e.Scanned as range 26
        // closed e.Tail as range 28
        //DEBUG: t.Stack: 15
        //DEBUG: s.FileNo: 7
        //DEBUG: s.T: 13
        //DEBUG: s.S: 14
        //DEBUG: e.Scanned: 26
        //DEBUG: e.Tail: 28

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.T/13 s.S/14 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Xxin-Scan/4 AsIs: s.FileNo/7 AsIs: # General/8 AsIs: (/11 } (/30 # General/31 Tile{ AsIs: t.Stack/15 AsIs: e.Scanned/26 AsIs: )/12 } )/32 </33 Tile{ HalfReuse: & Type/21 AsIs: e.Tail/28 AsIs: >/1 } >/34 Tile{ ]] }
        refalrts::alloc_open_bracket(vm, context[30]);
        refalrts::alloc_ident(vm, context[31], identifiers[ident_General]);
        refalrts::alloc_close_bracket(vm, context[32]);
        refalrts::alloc_open_call(vm, context[33]);
        refalrts::alloc_close_call(vm, context[34]);
        refalrts::reinit_name(context[21], functions[efunc_Type]);
        refalrts::push_stack( vm, context[34] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[33] );
        refalrts::link_brackets( context[11], context[32] );
        refalrts::link_brackets( context[30], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[34] );
        res = refalrts::splice_evar( res, context[21], context[1] );
        res = refalrts::splice_evar( res, context[32], context[33] );
        res = refalrts::splice_evar( res, context[15], context[12] );
        res = refalrts::splice_evar( res, context[30], context[31] );
        refalrts::splice_to_freelist_open( vm, context[11], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxin-Scan/4 s.new23/7 # General/8 (/11 t.new27/15 e.new28/26 )/12 s.new24/13 s.new25/14 ')'/21 e.new26/28 >/1
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        context[29] = context[25];
        if( ! refalrts::char_term( ')', context[21] ) )
          continue;
        // closed e.new28 as range 26
        // closed e.new26 as range 28
        do {
          // </0 & Xxin-Scan/4 s.FileNo/7 # General/8 (/11 (/15 # General/36 t.Stack/37 e.Scanned/34 )/16 e.Inner/30 )/12 s.T/13 s.S/14 ')'/21 e.Tail/32 >/1
          context[30] = context[26];
          context[31] = context[27];
          context[32] = context[28];
          context[33] = context[29];
          context[34] = 0;
          context[35] = 0;
          if( ! refalrts::brackets_term( context[34], context[35], context[15] ) )
            continue;
          context[36] = refalrts::ident_left( identifiers[ident_General], context[34], context[35] );
          if( ! context[36] )
            continue;
          // closed e.Inner as range 30
          // closed e.Tail as range 32
          context[38] = refalrts::tvar_left( context[37], context[34], context[35] );
          if( ! context[38] )
            continue;
          // closed e.Scanned as range 34
          //DEBUG: s.FileNo: 7
          //DEBUG: s.T: 13
          //DEBUG: s.S: 14
          //DEBUG: e.Inner: 30
          //DEBUG: e.Tail: 32
          //DEBUG: t.Stack: 37
          //DEBUG: e.Scanned: 34

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.T/13 s.S/14 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & Xxin-Scan/4 AsIs: s.FileNo/7 AsIs: # General/8 AsIs: (/11 } Tile{ AsIs: t.Stack/37 AsIs: e.Scanned/34 HalfReuse: (/16 AsIs: e.Inner/30 AsIs: )/12 } Tile{ HalfReuse: )/15 HalfReuse: </36 } Tile{ HalfReuse: & Type/21 AsIs: e.Tail/32 AsIs: >/1 } >/39 Tile{ ]] }
          refalrts::alloc_close_call(vm, context[39]);
          refalrts::reinit_open_bracket(context[16]);
          refalrts::reinit_close_bracket(context[15]);
          refalrts::reinit_open_call(context[36]);
          refalrts::reinit_name(context[21], functions[efunc_Type]);
          refalrts::push_stack( vm, context[39] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[36] );
          refalrts::link_brackets( context[11], context[15] );
          refalrts::link_brackets( context[16], context[12] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_elem( res, context[39] );
          res = refalrts::splice_evar( res, context[21], context[1] );
          res = refalrts::splice_evar( res, context[15], context[36] );
          res = refalrts::splice_evar( res, context[37], context[12] );
          refalrts::splice_to_freelist_open( vm, context[11], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Xxin-Scan/4 s.FileNo/7 # General/8 (/11 '^'/15 e.Scanned/30 )/12 s.T/13 s.S/14 ')'/21 e.Tail/32 >/1
        context[30] = context[26];
        context[31] = context[27];
        context[32] = context[28];
        context[33] = context[29];
        if( ! refalrts::char_term( '^', context[15] ) )
          continue;
        // closed e.Scanned as range 30
        // closed e.Tail as range 32
        //DEBUG: s.FileNo: 7
        //DEBUG: s.T: 13
        //DEBUG: s.S: 14
        //DEBUG: e.Scanned: 30
        //DEBUG: e.Tail: 32

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.FileNo/7 {REMOVED TILE} e.Scanned/30 {REMOVED TILE} s.T/13 s.S/14 {REMOVED TILE} e.Tail/32 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sysfun-Xxin-ERROR/4 } Tile{ HalfReuse: 'U'/12 } Tile{ HalfReuse: 'n'/8 HalfReuse: 'b'/11 Reuse: 'a'/15 }"lanced "/34 Tile{ AsIs: ')'/21 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_chars(vm, context[34], context[35], "lanced ", 7);
        refalrts::update_name(context[4], functions[efunc_Sysfunm_Xxinm_ERROR]);
        refalrts::reinit_char(context[12], 'U');
        refalrts::reinit_char(context[8], 'n');
        refalrts::reinit_char(context[11], 'b');
        refalrts::update_char(context[15], 'a');
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[21] );
        res = refalrts::splice_evar( res, context[34], context[35] );
        res = refalrts::splice_evar( res, context[8], context[15] );
        res = refalrts::splice_elem( res, context[12] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxin-Scan/4 s.new23/7 # General/8 (/11 t.new25/15 e.new26/26 )/12 'N'/13 s.new24/14 0/21 >/1
        context[26] = context[22];
        context[27] = context[23];
        if( ! refalrts::char_term( 'N', context[13] ) )
          continue;
        if( ! refalrts::number_term( 0UL, context[21] ) )
          continue;
        if( ! refalrts::empty_seq( context[24], context[25] ) )
          continue;
        // closed e.new26 as range 26
        do {
          // </0 & Xxin-Scan/4 s.FileNo/7 # General/8 (/11 '^'/15 e.Scanned/28 )/12 'N'/13 s.0/14 0/21 >/1
          context[28] = context[26];
          context[29] = context[27];
          if( ! refalrts::char_term( '^', context[15] ) )
            continue;
          // closed e.Scanned as range 28
          //DEBUG: s.FileNo: 7
          //DEBUG: s.0: 14
          //DEBUG: e.Scanned: 28

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} (/11 '^'/15 {REMOVED TILE} )/12 'N'/13 s.0/14 0/21 >/1 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Close/4 AsIs: s.FileNo/7 HalfReuse: >/8 } Tile{ AsIs: e.Scanned/28 } Tile{ ]] }
          refalrts::update_name(context[4], functions[efunc_Close]);
          refalrts::reinit_close_call(context[8]);
          refalrts::push_stack( vm, context[8] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[28], context[29] );
          refalrts::splice_to_freelist_open( vm, context[8], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Xxin-Scan/4 s.FileNo/7 # General/8 (/11 (/15 # General/32 t.Stack/33 e.Scanned/30 )/16 e.Inner/28 )/12 'N'/13 s.0/14 0/21 >/1
        context[28] = context[26];
        context[29] = context[27];
        context[30] = 0;
        context[31] = 0;
        if( ! refalrts::brackets_term( context[30], context[31], context[15] ) )
          continue;
        context[32] = refalrts::ident_left( identifiers[ident_General], context[30], context[31] );
        if( ! context[32] )
          continue;
        // closed e.Inner as range 28
        context[34] = refalrts::tvar_left( context[33], context[30], context[31] );
        if( ! context[34] )
          continue;
        // closed e.Scanned as range 30
        //DEBUG: s.FileNo: 7
        //DEBUG: s.0: 14
        //DEBUG: e.Inner: 28
        //DEBUG: t.Stack: 33
        //DEBUG: e.Scanned: 30

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.FileNo/7 {REMOVED TILE} t.Stack/33 e.Scanned/30 {REMOVED TILE} e.Inner/28 {REMOVED TILE} s.0/14 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sysfun-Xxin-ERROR/4 } Tile{ HalfReuse: 'U'/8 HalfReuse: 'n'/11 HalfReuse: 'b'/15 HalfReuse: 'a'/32 } Tile{ HalfReuse: 'l'/12 Reuse: 'a'/13 } Tile{ HalfReuse: 'n'/16 }"ced "/35 Tile{ HalfReuse: '('/21 AsIs: >/1 ]] }
        refalrts::alloc_chars(vm, context[35], context[36], "ced ", 4);
        refalrts::update_name(context[4], functions[efunc_Sysfunm_Xxinm_ERROR]);
        refalrts::reinit_char(context[8], 'U');
        refalrts::reinit_char(context[11], 'n');
        refalrts::reinit_char(context[15], 'b');
        refalrts::reinit_char(context[32], 'a');
        refalrts::reinit_char(context[12], 'l');
        refalrts::update_char(context[13], 'a');
        refalrts::reinit_char(context[16], 'n');
        refalrts::reinit_char(context[21], '(');
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[21];
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_elem( res, context[16] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        res = refalrts::splice_evar( res, context[8], context[32] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxin-Scan/4 s.FileNo/7 # General/8 (/11 t.Stack/15 e.Scanned/26 )/12 s.S/13 s.T/14 '\''/21 e.Tail/28 >/1
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        context[29] = context[25];
        if( ! refalrts::char_term( '\'', context[21] ) )
          continue;
        // closed e.Scanned as range 26
        // closed e.Tail as range 28
        //DEBUG: t.Stack: 15
        //DEBUG: s.FileNo: 7
        //DEBUG: s.S: 13
        //DEBUG: s.T: 14
        //DEBUG: e.Scanned: 26
        //DEBUG: e.Tail: 28

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.S/13 s.T/14 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Xxin-Scan/4 AsIs: s.FileNo/7 Reuse: # Quote/8 AsIs: (/11 } (/30 # General/31 Tile{ AsIs: t.Stack/15 AsIs: e.Scanned/26 AsIs: )/12 } '\''/32 )/33 </34 Tile{ HalfReuse: & Type/21 AsIs: e.Tail/28 AsIs: >/1 } >/35 Tile{ ]] }
        refalrts::alloc_open_bracket(vm, context[30]);
        refalrts::alloc_ident(vm, context[31], identifiers[ident_General]);
        refalrts::alloc_char(vm, context[32], '\'');
        refalrts::alloc_close_bracket(vm, context[33]);
        refalrts::alloc_open_call(vm, context[34]);
        refalrts::alloc_close_call(vm, context[35]);
        refalrts::update_ident(context[8], identifiers[ident_Quote]);
        refalrts::reinit_name(context[21], functions[efunc_Type]);
        refalrts::push_stack( vm, context[35] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[34] );
        refalrts::link_brackets( context[11], context[33] );
        refalrts::link_brackets( context[30], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[21], context[1] );
        res = refalrts::splice_evar( res, context[32], context[34] );
        res = refalrts::splice_evar( res, context[15], context[12] );
        res = refalrts::splice_evar( res, context[30], context[31] );
        refalrts::splice_to_freelist_open( vm, context[11], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Xxin-Scan/4 s.FileNo/7 # General/8 (/11 t.Stack/15 e.Scanned/26 )/12 s.S/13 s.T/14 '\"'/21 e.Tail/28 >/1
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      context[29] = context[25];
      if( ! refalrts::char_term( '\"', context[21] ) )
        continue;
      // closed e.Scanned as range 26
      // closed e.Tail as range 28
      //DEBUG: t.Stack: 15
      //DEBUG: s.FileNo: 7
      //DEBUG: s.S: 13
      //DEBUG: s.T: 14
      //DEBUG: e.Scanned: 26
      //DEBUG: e.Tail: 28

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.S/13 s.T/14 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Xxin-Scan/4 AsIs: s.FileNo/7 Reuse: # Quote/8 AsIs: (/11 } (/30 # General/31 Tile{ AsIs: t.Stack/15 AsIs: e.Scanned/26 AsIs: )/12 } '\"'/32 )/33 </34 Tile{ HalfReuse: & Type/21 AsIs: e.Tail/28 AsIs: >/1 } >/35 Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[30]);
      refalrts::alloc_ident(vm, context[31], identifiers[ident_General]);
      refalrts::alloc_char(vm, context[32], '\"');
      refalrts::alloc_close_bracket(vm, context[33]);
      refalrts::alloc_open_call(vm, context[34]);
      refalrts::alloc_close_call(vm, context[35]);
      refalrts::update_ident(context[8], identifiers[ident_Quote]);
      refalrts::reinit_name(context[21], functions[efunc_Type]);
      refalrts::push_stack( vm, context[35] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[34] );
      refalrts::link_brackets( context[11], context[33] );
      refalrts::link_brackets( context[30], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_evar( res, context[21], context[1] );
      res = refalrts::splice_evar( res, context[32], context[34] );
      res = refalrts::splice_evar( res, context[15], context[12] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      refalrts::splice_to_freelist_open( vm, context[11], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxin-Scan/4 s.new16/7 # Quote/8 (/11 (/15 # General/28 t.new21/30 e.new22/26 )/16 s.new23/29 e.new24/22 )/12 s.new17/13 s.new18/14 s.new19/21 e.new20/24 >/1
      context[22] = context[17];
      context[23] = context[18];
      context[24] = context[19];
      context[25] = context[20];
      context[26] = 0;
      context[27] = 0;
      if( ! refalrts::brackets_term( context[26], context[27], context[15] ) )
        continue;
      if( ! refalrts::ident_term( identifiers[ident_Quote], context[8] ) )
        continue;
      context[28] = refalrts::ident_left( identifiers[ident_General], context[26], context[27] );
      if( ! context[28] )
        continue;
      // closed e.new20 as range 24
      if( ! refalrts::svar_left( context[29], context[22], context[23] ) )
        continue;
      // closed e.new24 as range 22
      context[31] = refalrts::tvar_left( context[30], context[26], context[27] );
      if( ! context[31] )
        continue;
      // closed e.new22 as range 26
      do {
        // </0 & Xxin-Scan/4 s.FileNo/7 # Quote/8 (/11 (/15 # General/28 t.Stack/30 e.Scanned/32 )/16 '\''/29 e.Quotten/34 )/12 s.S/13 s.T/14 '\''/21 e.Tail/36 >/1
        context[32] = context[26];
        context[33] = context[27];
        context[34] = context[22];
        context[35] = context[23];
        context[36] = context[24];
        context[37] = context[25];
        if( ! refalrts::char_term( '\'', context[29] ) )
          continue;
        if( ! refalrts::char_term( '\'', context[21] ) )
          continue;
        // closed e.Scanned as range 32
        // closed e.Quotten as range 34
        // closed e.Tail as range 36
        //DEBUG: t.Stack: 30
        //DEBUG: s.FileNo: 7
        //DEBUG: s.S: 13
        //DEBUG: s.T: 14
        //DEBUG: e.Scanned: 32
        //DEBUG: e.Quotten: 34
        //DEBUG: e.Tail: 36

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} (/15 # General/28 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.S/13 s.T/14 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Xxin-Scan/4 AsIs: s.FileNo/7 Reuse: # General/8 AsIs: (/11 } Tile{ AsIs: t.Stack/30 } Tile{ AsIs: e.Scanned/32 } Tile{ AsIs: e.Quotten/34 } Tile{ AsIs: )/16 HalfReuse: </29 } Tile{ HalfReuse: & Type/21 AsIs: e.Tail/36 AsIs: >/1 } Tile{ HalfReuse: >/12 } Tile{ ]] }
        refalrts::update_ident(context[8], identifiers[ident_General]);
        refalrts::reinit_open_call(context[29]);
        refalrts::reinit_name(context[21], functions[efunc_Type]);
        refalrts::reinit_close_call(context[12]);
        refalrts::push_stack( vm, context[12] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[29] );
        refalrts::link_brackets( context[11], context[16] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[21], context[1] );
        res = refalrts::splice_evar( res, context[16], context[29] );
        res = refalrts::splice_evar( res, context[34], context[35] );
        res = refalrts::splice_evar( res, context[32], context[33] );
        res = refalrts::splice_evar( res, context[30], context[31] );
        refalrts::splice_to_freelist_open( vm, context[11], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxin-Scan/4 s.FileNo/7 # Quote/8 (/11 (/15 # General/28 t.Stack/30 e.Scanned/32 )/16 '\"'/29 e.Quotten/34 )/12 s.S/13 s.T/14 '\"'/21 e.Tail/36 >/1
        context[32] = context[26];
        context[33] = context[27];
        context[34] = context[22];
        context[35] = context[23];
        context[36] = context[24];
        context[37] = context[25];
        if( ! refalrts::char_term( '\"', context[29] ) )
          continue;
        if( ! refalrts::char_term( '\"', context[21] ) )
          continue;
        // closed e.Scanned as range 32
        // closed e.Quotten as range 34
        // closed e.Tail as range 36
        //DEBUG: t.Stack: 30
        //DEBUG: s.FileNo: 7
        //DEBUG: s.S: 13
        //DEBUG: s.T: 14
        //DEBUG: e.Scanned: 32
        //DEBUG: e.Quotten: 34
        //DEBUG: e.Tail: 36

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.S/13 s.T/14 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Xxin-Scan/4 AsIs: s.FileNo/7 Reuse: # General/8 AsIs: (/11 } Tile{ AsIs: t.Stack/30 AsIs: e.Scanned/32 HalfReuse: </16 HalfReuse: & Implode_Ext/29 AsIs: e.Quotten/34 HalfReuse: >/12 } Tile{ HalfReuse: )/15 HalfReuse: </28 } Tile{ HalfReuse: & Type/21 AsIs: e.Tail/36 AsIs: >/1 } >/38 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[38]);
        refalrts::update_ident(context[8], identifiers[ident_General]);
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[29], functions[efunc_Implodeu_Ext]);
        refalrts::reinit_close_call(context[12]);
        refalrts::reinit_close_bracket(context[15]);
        refalrts::reinit_open_call(context[28]);
        refalrts::reinit_name(context[21], functions[efunc_Type]);
        refalrts::push_stack( vm, context[38] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[28] );
        refalrts::link_brackets( context[11], context[15] );
        refalrts::push_stack( vm, context[12] );
        refalrts::push_stack( vm, context[16] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[38] );
        res = refalrts::splice_evar( res, context[21], context[1] );
        res = refalrts::splice_evar( res, context[15], context[28] );
        res = refalrts::splice_evar( res, context[30], context[12] );
        refalrts::splice_to_freelist_open( vm, context[11], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxin-Scan/4 s.FileNo/7 # Quote/8 (/11 (/15 # General/28 t.Stack/30 e.Scanned/32 )/16 s.Quote/29 e.Quotten/34 )/12 s.S/13 s.T/14 s.Quote/21 e.Tail/36 >/1
        context[32] = context[26];
        context[33] = context[27];
        context[34] = context[22];
        context[35] = context[23];
        context[36] = context[24];
        context[37] = context[25];
        if( ! refalrts::repeated_stvar_term( vm, context[21], context[29] ) )
          continue;
        // closed e.Scanned as range 32
        // closed e.Quotten as range 34
        // closed e.Tail as range 36
        //DEBUG: t.Stack: 30
        //DEBUG: s.FileNo: 7
        //DEBUG: s.Quote: 29
        //DEBUG: s.S: 13
        //DEBUG: s.T: 14
        //DEBUG: e.Scanned: 32
        //DEBUG: e.Quotten: 34
        //DEBUG: e.Tail: 36

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.S/13 s.T/14 s.Quote/21 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Xxin-Scan/4 AsIs: s.FileNo/7 Reuse: # General/8 AsIs: (/11 } Tile{ AsIs: t.Stack/30 } Tile{ AsIs: e.Scanned/32 } </38 Tile{ HalfReuse: & Quote*2/16 AsIs: s.Quote/29 AsIs: e.Quotten/34 HalfReuse: >/12 } Tile{ HalfReuse: )/15 HalfReuse: </28 } & Type/39 Tile{ AsIs: e.Tail/36 } >/40 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[38]);
        refalrts::alloc_name(vm, context[39], functions[efunc_Type]);
        refalrts::alloc_close_call(vm, context[40]);
        refalrts::update_ident(context[8], identifiers[ident_General]);
        refalrts::reinit_name(context[16], functions[efunc_gen_Quote_D2]);
        refalrts::reinit_close_call(context[12]);
        refalrts::reinit_close_bracket(context[15]);
        refalrts::reinit_open_call(context[28]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[40] );
        refalrts::push_stack( vm, context[28] );
        refalrts::link_brackets( context[11], context[15] );
        refalrts::push_stack( vm, context[12] );
        refalrts::push_stack( vm, context[38] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[40] );
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_elem( res, context[39] );
        res = refalrts::splice_evar( res, context[15], context[28] );
        res = refalrts::splice_evar( res, context[16], context[12] );
        res = refalrts::splice_elem( res, context[38] );
        res = refalrts::splice_evar( res, context[32], context[33] );
        res = refalrts::splice_evar( res, context[30], context[31] );
        refalrts::splice_to_freelist_open( vm, context[11], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Xxin-Scan/4 s.FileNo/7 # Quote/8 (/11 (/15 # General/28 t.Stack/30 e.Scanned/32 )/16 s.Quote/29 e.Quotten/34 )/12 'N'/13 s.0/14 0/21 >/1
      context[32] = context[26];
      context[33] = context[27];
      context[34] = context[22];
      context[35] = context[23];
      if( ! refalrts::char_term( 'N', context[13] ) )
        continue;
      if( ! refalrts::number_term( 0UL, context[21] ) )
        continue;
      if( ! refalrts::empty_seq( context[24], context[25] ) )
        continue;
      // closed e.Scanned as range 32
      // closed e.Quotten as range 34
      //DEBUG: t.Stack: 30
      //DEBUG: s.FileNo: 7
      //DEBUG: s.Quote: 29
      //DEBUG: s.0: 14
      //DEBUG: e.Scanned: 32
      //DEBUG: e.Quotten: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.FileNo/7 {REMOVED TILE} t.Stack/30 e.Scanned/32 {REMOVED TILE} e.Quotten/34 {REMOVED TILE} s.0/14 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sysfun-Xxin-ERROR/4 } 'U'/36 Tile{ HalfReuse: 'n'/8 HalfReuse: 'e'/11 HalfReuse: 'x'/15 HalfReuse: 'p'/28 } 'e'/37 Tile{ HalfReuse: 'c'/12 Reuse: 't'/13 }"ed EOF in"/38 Tile{ HalfReuse: ' '/16 AsIs: s.Quote/29 }".."/40 Tile{ HalfReuse: '.'/21 AsIs: >/1 ]] }
      refalrts::alloc_char(vm, context[36], 'U');
      refalrts::alloc_char(vm, context[37], 'e');
      refalrts::alloc_chars(vm, context[38], context[39], "ed EOF in", 9);
      refalrts::alloc_chars(vm, context[40], context[41], "..", 2);
      refalrts::update_name(context[4], functions[efunc_Sysfunm_Xxinm_ERROR]);
      refalrts::reinit_char(context[8], 'n');
      refalrts::reinit_char(context[11], 'e');
      refalrts::reinit_char(context[15], 'x');
      refalrts::reinit_char(context[28], 'p');
      refalrts::reinit_char(context[12], 'c');
      refalrts::update_char(context[13], 't');
      refalrts::reinit_char(context[16], ' ');
      refalrts::reinit_char(context[21], '.');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[21];
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_evar( res, context[16], context[29] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_evar( res, context[12], context[13] );
      res = refalrts::splice_elem( res, context[37] );
      res = refalrts::splice_evar( res, context[8], context[28] );
      res = refalrts::splice_elem( res, context[36] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxin-Scan/4 s.new16/7 s.new17/8 (/11 t.new21/15 e.new22/22 )/12 'L'/13 s.new18/14 s.new19/21 e.new20/24 >/1
      context[22] = context[17];
      context[23] = context[18];
      context[24] = context[19];
      context[25] = context[20];
      if( ! refalrts::char_term( 'L', context[13] ) )
        continue;
      // closed e.new22 as range 22
      // closed e.new20 as range 24
      do {
        // </0 & Xxin-Scan/4 s.FileNo/7 # General/8 (/11 t.Stack/15 e.Scanned/26 )/12 'L'/13 s.S/14 s.Letter/21 e.Tail/28 >/1
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        context[29] = context[25];
        if( ! refalrts::ident_term( identifiers[ident_General], context[8] ) )
          continue;
        // closed e.Scanned as range 26
        // closed e.Tail as range 28
        //DEBUG: t.Stack: 15
        //DEBUG: s.FileNo: 7
        //DEBUG: s.S: 14
        //DEBUG: s.Letter: 21
        //DEBUG: e.Scanned: 26
        //DEBUG: e.Tail: 28

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.S/14 s.Letter/21 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Xxin-Scan/4 AsIs: s.FileNo/7 Reuse: # Word/8 AsIs: (/11 } (/30 # General/31 Tile{ AsIs: t.Stack/15 AsIs: e.Scanned/26 AsIs: )/12 HalfReuse: s.Letter21 /13 } )/32 </33 & Type/34 Tile{ AsIs: e.Tail/28 } >/35 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[30]);
        refalrts::alloc_ident(vm, context[31], identifiers[ident_General]);
        refalrts::alloc_close_bracket(vm, context[32]);
        refalrts::alloc_open_call(vm, context[33]);
        refalrts::alloc_name(vm, context[34], functions[efunc_Type]);
        refalrts::alloc_close_call(vm, context[35]);
        refalrts::update_ident(context[8], identifiers[ident_Word]);
        refalrts::reinit_svar( context[13], context[21] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[35] );
        refalrts::push_stack( vm, context[33] );
        refalrts::link_brackets( context[11], context[32] );
        refalrts::link_brackets( context[30], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[28], context[29] );
        res = refalrts::splice_evar( res, context[32], context[34] );
        res = refalrts::splice_evar( res, context[15], context[13] );
        res = refalrts::splice_evar( res, context[30], context[31] );
        refalrts::splice_to_freelist_open( vm, context[11], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Xxin-Scan/4 s.FileNo/7 # Word/8 (/11 t.Stack/15 e.Scanned/26 )/12 'L'/13 s.S/14 s.Letter/21 e.Tail/28 >/1
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      context[29] = context[25];
      if( ! refalrts::ident_term( identifiers[ident_Word], context[8] ) )
        continue;
      // closed e.Scanned as range 26
      // closed e.Tail as range 28
      //DEBUG: t.Stack: 15
      //DEBUG: s.FileNo: 7
      //DEBUG: s.S: 14
      //DEBUG: s.Letter: 21
      //DEBUG: e.Scanned: 26
      //DEBUG: e.Tail: 28

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.S/14 s.Letter/21 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Xxin-Scan/4 AsIs: s.FileNo/7 AsIs: # Word/8 AsIs: (/11 AsIs: t.Stack/15 AsIs: e.Scanned/26 HalfReuse: s.Letter21 /12 HalfReuse: )/13 } </30 & Type/31 Tile{ AsIs: e.Tail/28 } >/32 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_Type]);
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::reinit_svar( context[12], context[21] );
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[30] );
      refalrts::link_brackets( context[11], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      refalrts::splice_to_freelist_open( vm, context[13], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxin-Scan/4 s.new16/7 # Word/8 (/11 t.new21/15 e.new22/22 )/12 s.new17/13 s.new18/14 s.new19/21 e.new20/24 >/1
      context[22] = context[17];
      context[23] = context[18];
      context[24] = context[19];
      context[25] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_Word], context[8] ) )
        continue;
      // closed e.new22 as range 22
      // closed e.new20 as range 24
      do {
        // </0 & Xxin-Scan/4 s.FileNo/7 # Word/8 (/11 t.Stack/15 e.Scanned/26 )/12 'D'/13 s.0/14 s.Digit/21 e.Tail/28 >/1
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        context[29] = context[25];
        if( ! refalrts::char_term( 'D', context[13] ) )
          continue;
        // closed e.Scanned as range 26
        // closed e.Tail as range 28
        //DEBUG: t.Stack: 15
        //DEBUG: s.FileNo: 7
        //DEBUG: s.0: 14
        //DEBUG: s.Digit: 21
        //DEBUG: e.Scanned: 26
        //DEBUG: e.Tail: 28

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.0/14 s.Digit/21 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Xxin-Scan/4 AsIs: s.FileNo/7 AsIs: # Word/8 AsIs: (/11 AsIs: t.Stack/15 AsIs: e.Scanned/26 HalfReuse: s.Digit21 /12 HalfReuse: )/13 } </30 & Type/31 Tile{ AsIs: e.Tail/28 } >/32 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[30]);
        refalrts::alloc_name(vm, context[31], functions[efunc_Type]);
        refalrts::alloc_close_call(vm, context[32]);
        refalrts::reinit_svar( context[12], context[21] );
        refalrts::reinit_close_bracket(context[13]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[32] );
        refalrts::push_stack( vm, context[30] );
        refalrts::link_brackets( context[11], context[13] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[32] );
        res = refalrts::splice_evar( res, context[28], context[29] );
        res = refalrts::splice_evar( res, context[30], context[31] );
        refalrts::splice_to_freelist_open( vm, context[13], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxin-Scan/4 s.FileNo/7 # Word/8 (/11 t.Stack/15 e.Scanned/26 )/12 s.T/13 s.S/14 '-'/21 e.Tail/28 >/1
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        context[29] = context[25];
        if( ! refalrts::char_term( '-', context[21] ) )
          continue;
        // closed e.Scanned as range 26
        // closed e.Tail as range 28
        //DEBUG: t.Stack: 15
        //DEBUG: s.FileNo: 7
        //DEBUG: s.T: 13
        //DEBUG: s.S: 14
        //DEBUG: e.Scanned: 26
        //DEBUG: e.Tail: 28

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.T/13 s.S/14 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Xxin-Scan/4 AsIs: s.FileNo/7 AsIs: # Word/8 AsIs: (/11 AsIs: t.Stack/15 AsIs: e.Scanned/26 HalfReuse: '-'/12 } )/30 </31 Tile{ HalfReuse: & Type/21 AsIs: e.Tail/28 AsIs: >/1 } >/32 Tile{ ]] }
        refalrts::alloc_close_bracket(vm, context[30]);
        refalrts::alloc_open_call(vm, context[31]);
        refalrts::alloc_close_call(vm, context[32]);
        refalrts::reinit_char(context[12], '-');
        refalrts::reinit_name(context[21], functions[efunc_Type]);
        refalrts::push_stack( vm, context[32] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[31] );
        refalrts::link_brackets( context[11], context[30] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[32] );
        res = refalrts::splice_evar( res, context[21], context[1] );
        res = refalrts::splice_evar( res, context[30], context[31] );
        refalrts::splice_to_freelist_open( vm, context[12], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxin-Scan/4 s.FileNo/7 # Word/8 (/11 t.Stack/15 e.Scanned/26 )/12 s.T/13 s.S/14 '_'/21 e.Tail/28 >/1
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        context[29] = context[25];
        if( ! refalrts::char_term( '_', context[21] ) )
          continue;
        // closed e.Scanned as range 26
        // closed e.Tail as range 28
        //DEBUG: t.Stack: 15
        //DEBUG: s.FileNo: 7
        //DEBUG: s.T: 13
        //DEBUG: s.S: 14
        //DEBUG: e.Scanned: 26
        //DEBUG: e.Tail: 28

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.T/13 s.S/14 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Xxin-Scan/4 AsIs: s.FileNo/7 AsIs: # Word/8 AsIs: (/11 AsIs: t.Stack/15 AsIs: e.Scanned/26 HalfReuse: '_'/12 } )/30 </31 Tile{ HalfReuse: & Type/21 AsIs: e.Tail/28 AsIs: >/1 } >/32 Tile{ ]] }
        refalrts::alloc_close_bracket(vm, context[30]);
        refalrts::alloc_open_call(vm, context[31]);
        refalrts::alloc_close_call(vm, context[32]);
        refalrts::reinit_char(context[12], '_');
        refalrts::reinit_name(context[21], functions[efunc_Type]);
        refalrts::push_stack( vm, context[32] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[31] );
        refalrts::link_brackets( context[11], context[30] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[32] );
        res = refalrts::splice_evar( res, context[21], context[1] );
        res = refalrts::splice_evar( res, context[30], context[31] );
        refalrts::splice_to_freelist_open( vm, context[12], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxin-Scan/4 s.FileNo/7 # Word/8 (/11 (/15 # General/32 t.Stack/33 e.Scanned/30 )/16 e.Word/26 )/12 s.T/13 s.S/14 ' '/21 e.Tail/28 >/1
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        context[29] = context[25];
        context[30] = 0;
        context[31] = 0;
        if( ! refalrts::brackets_term( context[30], context[31], context[15] ) )
          continue;
        if( ! refalrts::char_term( ' ', context[21] ) )
          continue;
        context[32] = refalrts::ident_left( identifiers[ident_General], context[30], context[31] );
        if( ! context[32] )
          continue;
        // closed e.Word as range 26
        // closed e.Tail as range 28
        context[34] = refalrts::tvar_left( context[33], context[30], context[31] );
        if( ! context[34] )
          continue;
        // closed e.Scanned as range 30
        //DEBUG: s.FileNo: 7
        //DEBUG: s.T: 13
        //DEBUG: s.S: 14
        //DEBUG: e.Word: 26
        //DEBUG: e.Tail: 28
        //DEBUG: t.Stack: 33
        //DEBUG: e.Scanned: 30

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.T/13 s.S/14 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Xxin-Scan/4 AsIs: s.FileNo/7 Reuse: # General/8 AsIs: (/11 } Tile{ AsIs: t.Stack/33 AsIs: e.Scanned/30 HalfReuse: </16 } Tile{ HalfReuse: & Implode_Ext/32 } Tile{ AsIs: e.Word/26 } Tile{ HalfReuse: >/15 } Tile{ AsIs: )/12 } </35 Tile{ HalfReuse: & Type/21 AsIs: e.Tail/28 AsIs: >/1 } >/36 Tile{ ]] }
        refalrts::alloc_open_call(vm, context[35]);
        refalrts::alloc_close_call(vm, context[36]);
        refalrts::update_ident(context[8], identifiers[ident_General]);
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[32], functions[efunc_Implodeu_Ext]);
        refalrts::reinit_close_call(context[15]);
        refalrts::reinit_name(context[21], functions[efunc_Type]);
        refalrts::push_stack( vm, context[36] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[35] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[16] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[36] );
        res = refalrts::splice_evar( res, context[21], context[1] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_elem( res, context[32] );
        res = refalrts::splice_evar( res, context[33], context[16] );
        refalrts::splice_to_freelist_open( vm, context[11], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxin-Scan/4 s.FileNo/7 # Word/8 (/11 t.Stack/15 e.Scanned/26 )/12 'N'/13 s.0/14 0/21 >/1
        context[26] = context[22];
        context[27] = context[23];
        if( ! refalrts::char_term( 'N', context[13] ) )
          continue;
        if( ! refalrts::number_term( 0UL, context[21] ) )
          continue;
        if( ! refalrts::empty_seq( context[24], context[25] ) )
          continue;
        // closed e.Scanned as range 26
        //DEBUG: t.Stack: 15
        //DEBUG: s.FileNo: 7
        //DEBUG: s.0: 14
        //DEBUG: e.Scanned: 26

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.FileNo/7 {REMOVED TILE} t.Stack/15 e.Scanned/26 {REMOVED TILE} s.0/14 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sysfun-Xxin-ERROR/4 } 'U'/28 Tile{ HalfReuse: 'n'/12 Reuse: 'e'/13 } Tile{ HalfReuse: 'x'/8 HalfReuse: 'p'/11 }"ected EOF while reading wor"/29 Tile{ HalfReuse: 'd'/21 AsIs: >/1 ]] }
        refalrts::alloc_char(vm, context[28], 'U');
        refalrts::alloc_chars(vm, context[29], context[30], "ected EOF while reading wor", 27);
        refalrts::update_name(context[4], functions[efunc_Sysfunm_Xxinm_ERROR]);
        refalrts::reinit_char(context[12], 'n');
        refalrts::update_char(context[13], 'e');
        refalrts::reinit_char(context[8], 'x');
        refalrts::reinit_char(context[11], 'p');
        refalrts::reinit_char(context[21], 'd');
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[21];
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_evar( res, context[8], context[11] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        res = refalrts::splice_elem( res, context[28] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Xxin-Scan/4 s.FileNo/7 # Word/8 (/11 t.Stack/15 e.Scanned/26 )/12 s.T/13 s.S/14 s.Other/21 e.Tail/28 >/1
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      context[29] = context[25];
      // closed e.Scanned as range 26
      // closed e.Tail as range 28
      //DEBUG: t.Stack: 15
      //DEBUG: s.FileNo: 7
      //DEBUG: s.T: 13
      //DEBUG: s.S: 14
      //DEBUG: s.Other: 21
      //DEBUG: e.Scanned: 26
      //DEBUG: e.Tail: 28

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.FileNo/7 {REMOVED TILE} t.Stack/15 e.Scanned/26 {REMOVED TILE} s.T/13 s.S/14 {REMOVED TILE} e.Tail/28 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sysfun-Xxin-ERROR/4 }"Un"/30 Tile{ HalfReuse: 'e'/8 HalfReuse: 'x'/11 } Tile{ HalfReuse: 'p'/12 }"ected \""/32 Tile{ AsIs: s.Other/21 }"\" while reading word"/34 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_chars(vm, context[30], context[31], "Un", 2);
      refalrts::alloc_chars(vm, context[32], context[33], "ected \"", 7);
      refalrts::alloc_chars(vm, context[34], context[35], "\" while reading word", 20);
      refalrts::update_name(context[4], functions[efunc_Sysfunm_Xxinm_ERROR]);
      refalrts::reinit_char(context[8], 'e');
      refalrts::reinit_char(context[11], 'x');
      refalrts::reinit_char(context[12], 'p');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_elem( res, context[21] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[8], context[11] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxin-Scan/4 s.new16/7 s.new17/8 (/11 t.new21/15 e.new22/22 )/12 'D'/13 s.new18/14 s.new19/21 e.new20/24 >/1
      context[22] = context[17];
      context[23] = context[18];
      context[24] = context[19];
      context[25] = context[20];
      if( ! refalrts::char_term( 'D', context[13] ) )
        continue;
      // closed e.new22 as range 22
      // closed e.new20 as range 24
      do {
        // </0 & Xxin-Scan/4 s.FileNo/7 # General/8 (/11 t.Stack/15 e.Scanned/26 )/12 'D'/13 s.0/14 s.Digit/21 e.Tail/28 >/1
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        context[29] = context[25];
        if( ! refalrts::ident_term( identifiers[ident_General], context[8] ) )
          continue;
        // closed e.Scanned as range 26
        // closed e.Tail as range 28
        //DEBUG: t.Stack: 15
        //DEBUG: s.FileNo: 7
        //DEBUG: s.0: 14
        //DEBUG: s.Digit: 21
        //DEBUG: e.Scanned: 26
        //DEBUG: e.Tail: 28

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.0/14 s.Digit/21 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Xxin-Scan/4 AsIs: s.FileNo/7 Reuse: # Number/8 AsIs: (/11 } (/30 # General/31 Tile{ AsIs: t.Stack/15 AsIs: e.Scanned/26 AsIs: )/12 HalfReuse: s.Digit21 /13 } )/32 </33 & Type/34 Tile{ AsIs: e.Tail/28 } >/35 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[30]);
        refalrts::alloc_ident(vm, context[31], identifiers[ident_General]);
        refalrts::alloc_close_bracket(vm, context[32]);
        refalrts::alloc_open_call(vm, context[33]);
        refalrts::alloc_name(vm, context[34], functions[efunc_Type]);
        refalrts::alloc_close_call(vm, context[35]);
        refalrts::update_ident(context[8], identifiers[ident_Number]);
        refalrts::reinit_svar( context[13], context[21] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[35] );
        refalrts::push_stack( vm, context[33] );
        refalrts::link_brackets( context[11], context[32] );
        refalrts::link_brackets( context[30], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[28], context[29] );
        res = refalrts::splice_evar( res, context[32], context[34] );
        res = refalrts::splice_evar( res, context[15], context[13] );
        res = refalrts::splice_evar( res, context[30], context[31] );
        refalrts::splice_to_freelist_open( vm, context[11], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Xxin-Scan/4 s.FileNo/7 # Number/8 (/11 t.Stack/15 e.Scanned/26 )/12 'D'/13 s.0/14 s.Digit/21 e.Tail/28 >/1
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      context[29] = context[25];
      if( ! refalrts::ident_term( identifiers[ident_Number], context[8] ) )
        continue;
      // closed e.Scanned as range 26
      // closed e.Tail as range 28
      //DEBUG: t.Stack: 15
      //DEBUG: s.FileNo: 7
      //DEBUG: s.0: 14
      //DEBUG: s.Digit: 21
      //DEBUG: e.Scanned: 26
      //DEBUG: e.Tail: 28

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.0/14 s.Digit/21 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Xxin-Scan/4 AsIs: s.FileNo/7 AsIs: # Number/8 AsIs: (/11 AsIs: t.Stack/15 AsIs: e.Scanned/26 HalfReuse: s.Digit21 /12 HalfReuse: )/13 } </30 & Type/31 Tile{ AsIs: e.Tail/28 } >/32 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_Type]);
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::reinit_svar( context[12], context[21] );
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[30] );
      refalrts::link_brackets( context[11], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      refalrts::splice_to_freelist_open( vm, context[13], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Xxin-Scan/4 s.new16/7 # Number/8 (/11 t.new21/15 e.new22/22 )/12 s.new17/13 s.new18/14 s.new19/21 e.new20/24 >/1
    context[22] = context[17];
    context[23] = context[18];
    context[24] = context[19];
    context[25] = context[20];
    if( ! refalrts::ident_term( identifiers[ident_Number], context[8] ) )
      continue;
    // closed e.new22 as range 22
    // closed e.new20 as range 24
    do {
      // </0 & Xxin-Scan/4 s.new23/7 # Number/8 (/11 (/15 # General/32 t.new27/33 e.new28/30 )/16 e.new29/26 )/12 s.new24/13 s.new25/14 ' '/21 e.new26/28 >/1
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      context[29] = context[25];
      context[30] = 0;
      context[31] = 0;
      if( ! refalrts::brackets_term( context[30], context[31], context[15] ) )
        continue;
      if( ! refalrts::char_term( ' ', context[21] ) )
        continue;
      context[32] = refalrts::ident_left( identifiers[ident_General], context[30], context[31] );
      if( ! context[32] )
        continue;
      // closed e.new29 as range 26
      // closed e.new26 as range 28
      context[34] = refalrts::tvar_left( context[33], context[30], context[31] );
      if( ! context[34] )
        continue;
      // closed e.new28 as range 30
      do {
        // </0 & Xxin-Scan/4 s.new30/7 # Number/8 (/11 (/15 # General/32 t.new34/33 e.new35/35 )/16 s.new36/41 e.new37/37 )/12 s.new31/13 s.new32/14 ' '/21 e.new33/39 >/1
        context[35] = context[30];
        context[36] = context[31];
        context[37] = context[26];
        context[38] = context[27];
        context[39] = context[28];
        context[40] = context[29];
        // closed e.new35 as range 35
        // closed e.new33 as range 39
        if( ! refalrts::svar_left( context[41], context[37], context[38] ) )
          continue;
        // closed e.new37 as range 37
        do {
          // </0 & Xxin-Scan/4 s.FileNo/7 # Number/8 (/11 (/15 # General/32 t.Stack/33 e.Scanned/42 )/16 '0'/41 e./44 )/12 s.T/13 s.S/14 ' '/21 e.Tail/46 >/1
          context[42] = context[35];
          context[43] = context[36];
          context[44] = context[37];
          context[45] = context[38];
          context[46] = context[39];
          context[47] = context[40];
          if( ! refalrts::char_term( '0', context[41] ) )
            continue;
          // closed e.Scanned as range 42
          // closed e. as range 44
          // closed e.Tail as range 46
          //DEBUG: t.Stack: 33
          //DEBUG: s.FileNo: 7
          //DEBUG: s.T: 13
          //DEBUG: s.S: 14
          //DEBUG: e.Scanned: 42
          //DEBUG: e.: 44
          //DEBUG: e.Tail: 46

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.T/13 s.S/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxin-Scan$38:1/4 AsIs: s.FileNo/7 } Tile{ AsIs: t.Stack/33 } (/48 Tile{ AsIs: e.Scanned/42 } )/49 (/50 Tile{ AsIs: e.Tail/46 } )/51 Tile{ HalfReuse: </8 HalfReuse: & DoNumb/11 AsIs: (/15 HalfReuse: </32 } Tile{ HalfReuse: & Add-Nat/21 } (/52 </53 & Mul-Digits/54 0/55 10/56 >/57 )/58 0/59 Tile{ HalfReuse: >/16 HalfReuse: )/41 AsIs: e./44 HalfReuse: >/12 } Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_bracket(vm, context[48]);
          refalrts::alloc_close_bracket(vm, context[49]);
          refalrts::alloc_open_bracket(vm, context[50]);
          refalrts::alloc_close_bracket(vm, context[51]);
          refalrts::alloc_open_bracket(vm, context[52]);
          refalrts::alloc_open_call(vm, context[53]);
          refalrts::alloc_name(vm, context[54], functions[efunc_Mulm_Digits]);
          refalrts::alloc_number(vm, context[55], 0UL);
          refalrts::alloc_number(vm, context[56], 10UL);
          refalrts::alloc_close_call(vm, context[57]);
          refalrts::alloc_close_bracket(vm, context[58]);
          refalrts::alloc_number(vm, context[59], 0UL);
          refalrts::update_name(context[4], functions[efunc_gen_Xxinm_Scan_S38B1]);
          refalrts::reinit_open_call(context[8]);
          refalrts::reinit_name(context[11], functions[efunc_DoNumb]);
          refalrts::reinit_open_call(context[32]);
          refalrts::reinit_name(context[21], functions[efunc_Addm_Nat]);
          refalrts::reinit_close_call(context[16]);
          refalrts::reinit_close_bracket(context[41]);
          refalrts::reinit_close_call(context[12]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[12] );
          refalrts::push_stack( vm, context[8] );
          refalrts::link_brackets( context[15], context[41] );
          refalrts::push_stack( vm, context[16] );
          refalrts::push_stack( vm, context[32] );
          refalrts::link_brackets( context[52], context[58] );
          refalrts::push_stack( vm, context[57] );
          refalrts::push_stack( vm, context[53] );
          refalrts::link_brackets( context[50], context[51] );
          refalrts::link_brackets( context[48], context[49] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[16], context[12] );
          res = refalrts::splice_evar( res, context[52], context[59] );
          res = refalrts::splice_elem( res, context[21] );
          res = refalrts::splice_evar( res, context[8], context[32] );
          res = refalrts::splice_elem( res, context[51] );
          res = refalrts::splice_evar( res, context[46], context[47] );
          res = refalrts::splice_evar( res, context[49], context[50] );
          res = refalrts::splice_evar( res, context[42], context[43] );
          res = refalrts::splice_elem( res, context[48] );
          res = refalrts::splice_evar( res, context[33], context[34] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Xxin-Scan/4 s.FileNo/7 # Number/8 (/11 (/15 # General/32 t.Stack/33 e.Scanned/42 )/16 '1'/41 e./44 )/12 s.T/13 s.S/14 ' '/21 e.Tail/46 >/1
          context[42] = context[35];
          context[43] = context[36];
          context[44] = context[37];
          context[45] = context[38];
          context[46] = context[39];
          context[47] = context[40];
          if( ! refalrts::char_term( '1', context[41] ) )
            continue;
          // closed e.Scanned as range 42
          // closed e. as range 44
          // closed e.Tail as range 46
          //DEBUG: t.Stack: 33
          //DEBUG: s.FileNo: 7
          //DEBUG: s.T: 13
          //DEBUG: s.S: 14
          //DEBUG: e.Scanned: 42
          //DEBUG: e.: 44
          //DEBUG: e.Tail: 46

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.T/13 s.S/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxin-Scan$38:1/4 AsIs: s.FileNo/7 } Tile{ AsIs: t.Stack/33 } (/48 Tile{ AsIs: e.Scanned/42 } )/49 (/50 Tile{ AsIs: e.Tail/46 } )/51 Tile{ HalfReuse: </8 HalfReuse: & DoNumb/11 AsIs: (/15 HalfReuse: </32 } Tile{ HalfReuse: & Add-Nat/21 } (/52 </53 & Mul-Digits/54 0/55 10/56 >/57 )/58 1/59 Tile{ HalfReuse: >/16 HalfReuse: )/41 AsIs: e./44 HalfReuse: >/12 } Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_bracket(vm, context[48]);
          refalrts::alloc_close_bracket(vm, context[49]);
          refalrts::alloc_open_bracket(vm, context[50]);
          refalrts::alloc_close_bracket(vm, context[51]);
          refalrts::alloc_open_bracket(vm, context[52]);
          refalrts::alloc_open_call(vm, context[53]);
          refalrts::alloc_name(vm, context[54], functions[efunc_Mulm_Digits]);
          refalrts::alloc_number(vm, context[55], 0UL);
          refalrts::alloc_number(vm, context[56], 10UL);
          refalrts::alloc_close_call(vm, context[57]);
          refalrts::alloc_close_bracket(vm, context[58]);
          refalrts::alloc_number(vm, context[59], 1UL);
          refalrts::update_name(context[4], functions[efunc_gen_Xxinm_Scan_S38B1]);
          refalrts::reinit_open_call(context[8]);
          refalrts::reinit_name(context[11], functions[efunc_DoNumb]);
          refalrts::reinit_open_call(context[32]);
          refalrts::reinit_name(context[21], functions[efunc_Addm_Nat]);
          refalrts::reinit_close_call(context[16]);
          refalrts::reinit_close_bracket(context[41]);
          refalrts::reinit_close_call(context[12]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[12] );
          refalrts::push_stack( vm, context[8] );
          refalrts::link_brackets( context[15], context[41] );
          refalrts::push_stack( vm, context[16] );
          refalrts::push_stack( vm, context[32] );
          refalrts::link_brackets( context[52], context[58] );
          refalrts::push_stack( vm, context[57] );
          refalrts::push_stack( vm, context[53] );
          refalrts::link_brackets( context[50], context[51] );
          refalrts::link_brackets( context[48], context[49] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[16], context[12] );
          res = refalrts::splice_evar( res, context[52], context[59] );
          res = refalrts::splice_elem( res, context[21] );
          res = refalrts::splice_evar( res, context[8], context[32] );
          res = refalrts::splice_elem( res, context[51] );
          res = refalrts::splice_evar( res, context[46], context[47] );
          res = refalrts::splice_evar( res, context[49], context[50] );
          res = refalrts::splice_evar( res, context[42], context[43] );
          res = refalrts::splice_elem( res, context[48] );
          res = refalrts::splice_evar( res, context[33], context[34] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Xxin-Scan/4 s.FileNo/7 # Number/8 (/11 (/15 # General/32 t.Stack/33 e.Scanned/42 )/16 '2'/41 e./44 )/12 s.T/13 s.S/14 ' '/21 e.Tail/46 >/1
          context[42] = context[35];
          context[43] = context[36];
          context[44] = context[37];
          context[45] = context[38];
          context[46] = context[39];
          context[47] = context[40];
          if( ! refalrts::char_term( '2', context[41] ) )
            continue;
          // closed e.Scanned as range 42
          // closed e. as range 44
          // closed e.Tail as range 46
          //DEBUG: t.Stack: 33
          //DEBUG: s.FileNo: 7
          //DEBUG: s.T: 13
          //DEBUG: s.S: 14
          //DEBUG: e.Scanned: 42
          //DEBUG: e.: 44
          //DEBUG: e.Tail: 46

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.T/13 s.S/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxin-Scan$38:1/4 AsIs: s.FileNo/7 } Tile{ AsIs: t.Stack/33 } (/48 Tile{ AsIs: e.Scanned/42 } )/49 (/50 Tile{ AsIs: e.Tail/46 } )/51 Tile{ HalfReuse: </8 HalfReuse: & DoNumb/11 AsIs: (/15 HalfReuse: </32 } Tile{ HalfReuse: & Add-Nat/21 } (/52 </53 & Mul-Digits/54 0/55 10/56 >/57 )/58 2/59 Tile{ HalfReuse: >/16 HalfReuse: )/41 AsIs: e./44 HalfReuse: >/12 } Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_bracket(vm, context[48]);
          refalrts::alloc_close_bracket(vm, context[49]);
          refalrts::alloc_open_bracket(vm, context[50]);
          refalrts::alloc_close_bracket(vm, context[51]);
          refalrts::alloc_open_bracket(vm, context[52]);
          refalrts::alloc_open_call(vm, context[53]);
          refalrts::alloc_name(vm, context[54], functions[efunc_Mulm_Digits]);
          refalrts::alloc_number(vm, context[55], 0UL);
          refalrts::alloc_number(vm, context[56], 10UL);
          refalrts::alloc_close_call(vm, context[57]);
          refalrts::alloc_close_bracket(vm, context[58]);
          refalrts::alloc_number(vm, context[59], 2UL);
          refalrts::update_name(context[4], functions[efunc_gen_Xxinm_Scan_S38B1]);
          refalrts::reinit_open_call(context[8]);
          refalrts::reinit_name(context[11], functions[efunc_DoNumb]);
          refalrts::reinit_open_call(context[32]);
          refalrts::reinit_name(context[21], functions[efunc_Addm_Nat]);
          refalrts::reinit_close_call(context[16]);
          refalrts::reinit_close_bracket(context[41]);
          refalrts::reinit_close_call(context[12]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[12] );
          refalrts::push_stack( vm, context[8] );
          refalrts::link_brackets( context[15], context[41] );
          refalrts::push_stack( vm, context[16] );
          refalrts::push_stack( vm, context[32] );
          refalrts::link_brackets( context[52], context[58] );
          refalrts::push_stack( vm, context[57] );
          refalrts::push_stack( vm, context[53] );
          refalrts::link_brackets( context[50], context[51] );
          refalrts::link_brackets( context[48], context[49] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[16], context[12] );
          res = refalrts::splice_evar( res, context[52], context[59] );
          res = refalrts::splice_elem( res, context[21] );
          res = refalrts::splice_evar( res, context[8], context[32] );
          res = refalrts::splice_elem( res, context[51] );
          res = refalrts::splice_evar( res, context[46], context[47] );
          res = refalrts::splice_evar( res, context[49], context[50] );
          res = refalrts::splice_evar( res, context[42], context[43] );
          res = refalrts::splice_elem( res, context[48] );
          res = refalrts::splice_evar( res, context[33], context[34] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Xxin-Scan/4 s.FileNo/7 # Number/8 (/11 (/15 # General/32 t.Stack/33 e.Scanned/42 )/16 '3'/41 e./44 )/12 s.T/13 s.S/14 ' '/21 e.Tail/46 >/1
          context[42] = context[35];
          context[43] = context[36];
          context[44] = context[37];
          context[45] = context[38];
          context[46] = context[39];
          context[47] = context[40];
          if( ! refalrts::char_term( '3', context[41] ) )
            continue;
          // closed e.Scanned as range 42
          // closed e. as range 44
          // closed e.Tail as range 46
          //DEBUG: t.Stack: 33
          //DEBUG: s.FileNo: 7
          //DEBUG: s.T: 13
          //DEBUG: s.S: 14
          //DEBUG: e.Scanned: 42
          //DEBUG: e.: 44
          //DEBUG: e.Tail: 46

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.T/13 s.S/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxin-Scan$38:1/4 AsIs: s.FileNo/7 } Tile{ AsIs: t.Stack/33 } (/48 Tile{ AsIs: e.Scanned/42 } )/49 (/50 Tile{ AsIs: e.Tail/46 } )/51 Tile{ HalfReuse: </8 HalfReuse: & DoNumb/11 AsIs: (/15 HalfReuse: </32 } Tile{ HalfReuse: & Add-Nat/21 } (/52 </53 & Mul-Digits/54 0/55 10/56 >/57 )/58 3/59 Tile{ HalfReuse: >/16 HalfReuse: )/41 AsIs: e./44 HalfReuse: >/12 } Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_bracket(vm, context[48]);
          refalrts::alloc_close_bracket(vm, context[49]);
          refalrts::alloc_open_bracket(vm, context[50]);
          refalrts::alloc_close_bracket(vm, context[51]);
          refalrts::alloc_open_bracket(vm, context[52]);
          refalrts::alloc_open_call(vm, context[53]);
          refalrts::alloc_name(vm, context[54], functions[efunc_Mulm_Digits]);
          refalrts::alloc_number(vm, context[55], 0UL);
          refalrts::alloc_number(vm, context[56], 10UL);
          refalrts::alloc_close_call(vm, context[57]);
          refalrts::alloc_close_bracket(vm, context[58]);
          refalrts::alloc_number(vm, context[59], 3UL);
          refalrts::update_name(context[4], functions[efunc_gen_Xxinm_Scan_S38B1]);
          refalrts::reinit_open_call(context[8]);
          refalrts::reinit_name(context[11], functions[efunc_DoNumb]);
          refalrts::reinit_open_call(context[32]);
          refalrts::reinit_name(context[21], functions[efunc_Addm_Nat]);
          refalrts::reinit_close_call(context[16]);
          refalrts::reinit_close_bracket(context[41]);
          refalrts::reinit_close_call(context[12]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[12] );
          refalrts::push_stack( vm, context[8] );
          refalrts::link_brackets( context[15], context[41] );
          refalrts::push_stack( vm, context[16] );
          refalrts::push_stack( vm, context[32] );
          refalrts::link_brackets( context[52], context[58] );
          refalrts::push_stack( vm, context[57] );
          refalrts::push_stack( vm, context[53] );
          refalrts::link_brackets( context[50], context[51] );
          refalrts::link_brackets( context[48], context[49] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[16], context[12] );
          res = refalrts::splice_evar( res, context[52], context[59] );
          res = refalrts::splice_elem( res, context[21] );
          res = refalrts::splice_evar( res, context[8], context[32] );
          res = refalrts::splice_elem( res, context[51] );
          res = refalrts::splice_evar( res, context[46], context[47] );
          res = refalrts::splice_evar( res, context[49], context[50] );
          res = refalrts::splice_evar( res, context[42], context[43] );
          res = refalrts::splice_elem( res, context[48] );
          res = refalrts::splice_evar( res, context[33], context[34] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Xxin-Scan/4 s.FileNo/7 # Number/8 (/11 (/15 # General/32 t.Stack/33 e.Scanned/42 )/16 '4'/41 e./44 )/12 s.T/13 s.S/14 ' '/21 e.Tail/46 >/1
          context[42] = context[35];
          context[43] = context[36];
          context[44] = context[37];
          context[45] = context[38];
          context[46] = context[39];
          context[47] = context[40];
          if( ! refalrts::char_term( '4', context[41] ) )
            continue;
          // closed e.Scanned as range 42
          // closed e. as range 44
          // closed e.Tail as range 46
          //DEBUG: t.Stack: 33
          //DEBUG: s.FileNo: 7
          //DEBUG: s.T: 13
          //DEBUG: s.S: 14
          //DEBUG: e.Scanned: 42
          //DEBUG: e.: 44
          //DEBUG: e.Tail: 46

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.T/13 s.S/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxin-Scan$38:1/4 AsIs: s.FileNo/7 } Tile{ AsIs: t.Stack/33 } (/48 Tile{ AsIs: e.Scanned/42 } )/49 (/50 Tile{ AsIs: e.Tail/46 } )/51 Tile{ HalfReuse: </8 HalfReuse: & DoNumb/11 AsIs: (/15 HalfReuse: </32 } Tile{ HalfReuse: & Add-Nat/21 } (/52 </53 & Mul-Digits/54 0/55 10/56 >/57 )/58 4/59 Tile{ HalfReuse: >/16 HalfReuse: )/41 AsIs: e./44 HalfReuse: >/12 } Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_bracket(vm, context[48]);
          refalrts::alloc_close_bracket(vm, context[49]);
          refalrts::alloc_open_bracket(vm, context[50]);
          refalrts::alloc_close_bracket(vm, context[51]);
          refalrts::alloc_open_bracket(vm, context[52]);
          refalrts::alloc_open_call(vm, context[53]);
          refalrts::alloc_name(vm, context[54], functions[efunc_Mulm_Digits]);
          refalrts::alloc_number(vm, context[55], 0UL);
          refalrts::alloc_number(vm, context[56], 10UL);
          refalrts::alloc_close_call(vm, context[57]);
          refalrts::alloc_close_bracket(vm, context[58]);
          refalrts::alloc_number(vm, context[59], 4UL);
          refalrts::update_name(context[4], functions[efunc_gen_Xxinm_Scan_S38B1]);
          refalrts::reinit_open_call(context[8]);
          refalrts::reinit_name(context[11], functions[efunc_DoNumb]);
          refalrts::reinit_open_call(context[32]);
          refalrts::reinit_name(context[21], functions[efunc_Addm_Nat]);
          refalrts::reinit_close_call(context[16]);
          refalrts::reinit_close_bracket(context[41]);
          refalrts::reinit_close_call(context[12]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[12] );
          refalrts::push_stack( vm, context[8] );
          refalrts::link_brackets( context[15], context[41] );
          refalrts::push_stack( vm, context[16] );
          refalrts::push_stack( vm, context[32] );
          refalrts::link_brackets( context[52], context[58] );
          refalrts::push_stack( vm, context[57] );
          refalrts::push_stack( vm, context[53] );
          refalrts::link_brackets( context[50], context[51] );
          refalrts::link_brackets( context[48], context[49] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[16], context[12] );
          res = refalrts::splice_evar( res, context[52], context[59] );
          res = refalrts::splice_elem( res, context[21] );
          res = refalrts::splice_evar( res, context[8], context[32] );
          res = refalrts::splice_elem( res, context[51] );
          res = refalrts::splice_evar( res, context[46], context[47] );
          res = refalrts::splice_evar( res, context[49], context[50] );
          res = refalrts::splice_evar( res, context[42], context[43] );
          res = refalrts::splice_elem( res, context[48] );
          res = refalrts::splice_evar( res, context[33], context[34] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Xxin-Scan/4 s.FileNo/7 # Number/8 (/11 (/15 # General/32 t.Stack/33 e.Scanned/42 )/16 '5'/41 e./44 )/12 s.T/13 s.S/14 ' '/21 e.Tail/46 >/1
          context[42] = context[35];
          context[43] = context[36];
          context[44] = context[37];
          context[45] = context[38];
          context[46] = context[39];
          context[47] = context[40];
          if( ! refalrts::char_term( '5', context[41] ) )
            continue;
          // closed e.Scanned as range 42
          // closed e. as range 44
          // closed e.Tail as range 46
          //DEBUG: t.Stack: 33
          //DEBUG: s.FileNo: 7
          //DEBUG: s.T: 13
          //DEBUG: s.S: 14
          //DEBUG: e.Scanned: 42
          //DEBUG: e.: 44
          //DEBUG: e.Tail: 46

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.T/13 s.S/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxin-Scan$38:1/4 AsIs: s.FileNo/7 } Tile{ AsIs: t.Stack/33 } (/48 Tile{ AsIs: e.Scanned/42 } )/49 (/50 Tile{ AsIs: e.Tail/46 } )/51 Tile{ HalfReuse: </8 HalfReuse: & DoNumb/11 AsIs: (/15 HalfReuse: </32 } Tile{ HalfReuse: & Add-Nat/21 } (/52 </53 & Mul-Digits/54 0/55 10/56 >/57 )/58 5/59 Tile{ HalfReuse: >/16 HalfReuse: )/41 AsIs: e./44 HalfReuse: >/12 } Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_bracket(vm, context[48]);
          refalrts::alloc_close_bracket(vm, context[49]);
          refalrts::alloc_open_bracket(vm, context[50]);
          refalrts::alloc_close_bracket(vm, context[51]);
          refalrts::alloc_open_bracket(vm, context[52]);
          refalrts::alloc_open_call(vm, context[53]);
          refalrts::alloc_name(vm, context[54], functions[efunc_Mulm_Digits]);
          refalrts::alloc_number(vm, context[55], 0UL);
          refalrts::alloc_number(vm, context[56], 10UL);
          refalrts::alloc_close_call(vm, context[57]);
          refalrts::alloc_close_bracket(vm, context[58]);
          refalrts::alloc_number(vm, context[59], 5UL);
          refalrts::update_name(context[4], functions[efunc_gen_Xxinm_Scan_S38B1]);
          refalrts::reinit_open_call(context[8]);
          refalrts::reinit_name(context[11], functions[efunc_DoNumb]);
          refalrts::reinit_open_call(context[32]);
          refalrts::reinit_name(context[21], functions[efunc_Addm_Nat]);
          refalrts::reinit_close_call(context[16]);
          refalrts::reinit_close_bracket(context[41]);
          refalrts::reinit_close_call(context[12]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[12] );
          refalrts::push_stack( vm, context[8] );
          refalrts::link_brackets( context[15], context[41] );
          refalrts::push_stack( vm, context[16] );
          refalrts::push_stack( vm, context[32] );
          refalrts::link_brackets( context[52], context[58] );
          refalrts::push_stack( vm, context[57] );
          refalrts::push_stack( vm, context[53] );
          refalrts::link_brackets( context[50], context[51] );
          refalrts::link_brackets( context[48], context[49] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[16], context[12] );
          res = refalrts::splice_evar( res, context[52], context[59] );
          res = refalrts::splice_elem( res, context[21] );
          res = refalrts::splice_evar( res, context[8], context[32] );
          res = refalrts::splice_elem( res, context[51] );
          res = refalrts::splice_evar( res, context[46], context[47] );
          res = refalrts::splice_evar( res, context[49], context[50] );
          res = refalrts::splice_evar( res, context[42], context[43] );
          res = refalrts::splice_elem( res, context[48] );
          res = refalrts::splice_evar( res, context[33], context[34] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Xxin-Scan/4 s.FileNo/7 # Number/8 (/11 (/15 # General/32 t.Stack/33 e.Scanned/42 )/16 '6'/41 e./44 )/12 s.T/13 s.S/14 ' '/21 e.Tail/46 >/1
          context[42] = context[35];
          context[43] = context[36];
          context[44] = context[37];
          context[45] = context[38];
          context[46] = context[39];
          context[47] = context[40];
          if( ! refalrts::char_term( '6', context[41] ) )
            continue;
          // closed e.Scanned as range 42
          // closed e. as range 44
          // closed e.Tail as range 46
          //DEBUG: t.Stack: 33
          //DEBUG: s.FileNo: 7
          //DEBUG: s.T: 13
          //DEBUG: s.S: 14
          //DEBUG: e.Scanned: 42
          //DEBUG: e.: 44
          //DEBUG: e.Tail: 46

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.T/13 s.S/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxin-Scan$38:1/4 AsIs: s.FileNo/7 } Tile{ AsIs: t.Stack/33 } (/48 Tile{ AsIs: e.Scanned/42 } )/49 (/50 Tile{ AsIs: e.Tail/46 } )/51 Tile{ HalfReuse: </8 HalfReuse: & DoNumb/11 AsIs: (/15 HalfReuse: </32 } Tile{ HalfReuse: & Add-Nat/21 } (/52 </53 & Mul-Digits/54 0/55 10/56 >/57 )/58 6/59 Tile{ HalfReuse: >/16 HalfReuse: )/41 AsIs: e./44 HalfReuse: >/12 } Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_bracket(vm, context[48]);
          refalrts::alloc_close_bracket(vm, context[49]);
          refalrts::alloc_open_bracket(vm, context[50]);
          refalrts::alloc_close_bracket(vm, context[51]);
          refalrts::alloc_open_bracket(vm, context[52]);
          refalrts::alloc_open_call(vm, context[53]);
          refalrts::alloc_name(vm, context[54], functions[efunc_Mulm_Digits]);
          refalrts::alloc_number(vm, context[55], 0UL);
          refalrts::alloc_number(vm, context[56], 10UL);
          refalrts::alloc_close_call(vm, context[57]);
          refalrts::alloc_close_bracket(vm, context[58]);
          refalrts::alloc_number(vm, context[59], 6UL);
          refalrts::update_name(context[4], functions[efunc_gen_Xxinm_Scan_S38B1]);
          refalrts::reinit_open_call(context[8]);
          refalrts::reinit_name(context[11], functions[efunc_DoNumb]);
          refalrts::reinit_open_call(context[32]);
          refalrts::reinit_name(context[21], functions[efunc_Addm_Nat]);
          refalrts::reinit_close_call(context[16]);
          refalrts::reinit_close_bracket(context[41]);
          refalrts::reinit_close_call(context[12]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[12] );
          refalrts::push_stack( vm, context[8] );
          refalrts::link_brackets( context[15], context[41] );
          refalrts::push_stack( vm, context[16] );
          refalrts::push_stack( vm, context[32] );
          refalrts::link_brackets( context[52], context[58] );
          refalrts::push_stack( vm, context[57] );
          refalrts::push_stack( vm, context[53] );
          refalrts::link_brackets( context[50], context[51] );
          refalrts::link_brackets( context[48], context[49] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[16], context[12] );
          res = refalrts::splice_evar( res, context[52], context[59] );
          res = refalrts::splice_elem( res, context[21] );
          res = refalrts::splice_evar( res, context[8], context[32] );
          res = refalrts::splice_elem( res, context[51] );
          res = refalrts::splice_evar( res, context[46], context[47] );
          res = refalrts::splice_evar( res, context[49], context[50] );
          res = refalrts::splice_evar( res, context[42], context[43] );
          res = refalrts::splice_elem( res, context[48] );
          res = refalrts::splice_evar( res, context[33], context[34] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Xxin-Scan/4 s.FileNo/7 # Number/8 (/11 (/15 # General/32 t.Stack/33 e.Scanned/42 )/16 '7'/41 e./44 )/12 s.T/13 s.S/14 ' '/21 e.Tail/46 >/1
          context[42] = context[35];
          context[43] = context[36];
          context[44] = context[37];
          context[45] = context[38];
          context[46] = context[39];
          context[47] = context[40];
          if( ! refalrts::char_term( '7', context[41] ) )
            continue;
          // closed e.Scanned as range 42
          // closed e. as range 44
          // closed e.Tail as range 46
          //DEBUG: t.Stack: 33
          //DEBUG: s.FileNo: 7
          //DEBUG: s.T: 13
          //DEBUG: s.S: 14
          //DEBUG: e.Scanned: 42
          //DEBUG: e.: 44
          //DEBUG: e.Tail: 46

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.T/13 s.S/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxin-Scan$38:1/4 AsIs: s.FileNo/7 } Tile{ AsIs: t.Stack/33 } (/48 Tile{ AsIs: e.Scanned/42 } )/49 (/50 Tile{ AsIs: e.Tail/46 } )/51 Tile{ HalfReuse: </8 HalfReuse: & DoNumb/11 AsIs: (/15 HalfReuse: </32 } Tile{ HalfReuse: & Add-Nat/21 } (/52 </53 & Mul-Digits/54 0/55 10/56 >/57 )/58 7/59 Tile{ HalfReuse: >/16 HalfReuse: )/41 AsIs: e./44 HalfReuse: >/12 } Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_bracket(vm, context[48]);
          refalrts::alloc_close_bracket(vm, context[49]);
          refalrts::alloc_open_bracket(vm, context[50]);
          refalrts::alloc_close_bracket(vm, context[51]);
          refalrts::alloc_open_bracket(vm, context[52]);
          refalrts::alloc_open_call(vm, context[53]);
          refalrts::alloc_name(vm, context[54], functions[efunc_Mulm_Digits]);
          refalrts::alloc_number(vm, context[55], 0UL);
          refalrts::alloc_number(vm, context[56], 10UL);
          refalrts::alloc_close_call(vm, context[57]);
          refalrts::alloc_close_bracket(vm, context[58]);
          refalrts::alloc_number(vm, context[59], 7UL);
          refalrts::update_name(context[4], functions[efunc_gen_Xxinm_Scan_S38B1]);
          refalrts::reinit_open_call(context[8]);
          refalrts::reinit_name(context[11], functions[efunc_DoNumb]);
          refalrts::reinit_open_call(context[32]);
          refalrts::reinit_name(context[21], functions[efunc_Addm_Nat]);
          refalrts::reinit_close_call(context[16]);
          refalrts::reinit_close_bracket(context[41]);
          refalrts::reinit_close_call(context[12]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[12] );
          refalrts::push_stack( vm, context[8] );
          refalrts::link_brackets( context[15], context[41] );
          refalrts::push_stack( vm, context[16] );
          refalrts::push_stack( vm, context[32] );
          refalrts::link_brackets( context[52], context[58] );
          refalrts::push_stack( vm, context[57] );
          refalrts::push_stack( vm, context[53] );
          refalrts::link_brackets( context[50], context[51] );
          refalrts::link_brackets( context[48], context[49] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[16], context[12] );
          res = refalrts::splice_evar( res, context[52], context[59] );
          res = refalrts::splice_elem( res, context[21] );
          res = refalrts::splice_evar( res, context[8], context[32] );
          res = refalrts::splice_elem( res, context[51] );
          res = refalrts::splice_evar( res, context[46], context[47] );
          res = refalrts::splice_evar( res, context[49], context[50] );
          res = refalrts::splice_evar( res, context[42], context[43] );
          res = refalrts::splice_elem( res, context[48] );
          res = refalrts::splice_evar( res, context[33], context[34] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Xxin-Scan/4 s.FileNo/7 # Number/8 (/11 (/15 # General/32 t.Stack/33 e.Scanned/42 )/16 '8'/41 e./44 )/12 s.T/13 s.S/14 ' '/21 e.Tail/46 >/1
          context[42] = context[35];
          context[43] = context[36];
          context[44] = context[37];
          context[45] = context[38];
          context[46] = context[39];
          context[47] = context[40];
          if( ! refalrts::char_term( '8', context[41] ) )
            continue;
          // closed e.Scanned as range 42
          // closed e. as range 44
          // closed e.Tail as range 46
          //DEBUG: t.Stack: 33
          //DEBUG: s.FileNo: 7
          //DEBUG: s.T: 13
          //DEBUG: s.S: 14
          //DEBUG: e.Scanned: 42
          //DEBUG: e.: 44
          //DEBUG: e.Tail: 46

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.T/13 s.S/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxin-Scan$38:1/4 AsIs: s.FileNo/7 } Tile{ AsIs: t.Stack/33 } (/48 Tile{ AsIs: e.Scanned/42 } )/49 (/50 Tile{ AsIs: e.Tail/46 } )/51 Tile{ HalfReuse: </8 HalfReuse: & DoNumb/11 AsIs: (/15 HalfReuse: </32 } Tile{ HalfReuse: & Add-Nat/21 } (/52 </53 & Mul-Digits/54 0/55 10/56 >/57 )/58 8/59 Tile{ HalfReuse: >/16 HalfReuse: )/41 AsIs: e./44 HalfReuse: >/12 } Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_bracket(vm, context[48]);
          refalrts::alloc_close_bracket(vm, context[49]);
          refalrts::alloc_open_bracket(vm, context[50]);
          refalrts::alloc_close_bracket(vm, context[51]);
          refalrts::alloc_open_bracket(vm, context[52]);
          refalrts::alloc_open_call(vm, context[53]);
          refalrts::alloc_name(vm, context[54], functions[efunc_Mulm_Digits]);
          refalrts::alloc_number(vm, context[55], 0UL);
          refalrts::alloc_number(vm, context[56], 10UL);
          refalrts::alloc_close_call(vm, context[57]);
          refalrts::alloc_close_bracket(vm, context[58]);
          refalrts::alloc_number(vm, context[59], 8UL);
          refalrts::update_name(context[4], functions[efunc_gen_Xxinm_Scan_S38B1]);
          refalrts::reinit_open_call(context[8]);
          refalrts::reinit_name(context[11], functions[efunc_DoNumb]);
          refalrts::reinit_open_call(context[32]);
          refalrts::reinit_name(context[21], functions[efunc_Addm_Nat]);
          refalrts::reinit_close_call(context[16]);
          refalrts::reinit_close_bracket(context[41]);
          refalrts::reinit_close_call(context[12]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[12] );
          refalrts::push_stack( vm, context[8] );
          refalrts::link_brackets( context[15], context[41] );
          refalrts::push_stack( vm, context[16] );
          refalrts::push_stack( vm, context[32] );
          refalrts::link_brackets( context[52], context[58] );
          refalrts::push_stack( vm, context[57] );
          refalrts::push_stack( vm, context[53] );
          refalrts::link_brackets( context[50], context[51] );
          refalrts::link_brackets( context[48], context[49] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[16], context[12] );
          res = refalrts::splice_evar( res, context[52], context[59] );
          res = refalrts::splice_elem( res, context[21] );
          res = refalrts::splice_evar( res, context[8], context[32] );
          res = refalrts::splice_elem( res, context[51] );
          res = refalrts::splice_evar( res, context[46], context[47] );
          res = refalrts::splice_evar( res, context[49], context[50] );
          res = refalrts::splice_evar( res, context[42], context[43] );
          res = refalrts::splice_elem( res, context[48] );
          res = refalrts::splice_evar( res, context[33], context[34] );
          refalrts::splice_to_freelist_open( vm, context[7], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Xxin-Scan/4 s.FileNo/7 # Number/8 (/11 (/15 # General/32 t.Stack/33 e.Scanned/42 )/16 '9'/41 e./44 )/12 s.T/13 s.S/14 ' '/21 e.Tail/46 >/1
        context[42] = context[35];
        context[43] = context[36];
        context[44] = context[37];
        context[45] = context[38];
        context[46] = context[39];
        context[47] = context[40];
        if( ! refalrts::char_term( '9', context[41] ) )
          continue;
        // closed e.Scanned as range 42
        // closed e. as range 44
        // closed e.Tail as range 46
        //DEBUG: t.Stack: 33
        //DEBUG: s.FileNo: 7
        //DEBUG: s.T: 13
        //DEBUG: s.S: 14
        //DEBUG: e.Scanned: 42
        //DEBUG: e.: 44
        //DEBUG: e.Tail: 46

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.T/13 s.S/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxin-Scan$38:1/4 AsIs: s.FileNo/7 } Tile{ AsIs: t.Stack/33 } (/48 Tile{ AsIs: e.Scanned/42 } )/49 (/50 Tile{ AsIs: e.Tail/46 } )/51 Tile{ HalfReuse: </8 HalfReuse: & DoNumb/11 AsIs: (/15 HalfReuse: </32 } Tile{ HalfReuse: & Add-Nat/21 } (/52 </53 & Mul-Digits/54 0/55 10/56 >/57 )/58 9/59 Tile{ HalfReuse: >/16 HalfReuse: )/41 AsIs: e./44 HalfReuse: >/12 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[48]);
        refalrts::alloc_close_bracket(vm, context[49]);
        refalrts::alloc_open_bracket(vm, context[50]);
        refalrts::alloc_close_bracket(vm, context[51]);
        refalrts::alloc_open_bracket(vm, context[52]);
        refalrts::alloc_open_call(vm, context[53]);
        refalrts::alloc_name(vm, context[54], functions[efunc_Mulm_Digits]);
        refalrts::alloc_number(vm, context[55], 0UL);
        refalrts::alloc_number(vm, context[56], 10UL);
        refalrts::alloc_close_call(vm, context[57]);
        refalrts::alloc_close_bracket(vm, context[58]);
        refalrts::alloc_number(vm, context[59], 9UL);
        refalrts::update_name(context[4], functions[efunc_gen_Xxinm_Scan_S38B1]);
        refalrts::reinit_open_call(context[8]);
        refalrts::reinit_name(context[11], functions[efunc_DoNumb]);
        refalrts::reinit_open_call(context[32]);
        refalrts::reinit_name(context[21], functions[efunc_Addm_Nat]);
        refalrts::reinit_close_call(context[16]);
        refalrts::reinit_close_bracket(context[41]);
        refalrts::reinit_close_call(context[12]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[12] );
        refalrts::push_stack( vm, context[8] );
        refalrts::link_brackets( context[15], context[41] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[32] );
        refalrts::link_brackets( context[52], context[58] );
        refalrts::push_stack( vm, context[57] );
        refalrts::push_stack( vm, context[53] );
        refalrts::link_brackets( context[50], context[51] );
        refalrts::link_brackets( context[48], context[49] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[16], context[12] );
        res = refalrts::splice_evar( res, context[52], context[59] );
        res = refalrts::splice_elem( res, context[21] );
        res = refalrts::splice_evar( res, context[8], context[32] );
        res = refalrts::splice_elem( res, context[51] );
        res = refalrts::splice_evar( res, context[46], context[47] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_elem( res, context[48] );
        res = refalrts::splice_evar( res, context[33], context[34] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Xxin-Scan/4 s.FileNo/7 # Number/8 (/11 (/15 # General/32 t.Stack/33 e.Scanned/35 )/16 e.Number/37 )/12 s.T/13 s.S/14 ' '/21 e.Tail/39 >/1
      context[35] = context[30];
      context[36] = context[31];
      context[37] = context[26];
      context[38] = context[27];
      context[39] = context[28];
      context[40] = context[29];
      // closed e.Scanned as range 35
      // closed e.Number as range 37
      // closed e.Tail as range 39
      //DEBUG: t.Stack: 33
      //DEBUG: s.FileNo: 7
      //DEBUG: s.T: 13
      //DEBUG: s.S: 14
      //DEBUG: e.Scanned: 35
      //DEBUG: e.Number: 37
      //DEBUG: e.Tail: 39

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Number/37 {REMOVED TILE} s.T/13 s.S/14 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Xxin-Scan/4 AsIs: s.FileNo/7 Reuse: # General/8 AsIs: (/11 } Tile{ AsIs: t.Stack/33 AsIs: e.Scanned/35 HalfReuse: 0/16 } Tile{ AsIs: )/12 } Tile{ HalfReuse: </32 } Tile{ HalfReuse: & Type/21 AsIs: e.Tail/39 AsIs: >/1 } Tile{ HalfReuse: >/15 } Tile{ ]] }
      refalrts::update_ident(context[8], identifiers[ident_General]);
      refalrts::reinit_number(context[16], 0UL);
      refalrts::reinit_open_call(context[32]);
      refalrts::reinit_name(context[21], functions[efunc_Type]);
      refalrts::reinit_close_call(context[15]);
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[32] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[15] );
      res = refalrts::splice_evar( res, context[21], context[1] );
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[33], context[16] );
      refalrts::splice_to_freelist_open( vm, context[11], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Xxin-Scan/4 s.FileNo/7 # Number/8 (/11 t.Stack/15 e.Scanned/26 )/12 'N'/13 s.0/14 0/21 >/1
    context[26] = context[22];
    context[27] = context[23];
    if( ! refalrts::char_term( 'N', context[13] ) )
      continue;
    if( ! refalrts::number_term( 0UL, context[21] ) )
      continue;
    if( ! refalrts::empty_seq( context[24], context[25] ) )
      continue;
    // closed e.Scanned as range 26
    //DEBUG: t.Stack: 15
    //DEBUG: s.FileNo: 7
    //DEBUG: s.0: 14
    //DEBUG: e.Scanned: 26

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.FileNo/7 {REMOVED TILE} t.Stack/15 e.Scanned/26 {REMOVED TILE} s.0/14 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sysfun-Xxin-ERROR/4 } 'U'/28 Tile{ HalfReuse: 'n'/12 Reuse: 'e'/13 } Tile{ HalfReuse: 'x'/8 HalfReuse: 'p'/11 }"ected EOF while reading macrodigi"/29 Tile{ HalfReuse: 't'/21 AsIs: >/1 ]] }
    refalrts::alloc_char(vm, context[28], 'U');
    refalrts::alloc_chars(vm, context[29], context[30], "ected EOF while reading macrodigi", 33);
    refalrts::update_name(context[4], functions[efunc_Sysfunm_Xxinm_ERROR]);
    refalrts::reinit_char(context[12], 'n');
    refalrts::update_char(context[13], 'e');
    refalrts::reinit_char(context[8], 'x');
    refalrts::reinit_char(context[11], 'p');
    refalrts::reinit_char(context[21], 't');
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[21];
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_evar( res, context[8], context[11] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_elem( res, context[28] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Xxin-Scan/4 s.new1/5 s.new2/6 (/9 t.new3/14 e.new4/7 )/10 s.new5/11 s.new6/12 s.new7/13 e.new8/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[12], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new8 as range 2
  context[15] = refalrts::tvar_left( context[14], context[7], context[8] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  // closed e.new4 as range 7
  do {
    // </0 & Xxin-Scan/4 s.FileNo/5 # Number/6 (/9 t.Stack/14 e.Scanned/16 )/10 s.T/11 s.S/12 s.Other/13 e.Tail/18 >/1
    context[16] = context[7];
    context[17] = context[8];
    context[18] = context[2];
    context[19] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Number], context[6] ) )
      continue;
    // closed e.Scanned as range 16
    // closed e.Tail as range 18
    //DEBUG: t.Stack: 14
    //DEBUG: s.FileNo: 5
    //DEBUG: s.T: 11
    //DEBUG: s.S: 12
    //DEBUG: s.Other: 13
    //DEBUG: e.Scanned: 16
    //DEBUG: e.Tail: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.FileNo/5 {REMOVED TILE} t.Stack/14 e.Scanned/16 {REMOVED TILE} s.T/11 s.S/12 {REMOVED TILE} e.Tail/18 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sysfun-Xxin-ERROR/4 }"Un"/20 Tile{ HalfReuse: 'e'/6 HalfReuse: 'x'/9 } Tile{ HalfReuse: 'p'/10 }"ected \""/22 Tile{ AsIs: s.Other/13 }"\" while reading macrodigit"/24 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_chars(vm, context[20], context[21], "Un", 2);
    refalrts::alloc_chars(vm, context[22], context[23], "ected \"", 7);
    refalrts::alloc_chars(vm, context[24], context[25], "\" while reading macrodigit", 26);
    refalrts::update_name(context[4], functions[efunc_Sysfunm_Xxinm_ERROR]);
    refalrts::reinit_char(context[6], 'e');
    refalrts::reinit_char(context[9], 'x');
    refalrts::reinit_char(context[10], 'p');
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[6], context[9] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Xxin-Scan/4 s.FileNo/5 # General/6 (/9 t.Stack/14 e.Scanned/16 )/10 s.T/11 s.S/12 ' '/13 e.Tail/18 >/1
    context[16] = context[7];
    context[17] = context[8];
    context[18] = context[2];
    context[19] = context[3];
    if( ! refalrts::char_term( ' ', context[13] ) )
      continue;
    if( ! refalrts::ident_term( identifiers[ident_General], context[6] ) )
      continue;
    // closed e.Scanned as range 16
    // closed e.Tail as range 18
    //DEBUG: t.Stack: 14
    //DEBUG: s.FileNo: 5
    //DEBUG: s.T: 11
    //DEBUG: s.S: 12
    //DEBUG: e.Scanned: 16
    //DEBUG: e.Tail: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.T/11 s.S/12 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Xxin-Scan/4 AsIs: s.FileNo/5 AsIs: # General/6 AsIs: (/9 AsIs: t.Stack/14 AsIs: e.Scanned/16 AsIs: )/10 } </20 Tile{ HalfReuse: & Type/13 AsIs: e.Tail/18 AsIs: >/1 } >/21 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[20]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::reinit_name(context[13], functions[efunc_Type]);
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[20] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[13], context[1] );
    res = refalrts::splice_elem( res, context[20] );
    refalrts::splice_to_freelist_open( vm, context[10], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Xxin-Scan/4 s.FileNo/5 s.State/6 (/9 t.Stack/14 e.Scanned/7 )/10 s.T/11 s.S/12 s.Other/13 e.Tail/2 >/1
  // closed e.Scanned as range 7
  // closed e.Tail as range 2
  //DEBUG: t.Stack: 14
  //DEBUG: s.FileNo: 5
  //DEBUG: s.State: 6
  //DEBUG: s.T: 11
  //DEBUG: s.S: 12
  //DEBUG: s.Other: 13
  //DEBUG: e.Scanned: 7
  //DEBUG: e.Tail: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.T/11 s.S/12 s.Other/13 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 AsIs: & Xxin-Scan/4 AsIs: s.FileNo/5 AsIs: s.State/6 AsIs: (/9 AsIs: t.Stack/14 AsIs: e.Scanned/7 HalfReuse: s.Other13 /10 } )/16 </17 & Type/18 Tile{ AsIs: e.Tail/2 } >/19 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::alloc_open_call(vm, context[17]);
  refalrts::alloc_name(vm, context[18], functions[efunc_Type]);
  refalrts::alloc_close_call(vm, context[19]);
  refalrts::reinit_svar( context[10], context[13] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[19] );
  refalrts::push_stack( vm, context[17] );
  refalrts::link_brackets( context[9], context[16] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[19] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[16], context[18] );
  refalrts::splice_to_freelist_open( vm, context[10], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Xxinm_Scan("Xxin-Scan", COOKIE1_, COOKIE2_, func_Xxinm_Scan);


static refalrts::FnResult func_HexDigit(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & HexDigit/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & HexDigit/4 s.new1/5 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & HexDigit/4 '0'/5 >/1
    if( ! refalrts::char_term( '0', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & HexDigit/4 '0'/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 0/1 ]] }
    refalrts::reinit_number(context[1], 0UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & HexDigit/4 '1'/5 >/1
    if( ! refalrts::char_term( '1', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & HexDigit/4 '1'/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 1/1 ]] }
    refalrts::reinit_number(context[1], 1UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & HexDigit/4 '2'/5 >/1
    if( ! refalrts::char_term( '2', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & HexDigit/4 '2'/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 2/1 ]] }
    refalrts::reinit_number(context[1], 2UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & HexDigit/4 '3'/5 >/1
    if( ! refalrts::char_term( '3', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & HexDigit/4 '3'/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 3/1 ]] }
    refalrts::reinit_number(context[1], 3UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & HexDigit/4 '4'/5 >/1
    if( ! refalrts::char_term( '4', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & HexDigit/4 '4'/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 4/1 ]] }
    refalrts::reinit_number(context[1], 4UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & HexDigit/4 '5'/5 >/1
    if( ! refalrts::char_term( '5', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & HexDigit/4 '5'/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 5/1 ]] }
    refalrts::reinit_number(context[1], 5UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & HexDigit/4 '6'/5 >/1
    if( ! refalrts::char_term( '6', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & HexDigit/4 '6'/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 6/1 ]] }
    refalrts::reinit_number(context[1], 6UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & HexDigit/4 '7'/5 >/1
    if( ! refalrts::char_term( '7', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & HexDigit/4 '7'/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 7/1 ]] }
    refalrts::reinit_number(context[1], 7UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & HexDigit/4 '8'/5 >/1
    if( ! refalrts::char_term( '8', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & HexDigit/4 '8'/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 8/1 ]] }
    refalrts::reinit_number(context[1], 8UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & HexDigit/4 '9'/5 >/1
    if( ! refalrts::char_term( '9', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & HexDigit/4 '9'/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 9/1 ]] }
    refalrts::reinit_number(context[1], 9UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & HexDigit/4 'A'/5 >/1
    if( ! refalrts::char_term( 'A', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & HexDigit/4 'A'/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 10/1 ]] }
    refalrts::reinit_number(context[1], 10UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & HexDigit/4 'B'/5 >/1
    if( ! refalrts::char_term( 'B', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & HexDigit/4 'B'/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 11/1 ]] }
    refalrts::reinit_number(context[1], 11UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & HexDigit/4 'C'/5 >/1
    if( ! refalrts::char_term( 'C', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & HexDigit/4 'C'/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 12/1 ]] }
    refalrts::reinit_number(context[1], 12UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & HexDigit/4 'D'/5 >/1
    if( ! refalrts::char_term( 'D', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & HexDigit/4 'D'/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 13/1 ]] }
    refalrts::reinit_number(context[1], 13UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & HexDigit/4 'E'/5 >/1
    if( ! refalrts::char_term( 'E', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & HexDigit/4 'E'/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 14/1 ]] }
    refalrts::reinit_number(context[1], 14UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & HexDigit/4 'F'/5 >/1
    if( ! refalrts::char_term( 'F', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & HexDigit/4 'F'/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 15/1 ]] }
    refalrts::reinit_number(context[1], 15UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & HexDigit/4 'a'/5 >/1
    if( ! refalrts::char_term( 'a', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & HexDigit/4 'a'/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 10/1 ]] }
    refalrts::reinit_number(context[1], 10UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & HexDigit/4 'b'/5 >/1
    if( ! refalrts::char_term( 'b', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & HexDigit/4 'b'/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 11/1 ]] }
    refalrts::reinit_number(context[1], 11UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & HexDigit/4 'c'/5 >/1
    if( ! refalrts::char_term( 'c', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & HexDigit/4 'c'/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 12/1 ]] }
    refalrts::reinit_number(context[1], 12UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & HexDigit/4 'd'/5 >/1
    if( ! refalrts::char_term( 'd', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & HexDigit/4 'd'/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 13/1 ]] }
    refalrts::reinit_number(context[1], 13UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & HexDigit/4 'e'/5 >/1
    if( ! refalrts::char_term( 'e', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & HexDigit/4 'e'/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 14/1 ]] }
    refalrts::reinit_number(context[1], 14UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & HexDigit/4 'f'/5 >/1
    if( ! refalrts::char_term( 'f', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & HexDigit/4 'f'/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 15/1 ]] }
    refalrts::reinit_number(context[1], 15UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & HexDigit/4 s.Other/5 >/1
  //DEBUG: s.Other: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & HexDigit/4 s.Other/5 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_HexDigit("HexDigit", COOKIE1_, COOKIE2_, func_HexDigit);


static refalrts::FnResult func_Quote(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & Quote/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Quote/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Quote/4 '\''/5 e.Text/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::char_term( '\'', context[5] ) )
      continue;
    // closed e.Text as range 6
    //DEBUG: e.Text: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Quote/4 '\''/5 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.Text/6 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Quote/4 '\"'/5 e.Text/2 >/1
  if( ! refalrts::char_term( '\"', context[5] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Text as range 2
  //DEBUG: e.Text: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Implode_Ext/5 AsIs: e.Text/2 AsIs: >/1 ]] }
  refalrts::reinit_open_call(context[4]);
  refalrts::reinit_name(context[5], functions[efunc_Implodeu_Ext]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[4];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Quote("Quote", COOKIE1_, COOKIE2_, func_Quote);


static refalrts::FnResult func_Sysfunm_Xxout(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & Sysfun-Xxout/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Sysfun-Xxout/4 e.new1/2 (/7 s.new2/9 e.new3/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 2
  if( ! refalrts::svar_left( context[9], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 5
  do {
    // </0 & Sysfun-Xxout/4 s.FileNameChar/14 e./10 (/7 s.Width/9 e.Expression/12 )/8 >/1
    context[10] = context[2];
    context[11] = context[3];
    context[12] = context[5];
    context[13] = context[6];
    // closed e.Expression as range 12
    if( ! refalrts::svar_left( context[14], context[10], context[11] ) )
      continue;
    // closed e. as range 10
    //DEBUG: s.Width: 9
    //DEBUG: e.Expression: 12
    //DEBUG: s.FileNameChar: 14
    //DEBUG: e.: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Wrap/4 } </15 & Open-Auto=1@1/16 Tile{ AsIs: s.FileNameChar/14 } (/17 Tile{ AsIs: e./10 } )/18 </19 & GetFreeHandle/20 >/21 Tile{ HalfReuse: >/7 AsIs: s.Width/9 } </22 & Xxout-Scan/23 </24 & Type/25 Tile{ AsIs: e.Expression/12 } >/26 Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_gen_Openm_Auto_A1Z1]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_close_bracket(vm, context[18]);
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_GetFreeHandle]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_name(vm, context[23], functions[efunc_Xxoutm_Scan]);
    refalrts::alloc_open_call(vm, context[24]);
    refalrts::alloc_name(vm, context[25], functions[efunc_Type]);
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::update_name(context[4], functions[efunc_Xxoutm_Wrap]);
    refalrts::reinit_close_call(context[7]);
    refalrts::reinit_close_call(context[8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[7] );
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_elem( res, context[26] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_evar( res, context[22], context[25] );
    res = refalrts::splice_evar( res, context[7], context[9] );
    res = refalrts::splice_evar( res, context[18], context[21] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Sysfun-Xxout/4 e.FileName/2 (/7 s.Width/9 e.Expression/5 )/8 >/1
  // closed e.FileName as range 2
  // closed e.Expression as range 5
  //DEBUG: s.Width: 9
  //DEBUG: e.FileName: 2
  //DEBUG: e.Expression: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </10 & Xxout-Wrap/11 </12 Tile{ HalfReuse: & Open-Auto*1/0 HalfReuse: 'w'/4 AsIs: e.FileName/2 HalfReuse: >/7 AsIs: s.Width/9 } </13 & Xxout-Scan/14 </15 & Type/16 Tile{ AsIs: e.Expression/5 } >/17 Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[10]);
  refalrts::alloc_name(vm, context[11], functions[efunc_Xxoutm_Wrap]);
  refalrts::alloc_open_call(vm, context[12]);
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_Xxoutm_Scan]);
  refalrts::alloc_open_call(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_Type]);
  refalrts::alloc_close_call(vm, context[17]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Openm_Auto_D1]);
  refalrts::reinit_char(context[4], 'w');
  refalrts::reinit_close_call(context[7]);
  refalrts::reinit_close_call(context[8]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[17] );
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[13], context[16] );
  res = refalrts::splice_evar( res, context[0], context[9] );
  res = refalrts::splice_evar( res, context[10], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Sysfunm_Xxout("Sysfun-Xxout", COOKIE1_, COOKIE2_, func_Sysfunm_Xxout);


static refalrts::FnResult func_gen_Xxoutm_Wrap_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Xxout-Wrap:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Xxout-Wrap:1/4 s.new1/5 s.new2/6 (/9 e.new3/7 )/10 e.new4/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new3 as range 7
  // closed e.new4 as range 2
  do {
    // </0 & Xxout-Wrap:1/4 s.FileNo/5 s.Width/6 (/9 e.Line/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Line as range 11
    //DEBUG: s.FileNo: 5
    //DEBUG: s.Width: 6
    //DEBUG: e.Line: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Width/6 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Write-Aux/4 AsIs: s.FileNo/5 } Tile{ AsIs: e.Line/11 } Tile{ HalfReuse: >/9 } </13 & Close/14 Tile{ HalfReuse: s.FileNo5 /10 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_Close]);
    refalrts::update_name(context[4], functions[efunc_Writem_Aux]);
    refalrts::reinit_close_call(context[9]);
    refalrts::reinit_svar( context[10], context[5] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[10];
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    refalrts::splice_to_freelist_open( vm, context[5], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Xxout-Wrap:1/4 s.FileNo/5 s.Width/6 (/9 e.Line/7 )/10 e.Rest/2 >/1
  // closed e.Line as range 7
  // closed e.Rest as range 2
  //DEBUG: s.FileNo: 5
  //DEBUG: s.Width: 6
  //DEBUG: e.Line: 7
  //DEBUG: e.Rest: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.Width/6 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Putout-Aux/4 AsIs: s.FileNo/5 } Tile{ AsIs: e.Line/7 } Tile{ HalfReuse: >/9 } </11 & Xxout-Wrap/12 s.FileNo/5/13 Tile{ HalfReuse: s.Width6 /10 AsIs: e.Rest/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_Xxoutm_Wrap]);
  refalrts::copy_stvar(vm, context[13], context[5]);
  refalrts::update_name(context[4], functions[efunc_Putoutm_Aux]);
  refalrts::reinit_close_call(context[9]);
  refalrts::reinit_svar( context[10], context[6] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[10];
  res = refalrts::splice_evar( res, context[11], context[13] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, context[5], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Xxoutm_Wrap_B1("Xxout-Wrap:1", COOKIE1_, COOKIE2_, func_gen_Xxoutm_Wrap_B1);


static refalrts::FnResult func_Xxoutm_Wrap(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & Xxout-Wrap/4 s.FileNo/5 s.Width/6 e.Text/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Text as range 2
  //DEBUG: s.FileNo: 5
  //DEBUG: s.Width: 6
  //DEBUG: e.Text: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Wrap:1/4 AsIs: s.FileNo/5 AsIs: s.Width/6 } </7 & First/8 s.Width/6/9 Tile{ AsIs: e.Text/2 } >/10 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_First]);
  refalrts::copy_stvar(vm, context[9], context[6]);
  refalrts::alloc_close_call(vm, context[10]);
  refalrts::update_name(context[4], functions[efunc_gen_Xxoutm_Wrap_B1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[10] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Xxoutm_Wrap("Xxout-Wrap", COOKIE1_, COOKIE2_, func_Xxoutm_Wrap);


static refalrts::FnResult func_gen_Xxoutm_Scan_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & Xxout-Scan$1=1/4 (/7 e.Chars/5 )/8 s.T/9 s.S$a/10 e.Tail$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Chars as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Tail$a as range 2
  //DEBUG: e.Chars: 5
  //DEBUG: s.T: 9
  //DEBUG: s.S$a: 10
  //DEBUG: e.Tail$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: '\''/0 } Tile{ AsIs: e.Chars/5 } Tile{ HalfReuse: '\''/4 HalfReuse: </7 } Tile{ HalfReuse: & Xxout-Scan/8 AsIs: s.T/9 AsIs: s.S$a/10 AsIs: e.Tail$a/2 AsIs: >/1 ]] }
  refalrts::reinit_char(context[0], '\'');
  refalrts::reinit_char(context[4], '\'');
  refalrts::reinit_open_call(context[7]);
  refalrts::reinit_name(context[8], functions[efunc_Xxoutm_Scan]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[4], context[7] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Xxoutm_Scan_S1A1("Xxout-Scan$1=1", COOKIE1_, COOKIE2_, func_gen_Xxoutm_Scan_S1A1);


static refalrts::FnResult func_gen_Xxoutm_Scan_S2A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & Xxout-Scan$2=1/4 (/7 e.Chars/5 )/8 s.T/9 s.S/10 e.Tail$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Chars as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Tail$a as range 2
  //DEBUG: e.Chars: 5
  //DEBUG: s.T: 9
  //DEBUG: s.S: 10
  //DEBUG: e.Tail$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: '\''/0 } Tile{ AsIs: e.Chars/5 } Tile{ HalfReuse: '\''/4 HalfReuse: </7 } Tile{ HalfReuse: & Xxout-Scan/8 AsIs: s.T/9 AsIs: s.S/10 AsIs: e.Tail$a/2 AsIs: >/1 ]] }
  refalrts::reinit_char(context[0], '\'');
  refalrts::reinit_char(context[4], '\'');
  refalrts::reinit_open_call(context[7]);
  refalrts::reinit_name(context[8], functions[efunc_Xxoutm_Scan]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[4], context[7] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Xxoutm_Scan_S2A1("Xxout-Scan$2=1", COOKIE1_, COOKIE2_, func_gen_Xxoutm_Scan_S2A1);


static refalrts::FnResult func_gen_Xxoutm_Scan_S4A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Xxout-Scan$4=1/4 (/7 e.Tail/5 )/8 (/11 e.Chars/9 )/12 '*'/13 s.0/14 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = refalrts::char_left( '*', context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tail as range 5
  // closed e.Chars as range 9
  if( ! refalrts::svar_left( context[14], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.Tail: 5
  //DEBUG: e.Chars: 9
  //DEBUG: s.0: 14

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.0/14 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ Reuse: '\"'/13 } Tile{ AsIs: e.Chars/9 } Tile{ HalfReuse: '\"'/1 } Tile{ HalfReuse: </12 } Tile{ HalfReuse: & Xxout-Scan/0 HalfReuse: </4 HalfReuse: & Type/7 AsIs: e.Tail/5 HalfReuse: >/8 HalfReuse: >/11 } Tile{ ]] }
  refalrts::update_char(context[13], '\"');
  refalrts::reinit_char(context[1], '\"');
  refalrts::reinit_open_call(context[12]);
  refalrts::reinit_name(context[0], functions[efunc_Xxoutm_Scan]);
  refalrts::reinit_open_call(context[4]);
  refalrts::reinit_name(context[7], functions[efunc_Type]);
  refalrts::reinit_close_call(context[8]);
  refalrts::reinit_close_call(context[11]);
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[0], context[11] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_elem( res, context[1] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_elem( res, context[13] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Xxoutm_Scan_S4A1("Xxout-Scan$4=1", COOKIE1_, COOKIE2_, func_gen_Xxoutm_Scan_S4A1);


static refalrts::FnResult func_gen_Xxoutm_Scan_S6A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & Xxout-Scan$6=1/4 (/7 e.Chars/5 )/8 s.T/9 s.S$a/10 e.Tail$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Chars as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Tail$a as range 2
  //DEBUG: e.Chars: 5
  //DEBUG: s.T: 9
  //DEBUG: s.S$a: 10
  //DEBUG: e.Tail$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: '\''/0 } Tile{ AsIs: e.Chars/5 } Tile{ HalfReuse: '\''/4 HalfReuse: </7 } Tile{ HalfReuse: & Xxout-Scan/8 AsIs: s.T/9 AsIs: s.S$a/10 AsIs: e.Tail$a/2 AsIs: >/1 ]] }
  refalrts::reinit_char(context[0], '\'');
  refalrts::reinit_char(context[4], '\'');
  refalrts::reinit_open_call(context[7]);
  refalrts::reinit_name(context[8], functions[efunc_Xxoutm_Scan]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[4], context[7] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Xxoutm_Scan_S6A1("Xxout-Scan$6=1", COOKIE1_, COOKIE2_, func_gen_Xxoutm_Scan_S6A1);


static refalrts::FnResult func_gen_Xxoutm_Scan_S7A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & Xxout-Scan$7=1/4 (/7 e.Chars/5 )/8 s.T/9 s.S$a/10 e.Tail$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Chars as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Tail$a as range 2
  //DEBUG: e.Chars: 5
  //DEBUG: s.T: 9
  //DEBUG: s.S$a: 10
  //DEBUG: e.Tail$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: '\''/0 } Tile{ AsIs: e.Chars/5 } Tile{ HalfReuse: '\''/4 HalfReuse: </7 } Tile{ HalfReuse: & Xxout-Scan/8 AsIs: s.T/9 AsIs: s.S$a/10 AsIs: e.Tail$a/2 AsIs: >/1 ]] }
  refalrts::reinit_char(context[0], '\'');
  refalrts::reinit_char(context[4], '\'');
  refalrts::reinit_open_call(context[7]);
  refalrts::reinit_name(context[8], functions[efunc_Xxoutm_Scan]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[4], context[7] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Xxoutm_Scan_S7A1("Xxout-Scan$7=1", COOKIE1_, COOKIE2_, func_gen_Xxoutm_Scan_S7A1);


static refalrts::FnResult func_Xxoutm_Scan(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 28 elems
  refalrts::Iter context[28];
  refalrts::zeros( context, 28 );
  // </0 & Xxout-Scan/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Xxout-Scan/4 s.new1/5 s.new2/6 e.new3/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & Xxout-Scan/4 s.new4/5 s.new5/6 t.new6/9 e.new7/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new7 as range 7
    do {
      // </0 & Xxout-Scan/4 s.new8/5 s.new9/6 s.new10/9 e.new11/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      if( ! refalrts::svar_term( context[9], context[9] ) )
        continue;
      // closed e.new11 as range 11
      do {
        // </0 & Xxout-Scan/4 'L'/5 s.S/6 s.Letter/9 e.Tail/13 >/1
        context[13] = context[11];
        context[14] = context[12];
        if( ! refalrts::char_term( 'L', context[5] ) )
          continue;
        // closed e.Tail as range 13
        //DEBUG: s.S: 6
        //DEBUG: s.Letter: 9
        //DEBUG: e.Tail: 13

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </15 & Xxout-Scan$1=1/16 Tile{ AsIs: </0 Reuse: & Xxout-Chars@1/4 AsIs: 'L'/5 AsIs: s.S/6 AsIs: s.Letter/9 AsIs: e.Tail/13 AsIs: >/1 } >/17 Tile{ ]] }
        refalrts::alloc_open_call(vm, context[15]);
        refalrts::alloc_name(vm, context[16], functions[efunc_gen_Xxoutm_Scan_S1A1]);
        refalrts::alloc_close_call(vm, context[17]);
        refalrts::update_name(context[4], functions[efunc_gen_Xxoutm_Chars_Z1]);
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[17] );
        res = refalrts::splice_evar( res, context[0], context[1] );
        res = refalrts::splice_evar( res, context[15], context[16] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Scan/4 'D'/5 s.0/6 s.Digit/9 e.Tail/13 >/1
        context[13] = context[11];
        context[14] = context[12];
        if( ! refalrts::char_term( 'D', context[5] ) )
          continue;
        // closed e.Tail as range 13
        //DEBUG: s.0: 6
        //DEBUG: s.Digit: 9
        //DEBUG: e.Tail: 13

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </15 & Xxout-Scan$2=1/16 Tile{ AsIs: </0 Reuse: & Xxout-Chars@1/4 AsIs: 'D'/5 AsIs: s.0/6 AsIs: s.Digit/9 AsIs: e.Tail/13 AsIs: >/1 } >/17 Tile{ ]] }
        refalrts::alloc_open_call(vm, context[15]);
        refalrts::alloc_name(vm, context[16], functions[efunc_gen_Xxoutm_Scan_S2A1]);
        refalrts::alloc_close_call(vm, context[17]);
        refalrts::update_name(context[4], functions[efunc_gen_Xxoutm_Chars_Z1]);
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[17] );
        res = refalrts::splice_evar( res, context[0], context[1] );
        res = refalrts::splice_evar( res, context[15], context[16] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Scan/4 'W'/5 s.new12/6 s.new13/9 e.new14/13 >/1
        context[13] = context[11];
        context[14] = context[12];
        if( ! refalrts::char_term( 'W', context[5] ) )
          continue;
        // closed e.new14 as range 13
        do {
          // </0 & Xxout-Scan/4 'W'/5 'i'/6 s.Word/9 e.Tail/15 >/1
          context[15] = context[13];
          context[16] = context[14];
          if( ! refalrts::char_term( 'i', context[6] ) )
            continue;
          // closed e.Tail as range 15
          //DEBUG: s.Word: 9
          //DEBUG: e.Tail: 15

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Word/9 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Explode/4 HalfReuse: s.Word9 /5 HalfReuse: >/6 } ' '/17 </18 & Xxout-Scan/19 </20 & Type/21 Tile{ AsIs: e.Tail/15 } >/22 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_char(vm, context[17], ' ');
          refalrts::alloc_open_call(vm, context[18]);
          refalrts::alloc_name(vm, context[19], functions[efunc_Xxoutm_Scan]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Type]);
          refalrts::alloc_close_call(vm, context[22]);
          refalrts::update_name(context[4], functions[efunc_Explode]);
          refalrts::reinit_svar( context[5], context[9] );
          refalrts::reinit_close_call(context[6]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[18] );
          refalrts::push_stack( vm, context[22] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[6] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_elem( res, context[22] );
          res = refalrts::splice_evar( res, context[15], context[16] );
          res = refalrts::splice_evar( res, context[17], context[21] );
          refalrts::splice_to_freelist_open( vm, context[6], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Xxout-Scan/4 'W'/5 'q'/6 s.Compound/9 e.Tail/15 >/1
        context[15] = context[13];
        context[16] = context[14];
        if( ! refalrts::char_term( 'q', context[6] ) )
          continue;
        // closed e.Tail as range 15
        //DEBUG: s.Compound: 9
        //DEBUG: e.Tail: 15

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </17 & Xxout-Scan$4=1/18 (/19 Tile{ AsIs: e.Tail/15 } )/20 </21 & Xxout-Chars/22 (/23 )/24 Tile{ AsIs: </0 Reuse: & Type/4 HalfReuse: </5 HalfReuse: & Explode/6 AsIs: s.Compound/9 } >/25 >/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[17]);
        refalrts::alloc_name(vm, context[18], functions[efunc_gen_Xxoutm_Scan_S4A1]);
        refalrts::alloc_open_bracket(vm, context[19]);
        refalrts::alloc_close_bracket(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_Xxoutm_Chars]);
        refalrts::alloc_open_bracket(vm, context[23]);
        refalrts::alloc_close_bracket(vm, context[24]);
        refalrts::alloc_close_call(vm, context[25]);
        refalrts::alloc_close_call(vm, context[26]);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_Type]);
        refalrts::reinit_open_call(context[5]);
        refalrts::reinit_name(context[6], functions[efunc_Explode]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[26] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[25] );
        refalrts::push_stack( vm, context[5] );
        refalrts::link_brackets( context[23], context[24] );
        refalrts::link_brackets( context[19], context[20] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[25], context[27] );
        res = refalrts::splice_evar( res, context[0], context[9] );
        res = refalrts::splice_evar( res, context[20], context[24] );
        res = refalrts::splice_evar( res, context[15], context[16] );
        res = refalrts::splice_evar( res, context[17], context[19] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Scan/4 'N'/5 s.0/6 s.Number/9 e.Tail/13 >/1
        context[13] = context[11];
        context[14] = context[12];
        if( ! refalrts::char_term( 'N', context[5] ) )
          continue;
        // closed e.Tail as range 13
        //DEBUG: s.0: 6
        //DEBUG: s.Number: 9
        //DEBUG: e.Tail: 13

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.0/6 s.Number/9 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Symb-Digit/4 HalfReuse: s.Number9 /5 } >/15 ' '/16 </17 & Xxout-Scan/18 </19 & Type/20 Tile{ AsIs: e.Tail/13 } >/21 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_call(vm, context[15]);
        refalrts::alloc_char(vm, context[16], ' ');
        refalrts::alloc_open_call(vm, context[17]);
        refalrts::alloc_name(vm, context[18], functions[efunc_Xxoutm_Scan]);
        refalrts::alloc_open_call(vm, context[19]);
        refalrts::alloc_name(vm, context[20], functions[efunc_Type]);
        refalrts::alloc_close_call(vm, context[21]);
        refalrts::update_name(context[4], functions[efunc_Symbm_Digit]);
        refalrts::reinit_svar( context[5], context[9] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[21] );
        res = refalrts::splice_evar( res, context[13], context[14] );
        res = refalrts::splice_evar( res, context[15], context[20] );
        refalrts::splice_to_freelist_open( vm, context[5], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Scan/4 'P'/5 s.S/6 s.Printable/9 e.Tail/13 >/1
        context[13] = context[11];
        context[14] = context[12];
        if( ! refalrts::char_term( 'P', context[5] ) )
          continue;
        // closed e.Tail as range 13
        //DEBUG: s.S: 6
        //DEBUG: s.Printable: 9
        //DEBUG: e.Tail: 13

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </15 & Xxout-Scan$6=1/16 Tile{ AsIs: </0 Reuse: & Xxout-Chars@1/4 AsIs: 'P'/5 AsIs: s.S/6 AsIs: s.Printable/9 AsIs: e.Tail/13 AsIs: >/1 } >/17 Tile{ ]] }
        refalrts::alloc_open_call(vm, context[15]);
        refalrts::alloc_name(vm, context[16], functions[efunc_gen_Xxoutm_Scan_S6A1]);
        refalrts::alloc_close_call(vm, context[17]);
        refalrts::update_name(context[4], functions[efunc_gen_Xxoutm_Chars_Z1]);
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[17] );
        res = refalrts::splice_evar( res, context[0], context[1] );
        res = refalrts::splice_evar( res, context[15], context[16] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Xxout-Scan/4 'O'/5 s.S/6 s.Other/9 e.Tail/13 >/1
      context[13] = context[11];
      context[14] = context[12];
      if( ! refalrts::char_term( 'O', context[5] ) )
        continue;
      // closed e.Tail as range 13
      //DEBUG: s.S: 6
      //DEBUG: s.Other: 9
      //DEBUG: e.Tail: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </15 & Xxout-Scan$7=1/16 Tile{ AsIs: </0 Reuse: & Xxout-Chars@1/4 AsIs: 'O'/5 AsIs: s.S/6 AsIs: s.Other/9 AsIs: e.Tail/13 AsIs: >/1 } >/17 Tile{ ]] }
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_gen_Xxoutm_Scan_S7A1]);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::update_name(context[4], functions[efunc_gen_Xxoutm_Chars_Z1]);
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[17] );
      res = refalrts::splice_evar( res, context[0], context[1] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Xxout-Scan/4 'B'/5 s.0/6 (/9 e.Inner/13 )/10 e.Tail/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = 0;
    context[14] = 0;
    if( ! refalrts::brackets_term( context[13], context[14], context[9] ) )
      continue;
    if( ! refalrts::char_term( 'B', context[5] ) )
      continue;
    // closed e.Inner as range 13
    // closed e.Tail as range 11
    //DEBUG: s.0: 6
    //DEBUG: e.Inner: 13
    //DEBUG: e.Tail: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} s.0/6 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } '('/15 Tile{ AsIs: </0 AsIs: & Xxout-Scan/4 HalfReuse: </5 } & Type/16 Tile{ AsIs: e.Inner/13 } >/17 Tile{ HalfReuse: >/9 } ')'/18 </19 & Xxout-Scan/20 </21 Tile{ HalfReuse: & Type/10 AsIs: e.Tail/11 AsIs: >/1 } >/22 Tile{ ]] }
    refalrts::alloc_char(vm, context[15], '(');
    refalrts::alloc_name(vm, context[16], functions[efunc_Type]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::alloc_char(vm, context[18], ')');
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_Xxoutm_Scan]);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_close_call(vm, context[22]);
    refalrts::reinit_open_call(context[5]);
    refalrts::reinit_close_call(context[9]);
    refalrts::reinit_name(context[10], functions[efunc_Type]);
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[5] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[10], context[1] );
    res = refalrts::splice_evar( res, context[18], context[21] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_evar( res, context[0], context[5] );
    res = refalrts::splice_elem( res, context[15] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Xxout-Scan/4 '*'/5 s.0/6 >/1
  if( ! refalrts::char_term( '*', context[5] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.0: 6

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Xxout-Scan/4 '*'/5 s.0/6 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Xxoutm_Scan("Xxout-Scan", COOKIE1_, COOKIE2_, func_Xxoutm_Scan);


static refalrts::FnResult func_gen_Xxoutm_Chars_S7A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & Xxout-Chars$7=1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Xxout-Chars$7=1/4 (/9 e.new1/7 )/10 (/13 e.new2/11 )/14 (/17 s.new3/19 )/18 s.new4/20 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    context[11] = 0;
    context[12] = 0;
    context[13] = refalrts::brackets_left( context[11], context[12], context[5], context[6] );
    if( ! context[13] )
      continue;
    refalrts::bracket_pointers(context[13], context[14]);
    context[15] = 0;
    context[16] = 0;
    context[17] = refalrts::brackets_left( context[15], context[16], context[5], context[6] );
    if( ! context[17] )
      continue;
    refalrts::bracket_pointers(context[17], context[18]);
    // closed e.new1 as range 7
    // closed e.new2 as range 11
    if( ! refalrts::svar_left( context[19], context[15], context[16] ) )
      continue;
    if( ! refalrts::empty_seq( context[15], context[16] ) )
      continue;
    if( ! refalrts::svar_left( context[20], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.new6/21 )/10 (/13 e.new7/23 )/14 (/17 0/19 )/18 s.new5/20 >/1
      context[21] = context[7];
      context[22] = context[8];
      context[23] = context[11];
      context[24] = context[12];
      if( ! refalrts::number_term( 0UL, context[19] ) )
        continue;
      // closed e.new6 as range 21
      // closed e.new7 as range 23
      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 0/19 )/18 0/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 0UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '0'/17 HalfReuse: '0'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '0');
        refalrts::reinit_char(context[19], '0');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 0/19 )/18 1/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 1UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '0'/17 HalfReuse: '1'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '0');
        refalrts::reinit_char(context[19], '1');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 0/19 )/18 2/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 2UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '0'/17 HalfReuse: '2'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '0');
        refalrts::reinit_char(context[19], '2');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 0/19 )/18 3/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 3UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '0'/17 HalfReuse: '3'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '0');
        refalrts::reinit_char(context[19], '3');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 0/19 )/18 4/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 4UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '0'/17 HalfReuse: '4'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '0');
        refalrts::reinit_char(context[19], '4');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 0/19 )/18 5/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 5UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '0'/17 HalfReuse: '5'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '0');
        refalrts::reinit_char(context[19], '5');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 0/19 )/18 6/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 6UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '0'/17 HalfReuse: '6'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '0');
        refalrts::reinit_char(context[19], '6');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 0/19 )/18 7/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 7UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '0'/17 HalfReuse: '7'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '0');
        refalrts::reinit_char(context[19], '7');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 0/19 )/18 8/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 8UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '0'/17 HalfReuse: '8'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '0');
        refalrts::reinit_char(context[19], '8');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 0/19 )/18 9/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 9UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '0'/17 HalfReuse: '9'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '0');
        refalrts::reinit_char(context[19], '9');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 0/19 )/18 10/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 10UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '0'/17 HalfReuse: 'A'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '0');
        refalrts::reinit_char(context[19], 'A');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 0/19 )/18 11/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 11UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '0'/17 HalfReuse: 'B'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '0');
        refalrts::reinit_char(context[19], 'B');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 0/19 )/18 12/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 12UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '0'/17 HalfReuse: 'C'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '0');
        refalrts::reinit_char(context[19], 'C');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 0/19 )/18 13/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 13UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '0'/17 HalfReuse: 'D'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '0');
        refalrts::reinit_char(context[19], 'D');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 0/19 )/18 14/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 14UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '0'/17 HalfReuse: 'E'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '0');
        refalrts::reinit_char(context[19], 'E');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 0/19 )/18 15/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 15UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '0'/17 HalfReuse: 'F'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '0');
        refalrts::reinit_char(context[19], 'F');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 0/19 )/18 s.Low/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: s.Low: 20
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '0'/17 HalfReuse: </19 HalfReuse: & Hex*16/18 AsIs: s.Low/20 AsIs: >/1 } Tile{ AsIs: )/14 } </29 & Type/30 Tile{ AsIs: e.Tail/27 } >/31 >/32 Tile{ ]] }
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_Type]);
      refalrts::alloc_close_call(vm, context[31]);
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '0');
      refalrts::reinit_open_call(context[19]);
      refalrts::reinit_name(context[18], functions[efunc_gen_Hex_D16]);
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[19] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.new6/21 )/10 (/13 e.new7/23 )/14 (/17 1/19 )/18 s.new5/20 >/1
      context[21] = context[7];
      context[22] = context[8];
      context[23] = context[11];
      context[24] = context[12];
      if( ! refalrts::number_term( 1UL, context[19] ) )
        continue;
      // closed e.new6 as range 21
      // closed e.new7 as range 23
      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 1/19 )/18 0/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 0UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '1'/17 HalfReuse: '0'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '1');
        refalrts::reinit_char(context[19], '0');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 1/19 )/18 1/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 1UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '1'/17 HalfReuse: '1'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '1');
        refalrts::reinit_char(context[19], '1');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 1/19 )/18 2/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 2UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '1'/17 HalfReuse: '2'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '1');
        refalrts::reinit_char(context[19], '2');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 1/19 )/18 3/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 3UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '1'/17 HalfReuse: '3'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '1');
        refalrts::reinit_char(context[19], '3');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 1/19 )/18 4/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 4UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '1'/17 HalfReuse: '4'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '1');
        refalrts::reinit_char(context[19], '4');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 1/19 )/18 5/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 5UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '1'/17 HalfReuse: '5'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '1');
        refalrts::reinit_char(context[19], '5');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 1/19 )/18 6/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 6UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '1'/17 HalfReuse: '6'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '1');
        refalrts::reinit_char(context[19], '6');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 1/19 )/18 7/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 7UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '1'/17 HalfReuse: '7'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '1');
        refalrts::reinit_char(context[19], '7');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 1/19 )/18 8/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 8UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '1'/17 HalfReuse: '8'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '1');
        refalrts::reinit_char(context[19], '8');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 1/19 )/18 9/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 9UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '1'/17 HalfReuse: '9'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '1');
        refalrts::reinit_char(context[19], '9');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 1/19 )/18 10/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 10UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '1'/17 HalfReuse: 'A'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '1');
        refalrts::reinit_char(context[19], 'A');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 1/19 )/18 11/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 11UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '1'/17 HalfReuse: 'B'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '1');
        refalrts::reinit_char(context[19], 'B');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 1/19 )/18 12/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 12UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '1'/17 HalfReuse: 'C'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '1');
        refalrts::reinit_char(context[19], 'C');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 1/19 )/18 13/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 13UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '1'/17 HalfReuse: 'D'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '1');
        refalrts::reinit_char(context[19], 'D');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 1/19 )/18 14/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 14UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '1'/17 HalfReuse: 'E'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '1');
        refalrts::reinit_char(context[19], 'E');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 1/19 )/18 15/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 15UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '1'/17 HalfReuse: 'F'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '1');
        refalrts::reinit_char(context[19], 'F');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 1/19 )/18 s.Low/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: s.Low: 20
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '1'/17 HalfReuse: </19 HalfReuse: & Hex*16/18 AsIs: s.Low/20 AsIs: >/1 } Tile{ AsIs: )/14 } </29 & Type/30 Tile{ AsIs: e.Tail/27 } >/31 >/32 Tile{ ]] }
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_Type]);
      refalrts::alloc_close_call(vm, context[31]);
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '1');
      refalrts::reinit_open_call(context[19]);
      refalrts::reinit_name(context[18], functions[efunc_gen_Hex_D16]);
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[19] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Xxout-Chars$7=1/4 (/9 e.new6/21 )/10 (/13 e.new7/23 )/14 (/17 2/19 )/18 s.new5/20 >/1
    context[21] = context[7];
    context[22] = context[8];
    context[23] = context[11];
    context[24] = context[12];
    if( ! refalrts::number_term( 2UL, context[19] ) )
      continue;
    // closed e.new6 as range 21
    // closed e.new7 as range 23
    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 2/19 )/18 0/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 0UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '2'/17 HalfReuse: '0'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '2');
      refalrts::reinit_char(context[19], '0');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 2/19 )/18 1/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 1UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '2'/17 HalfReuse: '1'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '2');
      refalrts::reinit_char(context[19], '1');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 2/19 )/18 2/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 2UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '2'/17 HalfReuse: '2'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '2');
      refalrts::reinit_char(context[19], '2');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 2/19 )/18 3/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 3UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '2'/17 HalfReuse: '3'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '2');
      refalrts::reinit_char(context[19], '3');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 2/19 )/18 4/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 4UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '2'/17 HalfReuse: '4'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '2');
      refalrts::reinit_char(context[19], '4');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 2/19 )/18 5/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 5UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '2'/17 HalfReuse: '5'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '2');
      refalrts::reinit_char(context[19], '5');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 2/19 )/18 6/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 6UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '2'/17 HalfReuse: '6'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '2');
      refalrts::reinit_char(context[19], '6');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 2/19 )/18 7/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 7UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '2'/17 HalfReuse: '7'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '2');
      refalrts::reinit_char(context[19], '7');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 2/19 )/18 8/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 8UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '2'/17 HalfReuse: '8'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '2');
      refalrts::reinit_char(context[19], '8');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 2/19 )/18 9/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 9UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '2'/17 HalfReuse: '9'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '2');
      refalrts::reinit_char(context[19], '9');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 2/19 )/18 10/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 10UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '2'/17 HalfReuse: 'A'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '2');
      refalrts::reinit_char(context[19], 'A');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 2/19 )/18 11/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 11UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '2'/17 HalfReuse: 'B'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '2');
      refalrts::reinit_char(context[19], 'B');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 2/19 )/18 12/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 12UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '2'/17 HalfReuse: 'C'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '2');
      refalrts::reinit_char(context[19], 'C');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 2/19 )/18 13/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 13UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '2'/17 HalfReuse: 'D'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '2');
      refalrts::reinit_char(context[19], 'D');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 2/19 )/18 14/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 14UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '2'/17 HalfReuse: 'E'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '2');
      refalrts::reinit_char(context[19], 'E');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 2/19 )/18 15/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 15UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '2'/17 HalfReuse: 'F'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '2');
      refalrts::reinit_char(context[19], 'F');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 2/19 )/18 s.Low/20 >/1
    context[25] = context[21];
    context[26] = context[22];
    context[27] = context[23];
    context[28] = context[24];
    // closed e.Scanned as range 25
    // closed e.Tail as range 27
    //DEBUG: s.Low: 20
    //DEBUG: e.Scanned: 25
    //DEBUG: e.Tail: 27

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '2'/17 HalfReuse: </19 HalfReuse: & Hex*16/18 AsIs: s.Low/20 AsIs: >/1 } Tile{ AsIs: )/14 } </29 & Type/30 Tile{ AsIs: e.Tail/27 } >/31 >/32 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[29]);
    refalrts::alloc_name(vm, context[30], functions[efunc_Type]);
    refalrts::alloc_close_call(vm, context[31]);
    refalrts::alloc_close_call(vm, context[32]);
    refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
    refalrts::reinit_char(context[10], '\\');
    refalrts::reinit_char(context[13], 'x');
    refalrts::reinit_char(context[17], '2');
    refalrts::reinit_open_call(context[19]);
    refalrts::reinit_name(context[18], functions[efunc_gen_Hex_D16]);
    refalrts::push_stack( vm, context[32] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[29] );
    refalrts::link_brackets( context[9], context[14] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[19] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[17], context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Xxout-Chars$7=1/4 (/9 e.new1/7 )/10 (/13 e.new2/11 )/14 (/17 s.new3/19 )/18 s.new4/20 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    context[11] = 0;
    context[12] = 0;
    context[13] = refalrts::brackets_left( context[11], context[12], context[5], context[6] );
    if( ! context[13] )
      continue;
    refalrts::bracket_pointers(context[13], context[14]);
    context[15] = 0;
    context[16] = 0;
    context[17] = refalrts::brackets_left( context[15], context[16], context[5], context[6] );
    if( ! context[17] )
      continue;
    refalrts::bracket_pointers(context[17], context[18]);
    // closed e.new1 as range 7
    // closed e.new2 as range 11
    if( ! refalrts::svar_left( context[19], context[15], context[16] ) )
      continue;
    if( ! refalrts::empty_seq( context[15], context[16] ) )
      continue;
    if( ! refalrts::svar_left( context[20], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.new6/21 )/10 (/13 e.new7/23 )/14 (/17 3/19 )/18 s.new5/20 >/1
      context[21] = context[7];
      context[22] = context[8];
      context[23] = context[11];
      context[24] = context[12];
      if( ! refalrts::number_term( 3UL, context[19] ) )
        continue;
      // closed e.new6 as range 21
      // closed e.new7 as range 23
      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 3/19 )/18 0/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 0UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '3'/17 HalfReuse: '0'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '3');
        refalrts::reinit_char(context[19], '0');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 3/19 )/18 1/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 1UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '3'/17 HalfReuse: '1'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '3');
        refalrts::reinit_char(context[19], '1');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 3/19 )/18 2/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 2UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '3'/17 HalfReuse: '2'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '3');
        refalrts::reinit_char(context[19], '2');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 3/19 )/18 3/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 3UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '3'/17 HalfReuse: '3'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '3');
        refalrts::reinit_char(context[19], '3');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 3/19 )/18 4/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 4UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '3'/17 HalfReuse: '4'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '3');
        refalrts::reinit_char(context[19], '4');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 3/19 )/18 5/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 5UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '3'/17 HalfReuse: '5'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '3');
        refalrts::reinit_char(context[19], '5');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 3/19 )/18 6/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 6UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '3'/17 HalfReuse: '6'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '3');
        refalrts::reinit_char(context[19], '6');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 3/19 )/18 7/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 7UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '3'/17 HalfReuse: '7'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '3');
        refalrts::reinit_char(context[19], '7');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 3/19 )/18 8/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 8UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '3'/17 HalfReuse: '8'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '3');
        refalrts::reinit_char(context[19], '8');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 3/19 )/18 9/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 9UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '3'/17 HalfReuse: '9'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '3');
        refalrts::reinit_char(context[19], '9');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 3/19 )/18 10/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 10UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '3'/17 HalfReuse: 'A'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '3');
        refalrts::reinit_char(context[19], 'A');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 3/19 )/18 11/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 11UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '3'/17 HalfReuse: 'B'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '3');
        refalrts::reinit_char(context[19], 'B');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 3/19 )/18 12/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 12UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '3'/17 HalfReuse: 'C'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '3');
        refalrts::reinit_char(context[19], 'C');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 3/19 )/18 13/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 13UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '3'/17 HalfReuse: 'D'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '3');
        refalrts::reinit_char(context[19], 'D');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 3/19 )/18 14/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 14UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '3'/17 HalfReuse: 'E'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '3');
        refalrts::reinit_char(context[19], 'E');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 3/19 )/18 15/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 15UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '3'/17 HalfReuse: 'F'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '3');
        refalrts::reinit_char(context[19], 'F');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 3/19 )/18 s.Low/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: s.Low: 20
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '3'/17 HalfReuse: </19 HalfReuse: & Hex*16/18 AsIs: s.Low/20 AsIs: >/1 } Tile{ AsIs: )/14 } </29 & Type/30 Tile{ AsIs: e.Tail/27 } >/31 >/32 Tile{ ]] }
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_Type]);
      refalrts::alloc_close_call(vm, context[31]);
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '3');
      refalrts::reinit_open_call(context[19]);
      refalrts::reinit_name(context[18], functions[efunc_gen_Hex_D16]);
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[19] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.new6/21 )/10 (/13 e.new7/23 )/14 (/17 4/19 )/18 s.new5/20 >/1
      context[21] = context[7];
      context[22] = context[8];
      context[23] = context[11];
      context[24] = context[12];
      if( ! refalrts::number_term( 4UL, context[19] ) )
        continue;
      // closed e.new6 as range 21
      // closed e.new7 as range 23
      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 4/19 )/18 0/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 0UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '4'/17 HalfReuse: '0'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '4');
        refalrts::reinit_char(context[19], '0');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 4/19 )/18 1/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 1UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '4'/17 HalfReuse: '1'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '4');
        refalrts::reinit_char(context[19], '1');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 4/19 )/18 2/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 2UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '4'/17 HalfReuse: '2'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '4');
        refalrts::reinit_char(context[19], '2');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 4/19 )/18 3/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 3UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '4'/17 HalfReuse: '3'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '4');
        refalrts::reinit_char(context[19], '3');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 4/19 )/18 4/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 4UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '4'/17 HalfReuse: '4'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '4');
        refalrts::reinit_char(context[19], '4');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 4/19 )/18 5/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 5UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '4'/17 HalfReuse: '5'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '4');
        refalrts::reinit_char(context[19], '5');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 4/19 )/18 6/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 6UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '4'/17 HalfReuse: '6'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '4');
        refalrts::reinit_char(context[19], '6');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 4/19 )/18 7/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 7UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '4'/17 HalfReuse: '7'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '4');
        refalrts::reinit_char(context[19], '7');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 4/19 )/18 8/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 8UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '4'/17 HalfReuse: '8'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '4');
        refalrts::reinit_char(context[19], '8');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 4/19 )/18 9/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 9UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '4'/17 HalfReuse: '9'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '4');
        refalrts::reinit_char(context[19], '9');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 4/19 )/18 10/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 10UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '4'/17 HalfReuse: 'A'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '4');
        refalrts::reinit_char(context[19], 'A');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 4/19 )/18 11/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 11UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '4'/17 HalfReuse: 'B'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '4');
        refalrts::reinit_char(context[19], 'B');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 4/19 )/18 12/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 12UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '4'/17 HalfReuse: 'C'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '4');
        refalrts::reinit_char(context[19], 'C');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 4/19 )/18 13/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 13UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '4'/17 HalfReuse: 'D'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '4');
        refalrts::reinit_char(context[19], 'D');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 4/19 )/18 14/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 14UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '4'/17 HalfReuse: 'E'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '4');
        refalrts::reinit_char(context[19], 'E');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 4/19 )/18 15/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 15UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '4'/17 HalfReuse: 'F'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '4');
        refalrts::reinit_char(context[19], 'F');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 4/19 )/18 s.Low/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: s.Low: 20
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '4'/17 HalfReuse: </19 HalfReuse: & Hex*16/18 AsIs: s.Low/20 AsIs: >/1 } Tile{ AsIs: )/14 } </29 & Type/30 Tile{ AsIs: e.Tail/27 } >/31 >/32 Tile{ ]] }
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_Type]);
      refalrts::alloc_close_call(vm, context[31]);
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '4');
      refalrts::reinit_open_call(context[19]);
      refalrts::reinit_name(context[18], functions[efunc_gen_Hex_D16]);
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[19] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Xxout-Chars$7=1/4 (/9 e.new6/21 )/10 (/13 e.new7/23 )/14 (/17 5/19 )/18 s.new5/20 >/1
    context[21] = context[7];
    context[22] = context[8];
    context[23] = context[11];
    context[24] = context[12];
    if( ! refalrts::number_term( 5UL, context[19] ) )
      continue;
    // closed e.new6 as range 21
    // closed e.new7 as range 23
    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 5/19 )/18 0/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 0UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '5'/17 HalfReuse: '0'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '5');
      refalrts::reinit_char(context[19], '0');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 5/19 )/18 1/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 1UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '5'/17 HalfReuse: '1'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '5');
      refalrts::reinit_char(context[19], '1');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 5/19 )/18 2/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 2UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '5'/17 HalfReuse: '2'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '5');
      refalrts::reinit_char(context[19], '2');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 5/19 )/18 3/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 3UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '5'/17 HalfReuse: '3'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '5');
      refalrts::reinit_char(context[19], '3');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 5/19 )/18 4/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 4UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '5'/17 HalfReuse: '4'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '5');
      refalrts::reinit_char(context[19], '4');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 5/19 )/18 5/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 5UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '5'/17 HalfReuse: '5'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '5');
      refalrts::reinit_char(context[19], '5');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 5/19 )/18 6/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 6UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '5'/17 HalfReuse: '6'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '5');
      refalrts::reinit_char(context[19], '6');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 5/19 )/18 7/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 7UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '5'/17 HalfReuse: '7'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '5');
      refalrts::reinit_char(context[19], '7');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 5/19 )/18 8/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 8UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '5'/17 HalfReuse: '8'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '5');
      refalrts::reinit_char(context[19], '8');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 5/19 )/18 9/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 9UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '5'/17 HalfReuse: '9'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '5');
      refalrts::reinit_char(context[19], '9');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 5/19 )/18 10/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 10UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '5'/17 HalfReuse: 'A'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '5');
      refalrts::reinit_char(context[19], 'A');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 5/19 )/18 11/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 11UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '5'/17 HalfReuse: 'B'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '5');
      refalrts::reinit_char(context[19], 'B');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 5/19 )/18 12/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 12UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '5'/17 HalfReuse: 'C'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '5');
      refalrts::reinit_char(context[19], 'C');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 5/19 )/18 13/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 13UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '5'/17 HalfReuse: 'D'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '5');
      refalrts::reinit_char(context[19], 'D');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 5/19 )/18 14/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 14UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '5'/17 HalfReuse: 'E'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '5');
      refalrts::reinit_char(context[19], 'E');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 5/19 )/18 15/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 15UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '5'/17 HalfReuse: 'F'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '5');
      refalrts::reinit_char(context[19], 'F');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 5/19 )/18 s.Low/20 >/1
    context[25] = context[21];
    context[26] = context[22];
    context[27] = context[23];
    context[28] = context[24];
    // closed e.Scanned as range 25
    // closed e.Tail as range 27
    //DEBUG: s.Low: 20
    //DEBUG: e.Scanned: 25
    //DEBUG: e.Tail: 27

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '5'/17 HalfReuse: </19 HalfReuse: & Hex*16/18 AsIs: s.Low/20 AsIs: >/1 } Tile{ AsIs: )/14 } </29 & Type/30 Tile{ AsIs: e.Tail/27 } >/31 >/32 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[29]);
    refalrts::alloc_name(vm, context[30], functions[efunc_Type]);
    refalrts::alloc_close_call(vm, context[31]);
    refalrts::alloc_close_call(vm, context[32]);
    refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
    refalrts::reinit_char(context[10], '\\');
    refalrts::reinit_char(context[13], 'x');
    refalrts::reinit_char(context[17], '5');
    refalrts::reinit_open_call(context[19]);
    refalrts::reinit_name(context[18], functions[efunc_gen_Hex_D16]);
    refalrts::push_stack( vm, context[32] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[29] );
    refalrts::link_brackets( context[9], context[14] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[19] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[17], context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Xxout-Chars$7=1/4 (/9 e.new1/7 )/10 (/13 e.new2/11 )/14 (/17 s.new3/19 )/18 s.new4/20 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    context[11] = 0;
    context[12] = 0;
    context[13] = refalrts::brackets_left( context[11], context[12], context[5], context[6] );
    if( ! context[13] )
      continue;
    refalrts::bracket_pointers(context[13], context[14]);
    context[15] = 0;
    context[16] = 0;
    context[17] = refalrts::brackets_left( context[15], context[16], context[5], context[6] );
    if( ! context[17] )
      continue;
    refalrts::bracket_pointers(context[17], context[18]);
    // closed e.new1 as range 7
    // closed e.new2 as range 11
    if( ! refalrts::svar_left( context[19], context[15], context[16] ) )
      continue;
    if( ! refalrts::empty_seq( context[15], context[16] ) )
      continue;
    if( ! refalrts::svar_left( context[20], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.new6/21 )/10 (/13 e.new7/23 )/14 (/17 6/19 )/18 s.new5/20 >/1
      context[21] = context[7];
      context[22] = context[8];
      context[23] = context[11];
      context[24] = context[12];
      if( ! refalrts::number_term( 6UL, context[19] ) )
        continue;
      // closed e.new6 as range 21
      // closed e.new7 as range 23
      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 6/19 )/18 0/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 0UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '6'/17 HalfReuse: '0'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '6');
        refalrts::reinit_char(context[19], '0');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 6/19 )/18 1/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 1UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '6'/17 HalfReuse: '1'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '6');
        refalrts::reinit_char(context[19], '1');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 6/19 )/18 2/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 2UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '6'/17 HalfReuse: '2'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '6');
        refalrts::reinit_char(context[19], '2');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 6/19 )/18 3/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 3UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '6'/17 HalfReuse: '3'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '6');
        refalrts::reinit_char(context[19], '3');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 6/19 )/18 4/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 4UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '6'/17 HalfReuse: '4'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '6');
        refalrts::reinit_char(context[19], '4');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 6/19 )/18 5/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 5UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '6'/17 HalfReuse: '5'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '6');
        refalrts::reinit_char(context[19], '5');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 6/19 )/18 6/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 6UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '6'/17 HalfReuse: '6'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '6');
        refalrts::reinit_char(context[19], '6');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 6/19 )/18 7/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 7UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '6'/17 HalfReuse: '7'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '6');
        refalrts::reinit_char(context[19], '7');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 6/19 )/18 8/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 8UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '6'/17 HalfReuse: '8'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '6');
        refalrts::reinit_char(context[19], '8');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 6/19 )/18 9/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 9UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '6'/17 HalfReuse: '9'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '6');
        refalrts::reinit_char(context[19], '9');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 6/19 )/18 10/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 10UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '6'/17 HalfReuse: 'A'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '6');
        refalrts::reinit_char(context[19], 'A');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 6/19 )/18 11/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 11UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '6'/17 HalfReuse: 'B'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '6');
        refalrts::reinit_char(context[19], 'B');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 6/19 )/18 12/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 12UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '6'/17 HalfReuse: 'C'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '6');
        refalrts::reinit_char(context[19], 'C');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 6/19 )/18 13/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 13UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '6'/17 HalfReuse: 'D'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '6');
        refalrts::reinit_char(context[19], 'D');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 6/19 )/18 14/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 14UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '6'/17 HalfReuse: 'E'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '6');
        refalrts::reinit_char(context[19], 'E');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 6/19 )/18 15/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 15UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '6'/17 HalfReuse: 'F'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '6');
        refalrts::reinit_char(context[19], 'F');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 6/19 )/18 s.Low/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: s.Low: 20
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '6'/17 HalfReuse: </19 HalfReuse: & Hex*16/18 AsIs: s.Low/20 AsIs: >/1 } Tile{ AsIs: )/14 } </29 & Type/30 Tile{ AsIs: e.Tail/27 } >/31 >/32 Tile{ ]] }
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_Type]);
      refalrts::alloc_close_call(vm, context[31]);
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '6');
      refalrts::reinit_open_call(context[19]);
      refalrts::reinit_name(context[18], functions[efunc_gen_Hex_D16]);
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[19] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.new6/21 )/10 (/13 e.new7/23 )/14 (/17 7/19 )/18 s.new5/20 >/1
      context[21] = context[7];
      context[22] = context[8];
      context[23] = context[11];
      context[24] = context[12];
      if( ! refalrts::number_term( 7UL, context[19] ) )
        continue;
      // closed e.new6 as range 21
      // closed e.new7 as range 23
      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 7/19 )/18 0/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 0UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '7'/17 HalfReuse: '0'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '7');
        refalrts::reinit_char(context[19], '0');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 7/19 )/18 1/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 1UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '7'/17 HalfReuse: '1'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '7');
        refalrts::reinit_char(context[19], '1');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 7/19 )/18 2/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 2UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '7'/17 HalfReuse: '2'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '7');
        refalrts::reinit_char(context[19], '2');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 7/19 )/18 3/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 3UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '7'/17 HalfReuse: '3'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '7');
        refalrts::reinit_char(context[19], '3');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 7/19 )/18 4/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 4UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '7'/17 HalfReuse: '4'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '7');
        refalrts::reinit_char(context[19], '4');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 7/19 )/18 5/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 5UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '7'/17 HalfReuse: '5'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '7');
        refalrts::reinit_char(context[19], '5');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 7/19 )/18 6/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 6UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '7'/17 HalfReuse: '6'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '7');
        refalrts::reinit_char(context[19], '6');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 7/19 )/18 7/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 7UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '7'/17 HalfReuse: '7'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '7');
        refalrts::reinit_char(context[19], '7');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 7/19 )/18 8/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 8UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '7'/17 HalfReuse: '8'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '7');
        refalrts::reinit_char(context[19], '8');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 7/19 )/18 9/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 9UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '7'/17 HalfReuse: '9'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '7');
        refalrts::reinit_char(context[19], '9');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 7/19 )/18 10/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 10UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '7'/17 HalfReuse: 'A'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '7');
        refalrts::reinit_char(context[19], 'A');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 7/19 )/18 11/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 11UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '7'/17 HalfReuse: 'B'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '7');
        refalrts::reinit_char(context[19], 'B');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 7/19 )/18 12/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 12UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '7'/17 HalfReuse: 'C'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '7');
        refalrts::reinit_char(context[19], 'C');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 7/19 )/18 13/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 13UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '7'/17 HalfReuse: 'D'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '7');
        refalrts::reinit_char(context[19], 'D');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 7/19 )/18 14/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 14UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '7'/17 HalfReuse: 'E'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '7');
        refalrts::reinit_char(context[19], 'E');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 7/19 )/18 15/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 15UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '7'/17 HalfReuse: 'F'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '7');
        refalrts::reinit_char(context[19], 'F');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 7/19 )/18 s.Low/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: s.Low: 20
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '7'/17 HalfReuse: </19 HalfReuse: & Hex*16/18 AsIs: s.Low/20 AsIs: >/1 } Tile{ AsIs: )/14 } </29 & Type/30 Tile{ AsIs: e.Tail/27 } >/31 >/32 Tile{ ]] }
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_Type]);
      refalrts::alloc_close_call(vm, context[31]);
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '7');
      refalrts::reinit_open_call(context[19]);
      refalrts::reinit_name(context[18], functions[efunc_gen_Hex_D16]);
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[19] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Xxout-Chars$7=1/4 (/9 e.new6/21 )/10 (/13 e.new7/23 )/14 (/17 8/19 )/18 s.new5/20 >/1
    context[21] = context[7];
    context[22] = context[8];
    context[23] = context[11];
    context[24] = context[12];
    if( ! refalrts::number_term( 8UL, context[19] ) )
      continue;
    // closed e.new6 as range 21
    // closed e.new7 as range 23
    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 8/19 )/18 0/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 0UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '8'/17 HalfReuse: '0'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '8');
      refalrts::reinit_char(context[19], '0');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 8/19 )/18 1/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 1UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '8'/17 HalfReuse: '1'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '8');
      refalrts::reinit_char(context[19], '1');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 8/19 )/18 2/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 2UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '8'/17 HalfReuse: '2'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '8');
      refalrts::reinit_char(context[19], '2');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 8/19 )/18 3/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 3UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '8'/17 HalfReuse: '3'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '8');
      refalrts::reinit_char(context[19], '3');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 8/19 )/18 4/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 4UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '8'/17 HalfReuse: '4'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '8');
      refalrts::reinit_char(context[19], '4');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 8/19 )/18 5/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 5UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '8'/17 HalfReuse: '5'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '8');
      refalrts::reinit_char(context[19], '5');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 8/19 )/18 6/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 6UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '8'/17 HalfReuse: '6'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '8');
      refalrts::reinit_char(context[19], '6');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 8/19 )/18 7/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 7UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '8'/17 HalfReuse: '7'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '8');
      refalrts::reinit_char(context[19], '7');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 8/19 )/18 8/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 8UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '8'/17 HalfReuse: '8'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '8');
      refalrts::reinit_char(context[19], '8');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 8/19 )/18 9/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 9UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '8'/17 HalfReuse: '9'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '8');
      refalrts::reinit_char(context[19], '9');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 8/19 )/18 10/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 10UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '8'/17 HalfReuse: 'A'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '8');
      refalrts::reinit_char(context[19], 'A');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 8/19 )/18 11/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 11UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '8'/17 HalfReuse: 'B'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '8');
      refalrts::reinit_char(context[19], 'B');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 8/19 )/18 12/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 12UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '8'/17 HalfReuse: 'C'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '8');
      refalrts::reinit_char(context[19], 'C');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 8/19 )/18 13/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 13UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '8'/17 HalfReuse: 'D'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '8');
      refalrts::reinit_char(context[19], 'D');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 8/19 )/18 14/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 14UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '8'/17 HalfReuse: 'E'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '8');
      refalrts::reinit_char(context[19], 'E');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 8/19 )/18 15/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 15UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '8'/17 HalfReuse: 'F'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '8');
      refalrts::reinit_char(context[19], 'F');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 8/19 )/18 s.Low/20 >/1
    context[25] = context[21];
    context[26] = context[22];
    context[27] = context[23];
    context[28] = context[24];
    // closed e.Scanned as range 25
    // closed e.Tail as range 27
    //DEBUG: s.Low: 20
    //DEBUG: e.Scanned: 25
    //DEBUG: e.Tail: 27

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '8'/17 HalfReuse: </19 HalfReuse: & Hex*16/18 AsIs: s.Low/20 AsIs: >/1 } Tile{ AsIs: )/14 } </29 & Type/30 Tile{ AsIs: e.Tail/27 } >/31 >/32 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[29]);
    refalrts::alloc_name(vm, context[30], functions[efunc_Type]);
    refalrts::alloc_close_call(vm, context[31]);
    refalrts::alloc_close_call(vm, context[32]);
    refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
    refalrts::reinit_char(context[10], '\\');
    refalrts::reinit_char(context[13], 'x');
    refalrts::reinit_char(context[17], '8');
    refalrts::reinit_open_call(context[19]);
    refalrts::reinit_name(context[18], functions[efunc_gen_Hex_D16]);
    refalrts::push_stack( vm, context[32] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[29] );
    refalrts::link_brackets( context[9], context[14] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[19] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[17], context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Xxout-Chars$7=1/4 (/9 e.new1/7 )/10 (/13 e.new2/11 )/14 (/17 s.new3/19 )/18 s.new4/20 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    context[11] = 0;
    context[12] = 0;
    context[13] = refalrts::brackets_left( context[11], context[12], context[5], context[6] );
    if( ! context[13] )
      continue;
    refalrts::bracket_pointers(context[13], context[14]);
    context[15] = 0;
    context[16] = 0;
    context[17] = refalrts::brackets_left( context[15], context[16], context[5], context[6] );
    if( ! context[17] )
      continue;
    refalrts::bracket_pointers(context[17], context[18]);
    // closed e.new1 as range 7
    // closed e.new2 as range 11
    if( ! refalrts::svar_left( context[19], context[15], context[16] ) )
      continue;
    if( ! refalrts::empty_seq( context[15], context[16] ) )
      continue;
    if( ! refalrts::svar_left( context[20], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.new6/21 )/10 (/13 e.new7/23 )/14 (/17 9/19 )/18 s.new5/20 >/1
      context[21] = context[7];
      context[22] = context[8];
      context[23] = context[11];
      context[24] = context[12];
      if( ! refalrts::number_term( 9UL, context[19] ) )
        continue;
      // closed e.new6 as range 21
      // closed e.new7 as range 23
      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 9/19 )/18 0/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 0UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '9'/17 HalfReuse: '0'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '9');
        refalrts::reinit_char(context[19], '0');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 9/19 )/18 1/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 1UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '9'/17 HalfReuse: '1'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '9');
        refalrts::reinit_char(context[19], '1');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 9/19 )/18 2/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 2UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '9'/17 HalfReuse: '2'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '9');
        refalrts::reinit_char(context[19], '2');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 9/19 )/18 3/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 3UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '9'/17 HalfReuse: '3'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '9');
        refalrts::reinit_char(context[19], '3');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 9/19 )/18 4/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 4UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '9'/17 HalfReuse: '4'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '9');
        refalrts::reinit_char(context[19], '4');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 9/19 )/18 5/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 5UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '9'/17 HalfReuse: '5'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '9');
        refalrts::reinit_char(context[19], '5');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 9/19 )/18 6/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 6UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '9'/17 HalfReuse: '6'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '9');
        refalrts::reinit_char(context[19], '6');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 9/19 )/18 7/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 7UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '9'/17 HalfReuse: '7'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '9');
        refalrts::reinit_char(context[19], '7');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 9/19 )/18 8/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 8UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '9'/17 HalfReuse: '8'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '9');
        refalrts::reinit_char(context[19], '8');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 9/19 )/18 9/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 9UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '9'/17 HalfReuse: '9'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '9');
        refalrts::reinit_char(context[19], '9');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 9/19 )/18 10/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 10UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '9'/17 HalfReuse: 'A'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '9');
        refalrts::reinit_char(context[19], 'A');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 9/19 )/18 11/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 11UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '9'/17 HalfReuse: 'B'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '9');
        refalrts::reinit_char(context[19], 'B');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 9/19 )/18 12/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 12UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '9'/17 HalfReuse: 'C'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '9');
        refalrts::reinit_char(context[19], 'C');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 9/19 )/18 13/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 13UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '9'/17 HalfReuse: 'D'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '9');
        refalrts::reinit_char(context[19], 'D');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 9/19 )/18 14/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 14UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '9'/17 HalfReuse: 'E'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '9');
        refalrts::reinit_char(context[19], 'E');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 9/19 )/18 15/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 15UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '9'/17 HalfReuse: 'F'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], '9');
        refalrts::reinit_char(context[19], 'F');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 9/19 )/18 s.Low/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: s.Low: 20
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: '9'/17 HalfReuse: </19 HalfReuse: & Hex*16/18 AsIs: s.Low/20 AsIs: >/1 } Tile{ AsIs: )/14 } </29 & Type/30 Tile{ AsIs: e.Tail/27 } >/31 >/32 Tile{ ]] }
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_Type]);
      refalrts::alloc_close_call(vm, context[31]);
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], '9');
      refalrts::reinit_open_call(context[19]);
      refalrts::reinit_name(context[18], functions[efunc_gen_Hex_D16]);
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[19] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.new6/21 )/10 (/13 e.new7/23 )/14 (/17 10/19 )/18 s.new5/20 >/1
      context[21] = context[7];
      context[22] = context[8];
      context[23] = context[11];
      context[24] = context[12];
      if( ! refalrts::number_term( 10UL, context[19] ) )
        continue;
      // closed e.new6 as range 21
      // closed e.new7 as range 23
      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 10/19 )/18 0/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 0UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'A'/17 HalfReuse: '0'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], 'A');
        refalrts::reinit_char(context[19], '0');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 10/19 )/18 1/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 1UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'A'/17 HalfReuse: '1'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], 'A');
        refalrts::reinit_char(context[19], '1');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 10/19 )/18 2/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 2UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'A'/17 HalfReuse: '2'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], 'A');
        refalrts::reinit_char(context[19], '2');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 10/19 )/18 3/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 3UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'A'/17 HalfReuse: '3'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], 'A');
        refalrts::reinit_char(context[19], '3');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 10/19 )/18 4/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 4UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'A'/17 HalfReuse: '4'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], 'A');
        refalrts::reinit_char(context[19], '4');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 10/19 )/18 5/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 5UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'A'/17 HalfReuse: '5'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], 'A');
        refalrts::reinit_char(context[19], '5');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 10/19 )/18 6/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 6UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'A'/17 HalfReuse: '6'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], 'A');
        refalrts::reinit_char(context[19], '6');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 10/19 )/18 7/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 7UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'A'/17 HalfReuse: '7'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], 'A');
        refalrts::reinit_char(context[19], '7');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 10/19 )/18 8/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 8UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'A'/17 HalfReuse: '8'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], 'A');
        refalrts::reinit_char(context[19], '8');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 10/19 )/18 9/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 9UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'A'/17 HalfReuse: '9'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], 'A');
        refalrts::reinit_char(context[19], '9');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 10/19 )/18 10/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 10UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'A'/17 HalfReuse: 'A'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], 'A');
        refalrts::reinit_char(context[19], 'A');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 10/19 )/18 11/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 11UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'A'/17 HalfReuse: 'B'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], 'A');
        refalrts::reinit_char(context[19], 'B');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 10/19 )/18 12/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 12UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'A'/17 HalfReuse: 'C'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], 'A');
        refalrts::reinit_char(context[19], 'C');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 10/19 )/18 13/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 13UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'A'/17 HalfReuse: 'D'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], 'A');
        refalrts::reinit_char(context[19], 'D');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 10/19 )/18 14/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 14UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'A'/17 HalfReuse: 'E'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], 'A');
        refalrts::reinit_char(context[19], 'E');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 10/19 )/18 15/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 15UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'A'/17 HalfReuse: 'F'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], 'A');
        refalrts::reinit_char(context[19], 'F');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 10/19 )/18 s.Low/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: s.Low: 20
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'A'/17 HalfReuse: </19 HalfReuse: & Hex*16/18 AsIs: s.Low/20 AsIs: >/1 } Tile{ AsIs: )/14 } </29 & Type/30 Tile{ AsIs: e.Tail/27 } >/31 >/32 Tile{ ]] }
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_Type]);
      refalrts::alloc_close_call(vm, context[31]);
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], 'A');
      refalrts::reinit_open_call(context[19]);
      refalrts::reinit_name(context[18], functions[efunc_gen_Hex_D16]);
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[19] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Xxout-Chars$7=1/4 (/9 e.new6/21 )/10 (/13 e.new7/23 )/14 (/17 11/19 )/18 s.new5/20 >/1
    context[21] = context[7];
    context[22] = context[8];
    context[23] = context[11];
    context[24] = context[12];
    if( ! refalrts::number_term( 11UL, context[19] ) )
      continue;
    // closed e.new6 as range 21
    // closed e.new7 as range 23
    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 11/19 )/18 0/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 0UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'B'/17 HalfReuse: '0'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], 'B');
      refalrts::reinit_char(context[19], '0');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 11/19 )/18 1/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 1UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'B'/17 HalfReuse: '1'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], 'B');
      refalrts::reinit_char(context[19], '1');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 11/19 )/18 2/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 2UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'B'/17 HalfReuse: '2'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], 'B');
      refalrts::reinit_char(context[19], '2');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 11/19 )/18 3/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 3UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'B'/17 HalfReuse: '3'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], 'B');
      refalrts::reinit_char(context[19], '3');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 11/19 )/18 4/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 4UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'B'/17 HalfReuse: '4'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], 'B');
      refalrts::reinit_char(context[19], '4');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 11/19 )/18 5/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 5UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'B'/17 HalfReuse: '5'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], 'B');
      refalrts::reinit_char(context[19], '5');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 11/19 )/18 6/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 6UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'B'/17 HalfReuse: '6'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], 'B');
      refalrts::reinit_char(context[19], '6');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 11/19 )/18 7/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 7UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'B'/17 HalfReuse: '7'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], 'B');
      refalrts::reinit_char(context[19], '7');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 11/19 )/18 8/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 8UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'B'/17 HalfReuse: '8'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], 'B');
      refalrts::reinit_char(context[19], '8');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 11/19 )/18 9/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 9UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'B'/17 HalfReuse: '9'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], 'B');
      refalrts::reinit_char(context[19], '9');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 11/19 )/18 10/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 10UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'B'/17 HalfReuse: 'A'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], 'B');
      refalrts::reinit_char(context[19], 'A');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 11/19 )/18 11/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 11UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'B'/17 HalfReuse: 'B'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], 'B');
      refalrts::reinit_char(context[19], 'B');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 11/19 )/18 12/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 12UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'B'/17 HalfReuse: 'C'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], 'B');
      refalrts::reinit_char(context[19], 'C');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 11/19 )/18 13/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 13UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'B'/17 HalfReuse: 'D'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], 'B');
      refalrts::reinit_char(context[19], 'D');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 11/19 )/18 14/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 14UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'B'/17 HalfReuse: 'E'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], 'B');
      refalrts::reinit_char(context[19], 'E');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 11/19 )/18 15/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 15UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'B'/17 HalfReuse: 'F'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], 'B');
      refalrts::reinit_char(context[19], 'F');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 11/19 )/18 s.Low/20 >/1
    context[25] = context[21];
    context[26] = context[22];
    context[27] = context[23];
    context[28] = context[24];
    // closed e.Scanned as range 25
    // closed e.Tail as range 27
    //DEBUG: s.Low: 20
    //DEBUG: e.Scanned: 25
    //DEBUG: e.Tail: 27

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'B'/17 HalfReuse: </19 HalfReuse: & Hex*16/18 AsIs: s.Low/20 AsIs: >/1 } Tile{ AsIs: )/14 } </29 & Type/30 Tile{ AsIs: e.Tail/27 } >/31 >/32 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[29]);
    refalrts::alloc_name(vm, context[30], functions[efunc_Type]);
    refalrts::alloc_close_call(vm, context[31]);
    refalrts::alloc_close_call(vm, context[32]);
    refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
    refalrts::reinit_char(context[10], '\\');
    refalrts::reinit_char(context[13], 'x');
    refalrts::reinit_char(context[17], 'B');
    refalrts::reinit_open_call(context[19]);
    refalrts::reinit_name(context[18], functions[efunc_gen_Hex_D16]);
    refalrts::push_stack( vm, context[32] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[29] );
    refalrts::link_brackets( context[9], context[14] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[19] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[17], context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Xxout-Chars$7=1/4 (/9 e.new1/7 )/10 (/13 e.new2/11 )/14 (/17 s.new3/19 )/18 s.new4/20 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    context[11] = 0;
    context[12] = 0;
    context[13] = refalrts::brackets_left( context[11], context[12], context[5], context[6] );
    if( ! context[13] )
      continue;
    refalrts::bracket_pointers(context[13], context[14]);
    context[15] = 0;
    context[16] = 0;
    context[17] = refalrts::brackets_left( context[15], context[16], context[5], context[6] );
    if( ! context[17] )
      continue;
    refalrts::bracket_pointers(context[17], context[18]);
    // closed e.new1 as range 7
    // closed e.new2 as range 11
    if( ! refalrts::svar_left( context[19], context[15], context[16] ) )
      continue;
    if( ! refalrts::empty_seq( context[15], context[16] ) )
      continue;
    if( ! refalrts::svar_left( context[20], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.new6/21 )/10 (/13 e.new7/23 )/14 (/17 12/19 )/18 s.new5/20 >/1
      context[21] = context[7];
      context[22] = context[8];
      context[23] = context[11];
      context[24] = context[12];
      if( ! refalrts::number_term( 12UL, context[19] ) )
        continue;
      // closed e.new6 as range 21
      // closed e.new7 as range 23
      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 12/19 )/18 0/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 0UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'C'/17 HalfReuse: '0'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], 'C');
        refalrts::reinit_char(context[19], '0');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 12/19 )/18 1/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 1UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'C'/17 HalfReuse: '1'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], 'C');
        refalrts::reinit_char(context[19], '1');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 12/19 )/18 2/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 2UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'C'/17 HalfReuse: '2'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], 'C');
        refalrts::reinit_char(context[19], '2');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 12/19 )/18 3/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 3UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'C'/17 HalfReuse: '3'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], 'C');
        refalrts::reinit_char(context[19], '3');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 12/19 )/18 4/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 4UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'C'/17 HalfReuse: '4'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], 'C');
        refalrts::reinit_char(context[19], '4');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 12/19 )/18 5/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 5UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'C'/17 HalfReuse: '5'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], 'C');
        refalrts::reinit_char(context[19], '5');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 12/19 )/18 6/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 6UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'C'/17 HalfReuse: '6'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], 'C');
        refalrts::reinit_char(context[19], '6');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 12/19 )/18 7/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 7UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'C'/17 HalfReuse: '7'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], 'C');
        refalrts::reinit_char(context[19], '7');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 12/19 )/18 8/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 8UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'C'/17 HalfReuse: '8'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], 'C');
        refalrts::reinit_char(context[19], '8');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 12/19 )/18 9/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 9UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'C'/17 HalfReuse: '9'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], 'C');
        refalrts::reinit_char(context[19], '9');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 12/19 )/18 10/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 10UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'C'/17 HalfReuse: 'A'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], 'C');
        refalrts::reinit_char(context[19], 'A');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 12/19 )/18 11/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 11UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'C'/17 HalfReuse: 'B'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], 'C');
        refalrts::reinit_char(context[19], 'B');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 12/19 )/18 12/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 12UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'C'/17 HalfReuse: 'C'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], 'C');
        refalrts::reinit_char(context[19], 'C');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 12/19 )/18 13/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 13UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'C'/17 HalfReuse: 'D'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], 'C');
        refalrts::reinit_char(context[19], 'D');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 12/19 )/18 14/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 14UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'C'/17 HalfReuse: 'E'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], 'C');
        refalrts::reinit_char(context[19], 'E');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 12/19 )/18 15/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 15UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'C'/17 HalfReuse: 'F'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], 'C');
        refalrts::reinit_char(context[19], 'F');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 12/19 )/18 s.Low/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: s.Low: 20
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'C'/17 HalfReuse: </19 HalfReuse: & Hex*16/18 AsIs: s.Low/20 AsIs: >/1 } Tile{ AsIs: )/14 } </29 & Type/30 Tile{ AsIs: e.Tail/27 } >/31 >/32 Tile{ ]] }
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_Type]);
      refalrts::alloc_close_call(vm, context[31]);
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], 'C');
      refalrts::reinit_open_call(context[19]);
      refalrts::reinit_name(context[18], functions[efunc_gen_Hex_D16]);
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[19] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.new6/21 )/10 (/13 e.new7/23 )/14 (/17 13/19 )/18 s.new5/20 >/1
      context[21] = context[7];
      context[22] = context[8];
      context[23] = context[11];
      context[24] = context[12];
      if( ! refalrts::number_term( 13UL, context[19] ) )
        continue;
      // closed e.new6 as range 21
      // closed e.new7 as range 23
      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 13/19 )/18 0/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 0UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'D'/17 HalfReuse: '0'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], 'D');
        refalrts::reinit_char(context[19], '0');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 13/19 )/18 1/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 1UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'D'/17 HalfReuse: '1'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], 'D');
        refalrts::reinit_char(context[19], '1');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 13/19 )/18 2/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 2UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'D'/17 HalfReuse: '2'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], 'D');
        refalrts::reinit_char(context[19], '2');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 13/19 )/18 3/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 3UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'D'/17 HalfReuse: '3'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], 'D');
        refalrts::reinit_char(context[19], '3');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 13/19 )/18 4/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 4UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'D'/17 HalfReuse: '4'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], 'D');
        refalrts::reinit_char(context[19], '4');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 13/19 )/18 5/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 5UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'D'/17 HalfReuse: '5'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], 'D');
        refalrts::reinit_char(context[19], '5');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 13/19 )/18 6/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 6UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'D'/17 HalfReuse: '6'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], 'D');
        refalrts::reinit_char(context[19], '6');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 13/19 )/18 7/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 7UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'D'/17 HalfReuse: '7'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], 'D');
        refalrts::reinit_char(context[19], '7');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 13/19 )/18 8/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 8UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'D'/17 HalfReuse: '8'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], 'D');
        refalrts::reinit_char(context[19], '8');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 13/19 )/18 9/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 9UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'D'/17 HalfReuse: '9'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], 'D');
        refalrts::reinit_char(context[19], '9');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 13/19 )/18 10/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 10UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'D'/17 HalfReuse: 'A'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], 'D');
        refalrts::reinit_char(context[19], 'A');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 13/19 )/18 11/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 11UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'D'/17 HalfReuse: 'B'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], 'D');
        refalrts::reinit_char(context[19], 'B');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 13/19 )/18 12/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 12UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'D'/17 HalfReuse: 'C'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], 'D');
        refalrts::reinit_char(context[19], 'C');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 13/19 )/18 13/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 13UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'D'/17 HalfReuse: 'D'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], 'D');
        refalrts::reinit_char(context[19], 'D');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 13/19 )/18 14/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 14UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'D'/17 HalfReuse: 'E'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], 'D');
        refalrts::reinit_char(context[19], 'E');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 13/19 )/18 15/20 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::number_term( 15UL, context[20] ) )
          continue;
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'D'/17 HalfReuse: 'F'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], '\\');
        refalrts::reinit_char(context[13], 'x');
        refalrts::reinit_char(context[17], 'D');
        refalrts::reinit_char(context[19], 'F');
        refalrts::reinit_open_call(context[20]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[9], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 13/19 )/18 s.Low/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: s.Low: 20
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'D'/17 HalfReuse: </19 HalfReuse: & Hex*16/18 AsIs: s.Low/20 AsIs: >/1 } Tile{ AsIs: )/14 } </29 & Type/30 Tile{ AsIs: e.Tail/27 } >/31 >/32 Tile{ ]] }
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_Type]);
      refalrts::alloc_close_call(vm, context[31]);
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], 'D');
      refalrts::reinit_open_call(context[19]);
      refalrts::reinit_name(context[18], functions[efunc_gen_Hex_D16]);
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[19] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Xxout-Chars$7=1/4 (/9 e.new6/21 )/10 (/13 e.new7/23 )/14 (/17 14/19 )/18 s.new5/20 >/1
    context[21] = context[7];
    context[22] = context[8];
    context[23] = context[11];
    context[24] = context[12];
    if( ! refalrts::number_term( 14UL, context[19] ) )
      continue;
    // closed e.new6 as range 21
    // closed e.new7 as range 23
    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 14/19 )/18 0/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 0UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'E'/17 HalfReuse: '0'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], 'E');
      refalrts::reinit_char(context[19], '0');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 14/19 )/18 1/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 1UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'E'/17 HalfReuse: '1'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], 'E');
      refalrts::reinit_char(context[19], '1');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 14/19 )/18 2/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 2UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'E'/17 HalfReuse: '2'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], 'E');
      refalrts::reinit_char(context[19], '2');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 14/19 )/18 3/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 3UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'E'/17 HalfReuse: '3'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], 'E');
      refalrts::reinit_char(context[19], '3');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 14/19 )/18 4/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 4UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'E'/17 HalfReuse: '4'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], 'E');
      refalrts::reinit_char(context[19], '4');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 14/19 )/18 5/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 5UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'E'/17 HalfReuse: '5'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], 'E');
      refalrts::reinit_char(context[19], '5');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 14/19 )/18 6/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 6UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'E'/17 HalfReuse: '6'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], 'E');
      refalrts::reinit_char(context[19], '6');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 14/19 )/18 7/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 7UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'E'/17 HalfReuse: '7'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], 'E');
      refalrts::reinit_char(context[19], '7');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 14/19 )/18 8/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 8UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'E'/17 HalfReuse: '8'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], 'E');
      refalrts::reinit_char(context[19], '8');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 14/19 )/18 9/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 9UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'E'/17 HalfReuse: '9'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], 'E');
      refalrts::reinit_char(context[19], '9');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 14/19 )/18 10/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 10UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'E'/17 HalfReuse: 'A'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], 'E');
      refalrts::reinit_char(context[19], 'A');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 14/19 )/18 11/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 11UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'E'/17 HalfReuse: 'B'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], 'E');
      refalrts::reinit_char(context[19], 'B');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 14/19 )/18 12/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 12UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'E'/17 HalfReuse: 'C'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], 'E');
      refalrts::reinit_char(context[19], 'C');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 14/19 )/18 13/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 13UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'E'/17 HalfReuse: 'D'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], 'E');
      refalrts::reinit_char(context[19], 'D');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 14/19 )/18 14/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 14UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'E'/17 HalfReuse: 'E'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], 'E');
      refalrts::reinit_char(context[19], 'E');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 14/19 )/18 15/20 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::number_term( 15UL, context[20] ) )
        continue;
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'E'/17 HalfReuse: 'F'/19 AsIs: )/18 HalfReuse: </20 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/27 } Tile{ HalfReuse: >/14 } >/29 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], '\\');
      refalrts::reinit_char(context[13], 'x');
      refalrts::reinit_char(context[17], 'E');
      refalrts::reinit_char(context[19], 'F');
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Xxout-Chars$7=1/4 (/9 e.Scanned/25 )/10 (/13 e.Tail/27 )/14 (/17 14/19 )/18 s.Low/20 >/1
    context[25] = context[21];
    context[26] = context[22];
    context[27] = context[23];
    context[28] = context[24];
    // closed e.Scanned as range 25
    // closed e.Tail as range 27
    //DEBUG: s.Low: 20
    //DEBUG: e.Scanned: 25
    //DEBUG: e.Tail: 27

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 AsIs: e.Scanned/25 HalfReuse: '\\'/10 HalfReuse: 'x'/13 } Tile{ HalfReuse: 'E'/17 HalfReuse: </19 HalfReuse: & Hex*16/18 AsIs: s.Low/20 AsIs: >/1 } Tile{ AsIs: )/14 } </29 & Type/30 Tile{ AsIs: e.Tail/27 } >/31 >/32 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[29]);
    refalrts::alloc_name(vm, context[30], functions[efunc_Type]);
    refalrts::alloc_close_call(vm, context[31]);
    refalrts::alloc_close_call(vm, context[32]);
    refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
    refalrts::reinit_char(context[10], '\\');
    refalrts::reinit_char(context[13], 'x');
    refalrts::reinit_char(context[17], 'E');
    refalrts::reinit_open_call(context[19]);
    refalrts::reinit_name(context[18], functions[efunc_gen_Hex_D16]);
    refalrts::push_stack( vm, context[32] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[29] );
    refalrts::link_brackets( context[9], context[14] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[19] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[17], context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Xxout-Chars$7=1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 s.new3/17 )/16 s.new4/18 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  if( ! refalrts::svar_left( context[17], context[13], context[14] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[13], context[14] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[18], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & Xxout-Chars$7=1/4 (/7 e.new6/19 )/8 (/11 e.new7/21 )/12 (/15 15/17 )/16 s.new5/18 >/1
    context[19] = context[5];
    context[20] = context[6];
    context[21] = context[9];
    context[22] = context[10];
    if( ! refalrts::number_term( 15UL, context[17] ) )
      continue;
    // closed e.new6 as range 19
    // closed e.new7 as range 21
    do {
      // </0 & Xxout-Chars$7=1/4 (/7 e.Scanned/23 )/8 (/11 e.Tail/25 )/12 (/15 15/17 )/16 0/18 >/1
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      context[26] = context[22];
      if( ! refalrts::number_term( 0UL, context[18] ) )
        continue;
      // closed e.Scanned as range 23
      // closed e.Tail as range 25
      //DEBUG: e.Scanned: 23
      //DEBUG: e.Tail: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 AsIs: e.Scanned/23 HalfReuse: '\\'/8 HalfReuse: 'x'/11 } Tile{ HalfReuse: 'F'/15 HalfReuse: '0'/17 AsIs: )/16 HalfReuse: </18 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/25 } Tile{ HalfReuse: >/12 } >/27 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[27]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[8], '\\');
      refalrts::reinit_char(context[11], 'x');
      refalrts::reinit_char(context[15], 'F');
      refalrts::reinit_char(context[17], '0');
      refalrts::reinit_open_call(context[18]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[12]);
      refalrts::push_stack( vm, context[27] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[12] );
      refalrts::push_stack( vm, context[18] );
      refalrts::link_brackets( context[7], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[15], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/7 e.Scanned/23 )/8 (/11 e.Tail/25 )/12 (/15 15/17 )/16 1/18 >/1
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      context[26] = context[22];
      if( ! refalrts::number_term( 1UL, context[18] ) )
        continue;
      // closed e.Scanned as range 23
      // closed e.Tail as range 25
      //DEBUG: e.Scanned: 23
      //DEBUG: e.Tail: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 AsIs: e.Scanned/23 HalfReuse: '\\'/8 HalfReuse: 'x'/11 } Tile{ HalfReuse: 'F'/15 HalfReuse: '1'/17 AsIs: )/16 HalfReuse: </18 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/25 } Tile{ HalfReuse: >/12 } >/27 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[27]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[8], '\\');
      refalrts::reinit_char(context[11], 'x');
      refalrts::reinit_char(context[15], 'F');
      refalrts::reinit_char(context[17], '1');
      refalrts::reinit_open_call(context[18]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[12]);
      refalrts::push_stack( vm, context[27] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[12] );
      refalrts::push_stack( vm, context[18] );
      refalrts::link_brackets( context[7], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[15], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/7 e.Scanned/23 )/8 (/11 e.Tail/25 )/12 (/15 15/17 )/16 2/18 >/1
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      context[26] = context[22];
      if( ! refalrts::number_term( 2UL, context[18] ) )
        continue;
      // closed e.Scanned as range 23
      // closed e.Tail as range 25
      //DEBUG: e.Scanned: 23
      //DEBUG: e.Tail: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 AsIs: e.Scanned/23 HalfReuse: '\\'/8 HalfReuse: 'x'/11 } Tile{ HalfReuse: 'F'/15 HalfReuse: '2'/17 AsIs: )/16 HalfReuse: </18 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/25 } Tile{ HalfReuse: >/12 } >/27 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[27]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[8], '\\');
      refalrts::reinit_char(context[11], 'x');
      refalrts::reinit_char(context[15], 'F');
      refalrts::reinit_char(context[17], '2');
      refalrts::reinit_open_call(context[18]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[12]);
      refalrts::push_stack( vm, context[27] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[12] );
      refalrts::push_stack( vm, context[18] );
      refalrts::link_brackets( context[7], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[15], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/7 e.Scanned/23 )/8 (/11 e.Tail/25 )/12 (/15 15/17 )/16 3/18 >/1
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      context[26] = context[22];
      if( ! refalrts::number_term( 3UL, context[18] ) )
        continue;
      // closed e.Scanned as range 23
      // closed e.Tail as range 25
      //DEBUG: e.Scanned: 23
      //DEBUG: e.Tail: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 AsIs: e.Scanned/23 HalfReuse: '\\'/8 HalfReuse: 'x'/11 } Tile{ HalfReuse: 'F'/15 HalfReuse: '3'/17 AsIs: )/16 HalfReuse: </18 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/25 } Tile{ HalfReuse: >/12 } >/27 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[27]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[8], '\\');
      refalrts::reinit_char(context[11], 'x');
      refalrts::reinit_char(context[15], 'F');
      refalrts::reinit_char(context[17], '3');
      refalrts::reinit_open_call(context[18]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[12]);
      refalrts::push_stack( vm, context[27] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[12] );
      refalrts::push_stack( vm, context[18] );
      refalrts::link_brackets( context[7], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[15], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/7 e.Scanned/23 )/8 (/11 e.Tail/25 )/12 (/15 15/17 )/16 4/18 >/1
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      context[26] = context[22];
      if( ! refalrts::number_term( 4UL, context[18] ) )
        continue;
      // closed e.Scanned as range 23
      // closed e.Tail as range 25
      //DEBUG: e.Scanned: 23
      //DEBUG: e.Tail: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 AsIs: e.Scanned/23 HalfReuse: '\\'/8 HalfReuse: 'x'/11 } Tile{ HalfReuse: 'F'/15 HalfReuse: '4'/17 AsIs: )/16 HalfReuse: </18 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/25 } Tile{ HalfReuse: >/12 } >/27 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[27]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[8], '\\');
      refalrts::reinit_char(context[11], 'x');
      refalrts::reinit_char(context[15], 'F');
      refalrts::reinit_char(context[17], '4');
      refalrts::reinit_open_call(context[18]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[12]);
      refalrts::push_stack( vm, context[27] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[12] );
      refalrts::push_stack( vm, context[18] );
      refalrts::link_brackets( context[7], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[15], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/7 e.Scanned/23 )/8 (/11 e.Tail/25 )/12 (/15 15/17 )/16 5/18 >/1
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      context[26] = context[22];
      if( ! refalrts::number_term( 5UL, context[18] ) )
        continue;
      // closed e.Scanned as range 23
      // closed e.Tail as range 25
      //DEBUG: e.Scanned: 23
      //DEBUG: e.Tail: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 AsIs: e.Scanned/23 HalfReuse: '\\'/8 HalfReuse: 'x'/11 } Tile{ HalfReuse: 'F'/15 HalfReuse: '5'/17 AsIs: )/16 HalfReuse: </18 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/25 } Tile{ HalfReuse: >/12 } >/27 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[27]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[8], '\\');
      refalrts::reinit_char(context[11], 'x');
      refalrts::reinit_char(context[15], 'F');
      refalrts::reinit_char(context[17], '5');
      refalrts::reinit_open_call(context[18]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[12]);
      refalrts::push_stack( vm, context[27] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[12] );
      refalrts::push_stack( vm, context[18] );
      refalrts::link_brackets( context[7], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[15], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/7 e.Scanned/23 )/8 (/11 e.Tail/25 )/12 (/15 15/17 )/16 6/18 >/1
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      context[26] = context[22];
      if( ! refalrts::number_term( 6UL, context[18] ) )
        continue;
      // closed e.Scanned as range 23
      // closed e.Tail as range 25
      //DEBUG: e.Scanned: 23
      //DEBUG: e.Tail: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 AsIs: e.Scanned/23 HalfReuse: '\\'/8 HalfReuse: 'x'/11 } Tile{ HalfReuse: 'F'/15 HalfReuse: '6'/17 AsIs: )/16 HalfReuse: </18 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/25 } Tile{ HalfReuse: >/12 } >/27 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[27]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[8], '\\');
      refalrts::reinit_char(context[11], 'x');
      refalrts::reinit_char(context[15], 'F');
      refalrts::reinit_char(context[17], '6');
      refalrts::reinit_open_call(context[18]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[12]);
      refalrts::push_stack( vm, context[27] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[12] );
      refalrts::push_stack( vm, context[18] );
      refalrts::link_brackets( context[7], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[15], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/7 e.Scanned/23 )/8 (/11 e.Tail/25 )/12 (/15 15/17 )/16 7/18 >/1
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      context[26] = context[22];
      if( ! refalrts::number_term( 7UL, context[18] ) )
        continue;
      // closed e.Scanned as range 23
      // closed e.Tail as range 25
      //DEBUG: e.Scanned: 23
      //DEBUG: e.Tail: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 AsIs: e.Scanned/23 HalfReuse: '\\'/8 HalfReuse: 'x'/11 } Tile{ HalfReuse: 'F'/15 HalfReuse: '7'/17 AsIs: )/16 HalfReuse: </18 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/25 } Tile{ HalfReuse: >/12 } >/27 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[27]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[8], '\\');
      refalrts::reinit_char(context[11], 'x');
      refalrts::reinit_char(context[15], 'F');
      refalrts::reinit_char(context[17], '7');
      refalrts::reinit_open_call(context[18]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[12]);
      refalrts::push_stack( vm, context[27] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[12] );
      refalrts::push_stack( vm, context[18] );
      refalrts::link_brackets( context[7], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[15], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/7 e.Scanned/23 )/8 (/11 e.Tail/25 )/12 (/15 15/17 )/16 8/18 >/1
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      context[26] = context[22];
      if( ! refalrts::number_term( 8UL, context[18] ) )
        continue;
      // closed e.Scanned as range 23
      // closed e.Tail as range 25
      //DEBUG: e.Scanned: 23
      //DEBUG: e.Tail: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 AsIs: e.Scanned/23 HalfReuse: '\\'/8 HalfReuse: 'x'/11 } Tile{ HalfReuse: 'F'/15 HalfReuse: '8'/17 AsIs: )/16 HalfReuse: </18 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/25 } Tile{ HalfReuse: >/12 } >/27 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[27]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[8], '\\');
      refalrts::reinit_char(context[11], 'x');
      refalrts::reinit_char(context[15], 'F');
      refalrts::reinit_char(context[17], '8');
      refalrts::reinit_open_call(context[18]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[12]);
      refalrts::push_stack( vm, context[27] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[12] );
      refalrts::push_stack( vm, context[18] );
      refalrts::link_brackets( context[7], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[15], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/7 e.Scanned/23 )/8 (/11 e.Tail/25 )/12 (/15 15/17 )/16 9/18 >/1
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      context[26] = context[22];
      if( ! refalrts::number_term( 9UL, context[18] ) )
        continue;
      // closed e.Scanned as range 23
      // closed e.Tail as range 25
      //DEBUG: e.Scanned: 23
      //DEBUG: e.Tail: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 AsIs: e.Scanned/23 HalfReuse: '\\'/8 HalfReuse: 'x'/11 } Tile{ HalfReuse: 'F'/15 HalfReuse: '9'/17 AsIs: )/16 HalfReuse: </18 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/25 } Tile{ HalfReuse: >/12 } >/27 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[27]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[8], '\\');
      refalrts::reinit_char(context[11], 'x');
      refalrts::reinit_char(context[15], 'F');
      refalrts::reinit_char(context[17], '9');
      refalrts::reinit_open_call(context[18]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[12]);
      refalrts::push_stack( vm, context[27] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[12] );
      refalrts::push_stack( vm, context[18] );
      refalrts::link_brackets( context[7], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[15], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/7 e.Scanned/23 )/8 (/11 e.Tail/25 )/12 (/15 15/17 )/16 10/18 >/1
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      context[26] = context[22];
      if( ! refalrts::number_term( 10UL, context[18] ) )
        continue;
      // closed e.Scanned as range 23
      // closed e.Tail as range 25
      //DEBUG: e.Scanned: 23
      //DEBUG: e.Tail: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 AsIs: e.Scanned/23 HalfReuse: '\\'/8 HalfReuse: 'x'/11 } Tile{ HalfReuse: 'F'/15 HalfReuse: 'A'/17 AsIs: )/16 HalfReuse: </18 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/25 } Tile{ HalfReuse: >/12 } >/27 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[27]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[8], '\\');
      refalrts::reinit_char(context[11], 'x');
      refalrts::reinit_char(context[15], 'F');
      refalrts::reinit_char(context[17], 'A');
      refalrts::reinit_open_call(context[18]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[12]);
      refalrts::push_stack( vm, context[27] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[12] );
      refalrts::push_stack( vm, context[18] );
      refalrts::link_brackets( context[7], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[15], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/7 e.Scanned/23 )/8 (/11 e.Tail/25 )/12 (/15 15/17 )/16 11/18 >/1
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      context[26] = context[22];
      if( ! refalrts::number_term( 11UL, context[18] ) )
        continue;
      // closed e.Scanned as range 23
      // closed e.Tail as range 25
      //DEBUG: e.Scanned: 23
      //DEBUG: e.Tail: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 AsIs: e.Scanned/23 HalfReuse: '\\'/8 HalfReuse: 'x'/11 } Tile{ HalfReuse: 'F'/15 HalfReuse: 'B'/17 AsIs: )/16 HalfReuse: </18 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/25 } Tile{ HalfReuse: >/12 } >/27 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[27]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[8], '\\');
      refalrts::reinit_char(context[11], 'x');
      refalrts::reinit_char(context[15], 'F');
      refalrts::reinit_char(context[17], 'B');
      refalrts::reinit_open_call(context[18]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[12]);
      refalrts::push_stack( vm, context[27] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[12] );
      refalrts::push_stack( vm, context[18] );
      refalrts::link_brackets( context[7], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[15], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/7 e.Scanned/23 )/8 (/11 e.Tail/25 )/12 (/15 15/17 )/16 12/18 >/1
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      context[26] = context[22];
      if( ! refalrts::number_term( 12UL, context[18] ) )
        continue;
      // closed e.Scanned as range 23
      // closed e.Tail as range 25
      //DEBUG: e.Scanned: 23
      //DEBUG: e.Tail: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 AsIs: e.Scanned/23 HalfReuse: '\\'/8 HalfReuse: 'x'/11 } Tile{ HalfReuse: 'F'/15 HalfReuse: 'C'/17 AsIs: )/16 HalfReuse: </18 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/25 } Tile{ HalfReuse: >/12 } >/27 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[27]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[8], '\\');
      refalrts::reinit_char(context[11], 'x');
      refalrts::reinit_char(context[15], 'F');
      refalrts::reinit_char(context[17], 'C');
      refalrts::reinit_open_call(context[18]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[12]);
      refalrts::push_stack( vm, context[27] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[12] );
      refalrts::push_stack( vm, context[18] );
      refalrts::link_brackets( context[7], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[15], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/7 e.Scanned/23 )/8 (/11 e.Tail/25 )/12 (/15 15/17 )/16 13/18 >/1
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      context[26] = context[22];
      if( ! refalrts::number_term( 13UL, context[18] ) )
        continue;
      // closed e.Scanned as range 23
      // closed e.Tail as range 25
      //DEBUG: e.Scanned: 23
      //DEBUG: e.Tail: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 AsIs: e.Scanned/23 HalfReuse: '\\'/8 HalfReuse: 'x'/11 } Tile{ HalfReuse: 'F'/15 HalfReuse: 'D'/17 AsIs: )/16 HalfReuse: </18 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/25 } Tile{ HalfReuse: >/12 } >/27 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[27]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[8], '\\');
      refalrts::reinit_char(context[11], 'x');
      refalrts::reinit_char(context[15], 'F');
      refalrts::reinit_char(context[17], 'D');
      refalrts::reinit_open_call(context[18]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[12]);
      refalrts::push_stack( vm, context[27] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[12] );
      refalrts::push_stack( vm, context[18] );
      refalrts::link_brackets( context[7], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[15], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/7 e.Scanned/23 )/8 (/11 e.Tail/25 )/12 (/15 15/17 )/16 14/18 >/1
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      context[26] = context[22];
      if( ! refalrts::number_term( 14UL, context[18] ) )
        continue;
      // closed e.Scanned as range 23
      // closed e.Tail as range 25
      //DEBUG: e.Scanned: 23
      //DEBUG: e.Tail: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 AsIs: e.Scanned/23 HalfReuse: '\\'/8 HalfReuse: 'x'/11 } Tile{ HalfReuse: 'F'/15 HalfReuse: 'E'/17 AsIs: )/16 HalfReuse: </18 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/25 } Tile{ HalfReuse: >/12 } >/27 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[27]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[8], '\\');
      refalrts::reinit_char(context[11], 'x');
      refalrts::reinit_char(context[15], 'F');
      refalrts::reinit_char(context[17], 'E');
      refalrts::reinit_open_call(context[18]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[12]);
      refalrts::push_stack( vm, context[27] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[12] );
      refalrts::push_stack( vm, context[18] );
      refalrts::link_brackets( context[7], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[15], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1/4 (/7 e.Scanned/23 )/8 (/11 e.Tail/25 )/12 (/15 15/17 )/16 15/18 >/1
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      context[26] = context[22];
      if( ! refalrts::number_term( 15UL, context[18] ) )
        continue;
      // closed e.Scanned as range 23
      // closed e.Tail as range 25
      //DEBUG: e.Scanned: 23
      //DEBUG: e.Tail: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 AsIs: e.Scanned/23 HalfReuse: '\\'/8 HalfReuse: 'x'/11 } Tile{ HalfReuse: 'F'/15 HalfReuse: 'F'/17 AsIs: )/16 HalfReuse: </18 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail/25 } Tile{ HalfReuse: >/12 } >/27 Tile{ ]] }
      refalrts::alloc_close_call(vm, context[27]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[8], '\\');
      refalrts::reinit_char(context[11], 'x');
      refalrts::reinit_char(context[15], 'F');
      refalrts::reinit_char(context[17], 'F');
      refalrts::reinit_open_call(context[18]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::reinit_close_call(context[12]);
      refalrts::push_stack( vm, context[27] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[12] );
      refalrts::push_stack( vm, context[18] );
      refalrts::link_brackets( context[7], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[15], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Xxout-Chars$7=1/4 (/7 e.Scanned/23 )/8 (/11 e.Tail/25 )/12 (/15 15/17 )/16 s.Low/18 >/1
    context[23] = context[19];
    context[24] = context[20];
    context[25] = context[21];
    context[26] = context[22];
    // closed e.Scanned as range 23
    // closed e.Tail as range 25
    //DEBUG: s.Low: 18
    //DEBUG: e.Scanned: 23
    //DEBUG: e.Tail: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 AsIs: e.Scanned/23 HalfReuse: '\\'/8 HalfReuse: 'x'/11 } Tile{ HalfReuse: 'F'/15 HalfReuse: </17 HalfReuse: & Hex*16/16 AsIs: s.Low/18 AsIs: >/1 } Tile{ AsIs: )/12 } </27 & Type/28 Tile{ AsIs: e.Tail/25 } >/29 >/30 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[27]);
    refalrts::alloc_name(vm, context[28], functions[efunc_Type]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::alloc_close_call(vm, context[30]);
    refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
    refalrts::reinit_char(context[8], '\\');
    refalrts::reinit_char(context[11], 'x');
    refalrts::reinit_char(context[15], 'F');
    refalrts::reinit_open_call(context[17]);
    refalrts::reinit_name(context[16], functions[efunc_gen_Hex_D16]);
    refalrts::push_stack( vm, context[30] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::link_brackets( context[7], context[12] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[15], context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Xxout-Chars$7=1/4 (/7 e.Scanned/19 )/8 (/11 e.Tail/21 )/12 (/15 s.Hi/17 )/16 0/18 >/1
    context[19] = context[5];
    context[20] = context[6];
    context[21] = context[9];
    context[22] = context[10];
    if( ! refalrts::number_term( 0UL, context[18] ) )
      continue;
    // closed e.Scanned as range 19
    // closed e.Tail as range 21
    //DEBUG: s.Hi: 17
    //DEBUG: e.Scanned: 19
    //DEBUG: e.Tail: 21

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 AsIs: e.Scanned/19 HalfReuse: '\\'/8 HalfReuse: 'x'/11 } Tile{ HalfReuse: </12 HalfReuse: & Hex*16/15 AsIs: s.Hi/17 HalfReuse: >/16 HalfReuse: '0'/18 HalfReuse: )/1 } </23 & Type/24 Tile{ AsIs: e.Tail/21 } >/25 >/26 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_Type]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
    refalrts::reinit_char(context[8], '\\');
    refalrts::reinit_char(context[11], 'x');
    refalrts::reinit_open_call(context[12]);
    refalrts::reinit_name(context[15], functions[efunc_gen_Hex_D16]);
    refalrts::reinit_close_call(context[16]);
    refalrts::reinit_char(context[18], '0');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[7], context[1] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[12], context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Xxout-Chars$7=1/4 (/7 e.Scanned/19 )/8 (/11 e.Tail/21 )/12 (/15 s.Hi/17 )/16 1/18 >/1
    context[19] = context[5];
    context[20] = context[6];
    context[21] = context[9];
    context[22] = context[10];
    if( ! refalrts::number_term( 1UL, context[18] ) )
      continue;
    // closed e.Scanned as range 19
    // closed e.Tail as range 21
    //DEBUG: s.Hi: 17
    //DEBUG: e.Scanned: 19
    //DEBUG: e.Tail: 21

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 AsIs: e.Scanned/19 HalfReuse: '\\'/8 HalfReuse: 'x'/11 } Tile{ HalfReuse: </12 HalfReuse: & Hex*16/15 AsIs: s.Hi/17 HalfReuse: >/16 HalfReuse: '1'/18 HalfReuse: )/1 } </23 & Type/24 Tile{ AsIs: e.Tail/21 } >/25 >/26 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_Type]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
    refalrts::reinit_char(context[8], '\\');
    refalrts::reinit_char(context[11], 'x');
    refalrts::reinit_open_call(context[12]);
    refalrts::reinit_name(context[15], functions[efunc_gen_Hex_D16]);
    refalrts::reinit_close_call(context[16]);
    refalrts::reinit_char(context[18], '1');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[7], context[1] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[12], context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Xxout-Chars$7=1/4 (/7 e.Scanned/19 )/8 (/11 e.Tail/21 )/12 (/15 s.Hi/17 )/16 2/18 >/1
    context[19] = context[5];
    context[20] = context[6];
    context[21] = context[9];
    context[22] = context[10];
    if( ! refalrts::number_term( 2UL, context[18] ) )
      continue;
    // closed e.Scanned as range 19
    // closed e.Tail as range 21
    //DEBUG: s.Hi: 17
    //DEBUG: e.Scanned: 19
    //DEBUG: e.Tail: 21

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 AsIs: e.Scanned/19 HalfReuse: '\\'/8 HalfReuse: 'x'/11 } Tile{ HalfReuse: </12 HalfReuse: & Hex*16/15 AsIs: s.Hi/17 HalfReuse: >/16 HalfReuse: '2'/18 HalfReuse: )/1 } </23 & Type/24 Tile{ AsIs: e.Tail/21 } >/25 >/26 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_Type]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
    refalrts::reinit_char(context[8], '\\');
    refalrts::reinit_char(context[11], 'x');
    refalrts::reinit_open_call(context[12]);
    refalrts::reinit_name(context[15], functions[efunc_gen_Hex_D16]);
    refalrts::reinit_close_call(context[16]);
    refalrts::reinit_char(context[18], '2');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[7], context[1] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[12], context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Xxout-Chars$7=1/4 (/7 e.Scanned/19 )/8 (/11 e.Tail/21 )/12 (/15 s.Hi/17 )/16 3/18 >/1
    context[19] = context[5];
    context[20] = context[6];
    context[21] = context[9];
    context[22] = context[10];
    if( ! refalrts::number_term( 3UL, context[18] ) )
      continue;
    // closed e.Scanned as range 19
    // closed e.Tail as range 21
    //DEBUG: s.Hi: 17
    //DEBUG: e.Scanned: 19
    //DEBUG: e.Tail: 21

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 AsIs: e.Scanned/19 HalfReuse: '\\'/8 HalfReuse: 'x'/11 } Tile{ HalfReuse: </12 HalfReuse: & Hex*16/15 AsIs: s.Hi/17 HalfReuse: >/16 HalfReuse: '3'/18 HalfReuse: )/1 } </23 & Type/24 Tile{ AsIs: e.Tail/21 } >/25 >/26 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_Type]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
    refalrts::reinit_char(context[8], '\\');
    refalrts::reinit_char(context[11], 'x');
    refalrts::reinit_open_call(context[12]);
    refalrts::reinit_name(context[15], functions[efunc_gen_Hex_D16]);
    refalrts::reinit_close_call(context[16]);
    refalrts::reinit_char(context[18], '3');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[7], context[1] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[12], context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Xxout-Chars$7=1/4 (/7 e.Scanned/19 )/8 (/11 e.Tail/21 )/12 (/15 s.Hi/17 )/16 4/18 >/1
    context[19] = context[5];
    context[20] = context[6];
    context[21] = context[9];
    context[22] = context[10];
    if( ! refalrts::number_term( 4UL, context[18] ) )
      continue;
    // closed e.Scanned as range 19
    // closed e.Tail as range 21
    //DEBUG: s.Hi: 17
    //DEBUG: e.Scanned: 19
    //DEBUG: e.Tail: 21

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 AsIs: e.Scanned/19 HalfReuse: '\\'/8 HalfReuse: 'x'/11 } Tile{ HalfReuse: </12 HalfReuse: & Hex*16/15 AsIs: s.Hi/17 HalfReuse: >/16 HalfReuse: '4'/18 HalfReuse: )/1 } </23 & Type/24 Tile{ AsIs: e.Tail/21 } >/25 >/26 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_Type]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
    refalrts::reinit_char(context[8], '\\');
    refalrts::reinit_char(context[11], 'x');
    refalrts::reinit_open_call(context[12]);
    refalrts::reinit_name(context[15], functions[efunc_gen_Hex_D16]);
    refalrts::reinit_close_call(context[16]);
    refalrts::reinit_char(context[18], '4');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[7], context[1] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[12], context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Xxout-Chars$7=1/4 (/7 e.Scanned/19 )/8 (/11 e.Tail/21 )/12 (/15 s.Hi/17 )/16 5/18 >/1
    context[19] = context[5];
    context[20] = context[6];
    context[21] = context[9];
    context[22] = context[10];
    if( ! refalrts::number_term( 5UL, context[18] ) )
      continue;
    // closed e.Scanned as range 19
    // closed e.Tail as range 21
    //DEBUG: s.Hi: 17
    //DEBUG: e.Scanned: 19
    //DEBUG: e.Tail: 21

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 AsIs: e.Scanned/19 HalfReuse: '\\'/8 HalfReuse: 'x'/11 } Tile{ HalfReuse: </12 HalfReuse: & Hex*16/15 AsIs: s.Hi/17 HalfReuse: >/16 HalfReuse: '5'/18 HalfReuse: )/1 } </23 & Type/24 Tile{ AsIs: e.Tail/21 } >/25 >/26 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_Type]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
    refalrts::reinit_char(context[8], '\\');
    refalrts::reinit_char(context[11], 'x');
    refalrts::reinit_open_call(context[12]);
    refalrts::reinit_name(context[15], functions[efunc_gen_Hex_D16]);
    refalrts::reinit_close_call(context[16]);
    refalrts::reinit_char(context[18], '5');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[7], context[1] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[12], context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Xxout-Chars$7=1/4 (/7 e.Scanned/19 )/8 (/11 e.Tail/21 )/12 (/15 s.Hi/17 )/16 6/18 >/1
    context[19] = context[5];
    context[20] = context[6];
    context[21] = context[9];
    context[22] = context[10];
    if( ! refalrts::number_term( 6UL, context[18] ) )
      continue;
    // closed e.Scanned as range 19
    // closed e.Tail as range 21
    //DEBUG: s.Hi: 17
    //DEBUG: e.Scanned: 19
    //DEBUG: e.Tail: 21

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 AsIs: e.Scanned/19 HalfReuse: '\\'/8 HalfReuse: 'x'/11 } Tile{ HalfReuse: </12 HalfReuse: & Hex*16/15 AsIs: s.Hi/17 HalfReuse: >/16 HalfReuse: '6'/18 HalfReuse: )/1 } </23 & Type/24 Tile{ AsIs: e.Tail/21 } >/25 >/26 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_Type]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
    refalrts::reinit_char(context[8], '\\');
    refalrts::reinit_char(context[11], 'x');
    refalrts::reinit_open_call(context[12]);
    refalrts::reinit_name(context[15], functions[efunc_gen_Hex_D16]);
    refalrts::reinit_close_call(context[16]);
    refalrts::reinit_char(context[18], '6');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[7], context[1] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[12], context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Xxout-Chars$7=1/4 (/7 e.Scanned/19 )/8 (/11 e.Tail/21 )/12 (/15 s.Hi/17 )/16 7/18 >/1
    context[19] = context[5];
    context[20] = context[6];
    context[21] = context[9];
    context[22] = context[10];
    if( ! refalrts::number_term( 7UL, context[18] ) )
      continue;
    // closed e.Scanned as range 19
    // closed e.Tail as range 21
    //DEBUG: s.Hi: 17
    //DEBUG: e.Scanned: 19
    //DEBUG: e.Tail: 21

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 AsIs: e.Scanned/19 HalfReuse: '\\'/8 HalfReuse: 'x'/11 } Tile{ HalfReuse: </12 HalfReuse: & Hex*16/15 AsIs: s.Hi/17 HalfReuse: >/16 HalfReuse: '7'/18 HalfReuse: )/1 } </23 & Type/24 Tile{ AsIs: e.Tail/21 } >/25 >/26 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_Type]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
    refalrts::reinit_char(context[8], '\\');
    refalrts::reinit_char(context[11], 'x');
    refalrts::reinit_open_call(context[12]);
    refalrts::reinit_name(context[15], functions[efunc_gen_Hex_D16]);
    refalrts::reinit_close_call(context[16]);
    refalrts::reinit_char(context[18], '7');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[7], context[1] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[12], context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Xxout-Chars$7=1/4 (/7 e.Scanned/19 )/8 (/11 e.Tail/21 )/12 (/15 s.Hi/17 )/16 8/18 >/1
    context[19] = context[5];
    context[20] = context[6];
    context[21] = context[9];
    context[22] = context[10];
    if( ! refalrts::number_term( 8UL, context[18] ) )
      continue;
    // closed e.Scanned as range 19
    // closed e.Tail as range 21
    //DEBUG: s.Hi: 17
    //DEBUG: e.Scanned: 19
    //DEBUG: e.Tail: 21

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 AsIs: e.Scanned/19 HalfReuse: '\\'/8 HalfReuse: 'x'/11 } Tile{ HalfReuse: </12 HalfReuse: & Hex*16/15 AsIs: s.Hi/17 HalfReuse: >/16 HalfReuse: '8'/18 HalfReuse: )/1 } </23 & Type/24 Tile{ AsIs: e.Tail/21 } >/25 >/26 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_Type]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
    refalrts::reinit_char(context[8], '\\');
    refalrts::reinit_char(context[11], 'x');
    refalrts::reinit_open_call(context[12]);
    refalrts::reinit_name(context[15], functions[efunc_gen_Hex_D16]);
    refalrts::reinit_close_call(context[16]);
    refalrts::reinit_char(context[18], '8');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[7], context[1] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[12], context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Xxout-Chars$7=1/4 (/7 e.Scanned/19 )/8 (/11 e.Tail/21 )/12 (/15 s.Hi/17 )/16 9/18 >/1
    context[19] = context[5];
    context[20] = context[6];
    context[21] = context[9];
    context[22] = context[10];
    if( ! refalrts::number_term( 9UL, context[18] ) )
      continue;
    // closed e.Scanned as range 19
    // closed e.Tail as range 21
    //DEBUG: s.Hi: 17
    //DEBUG: e.Scanned: 19
    //DEBUG: e.Tail: 21

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 AsIs: e.Scanned/19 HalfReuse: '\\'/8 HalfReuse: 'x'/11 } Tile{ HalfReuse: </12 HalfReuse: & Hex*16/15 AsIs: s.Hi/17 HalfReuse: >/16 HalfReuse: '9'/18 HalfReuse: )/1 } </23 & Type/24 Tile{ AsIs: e.Tail/21 } >/25 >/26 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_Type]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
    refalrts::reinit_char(context[8], '\\');
    refalrts::reinit_char(context[11], 'x');
    refalrts::reinit_open_call(context[12]);
    refalrts::reinit_name(context[15], functions[efunc_gen_Hex_D16]);
    refalrts::reinit_close_call(context[16]);
    refalrts::reinit_char(context[18], '9');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[7], context[1] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[12], context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Xxout-Chars$7=1/4 (/7 e.Scanned/19 )/8 (/11 e.Tail/21 )/12 (/15 s.Hi/17 )/16 10/18 >/1
    context[19] = context[5];
    context[20] = context[6];
    context[21] = context[9];
    context[22] = context[10];
    if( ! refalrts::number_term( 10UL, context[18] ) )
      continue;
    // closed e.Scanned as range 19
    // closed e.Tail as range 21
    //DEBUG: s.Hi: 17
    //DEBUG: e.Scanned: 19
    //DEBUG: e.Tail: 21

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 AsIs: e.Scanned/19 HalfReuse: '\\'/8 HalfReuse: 'x'/11 } Tile{ HalfReuse: </12 HalfReuse: & Hex*16/15 AsIs: s.Hi/17 HalfReuse: >/16 HalfReuse: 'A'/18 HalfReuse: )/1 } </23 & Type/24 Tile{ AsIs: e.Tail/21 } >/25 >/26 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_Type]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
    refalrts::reinit_char(context[8], '\\');
    refalrts::reinit_char(context[11], 'x');
    refalrts::reinit_open_call(context[12]);
    refalrts::reinit_name(context[15], functions[efunc_gen_Hex_D16]);
    refalrts::reinit_close_call(context[16]);
    refalrts::reinit_char(context[18], 'A');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[7], context[1] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[12], context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Xxout-Chars$7=1/4 (/7 e.Scanned/19 )/8 (/11 e.Tail/21 )/12 (/15 s.Hi/17 )/16 11/18 >/1
    context[19] = context[5];
    context[20] = context[6];
    context[21] = context[9];
    context[22] = context[10];
    if( ! refalrts::number_term( 11UL, context[18] ) )
      continue;
    // closed e.Scanned as range 19
    // closed e.Tail as range 21
    //DEBUG: s.Hi: 17
    //DEBUG: e.Scanned: 19
    //DEBUG: e.Tail: 21

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 AsIs: e.Scanned/19 HalfReuse: '\\'/8 HalfReuse: 'x'/11 } Tile{ HalfReuse: </12 HalfReuse: & Hex*16/15 AsIs: s.Hi/17 HalfReuse: >/16 HalfReuse: 'B'/18 HalfReuse: )/1 } </23 & Type/24 Tile{ AsIs: e.Tail/21 } >/25 >/26 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_Type]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
    refalrts::reinit_char(context[8], '\\');
    refalrts::reinit_char(context[11], 'x');
    refalrts::reinit_open_call(context[12]);
    refalrts::reinit_name(context[15], functions[efunc_gen_Hex_D16]);
    refalrts::reinit_close_call(context[16]);
    refalrts::reinit_char(context[18], 'B');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[7], context[1] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[12], context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Xxout-Chars$7=1/4 (/7 e.Scanned/19 )/8 (/11 e.Tail/21 )/12 (/15 s.Hi/17 )/16 12/18 >/1
    context[19] = context[5];
    context[20] = context[6];
    context[21] = context[9];
    context[22] = context[10];
    if( ! refalrts::number_term( 12UL, context[18] ) )
      continue;
    // closed e.Scanned as range 19
    // closed e.Tail as range 21
    //DEBUG: s.Hi: 17
    //DEBUG: e.Scanned: 19
    //DEBUG: e.Tail: 21

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 AsIs: e.Scanned/19 HalfReuse: '\\'/8 HalfReuse: 'x'/11 } Tile{ HalfReuse: </12 HalfReuse: & Hex*16/15 AsIs: s.Hi/17 HalfReuse: >/16 HalfReuse: 'C'/18 HalfReuse: )/1 } </23 & Type/24 Tile{ AsIs: e.Tail/21 } >/25 >/26 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_Type]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
    refalrts::reinit_char(context[8], '\\');
    refalrts::reinit_char(context[11], 'x');
    refalrts::reinit_open_call(context[12]);
    refalrts::reinit_name(context[15], functions[efunc_gen_Hex_D16]);
    refalrts::reinit_close_call(context[16]);
    refalrts::reinit_char(context[18], 'C');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[7], context[1] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[12], context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Xxout-Chars$7=1/4 (/7 e.Scanned/19 )/8 (/11 e.Tail/21 )/12 (/15 s.Hi/17 )/16 13/18 >/1
    context[19] = context[5];
    context[20] = context[6];
    context[21] = context[9];
    context[22] = context[10];
    if( ! refalrts::number_term( 13UL, context[18] ) )
      continue;
    // closed e.Scanned as range 19
    // closed e.Tail as range 21
    //DEBUG: s.Hi: 17
    //DEBUG: e.Scanned: 19
    //DEBUG: e.Tail: 21

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 AsIs: e.Scanned/19 HalfReuse: '\\'/8 HalfReuse: 'x'/11 } Tile{ HalfReuse: </12 HalfReuse: & Hex*16/15 AsIs: s.Hi/17 HalfReuse: >/16 HalfReuse: 'D'/18 HalfReuse: )/1 } </23 & Type/24 Tile{ AsIs: e.Tail/21 } >/25 >/26 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_Type]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
    refalrts::reinit_char(context[8], '\\');
    refalrts::reinit_char(context[11], 'x');
    refalrts::reinit_open_call(context[12]);
    refalrts::reinit_name(context[15], functions[efunc_gen_Hex_D16]);
    refalrts::reinit_close_call(context[16]);
    refalrts::reinit_char(context[18], 'D');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[7], context[1] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[12], context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Xxout-Chars$7=1/4 (/7 e.Scanned/19 )/8 (/11 e.Tail/21 )/12 (/15 s.Hi/17 )/16 14/18 >/1
    context[19] = context[5];
    context[20] = context[6];
    context[21] = context[9];
    context[22] = context[10];
    if( ! refalrts::number_term( 14UL, context[18] ) )
      continue;
    // closed e.Scanned as range 19
    // closed e.Tail as range 21
    //DEBUG: s.Hi: 17
    //DEBUG: e.Scanned: 19
    //DEBUG: e.Tail: 21

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 AsIs: e.Scanned/19 HalfReuse: '\\'/8 HalfReuse: 'x'/11 } Tile{ HalfReuse: </12 HalfReuse: & Hex*16/15 AsIs: s.Hi/17 HalfReuse: >/16 HalfReuse: 'E'/18 HalfReuse: )/1 } </23 & Type/24 Tile{ AsIs: e.Tail/21 } >/25 >/26 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_Type]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
    refalrts::reinit_char(context[8], '\\');
    refalrts::reinit_char(context[11], 'x');
    refalrts::reinit_open_call(context[12]);
    refalrts::reinit_name(context[15], functions[efunc_gen_Hex_D16]);
    refalrts::reinit_close_call(context[16]);
    refalrts::reinit_char(context[18], 'E');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[7], context[1] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[12], context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Xxout-Chars$7=1/4 (/7 e.Scanned/19 )/8 (/11 e.Tail/21 )/12 (/15 s.Hi/17 )/16 15/18 >/1
    context[19] = context[5];
    context[20] = context[6];
    context[21] = context[9];
    context[22] = context[10];
    if( ! refalrts::number_term( 15UL, context[18] ) )
      continue;
    // closed e.Scanned as range 19
    // closed e.Tail as range 21
    //DEBUG: s.Hi: 17
    //DEBUG: e.Scanned: 19
    //DEBUG: e.Tail: 21

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 AsIs: e.Scanned/19 HalfReuse: '\\'/8 HalfReuse: 'x'/11 } Tile{ HalfReuse: </12 HalfReuse: & Hex*16/15 AsIs: s.Hi/17 HalfReuse: >/16 HalfReuse: 'F'/18 HalfReuse: )/1 } </23 & Type/24 Tile{ AsIs: e.Tail/21 } >/25 >/26 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_Type]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
    refalrts::reinit_char(context[8], '\\');
    refalrts::reinit_char(context[11], 'x');
    refalrts::reinit_open_call(context[12]);
    refalrts::reinit_name(context[15], functions[efunc_gen_Hex_D16]);
    refalrts::reinit_close_call(context[16]);
    refalrts::reinit_char(context[18], 'F');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[7], context[1] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[12], context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Xxout-Chars$7=1/4 (/7 e.Scanned/5 )/8 (/11 e.Tail/9 )/12 (/15 s.Hi/17 )/16 s.Low/18 >/1
  // closed e.Scanned as range 5
  // closed e.Tail as range 9
  //DEBUG: s.Hi: 17
  //DEBUG: s.Low: 18
  //DEBUG: e.Scanned: 5
  //DEBUG: e.Tail: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 AsIs: e.Scanned/5 HalfReuse: '\\'/8 HalfReuse: 'x'/11 } Tile{ HalfReuse: </12 HalfReuse: & Hex*16/15 AsIs: s.Hi/17 } >/19 </20 Tile{ HalfReuse: & Hex*16/16 AsIs: s.Low/18 AsIs: >/1 } )/21 </22 & Type/23 Tile{ AsIs: e.Tail/9 } >/24 >/25 Tile{ ]] }
  refalrts::alloc_close_call(vm, context[19]);
  refalrts::alloc_open_call(vm, context[20]);
  refalrts::alloc_close_bracket(vm, context[21]);
  refalrts::alloc_open_call(vm, context[22]);
  refalrts::alloc_name(vm, context[23], functions[efunc_Type]);
  refalrts::alloc_close_call(vm, context[24]);
  refalrts::alloc_close_call(vm, context[25]);
  refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
  refalrts::reinit_char(context[8], '\\');
  refalrts::reinit_char(context[11], 'x');
  refalrts::reinit_open_call(context[12]);
  refalrts::reinit_name(context[15], functions[efunc_gen_Hex_D16]);
  refalrts::reinit_name(context[16], functions[efunc_gen_Hex_D16]);
  refalrts::push_stack( vm, context[25] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[24] );
  refalrts::push_stack( vm, context[22] );
  refalrts::link_brackets( context[7], context[21] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[20] );
  refalrts::push_stack( vm, context[19] );
  refalrts::push_stack( vm, context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[24], context[25] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[21], context[23] );
  res = refalrts::splice_evar( res, context[16], context[1] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[12], context[17] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Xxoutm_Chars_S7A1("Xxout-Chars$7=1", COOKIE1_, COOKIE2_, func_gen_Xxoutm_Chars_S7A1);


static refalrts::FnResult func_Xxoutm_Chars(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 68 elems
  refalrts::Iter context[68];
  refalrts::zeros( context, 68 );
  // </0 & Xxout-Chars/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Xxout-Chars/4 (/7 e.new1/5 )/8 s.new2/9 s.new3/10 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new4 as range 2
  do {
    // </0 & Xxout-Chars/4 (/7 e.new9/11 )/8 s.new5/9 s.new6/10 t.new7/15 e.new8/13 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new9 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new8 as range 13
    do {
      // </0 & Xxout-Chars/4 (/7 e.new14/17 )/8 s.new10/9 s.new11/10 s.new12/15 e.new13/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      if( ! refalrts::svar_term( context[15], context[15] ) )
        continue;
      // closed e.new14 as range 17
      // closed e.new13 as range 19
      do {
        // </0 & Xxout-Chars/4 (/7 e.Scanned/21 )/8 s.T/9 s.S/10 s.Escaped/15 e.Tail/23 >/1
        context[21] = context[17];
        context[22] = context[18];
        context[23] = context[19];
        context[24] = context[20];
        // closed e.Scanned as range 21
        // closed e.Tail as range 23
        //DEBUG: s.T: 9
        //DEBUG: s.S: 10
        //DEBUG: s.Escaped: 15
        //DEBUG: e.Scanned: 21
        //DEBUG: e.Tail: 23
        //9: s.T
        //10: s.S
        //15: s.Escaped
        //21: e.Scanned
        //23: e.Tail

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[25]);
        refalrts::alloc_name(vm, context[27], functions[efunc_gen_Xxoutm_Chars_S1C1]);
        refalrts::alloc_open_bracket(vm, context[28]);
        refalrts::alloc_chars(vm, context[29], context[30], "\\\\", 2);
        refalrts::alloc_close_bracket(vm, context[31]);
        refalrts::alloc_open_bracket(vm, context[32]);
        refalrts::alloc_chars(vm, context[33], context[34], "\'\'", 2);
        refalrts::alloc_close_bracket(vm, context[35]);
        refalrts::alloc_open_bracket(vm, context[36]);
        refalrts::alloc_chars(vm, context[37], context[38], "\"\"", 2);
        refalrts::alloc_close_bracket(vm, context[39]);
        refalrts::alloc_open_bracket(vm, context[40]);
        refalrts::alloc_chars(vm, context[41], context[42], "((", 2);
        refalrts::alloc_close_bracket(vm, context[43]);
        refalrts::alloc_open_bracket(vm, context[44]);
        refalrts::alloc_chars(vm, context[45], context[46], "))", 2);
        refalrts::alloc_close_bracket(vm, context[47]);
        refalrts::alloc_open_bracket(vm, context[48]);
        refalrts::alloc_chars(vm, context[49], context[50], "<<", 2);
        refalrts::alloc_close_bracket(vm, context[51]);
        refalrts::alloc_open_bracket(vm, context[52]);
        refalrts::alloc_chars(vm, context[53], context[54], ">>", 2);
        refalrts::alloc_close_bracket(vm, context[55]);
        refalrts::alloc_open_bracket(vm, context[56]);
        refalrts::alloc_chars(vm, context[57], context[58], "\nn", 2);
        refalrts::alloc_close_bracket(vm, context[59]);
        refalrts::alloc_open_bracket(vm, context[60]);
        refalrts::alloc_chars(vm, context[61], context[62], "\tt", 2);
        refalrts::alloc_close_bracket(vm, context[63]);
        refalrts::alloc_open_bracket(vm, context[64]);
        refalrts::alloc_chars(vm, context[65], context[66], "\rr", 2);
        refalrts::alloc_close_bracket(vm, context[67]);
        refalrts::alloc_close_call(vm, context[26]);
        refalrts::push_stack( vm, context[26] );
        refalrts::push_stack( vm, context[25] );
        res = refalrts::splice_elem( res, context[26] );
        refalrts::link_brackets( context[64], context[67] );
        res = refalrts::splice_elem( res, context[67] );
        res = refalrts::splice_evar( res, context[65], context[66] );
        res = refalrts::splice_elem( res, context[64] );
        refalrts::link_brackets( context[60], context[63] );
        res = refalrts::splice_elem( res, context[63] );
        res = refalrts::splice_evar( res, context[61], context[62] );
        res = refalrts::splice_elem( res, context[60] );
        refalrts::link_brackets( context[56], context[59] );
        res = refalrts::splice_elem( res, context[59] );
        res = refalrts::splice_evar( res, context[57], context[58] );
        res = refalrts::splice_elem( res, context[56] );
        refalrts::link_brackets( context[52], context[55] );
        res = refalrts::splice_elem( res, context[55] );
        res = refalrts::splice_evar( res, context[53], context[54] );
        res = refalrts::splice_elem( res, context[52] );
        refalrts::link_brackets( context[48], context[51] );
        res = refalrts::splice_elem( res, context[51] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        res = refalrts::splice_elem( res, context[48] );
        refalrts::link_brackets( context[44], context[47] );
        res = refalrts::splice_elem( res, context[47] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_elem( res, context[44] );
        refalrts::link_brackets( context[40], context[43] );
        res = refalrts::splice_elem( res, context[43] );
        res = refalrts::splice_evar( res, context[41], context[42] );
        res = refalrts::splice_elem( res, context[40] );
        refalrts::link_brackets( context[36], context[39] );
        res = refalrts::splice_elem( res, context[39] );
        res = refalrts::splice_evar( res, context[37], context[38] );
        res = refalrts::splice_elem( res, context[36] );
        refalrts::link_brackets( context[32], context[35] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_elem( res, context[32] );
        refalrts::link_brackets( context[28], context[31] );
        res = refalrts::splice_elem( res, context[31] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_elem( res, context[28] );
        res = refalrts::splice_elem( res, context[27] );
        res = refalrts::splice_elem( res, context[25] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </25 & Xxout-Chars$1?1/29 e.Escaped-B/30 (/36 s.Escaped/38 e.Replace/34 )/37 e.Escaped-E/32 >/26
          context[27] = 0;
          context[28] = 0;
          context[29] = refalrts::call_left( context[27], context[28], context[25], context[26] );
          context[30] = 0;
          context[31] = 0;
          refalrts::start_e_loop(vm);
          do {
            context[32] = context[27];
            context[33] = context[28];
            context[34] = 0;
            context[35] = 0;
            context[36] = refalrts::brackets_left( context[34], context[35], context[32], context[33] );
            if( ! context[36] )
              continue;
            refalrts::bracket_pointers(context[36], context[37]);
            if( ! refalrts::repeated_stvar_left( vm, context[38], context[15], context[34], context[35] ) )
              continue;
            // closed e.Replace as range 34
            // closed e.Escaped-E as range 32
            //DEBUG: s.T: 9
            //DEBUG: s.S: 10
            //DEBUG: s.Escaped: 15
            //DEBUG: e.Scanned: 21
            //DEBUG: e.Tail: 23
            //DEBUG: e.Escaped-B: 30
            //DEBUG: e.Replace: 34
            //DEBUG: e.Escaped-E: 32

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} s.T/9 s.S/10 s.Escaped/15 {REMOVED TILE} {REMOVED TILE} e.Escaped-B/30 (/36 s.Escaped/38 {REMOVED TILE} {REMOVED TILE} e.Escaped-E/32 {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & Xxout-Chars/4 AsIs: (/7 AsIs: e.Scanned/21 HalfReuse: '\\'/8 } Tile{ AsIs: e.Replace/34 } Tile{ AsIs: )/37 } Tile{ AsIs: </25 Reuse: & Type/29 } Tile{ AsIs: e.Tail/23 } Tile{ AsIs: >/26 AsIs: >/1 ]] }
            refalrts::reinit_char(context[8], '\\');
            refalrts::update_name(context[29], functions[efunc_Type]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[26] );
            refalrts::push_stack( vm, context[25] );
            refalrts::link_brackets( context[7], context[37] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[26];
            res = refalrts::splice_evar( res, context[23], context[24] );
            res = refalrts::splice_evar( res, context[25], context[29] );
            res = refalrts::splice_elem( res, context[37] );
            res = refalrts::splice_evar( res, context[34], context[35] );
            refalrts::splice_to_freelist_open( vm, context[8], res );
            return refalrts::cSuccess;
          } while ( refalrts::open_evar_advance( context[30], context[31], context[27], context[28] ) );
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[25], context[26]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars/4 (/7 e.Scanned/21 )/8 'L'/9 s.S/10 s.Letter/15 e.Tail/23 >/1
        context[21] = context[17];
        context[22] = context[18];
        context[23] = context[19];
        context[24] = context[20];
        if( ! refalrts::char_term( 'L', context[9] ) )
          continue;
        // closed e.Scanned as range 21
        // closed e.Tail as range 23
        //DEBUG: s.S: 10
        //DEBUG: s.Letter: 15
        //DEBUG: e.Scanned: 21
        //DEBUG: e.Tail: 23

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.S/10 s.Letter/15 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Xxout-Chars/4 AsIs: (/7 AsIs: e.Scanned/21 HalfReuse: s.Letter15 /8 HalfReuse: )/9 } </25 & Type/26 Tile{ AsIs: e.Tail/23 } >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[25]);
        refalrts::alloc_name(vm, context[26], functions[efunc_Type]);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::reinit_svar( context[8], context[15] );
        refalrts::reinit_close_bracket(context[9]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[25] );
        refalrts::link_brackets( context[7], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[27] );
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        refalrts::splice_to_freelist_open( vm, context[9], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars/4 (/7 e.Scanned/21 )/8 'D'/9 s.S/10 s.Digit/15 e.Tail/23 >/1
        context[21] = context[17];
        context[22] = context[18];
        context[23] = context[19];
        context[24] = context[20];
        if( ! refalrts::char_term( 'D', context[9] ) )
          continue;
        // closed e.Scanned as range 21
        // closed e.Tail as range 23
        //DEBUG: s.S: 10
        //DEBUG: s.Digit: 15
        //DEBUG: e.Scanned: 21
        //DEBUG: e.Tail: 23

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.S/10 s.Digit/15 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Xxout-Chars/4 AsIs: (/7 AsIs: e.Scanned/21 HalfReuse: s.Digit15 /8 HalfReuse: )/9 } </25 & Type/26 Tile{ AsIs: e.Tail/23 } >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[25]);
        refalrts::alloc_name(vm, context[26], functions[efunc_Type]);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::reinit_svar( context[8], context[15] );
        refalrts::reinit_close_bracket(context[9]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[25] );
        refalrts::link_brackets( context[7], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[27] );
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        refalrts::splice_to_freelist_open( vm, context[9], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars/4 (/7 e.Scanned/21 )/8 'W'/9 s.S/10 s.Word/15 e.Tail/23 >/1
        context[21] = context[17];
        context[22] = context[18];
        context[23] = context[19];
        context[24] = context[20];
        if( ! refalrts::char_term( 'W', context[9] ) )
          continue;
        // closed e.Scanned as range 21
        // closed e.Tail as range 23
        //DEBUG: s.S: 10
        //DEBUG: s.Word: 15
        //DEBUG: e.Scanned: 21
        //DEBUG: e.Tail: 23

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & Xxout-Chars/4 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Scanned/21 AsIs: )/8 AsIs: 'W'/9 AsIs: s.S/10 AsIs: s.Word/15 } Tile{ AsIs: e.Tail/23 } Tile{ ]] }
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[7], context[15] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars/4 (/7 e.Scanned/21 )/8 'N'/9 s.0/10 s.Number/15 e.Tail/23 >/1
        context[21] = context[17];
        context[22] = context[18];
        context[23] = context[19];
        context[24] = context[20];
        if( ! refalrts::char_term( 'N', context[9] ) )
          continue;
        // closed e.Scanned as range 21
        // closed e.Tail as range 23
        //DEBUG: s.0: 10
        //DEBUG: s.Number: 15
        //DEBUG: e.Scanned: 21
        //DEBUG: e.Tail: 23

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & Xxout-Chars/4 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Scanned/21 AsIs: )/8 AsIs: 'N'/9 AsIs: s.0/10 AsIs: s.Number/15 } Tile{ AsIs: e.Tail/23 } Tile{ ]] }
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[7], context[15] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars/4 (/7 e.Scanned/21 )/8 'P'/9 s.S/10 s.Printable/15 e.Tail/23 >/1
        context[21] = context[17];
        context[22] = context[18];
        context[23] = context[19];
        context[24] = context[20];
        if( ! refalrts::char_term( 'P', context[9] ) )
          continue;
        // closed e.Scanned as range 21
        // closed e.Tail as range 23
        //DEBUG: s.S: 10
        //DEBUG: s.Printable: 15
        //DEBUG: e.Scanned: 21
        //DEBUG: e.Tail: 23

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.S/10 s.Printable/15 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Xxout-Chars/4 AsIs: (/7 AsIs: e.Scanned/21 HalfReuse: s.Printable15 /8 HalfReuse: )/9 } </25 & Type/26 Tile{ AsIs: e.Tail/23 } >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[25]);
        refalrts::alloc_name(vm, context[26], functions[efunc_Type]);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::reinit_svar( context[8], context[15] );
        refalrts::reinit_close_bracket(context[9]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[25] );
        refalrts::link_brackets( context[7], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[27] );
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        refalrts::splice_to_freelist_open( vm, context[9], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Xxout-Chars/4 (/7 e.Scanned/21 )/8 'O'/9 s.S/10 s.Other/15 e.Tail/23 >/1
      context[21] = context[17];
      context[22] = context[18];
      context[23] = context[19];
      context[24] = context[20];
      if( ! refalrts::char_term( 'O', context[9] ) )
        continue;
      // closed e.Scanned as range 21
      // closed e.Tail as range 23
      //DEBUG: s.S: 10
      //DEBUG: s.Other: 15
      //DEBUG: e.Scanned: 21
      //DEBUG: e.Tail: 23

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.S/10 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars$7=1/4 AsIs: (/7 AsIs: e.Scanned/21 AsIs: )/8 HalfReuse: (/9 } Tile{ AsIs: e.Tail/23 } )/25 </26 & Divmod-Digits/27 </28 & Ord/29 Tile{ AsIs: s.Other/15 } >/30 16/31 >/32 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[25]);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_Divmodm_Digits]);
      refalrts::alloc_open_call(vm, context[28]);
      refalrts::alloc_name(vm, context[29], functions[efunc_Ord]);
      refalrts::alloc_close_call(vm, context[30]);
      refalrts::alloc_number(vm, context[31], 16UL);
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::update_name(context[4], functions[efunc_gen_Xxoutm_Chars_S7A1]);
      refalrts::reinit_open_bracket(context[9]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[28] );
      refalrts::link_brackets( context[9], context[25] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[30], context[32] );
      res = refalrts::splice_elem( res, context[15] );
      res = refalrts::splice_evar( res, context[25], context[29] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      refalrts::splice_to_freelist_open( vm, context[9], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Xxout-Chars/4 (/7 e.Scanned/17 )/8 'B'/9 s.0/10 (/15 e.Inner/21 )/16 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    context[21] = 0;
    context[22] = 0;
    if( ! refalrts::brackets_term( context[21], context[22], context[15] ) )
      continue;
    if( ! refalrts::char_term( 'B', context[9] ) )
      continue;
    // closed e.Scanned as range 17
    // closed e.Inner as range 21
    // closed e.Tail as range 19
    //DEBUG: s.0: 10
    //DEBUG: e.Scanned: 17
    //DEBUG: e.Inner: 21
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Xxout-Chars/4 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Scanned/17 AsIs: )/8 AsIs: 'B'/9 AsIs: s.0/10 AsIs: (/15 AsIs: e.Inner/21 AsIs: )/16 } Tile{ AsIs: e.Tail/19 } Tile{ ]] }
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[7], context[16] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Xxout-Chars/4 (/7 e.Scanned/5 )/8 '*'/9 s.0/10 >/1
  if( ! refalrts::char_term( '*', context[9] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Scanned as range 5
  //DEBUG: s.0: 10
  //DEBUG: e.Scanned: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Xxout-Chars/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Scanned/5 AsIs: )/8 AsIs: '*'/9 AsIs: s.0/10 } Tile{ ]] }
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[10] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Xxoutm_Chars("Xxout-Chars", COOKIE1_, COOKIE2_, func_Xxoutm_Chars);


static refalrts::FnResult func_Hex(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & Hex/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Hex/4 s.new1/5 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & Hex/4 0/5 >/1
    if( ! refalrts::number_term( 0UL, context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Hex/4 0/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '0'/1 ]] }
    refalrts::reinit_char(context[1], '0');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Hex/4 1/5 >/1
    if( ! refalrts::number_term( 1UL, context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Hex/4 1/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '1'/1 ]] }
    refalrts::reinit_char(context[1], '1');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Hex/4 2/5 >/1
    if( ! refalrts::number_term( 2UL, context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Hex/4 2/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '2'/1 ]] }
    refalrts::reinit_char(context[1], '2');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Hex/4 3/5 >/1
    if( ! refalrts::number_term( 3UL, context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Hex/4 3/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '3'/1 ]] }
    refalrts::reinit_char(context[1], '3');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Hex/4 4/5 >/1
    if( ! refalrts::number_term( 4UL, context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Hex/4 4/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '4'/1 ]] }
    refalrts::reinit_char(context[1], '4');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Hex/4 5/5 >/1
    if( ! refalrts::number_term( 5UL, context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Hex/4 5/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '5'/1 ]] }
    refalrts::reinit_char(context[1], '5');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Hex/4 6/5 >/1
    if( ! refalrts::number_term( 6UL, context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Hex/4 6/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '6'/1 ]] }
    refalrts::reinit_char(context[1], '6');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Hex/4 7/5 >/1
    if( ! refalrts::number_term( 7UL, context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Hex/4 7/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '7'/1 ]] }
    refalrts::reinit_char(context[1], '7');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Hex/4 8/5 >/1
    if( ! refalrts::number_term( 8UL, context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Hex/4 8/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '8'/1 ]] }
    refalrts::reinit_char(context[1], '8');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Hex/4 9/5 >/1
    if( ! refalrts::number_term( 9UL, context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Hex/4 9/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '9'/1 ]] }
    refalrts::reinit_char(context[1], '9');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Hex/4 10/5 >/1
    if( ! refalrts::number_term( 10UL, context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Hex/4 10/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 'A'/1 ]] }
    refalrts::reinit_char(context[1], 'A');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Hex/4 11/5 >/1
    if( ! refalrts::number_term( 11UL, context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Hex/4 11/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 'B'/1 ]] }
    refalrts::reinit_char(context[1], 'B');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Hex/4 12/5 >/1
    if( ! refalrts::number_term( 12UL, context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Hex/4 12/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 'C'/1 ]] }
    refalrts::reinit_char(context[1], 'C');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Hex/4 13/5 >/1
    if( ! refalrts::number_term( 13UL, context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Hex/4 13/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 'D'/1 ]] }
    refalrts::reinit_char(context[1], 'D');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Hex/4 14/5 >/1
    if( ! refalrts::number_term( 14UL, context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Hex/4 14/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 'E'/1 ]] }
    refalrts::reinit_char(context[1], 'E');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Hex/4 15/5 >/1
  if( ! refalrts::number_term( 15UL, context[5] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Hex/4 15/5 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: 'F'/1 ]] }
  refalrts::reinit_char(context[1], 'F');
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Hex("Hex", COOKIE1_, COOKIE2_, func_Hex);

#line 2365 "Library.ref"
namespace {

refalrts::FnResult string_from_seq(
  std::vector<char>& string, refalrts::Iter begin, refalrts::Iter end
) {
  std::vector<char> result;

  enum { cBufLen = 100 };
  char buffer[cBufLen + 1] = { 0 };

  unsigned read;
  while ((read = refalrts::read_chars(buffer, cBufLen, begin, end)) != 0) {
    // В текущей версии Open Watcom (и форка Open Watcom V2) есть ошибка
    // в функции vector::insert, которая возникает в случае,
    // если во время вставки вектор увеличивает свою ёмкость (capacity).
    // Для обхода этой ошибки предварительно резервируем место.
    result.reserve(result.size() + read + 1);
    result.insert(result.end(), buffer, buffer + read);
  }

  /*
    Здесь refalrts::empty_seq(begin, end) || (begin->tag != cDataChar).
  */

  if (refalrts::empty_seq(begin, end)) {
    result.push_back('\0');
    string.swap(result);
    return refalrts::cSuccess;
  } else {
    // здесь begin->tag != cDataChar
    return refalrts::cRecognitionImpossible;
  }
}

}  // unnamed namespace
#line 32801 "Library.cpp"

static refalrts::FnResult func_GetEnv(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 2404 "Library.ref"
  refalrts::Iter envname_b = 0;
  refalrts::Iter envname_e = 0;
  refalrts::call_left(envname_b, envname_e, arg_begin, arg_end);

  std::vector<char> envname;
  refalrts::FnResult envname_res =
    string_from_seq(envname, envname_b, envname_e);

  if (envname_res != refalrts::cSuccess) {
    return envname_res;
  }

  refalrts::reset_allocator(vm);
  const char *envres = getenv(& envname[0]);

  if (envres != 0) {
    refalrts::Iter env_begin;
    refalrts::Iter env_end;

    refalrts::alloc_string(vm, env_begin, env_end, envres);
    refalrts::splice_evar(arg_begin, env_begin, env_end);
  }

  refalrts::splice_to_freelist(vm, arg_begin, arg_end);
  return refalrts::cSuccess;
#line 32834 "Library.cpp"
}

static refalrts::NativeReference nat_ref_GetEnv("GetEnv", 0U, 0U, func_GetEnv);


static refalrts::FnResult func_System(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 2439 "Library.ref"
  refalrts::Iter command_b = 0;
  refalrts::Iter command_e = 0;
  refalrts::Iter pfunc_name =
    refalrts::call_left(command_b, command_e, arg_begin, arg_end);

  std::vector<char> command;
  refalrts::FnResult command_res =
    string_from_seq(command, command_b, command_e);

  if (command_res != refalrts::cSuccess) {
    return command_res;
  }

  fflush(stdout);
  fflush(stderr);

  int ret = refalrts::api::system(&command[0]);

  refalrts::reset_allocator(vm);
  if (ret < 0) {
    refalrts::Iter minus = 0;
    refalrts::alloc_char(vm, minus, '-');
    refalrts::splice_elem(arg_begin, minus);

    ret = -ret;
  }

  refalrts::reinit_number(arg_begin, ret);

  refalrts::splice_to_freelist(vm, pfunc_name, arg_end);
  return refalrts::cSuccess;
#line 32877 "Library.cpp"
}

static refalrts::NativeReference nat_ref_System("System", 0U, 0U, func_System);


static refalrts::FnResult func_Exit(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 2482 "Library.ref"
  refalrts::Iter content_b = 0;
  refalrts::Iter content_e = 0;
  refalrts::call_left(content_b, content_e, arg_begin, arg_end);

  int sign = +1;

  if (refalrts::char_left('+', content_b, content_e)) {
    sign = +1;
  } else if (refalrts::char_left('-', content_b, content_e)) {
    sign = -1;
  }

  refalrts::Iter pretcode = 0;
  if (
    ! refalrts::svar_left(pretcode, content_b, content_e)
    || ! refalrts::empty_seq(content_b, content_e)
    || refalrts::cDataNumber != pretcode->tag
    || refalrts::dangerous_state(vm)
  ) {
    return refalrts::cRecognitionImpossible;
  }

  refalrts::set_return_code(vm, sign * static_cast<int>(pretcode->number_info));
  return refalrts::cExit;
#line 32913 "Library.cpp"
}

static refalrts::NativeReference nat_ref_Exit("Exit", 0U, 0U, func_Exit);


static refalrts::FnResult func_Close(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 2516 "Library.ref"
  refalrts::Iter content_b = 0;
  refalrts::Iter content_e = 0;
  refalrts::call_left(content_b, content_e, arg_begin, arg_end);

  refalrts::Iter pfile_handle = 0;
  if (
    ! file_handle_left(identifiers, pfile_handle, content_b, content_e)
    || ! refalrts::empty_seq(content_b, content_e)
  ) {
    return refalrts::cRecognitionImpossible;
  }

  FILE *handle = extract_file_handle(vm, identifiers, pfile_handle);
  if (handle) {
    if (! release_file_handle(vm, pfile_handle)) {
      return refalrts::cRecognitionImpossible;
    }
  }

  refalrts::splice_to_freelist(vm, arg_begin, arg_end);
  return refalrts::cSuccess;
#line 32946 "Library.cpp"
}

static refalrts::NativeReference nat_ref_Close("Close", 0U, 0U, func_Close);


static refalrts::FnResult func_ExistFile(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 2549 "Library.ref"
  refalrts::Iter content_b = 0;
  refalrts::Iter content_e = 0;
  refalrts::Iter pfunc_name =
    refalrts::call_left(content_b, content_e, arg_begin, arg_end);

  char filename[FILENAME_MAX + 1] = { '\0' };
  unsigned len =
    refalrts::read_chars(filename, FILENAME_MAX, content_b, content_e);

  if (! refalrts::empty_seq(content_b, content_e) || len == 0) {
    return refalrts::cRecognitionImpossible;
  }

  refalrts::Iter ans = arg_begin;
  if (FILE *f = fopen(filename, "r")) {
    // Файл существует
    fclose(f);

    refalrts::reinit_ident(ans, USE_IDENT(True));
  } else {
    // Файл по-видимому не существует
    refalrts::reinit_ident(ans, USE_IDENT(False));
  }

  refalrts::splice_to_freelist(vm, pfunc_name, arg_end);
  return refalrts::cSuccess;
#line 32984 "Library.cpp"
}

static refalrts::NativeReference nat_ref_ExistFile("ExistFile", 0U, 0U, func_ExistFile);


static refalrts::FnResult func_GetCurrentDirectory(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 2584 "Library.ref"
  refalrts::Iter content_b = 0, content_e = 0;
  refalrts::call_left(content_b, content_e, arg_begin, arg_end);

  if (! refalrts::empty_seq(content_b, content_e)) {
    return refalrts::cRecognitionImpossible;
  }

  char directory[FILENAME_MAX + 1] = { '\0' };

  if (! refalrts::api::get_current_directory(directory, sizeof(directory))) {
    return refalrts::cRecognitionImpossible;
  }

  refalrts::Iter directory_b = 0, directory_e = 0;
  refalrts::alloc_string(vm, directory_b, directory_e, directory);
  refalrts::splice_evar(arg_begin, directory_b, directory_e);
  refalrts::splice_to_freelist(vm, arg_begin, arg_end);

  return refalrts::cSuccess;
#line 33015 "Library.cpp"
}

static refalrts::NativeReference nat_ref_GetCurrentDirectory("GetCurrentDirectory", 0U, 0U, func_GetCurrentDirectory);


static refalrts::FnResult func_RemoveFile(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 2615 "Library.ref"
  refalrts::Iter content_b = 0;
  refalrts::Iter content_e = 0;
  refalrts::Iter pfunc_name =
    refalrts::call_left(content_b, content_e, arg_begin, arg_end);

  refalrts::Iter filename_b = content_b;
  refalrts::Iter filename_e = content_e;

  char filename[FILENAME_MAX + 1] = { '\0' };
  // возвращаемое значение не проверяем для совместимости с РЕФАЛом-5
  refalrts::read_chars(filename, FILENAME_MAX, filename_b, filename_e);

  const char *error_message = "";
  refalrts::RefalIdentifier i_result = USE_IDENT(False);

  if (! refalrts::empty_seq(filename_b, filename_e)) {
    error_message = "File name is too long.";
  } else {
    errno = 0;
    int result = remove(filename);

    if (result == 0) {
      i_result = USE_IDENT(True);
    } else {
      error_message = strerror(errno);
    }
  }

  refalrts::Iter error_b = 0, error_e = 0;
  refalrts::alloc_string(vm, error_b, error_e, error_message);
  refalrts::reinit_ident(arg_begin, i_result);
  refalrts::reinit_open_bracket(pfunc_name);
  refalrts::reinit_close_bracket(arg_end);
  refalrts::splice_evar(arg_end, error_b, error_e);
  refalrts::splice_to_freelist(vm, content_b, content_e);
  refalrts::link_brackets(pfunc_name, arg_end);
  return refalrts::cSuccess;
#line 33064 "Library.cpp"
}

static refalrts::NativeReference nat_ref_RemoveFile("RemoveFile", 0U, 0U, func_RemoveFile);


static refalrts::FnResult func_Implodeu_Ext(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 2661 "Library.ref"
  refalrts::Iter content_b = 0;
  refalrts::Iter content_e = 0;
  refalrts::Iter pfunc_name =
    refalrts::call_left(content_b, content_e, arg_begin, arg_end);

  std::vector<char> ident_str;
  refalrts::FnResult res = string_from_seq(ident_str, content_b, content_e);

  if (res != refalrts::cSuccess) {
    return res;
  }

  refalrts::RefalIdentifier ident = refalrts::ident_implode(vm, &ident_str[0]);

  if (! ident) {
    return refalrts::cIdentTableLimit;
  }

  refalrts::reinit_ident(arg_begin, ident);
  refalrts::splice_to_freelist(vm, pfunc_name, arg_end);

  return refalrts::cSuccess;
#line 33098 "Library.cpp"
}

static refalrts::NativeReference nat_ref_Implodeu_Ext("Implode_Ext", 0U, 0U, func_Implodeu_Ext);


static refalrts::FnResult func_Explodeu_Ext(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Explode_Ext/4 s.Compound/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Compound: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </6 & __Step-Drop/7 >/8 Tile{ AsIs: </0 Reuse: & Explode/4 AsIs: s.Compound/5 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_Explode]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[6], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Explodeu_Ext("Explode_Ext", 0U, 0U, func_Explodeu_Ext);

#line 2699 "Library.ref"
namespace {

refalrts::GlobalRef<clock_t> g_time_elapsed_edge;

}  // unnamed namespace
#line 33152 "Library.cpp"

static refalrts::FnResult func_TimeElapsed(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 2708 "Library.ref"
  refalrts::Iter content_b = 0, content_e = 0;
  refalrts::call_left(content_b, content_e, arg_begin, arg_end);

  bool make_edge = refalrts::number_left(0, content_b, content_e) != 0;

  if (! refalrts::empty_seq(content_b, content_e)) {
    return refalrts::cRecognitionImpossible;
  }

  const double fClocksPerSec = CLOCKS_PER_SEC;
  clock_t now = clock();
  double time_elapsed = (now - g_time_elapsed_edge.ref(vm)) / fClocksPerSec;

  char str_time_elapsed[
    DBL_MAX_10_EXP + 1 /* maximum digits before point */
    + 1 /* point */
    + 6 /* default digits after point for sprintf */
    + 1 /* last '\0' */
    + 10 /* just in case */
  ] = { '\0' };

  sprintf(str_time_elapsed, "%f", time_elapsed);

  refalrts::alloc_string(vm, content_b, content_e, str_time_elapsed);

  if (make_edge) {
    g_time_elapsed_edge.ref(vm) = now;
  }

  refalrts::splice_evar(arg_begin, content_b, content_e);
  refalrts::splice_to_freelist(vm, arg_begin, arg_end);
  return refalrts::cSuccess;
#line 33192 "Library.cpp"
}

static refalrts::NativeReference nat_ref_TimeElapsed("TimeElapsed", 0U, 0U, func_TimeElapsed);


static refalrts::FnResult func_Compare(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Compare/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Compare/4 s.First/7 s.Second/8 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::svar_left( context[8], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    //DEBUG: s.First: 7
    //DEBUG: s.Second: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </9 & __Step-Drop/10 >/11 Tile{ AsIs: </0 Reuse: & Compare-Digits/4 AsIs: s.First/7 AsIs: s.Second/8 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[9]);
    refalrts::alloc_name(vm, context[10], functions[efunc_u_u_Stepm_Drop]);
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::update_name(context[4], functions[efunc_Comparem_Digits]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[0];
    res = refalrts::splice_evar( res, context[9], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Compare/4 e.ArithmArg/2 >/1
  // closed e.ArithmArg as range 2
  //DEBUG: e.ArithmArg: 2
  //2: e.ArithmArg
  //13: e.ArithmArg

  refalrts::reset_allocator(vm);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_Compare_S2C1]);
  refalrts::alloc_open_call(vm, context[8]);
  refalrts::alloc_name(vm, context[9], functions[efunc_u_u_Stepm_Start]);
  refalrts::alloc_close_call(vm, context[10]);
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_NormArithmArg]);
  refalrts::copy_evar(vm, context[13], context[14], context[2], context[3]);
  refalrts::alloc_close_call(vm, context[15]);
  refalrts::alloc_close_call(vm, context[6]);
  refalrts::push_stack( vm, context[6] );
  refalrts::push_stack( vm, context[5] );
  res = refalrts::splice_elem( res, context[6] );
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[11] );
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_elem( res, context[11] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[8] );
  res = refalrts::splice_elem( res, context[10] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
  if (rec_res != refalrts::cSuccess)
    return rec_res;
  refalrts::this_is_generated_function(vm);
  do {
    // </5 & Compare$2?1/9 (/12 e.First/10 )/13 e.Second/7 >/6
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::call_left( context[7], context[8], context[5], context[6] );
    context[10] = 0;
    context[11] = 0;
    context[12] = refalrts::brackets_left( context[10], context[11], context[7], context[8] );
    if( ! context[12] )
      continue;
    refalrts::bracket_pointers(context[12], context[13]);
    // closed e.First as range 10
    // closed e.Second as range 7
    //DEBUG: e.ArithmArg: 2
    //DEBUG: e.First: 10
    //DEBUG: e.Second: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.ArithmArg/2 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: </5 Reuse: & Compare-Normed/9 AsIs: (/12 AsIs: e.First/10 AsIs: )/13 AsIs: e.Second/7 AsIs: >/6 HalfReuse: </1 } Tile{ Reuse: & __Step-End/4 } Tile{ HalfReuse: >/0 } Tile{ ]] }
    refalrts::update_name(context[9], functions[efunc_Comparem_Normed]);
    refalrts::reinit_open_call(context[1]);
    refalrts::update_name(context[4], functions[efunc_u_u_Stepm_End]);
    refalrts::reinit_close_call(context[0]);
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[6] );
    refalrts::push_stack( vm, context[5] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[0] );
    res = refalrts::splice_elem( res, context[4] );
    res = refalrts::splice_evar( res, context[5], context[1] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  refalrts::splice_to_freelist(vm, context[5], context[6]);
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_Compare("Compare", 0U, 0U, func_Compare);


static refalrts::FnResult func_Comparem_Normed(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & Compare-Normed/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Compare-Normed/4 (/7 s.new1/9 e.new2/5 )/8 s.new3/10 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::svar_left( context[9], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 5
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new4 as range 2
  do {
    // </0 & Compare-Normed/4 (/7 '+'/9 e.new7/11 )/8 s.new5/10 e.new6/13 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    if( ! refalrts::char_term( '+', context[9] ) )
      continue;
    // closed e.new7 as range 11
    // closed e.new6 as range 13
    do {
      // </0 & Compare-Normed/4 (/7 '+'/9 e.First/15 )/8 '+'/10 e.Second/17 >/1
      context[15] = context[11];
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      if( ! refalrts::char_term( '+', context[10] ) )
        continue;
      // closed e.First as range 15
      // closed e.Second as range 17
      //DEBUG: e.First: 15
      //DEBUG: e.Second: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </19 Tile{ HalfReuse: & Compare-Align/0 HalfReuse: (/4 AsIs: (/7 HalfReuse: )/9 AsIs: e.First/15 AsIs: )/8 HalfReuse: (/10 } )/20 Tile{ AsIs: e.Second/17 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[19]);
      refalrts::alloc_close_bracket(vm, context[20]);
      refalrts::reinit_name(context[0], functions[efunc_Comparem_Align]);
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_close_bracket(context[9]);
      refalrts::reinit_open_bracket(context[10]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[19] );
      refalrts::link_brackets( context[10], context[20] );
      refalrts::link_brackets( context[4], context[8] );
      refalrts::link_brackets( context[7], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_evar( res, context[0], context[10] );
      res = refalrts::splice_elem( res, context[19] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compare-Normed/4 (/7 '+'/9 e.First/15 )/8 '-'/10 e.Second/17 >/1
      context[15] = context[11];
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      if( ! refalrts::char_term( '-', context[10] ) )
        continue;
      // closed e.First as range 15
      // closed e.Second as range 17
      //DEBUG: e.First: 15
      //DEBUG: e.Second: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Compare-Normed/4 (/7 '+'/9 e.First/15 )/8 '-'/10 e.Second/17 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '+'/1 ]] }
      refalrts::reinit_char(context[1], '+');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Compare-Normed/4 (/7 '+'/9 e.First/15 )/8 0/10 >/1
    context[15] = context[11];
    context[16] = context[12];
    if( ! refalrts::number_term( 0UL, context[10] ) )
      continue;
    if( ! refalrts::empty_seq( context[13], context[14] ) )
      continue;
    // closed e.First as range 15
    //DEBUG: e.First: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Compare-Normed/4 (/7 '+'/9 e.First/15 )/8 0/10 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '+'/1 ]] }
    refalrts::reinit_char(context[1], '+');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Compare-Normed/4 (/7 '-'/9 e.new7/11 )/8 s.new5/10 e.new6/13 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    if( ! refalrts::char_term( '-', context[9] ) )
      continue;
    // closed e.new7 as range 11
    // closed e.new6 as range 13
    do {
      // </0 & Compare-Normed/4 (/7 '-'/9 e.First/15 )/8 '+'/10 e.Second/17 >/1
      context[15] = context[11];
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      if( ! refalrts::char_term( '+', context[10] ) )
        continue;
      // closed e.First as range 15
      // closed e.Second as range 17
      //DEBUG: e.First: 15
      //DEBUG: e.Second: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Compare-Normed/4 (/7 '-'/9 e.First/15 )/8 '+'/10 e.Second/17 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: '-'/1 ]] }
      refalrts::reinit_char(context[1], '-');
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Compare-Normed/4 (/7 '-'/9 e.First/15 )/8 '-'/10 e.Second/17 >/1
      context[15] = context[11];
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      if( ! refalrts::char_term( '-', context[10] ) )
        continue;
      // closed e.First as range 15
      // closed e.Second as range 17
      //DEBUG: e.First: 15
      //DEBUG: e.Second: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Compare-Align/4 AsIs: (/7 HalfReuse: (/9 } )/19 Tile{ AsIs: e.Second/17 } Tile{ AsIs: )/8 HalfReuse: (/10 } )/20 Tile{ AsIs: e.First/15 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[19]);
      refalrts::alloc_close_bracket(vm, context[20]);
      refalrts::update_name(context[4], functions[efunc_Comparem_Align]);
      refalrts::reinit_open_bracket(context[9]);
      refalrts::reinit_open_bracket(context[10]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[20] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[9], context[19] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_evar( res, context[8], context[10] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_elem( res, context[19] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Compare-Normed/4 (/7 '-'/9 e.First/15 )/8 0/10 >/1
    context[15] = context[11];
    context[16] = context[12];
    if( ! refalrts::number_term( 0UL, context[10] ) )
      continue;
    if( ! refalrts::empty_seq( context[13], context[14] ) )
      continue;
    // closed e.First as range 15
    //DEBUG: e.First: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Compare-Normed/4 (/7 '-'/9 e.First/15 )/8 0/10 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '-'/1 ]] }
    refalrts::reinit_char(context[1], '-');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Compare-Normed/4 (/7 0/9 )/8 s.new5/10 e.new6/2 >/1
  if( ! refalrts::number_term( 0UL, context[9] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new6 as range 2
  do {
    // </0 & Compare-Normed/4 (/7 0/9 )/8 '+'/10 e.Second/11 >/1
    context[11] = context[2];
    context[12] = context[3];
    if( ! refalrts::char_term( '+', context[10] ) )
      continue;
    // closed e.Second as range 11
    //DEBUG: e.Second: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Compare-Normed/4 (/7 0/9 )/8 '+'/10 e.Second/11 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '-'/1 ]] }
    refalrts::reinit_char(context[1], '-');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Compare-Normed/4 (/7 0/9 )/8 '-'/10 e.Second/11 >/1
    context[11] = context[2];
    context[12] = context[3];
    if( ! refalrts::char_term( '-', context[10] ) )
      continue;
    // closed e.Second as range 11
    //DEBUG: e.Second: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Compare-Normed/4 (/7 0/9 )/8 '-'/10 e.Second/11 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '+'/1 ]] }
    refalrts::reinit_char(context[1], '+');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Compare-Normed/4 (/7 0/9 )/8 0/10 >/1
  if( ! refalrts::number_term( 0UL, context[10] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Compare-Normed/4 (/7 0/9 )/8 0/10 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: '0'/1 ]] }
  refalrts::reinit_char(context[1], '0');
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Comparem_Normed("Compare-Normed", COOKIE1_, COOKIE2_, func_Comparem_Normed);


static refalrts::FnResult func_Comparem_Nat(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Compare-Nat/4 (/7 e.First/5 )/8 e.Second/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.First as range 5
  // closed e.Second as range 2
  //DEBUG: e.First: 5
  //DEBUG: e.Second: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Compare-Align/4 AsIs: (/7 } (/9 )/10 Tile{ AsIs: e.First/5 } )/11 (/12 Tile{ AsIs: )/8 AsIs: e.Second/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::alloc_close_bracket(vm, context[11]);
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::update_name(context[4], functions[efunc_Comparem_Align]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[12], context[8] );
  refalrts::link_brackets( context[7], context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Comparem_Nat("Compare-Nat", COOKIE1_, COOKIE2_, func_Comparem_Nat);


static refalrts::FnResult func_Comparem_Align(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 37 elems
  refalrts::Iter context[37];
  refalrts::zeros( context, 37 );
  // </0 & Compare-Align/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Compare-Align/4 (/7 (/11 e.new1/9 )/12 e.new2/5 )/8 (/15 e.new3/13 )/16 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new1 as range 9
  // closed e.new2 as range 5
  // closed e.new3 as range 13
  // closed e.new4 as range 2
  do {
    // </0 & Compare-Align/4 (/7 (/11 e.new9/17 )/12 s.new6/25 e.new7/19 )/8 (/15 e.new8/21 )/16 e.new5/23 >/1
    context[17] = context[9];
    context[18] = context[10];
    context[19] = context[5];
    context[20] = context[6];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.new9 as range 17
    // closed e.new8 as range 21
    // closed e.new5 as range 23
    if( ! refalrts::svar_left( context[25], context[19], context[20] ) )
      continue;
    // closed e.new7 as range 19
    do {
      // </0 & Compare-Align/4 (/7 (/11 e.First-L/26 )/12 s.First-Dig/25 e.First-R/28 )/8 (/15 e.Second-L/30 )/16 s.Second-Dig/34 e.Second-R/32 >/1
      context[26] = context[17];
      context[27] = context[18];
      context[28] = context[19];
      context[29] = context[20];
      context[30] = context[21];
      context[31] = context[22];
      context[32] = context[23];
      context[33] = context[24];
      // closed e.First-L as range 26
      // closed e.First-R as range 28
      // closed e.Second-L as range 30
      if( ! refalrts::svar_left( context[34], context[32], context[33] ) )
        continue;
      // closed e.Second-R as range 32
      //DEBUG: s.First-Dig: 25
      //DEBUG: e.First-L: 26
      //DEBUG: e.First-R: 28
      //DEBUG: e.Second-L: 30
      //DEBUG: s.Second-Dig: 34
      //DEBUG: e.Second-R: 32

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.First-Dig/25 {REMOVED TILE} {REMOVED TILE} s.Second-Dig/34 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Compare-Align/4 AsIs: (/7 AsIs: (/11 AsIs: e.First-L/26 HalfReuse: s.First-Dig25 /12 } )/35 Tile{ AsIs: e.First-R/28 } Tile{ AsIs: )/8 AsIs: (/15 AsIs: e.Second-L/30 HalfReuse: s.Second-Dig34 /16 } )/36 Tile{ AsIs: e.Second-R/32 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[35]);
      refalrts::alloc_close_bracket(vm, context[36]);
      refalrts::reinit_svar( context[12], context[25] );
      refalrts::reinit_svar( context[16], context[34] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[15], context[36] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[11], context[35] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_elem( res, context[36] );
      res = refalrts::splice_evar( res, context[8], context[16] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_elem( res, context[35] );
      refalrts::splice_to_freelist_open( vm, context[12], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Compare-Align/4 (/7 (/11 e.First-L/26 )/12 s.First-Dig/25 e.First-R/28 )/8 (/15 e.Second-L/30 )/16 >/1
    context[26] = context[17];
    context[27] = context[18];
    context[28] = context[19];
    context[29] = context[20];
    context[30] = context[21];
    context[31] = context[22];
    if( ! refalrts::empty_seq( context[23], context[24] ) )
      continue;
    // closed e.First-L as range 26
    // closed e.First-R as range 28
    // closed e.Second-L as range 30
    //DEBUG: s.First-Dig: 25
    //DEBUG: e.First-L: 26
    //DEBUG: e.First-R: 28
    //DEBUG: e.Second-L: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Compare-Align/4 (/7 (/11 e.First-L/26 )/12 s.First-Dig/25 e.First-R/28 )/8 (/15 e.Second-L/30 )/16 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '+'/1 ]] }
    refalrts::reinit_char(context[1], '+');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Compare-Align/4 (/7 (/11 e.new7/9 )/12 )/8 (/15 e.new6/13 )/16 e.new5/2 >/1
  if( ! refalrts::empty_seq( context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new7 as range 9
  // closed e.new6 as range 13
  // closed e.new5 as range 2
  do {
    // </0 & Compare-Align/4 (/7 (/11 e.First-L/17 )/12 )/8 (/15 e.Second-L/19 )/16 s.Second-Dig/23 e.Second-R/21 >/1
    context[17] = context[9];
    context[18] = context[10];
    context[19] = context[13];
    context[20] = context[14];
    context[21] = context[2];
    context[22] = context[3];
    // closed e.First-L as range 17
    // closed e.Second-L as range 19
    if( ! refalrts::svar_left( context[23], context[21], context[22] ) )
      continue;
    // closed e.Second-R as range 21
    //DEBUG: e.First-L: 17
    //DEBUG: e.Second-L: 19
    //DEBUG: s.Second-Dig: 23
    //DEBUG: e.Second-R: 21

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Compare-Align/4 (/7 (/11 e.First-L/17 )/12 )/8 (/15 e.Second-L/19 )/16 s.Second-Dig/23 e.Second-R/21 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '-'/1 ]] }
    refalrts::reinit_char(context[1], '-');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Compare-Align/4 (/7 (/11 s.First-Dig/17 e.First/9 )/12 )/8 (/15 s.Second-Dig/18 e.Second/13 )/16 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[17], context[9], context[10] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.First as range 9
  if( ! refalrts::svar_left( context[18], context[13], context[14] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Second as range 13
  //DEBUG: s.First-Dig: 17
  //DEBUG: e.First: 9
  //DEBUG: s.Second-Dig: 18
  //DEBUG: e.Second: 13

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Second-Dig/18 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Compare-ByDigits/4 HalfReuse: </7 HalfReuse: & Compare-Digits/11 AsIs: s.First-Dig/17 } Tile{ HalfReuse: s.Second-Dig18 /12 HalfReuse: >/8 AsIs: (/15 } Tile{ AsIs: e.First/9 } Tile{ AsIs: )/16 } Tile{ AsIs: e.Second/13 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Comparem_ByDigits]);
  refalrts::reinit_open_call(context[7]);
  refalrts::reinit_name(context[11], functions[efunc_Comparem_Digits]);
  refalrts::reinit_svar( context[12], context[18] );
  refalrts::reinit_close_call(context[8]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[12], context[15] );
  refalrts::splice_to_freelist_open( vm, context[17], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Comparem_Align("Compare-Align", COOKIE1_, COOKIE2_, func_Comparem_Align);


static refalrts::FnResult func_Comparem_ByDigits(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & Compare-ByDigits/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Compare-ByDigits/4 s.new1/5 (/8 e.new2/6 )/9 e.new3/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new2 as range 6
  // closed e.new3 as range 2
  do {
    // </0 & Compare-ByDigits/4 '0'/5 (/8 e.new5/10 )/9 e.new4/12 >/1
    context[10] = context[6];
    context[11] = context[7];
    context[12] = context[2];
    context[13] = context[3];
    if( ! refalrts::char_term( '0', context[5] ) )
      continue;
    // closed e.new5 as range 10
    // closed e.new4 as range 12
    do {
      // </0 & Compare-ByDigits/4 '0'/5 (/8 s.First-Dig/18 e.First/14 )/9 s.Second-Dig/19 e.Second/16 >/1
      context[14] = context[10];
      context[15] = context[11];
      context[16] = context[12];
      context[17] = context[13];
      if( ! refalrts::svar_left( context[18], context[14], context[15] ) )
        continue;
      // closed e.First as range 14
      if( ! refalrts::svar_left( context[19], context[16], context[17] ) )
        continue;
      // closed e.Second as range 16
      //DEBUG: s.First-Dig: 18
      //DEBUG: e.First: 14
      //DEBUG: s.Second-Dig: 19
      //DEBUG: e.Second: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Compare-ByDigits/4 HalfReuse: </5 HalfReuse: & Compare-Digits/8 AsIs: s.First-Dig/18 } Tile{ AsIs: s.Second-Dig/19 } >/20 (/21 Tile{ AsIs: e.First/14 } Tile{ AsIs: )/9 } Tile{ AsIs: e.Second/16 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_bracket(vm, context[21]);
      refalrts::reinit_open_call(context[5]);
      refalrts::reinit_name(context[8], functions[efunc_Comparem_Digits]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[21], context[9] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[5] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_elem( res, context[19] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Compare-ByDigits/4 '0'/5 (/8 )/9 >/1
    if( ! refalrts::empty_seq( context[10], context[11] ) )
      continue;
    if( ! refalrts::empty_seq( context[12], context[13] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Compare-ByDigits/4 '0'/5 (/8 )/9 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '0'/1 ]] }
    refalrts::reinit_char(context[1], '0');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Compare-ByDigits/4 s.Compare-Res/5 (/8 e.First/6 )/9 e.Second/2 >/1
  // closed e.First as range 6
  // closed e.Second as range 2
  //DEBUG: s.Compare-Res: 5
  //DEBUG: e.First: 6
  //DEBUG: e.Second: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Compare-ByDigits/4 s.Compare-Res/5 (/8 e.First/6 )/9 e.Second/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: s.Compare-Res5 /1 ]] }
  refalrts::reinit_svar( context[1], context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Comparem_ByDigits("Compare-ByDigits", COOKIE1_, COOKIE2_, func_Comparem_ByDigits);


static refalrts::FnResult func_Comparem_Digits(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 2800 "Library.ref"
  ARITHM_PRELUDE

  char res = first < second ? '-' : first > second ? '+' : '0';

  refalrts::reinit_char(arg_begin, res);
  refalrts::splice_to_freelist(vm, pFunc, arg_end);
  return refalrts::cSuccess;
#line 34016 "Library.cpp"
}

static refalrts::NativeReference nat_ref_Comparem_Digits("Compare-Digits", COOKIE1_, COOKIE2_, func_Comparem_Digits);


static refalrts::FnResult func_DeSysfun(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & DeSysfun/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DeSysfun/4 e.new1/2 (/7 s.new2/9 e.new3/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 2
  if( ! refalrts::svar_left( context[9], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 5
  do {
    // </0 & DeSysfun/4 s.FileNameChar/14 e./10 (/7 s.Width/9 e.ObjectExpression/12 )/8 >/1
    context[10] = context[2];
    context[11] = context[3];
    context[12] = context[5];
    context[13] = context[6];
    // closed e.ObjectExpression as range 12
    if( ! refalrts::svar_left( context[14], context[10], context[11] ) )
      continue;
    // closed e. as range 10
    //DEBUG: s.Width: 9
    //DEBUG: e.ObjectExpression: 12
    //DEBUG: s.FileNameChar: 14
    //DEBUG: e.: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Step-Start/4 } >/15 </16 & Xxout-Wrap/17 </18 & Open-Auto=1@1/19 Tile{ AsIs: s.FileNameChar/14 } (/20 Tile{ AsIs: e./10 } )/21 </22 & GetFreeHandle/23 >/24 Tile{ HalfReuse: >/7 AsIs: s.Width/9 } </25 & Xxout-Scan/26 </27 & Type/28 Tile{ AsIs: e.ObjectExpression/12 } >/29 >/30 >/31 </32 Tile{ HalfReuse: & __Step-End/8 AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[15]);
    refalrts::alloc_open_call(vm, context[16]);
    refalrts::alloc_name(vm, context[17], functions[efunc_Xxoutm_Wrap]);
    refalrts::alloc_open_call(vm, context[18]);
    refalrts::alloc_name(vm, context[19], functions[efunc_gen_Openm_Auto_A1Z1]);
    refalrts::alloc_open_bracket(vm, context[20]);
    refalrts::alloc_close_bracket(vm, context[21]);
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_name(vm, context[23], functions[efunc_GetFreeHandle]);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::alloc_open_call(vm, context[25]);
    refalrts::alloc_name(vm, context[26], functions[efunc_Xxoutm_Scan]);
    refalrts::alloc_open_call(vm, context[27]);
    refalrts::alloc_name(vm, context[28], functions[efunc_Type]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::alloc_close_call(vm, context[30]);
    refalrts::alloc_close_call(vm, context[31]);
    refalrts::alloc_open_call(vm, context[32]);
    refalrts::update_name(context[4], functions[efunc_u_u_Stepm_Start]);
    refalrts::reinit_close_call(context[7]);
    refalrts::reinit_name(context[8], functions[efunc_u_u_Stepm_End]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[32] );
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[30] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[7] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[22] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[29], context[32] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_evar( res, context[25], context[28] );
    res = refalrts::splice_evar( res, context[7], context[9] );
    res = refalrts::splice_evar( res, context[21], context[24] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[15], context[19] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DeSysfun/4 e.FileName/2 (/7 s.Width/9 e.ObjectExpression/5 )/8 >/1
  // closed e.FileName as range 2
  // closed e.ObjectExpression as range 5
  //DEBUG: s.Width: 9
  //DEBUG: e.FileName: 2
  //DEBUG: e.ObjectExpression: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </10 & __Step-Start/11 >/12 </13 & Xxout-Wrap/14 </15 Tile{ HalfReuse: & Open-Auto*1/0 HalfReuse: 'w'/4 AsIs: e.FileName/2 HalfReuse: >/7 AsIs: s.Width/9 } </16 & Xxout-Scan/17 </18 & Type/19 Tile{ AsIs: e.ObjectExpression/5 } >/20 >/21 >/22 </23 Tile{ HalfReuse: & __Step-End/8 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[10]);
  refalrts::alloc_name(vm, context[11], functions[efunc_u_u_Stepm_Start]);
  refalrts::alloc_close_call(vm, context[12]);
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_Xxoutm_Wrap]);
  refalrts::alloc_open_call(vm, context[15]);
  refalrts::alloc_open_call(vm, context[16]);
  refalrts::alloc_name(vm, context[17], functions[efunc_Xxoutm_Scan]);
  refalrts::alloc_open_call(vm, context[18]);
  refalrts::alloc_name(vm, context[19], functions[efunc_Type]);
  refalrts::alloc_close_call(vm, context[20]);
  refalrts::alloc_close_call(vm, context[21]);
  refalrts::alloc_close_call(vm, context[22]);
  refalrts::alloc_open_call(vm, context[23]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Openm_Auto_D1]);
  refalrts::reinit_char(context[4], 'w');
  refalrts::reinit_close_call(context[7]);
  refalrts::reinit_name(context[8], functions[efunc_u_u_Stepm_End]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[23] );
  refalrts::push_stack( vm, context[22] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[21] );
  refalrts::push_stack( vm, context[16] );
  refalrts::push_stack( vm, context[20] );
  refalrts::push_stack( vm, context[18] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[20], context[23] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[16], context[19] );
  res = refalrts::splice_evar( res, context[0], context[9] );
  res = refalrts::splice_evar( res, context[10], context[15] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DeSysfun("DeSysfun", 0U, 0U, func_DeSysfun);

#line 2835 "Library.ref"
namespace {

class RndGen {
  /*
    See D. E. Knuth, The Art of Computer Programming,
    Volume 2, chapter 3.2.2, program A
  */
public:
  typedef refalrts::RefalNumber UInt;

  enum {
    cMaxVal = ~(UInt(0)),
    cMinDelay = 24,
    cMaxDelay = 55,
  };

  RndGen();

  UInt next_value() {
    m_y[m_k] = m_y[m_k] + m_y[m_j];
    UInt result = m_y[m_k];
    m_k = (m_k + cMaxDelay - 1) % cMaxDelay;
    m_j = (m_j + cMaxDelay - 1) % cMaxDelay;
    return result;
  }

  UInt next_in_range(UInt max);

private:
  /*
    Variable names from Knuth.
  */
  int m_k;
  int m_j;
  UInt m_y[cMaxDelay];
};

RndGen::RndGen()
  : m_k(cMaxDelay - 1), m_j(cMinDelay - 1)
{
  UInt seed = static_cast<UInt>(time(NULL));

  for (size_t i = 0; i < cMaxDelay; ++i) {
    seed = seed * 1103515245 + 12345;
    m_y[i] = seed;
  }
}

RndGen::UInt RndGen::next_in_range(RndGen::UInt max) {
  if (0 == max) {
    return 0;
  } else if (cMaxVal == max) {
    return next_value();
  } else {
    ++max;

    const UInt cBucketSize = cMaxVal / max;
    const UInt cInvalid = cBucketSize * max;
    UInt val;

    do {
      val = next_value();
    } while(val > cInvalid);

    return val / cBucketSize;
  }
}

refalrts::GlobalRef<RndGen*> g_gen;

bool positive_digit_arg(
  refalrts::Iter& pfunc_name, refalrts::RefalNumber& value,
  refalrts::Iter arg_begin, refalrts::Iter arg_end
) {
  refalrts::Iter content_b = 0, content_e = 0;
  pfunc_name = refalrts::call_left(content_b, content_e, arg_begin, arg_end);

  // don't check return value
  refalrts::char_left('+', content_b, content_e);

  refalrts::Iter pnumber = 0;
  if (
    refalrts::svar_left(pnumber, content_b, content_e)
    && refalrts::empty_seq(content_b, content_e)
    && refalrts::cDataNumber == pnumber->tag
  ) {
    value = pnumber->number_info;
    return true;
  } else {
    return false;
  }
}

}  // unnamed namespace
#line 34269 "Library.cpp"

static refalrts::FnResult func_Random(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 2933 "Library.ref"
  refalrts::Iter pfunc_name = 0;
  refalrts::RefalNumber max = 0;

  if (! positive_digit_arg(pfunc_name, max, arg_begin, arg_end)) {
    return refalrts::cRecognitionImpossible;
  }

  max = g_gen.ref(vm)->next_in_range(max);

  if (0 == max) {
    max = 1;
  }

  refalrts::reset_allocator(vm);
  bool zero = true;
  for (size_t i = 0; i < static_cast<size_t>(max); ++i) {
    refalrts::RefalNumber digit = g_gen.ref(vm)->next_value();
    if (digit != 0 || ! zero) {
      zero = false;

      refalrts::Iter dummy = 0;
      refalrts::alloc_number(vm, dummy, digit);
    }
  }

  if (zero) {
    refalrts::Iter dummy = 0;
    refalrts::alloc_number(vm, dummy, 0);
  }

  refalrts::splice_from_freelist(vm, arg_begin);
  refalrts::splice_to_freelist(vm, arg_begin, arg_end);

  return refalrts::cSuccess;
#line 34311 "Library.cpp"
}

static refalrts::NativeReference nat_ref_Random("Random", 0U, 0U, func_Random);


static refalrts::FnResult func_RandomDigit(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 2978 "Library.ref"
  refalrts::Iter pfunc_name = 0;
  refalrts::RefalNumber max = 0;

  if (! positive_digit_arg(pfunc_name, max, arg_begin, arg_end)) {
    return refalrts::cRecognitionImpossible;
  }

  refalrts::RefalNumber digit = g_gen.ref(vm)->next_in_range(max);

  refalrts::reinit_number(arg_begin, digit);
  refalrts::splice_to_freelist(vm, pfunc_name, arg_end);

  return refalrts::cSuccess;
#line 34336 "Library.cpp"
}

static refalrts::NativeReference nat_ref_RandomDigit("RandomDigit", 0U, 0U, func_RandomDigit);


static refalrts::FnResult func_Write(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & Write/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Write/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Write/4 0/5 e.AnyExpression/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::number_term( 0UL, context[5] ) )
      continue;
    // closed e.AnyExpression as range 6
    //DEBUG: e.AnyExpression: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </8 & __Step-Start/9 >/10 </11 & Autoopen/12 'w'/13 0/14 >/15 Tile{ AsIs: </0 Reuse: & Write-Aux/4 HalfReuse: # stderr/5 AsIs: e.AnyExpression/6 AsIs: >/1 } </16 & __Step-End/17 >/18 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[8]);
    refalrts::alloc_name(vm, context[9], functions[efunc_u_u_Stepm_Start]);
    refalrts::alloc_close_call(vm, context[10]);
    refalrts::alloc_open_call(vm, context[11]);
    refalrts::alloc_name(vm, context[12], functions[efunc_Autoopen]);
    refalrts::alloc_char(vm, context[13], 'w');
    refalrts::alloc_number(vm, context[14], 0UL);
    refalrts::alloc_close_call(vm, context[15]);
    refalrts::alloc_open_call(vm, context[16]);
    refalrts::alloc_name(vm, context[17], functions[efunc_u_u_Stepm_End]);
    refalrts::alloc_close_call(vm, context[18]);
    refalrts::update_name(context[4], functions[efunc_Writem_Aux]);
    refalrts::reinit_ident(context[5], identifiers[ident_stderr]);
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[16], context[18] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[8], context[15] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Write/4 s.FileNo/5 e.AnyExpression/2 >/1
  // closed e.AnyExpression as range 2
  //DEBUG: s.FileNo: 5
  //DEBUG: e.AnyExpression: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </6 & __Step-Start/7 >/8 </9 & Autoopen/10 'w'/11 s.FileNo/5/12 >/13 Tile{ AsIs: </0 Reuse: & Write-Aux/4 AsIs: s.FileNo/5 AsIs: e.AnyExpression/2 AsIs: >/1 } </14 & __Step-End/15 >/16 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_u_u_Stepm_Start]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_Autoopen]);
  refalrts::alloc_char(vm, context[11], 'w');
  refalrts::copy_stvar(vm, context[12], context[5]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::alloc_open_call(vm, context[14]);
  refalrts::alloc_name(vm, context[15], functions[efunc_u_u_Stepm_End]);
  refalrts::alloc_close_call(vm, context[16]);
  refalrts::update_name(context[4], functions[efunc_Writem_Aux]);
  refalrts::push_stack( vm, context[16] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[14], context[16] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[6], context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Write("Write", 0U, 0U, func_Write);


static refalrts::FnResult func_Writem_Aux(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 3008 "Library.ref"
  return cookie_ns::fwrite_line(
    vm, identifiers, arg_begin, arg_end, cookie_ns::cFlags_NoEOL
  );
#line 34456 "Library.cpp"
}

static refalrts::NativeReference nat_ref_Writem_Aux("Write-Aux", COOKIE1_, COOKIE2_, func_Writem_Aux);


static refalrts::FnResult func_ListOfBuiltin(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 307 elems
  refalrts::Iter context[307];
  refalrts::zeros( context, 307 );
  // </0 & ListOfBuiltin/4 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 1/4 HalfReuse: # Mu/1 } # special/5 )/6 (/7 2/8 # Add/9 # regular/10 )/11 (/12 3/13 # Arg/14 # regular/15 )/16 (/17 4/18 # Br/19 # regular/20 )/21 (/22 5/23 # Card/24 # regular/25 )/26 (/27 6/28 # Chr/29 # regular/30 )/31 (/32 7/33 # Cp/34 # regular/35 )/36 (/37 8/38 # Dg/39 # regular/40 )/41 (/42 9/43 # Dgall/44 # regular/45 )/46 (/47 10/48 # Div/49 # regular/50 )/51 (/52 11/53 # Divmod/54 # regular/55 )/56 (/57 12/58 # Explode/59 # regular/60 )/61 (/62 13/63 # First/64 # regular/65 )/66 (/67 14/68 # Get/69 # regular/70 )/71 (/72 15/73 # Implode/74 # regular/75 )/76 (/77 16/78 # Last/79 # regular/80 )/81 (/82 17/83 # Lenw/84 # regular/85 )/86 (/87 18/88 # Lower/89 # regular/90 )/91 (/92 19/93 # Mod/94 # regular/95 )/96 (/97 20/98 # Mul/99 # regular/100 )/101 (/102 21/103 # Numb/104 # regular/105 )/106 (/107 22/108 # Open/109 # regular/110 )/111 (/112 23/113 # Ord/114 # regular/115 )/116 (/117 24/118 # Print/119 # regular/120 )/121 (/122 25/123 # Prout/124 # regular/125 )/126 (/127 26/128 # Put/129 # regular/130 )/131 (/132 27/133 # Putout/134 # regular/135 )/136 (/137 28/138 # Rp/139 # regular/140 )/141 (/142 29/143 # Step/144 # regular/145 )/146 (/147 30/148 # Sub/149 # regular/150 )/151 (/152 31/153 # Symb/154 # regular/155 )/156 (/157 32/158 # Time/159 # regular/160 )/161 (/162 33/163 # Type/164 # regular/165 )/166 (/167 34/168 # Upper/169 # regular/170 )/171 (/172 35/173 # Sysfun/174 # regular/175 )/176 (/177 45/178 # Freeze/179 # regular/180 )/181 (/182 46/183 # Freezer/184 # regular/185 )/186 (/187 47/188 # Dn/189 # regular/190 )/191 (/192 48/193 # Up/194 # special/195 )/196 (/197 49/198 # Ev-met/199 # special/200 )/201 (/202 50/203 # Residue/204 # special/205 )/206 (/207 51/208 # GetEnv/209 # regular/210 )/211 (/212 52/213 # System/214 # regular/215 )/216 (/217 53/218 # Exit/219 # regular/220 )/221 (/222 54/223 # Close/224 # regular/225 )/226 (/227 55/228 # ExistFile/229 # regular/230 )/231 (/232 56/233 # GetCurrentDirectory/234 # regular/235 )/236 (/237 57/238 # RemoveFile/239 # regular/240 )/241 (/242 58/243 # Implode_Ext/244 # regular/245 )/246 (/247 59/248 # Explode_Ext/249 # regular/250 )/251 (/252 60/253 # TimeElapsed/254 # regular/255 )/256 (/257 61/258 # Compare/259 # regular/260 )/261 (/262 62/263 # DeSysfun/264 # regular/265 )/266 (/267 63/268 # XMLParse/269 # regular/270 )/271 (/272 64/273 # Random/274 # regular/275 )/276 (/277 65/278 # RandomDigit/279 # regular/280 )/281 (/282 66/283 # Write/284 # regular/285 )/286 (/287 67/288 # ListOfBuiltin/289 # regular/290 )/291 (/292 68/293 # SizeOf/294 # regular/295 )/296 (/297 69/298 # GetPID/299 # regular/300 )/301 (/302 71/303 # GetPPID/304 # regular/305 )/306 Tile{ ]] }
  refalrts::alloc_ident(vm, context[5], identifiers[ident_special]);
  refalrts::alloc_close_bracket(vm, context[6]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_number(vm, context[8], 2UL);
  refalrts::alloc_ident(vm, context[9], identifiers[ident_Add]);
  refalrts::alloc_ident(vm, context[10], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[11]);
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_number(vm, context[13], 3UL);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_Arg]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_number(vm, context[18], 4UL);
  refalrts::alloc_ident(vm, context[19], identifiers[ident_Br]);
  refalrts::alloc_ident(vm, context[20], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[21]);
  refalrts::alloc_open_bracket(vm, context[22]);
  refalrts::alloc_number(vm, context[23], 5UL);
  refalrts::alloc_ident(vm, context[24], identifiers[ident_Card]);
  refalrts::alloc_ident(vm, context[25], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[26]);
  refalrts::alloc_open_bracket(vm, context[27]);
  refalrts::alloc_number(vm, context[28], 6UL);
  refalrts::alloc_ident(vm, context[29], identifiers[ident_Chr]);
  refalrts::alloc_ident(vm, context[30], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[31]);
  refalrts::alloc_open_bracket(vm, context[32]);
  refalrts::alloc_number(vm, context[33], 7UL);
  refalrts::alloc_ident(vm, context[34], identifiers[ident_Cp]);
  refalrts::alloc_ident(vm, context[35], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[36]);
  refalrts::alloc_open_bracket(vm, context[37]);
  refalrts::alloc_number(vm, context[38], 8UL);
  refalrts::alloc_ident(vm, context[39], identifiers[ident_Dg]);
  refalrts::alloc_ident(vm, context[40], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[41]);
  refalrts::alloc_open_bracket(vm, context[42]);
  refalrts::alloc_number(vm, context[43], 9UL);
  refalrts::alloc_ident(vm, context[44], identifiers[ident_Dgall]);
  refalrts::alloc_ident(vm, context[45], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[46]);
  refalrts::alloc_open_bracket(vm, context[47]);
  refalrts::alloc_number(vm, context[48], 10UL);
  refalrts::alloc_ident(vm, context[49], identifiers[ident_Div]);
  refalrts::alloc_ident(vm, context[50], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[51]);
  refalrts::alloc_open_bracket(vm, context[52]);
  refalrts::alloc_number(vm, context[53], 11UL);
  refalrts::alloc_ident(vm, context[54], identifiers[ident_Divmod]);
  refalrts::alloc_ident(vm, context[55], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[56]);
  refalrts::alloc_open_bracket(vm, context[57]);
  refalrts::alloc_number(vm, context[58], 12UL);
  refalrts::alloc_ident(vm, context[59], identifiers[ident_Explode]);
  refalrts::alloc_ident(vm, context[60], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[61]);
  refalrts::alloc_open_bracket(vm, context[62]);
  refalrts::alloc_number(vm, context[63], 13UL);
  refalrts::alloc_ident(vm, context[64], identifiers[ident_First]);
  refalrts::alloc_ident(vm, context[65], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[66]);
  refalrts::alloc_open_bracket(vm, context[67]);
  refalrts::alloc_number(vm, context[68], 14UL);
  refalrts::alloc_ident(vm, context[69], identifiers[ident_Get]);
  refalrts::alloc_ident(vm, context[70], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[71]);
  refalrts::alloc_open_bracket(vm, context[72]);
  refalrts::alloc_number(vm, context[73], 15UL);
  refalrts::alloc_ident(vm, context[74], identifiers[ident_Implode]);
  refalrts::alloc_ident(vm, context[75], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[76]);
  refalrts::alloc_open_bracket(vm, context[77]);
  refalrts::alloc_number(vm, context[78], 16UL);
  refalrts::alloc_ident(vm, context[79], identifiers[ident_Last]);
  refalrts::alloc_ident(vm, context[80], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[81]);
  refalrts::alloc_open_bracket(vm, context[82]);
  refalrts::alloc_number(vm, context[83], 17UL);
  refalrts::alloc_ident(vm, context[84], identifiers[ident_Lenw]);
  refalrts::alloc_ident(vm, context[85], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[86]);
  refalrts::alloc_open_bracket(vm, context[87]);
  refalrts::alloc_number(vm, context[88], 18UL);
  refalrts::alloc_ident(vm, context[89], identifiers[ident_Lower]);
  refalrts::alloc_ident(vm, context[90], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[91]);
  refalrts::alloc_open_bracket(vm, context[92]);
  refalrts::alloc_number(vm, context[93], 19UL);
  refalrts::alloc_ident(vm, context[94], identifiers[ident_Mod]);
  refalrts::alloc_ident(vm, context[95], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[96]);
  refalrts::alloc_open_bracket(vm, context[97]);
  refalrts::alloc_number(vm, context[98], 20UL);
  refalrts::alloc_ident(vm, context[99], identifiers[ident_Mul]);
  refalrts::alloc_ident(vm, context[100], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[101]);
  refalrts::alloc_open_bracket(vm, context[102]);
  refalrts::alloc_number(vm, context[103], 21UL);
  refalrts::alloc_ident(vm, context[104], identifiers[ident_Numb]);
  refalrts::alloc_ident(vm, context[105], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[106]);
  refalrts::alloc_open_bracket(vm, context[107]);
  refalrts::alloc_number(vm, context[108], 22UL);
  refalrts::alloc_ident(vm, context[109], identifiers[ident_Open]);
  refalrts::alloc_ident(vm, context[110], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[111]);
  refalrts::alloc_open_bracket(vm, context[112]);
  refalrts::alloc_number(vm, context[113], 23UL);
  refalrts::alloc_ident(vm, context[114], identifiers[ident_Ord]);
  refalrts::alloc_ident(vm, context[115], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[116]);
  refalrts::alloc_open_bracket(vm, context[117]);
  refalrts::alloc_number(vm, context[118], 24UL);
  refalrts::alloc_ident(vm, context[119], identifiers[ident_Print]);
  refalrts::alloc_ident(vm, context[120], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[121]);
  refalrts::alloc_open_bracket(vm, context[122]);
  refalrts::alloc_number(vm, context[123], 25UL);
  refalrts::alloc_ident(vm, context[124], identifiers[ident_Prout]);
  refalrts::alloc_ident(vm, context[125], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[126]);
  refalrts::alloc_open_bracket(vm, context[127]);
  refalrts::alloc_number(vm, context[128], 26UL);
  refalrts::alloc_ident(vm, context[129], identifiers[ident_Put]);
  refalrts::alloc_ident(vm, context[130], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[131]);
  refalrts::alloc_open_bracket(vm, context[132]);
  refalrts::alloc_number(vm, context[133], 27UL);
  refalrts::alloc_ident(vm, context[134], identifiers[ident_Putout]);
  refalrts::alloc_ident(vm, context[135], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[136]);
  refalrts::alloc_open_bracket(vm, context[137]);
  refalrts::alloc_number(vm, context[138], 28UL);
  refalrts::alloc_ident(vm, context[139], identifiers[ident_Rp]);
  refalrts::alloc_ident(vm, context[140], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[141]);
  refalrts::alloc_open_bracket(vm, context[142]);
  refalrts::alloc_number(vm, context[143], 29UL);
  refalrts::alloc_ident(vm, context[144], identifiers[ident_Step]);
  refalrts::alloc_ident(vm, context[145], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[146]);
  refalrts::alloc_open_bracket(vm, context[147]);
  refalrts::alloc_number(vm, context[148], 30UL);
  refalrts::alloc_ident(vm, context[149], identifiers[ident_Sub]);
  refalrts::alloc_ident(vm, context[150], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[151]);
  refalrts::alloc_open_bracket(vm, context[152]);
  refalrts::alloc_number(vm, context[153], 31UL);
  refalrts::alloc_ident(vm, context[154], identifiers[ident_Symb]);
  refalrts::alloc_ident(vm, context[155], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[156]);
  refalrts::alloc_open_bracket(vm, context[157]);
  refalrts::alloc_number(vm, context[158], 32UL);
  refalrts::alloc_ident(vm, context[159], identifiers[ident_Time]);
  refalrts::alloc_ident(vm, context[160], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[161]);
  refalrts::alloc_open_bracket(vm, context[162]);
  refalrts::alloc_number(vm, context[163], 33UL);
  refalrts::alloc_ident(vm, context[164], identifiers[ident_Type]);
  refalrts::alloc_ident(vm, context[165], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[166]);
  refalrts::alloc_open_bracket(vm, context[167]);
  refalrts::alloc_number(vm, context[168], 34UL);
  refalrts::alloc_ident(vm, context[169], identifiers[ident_Upper]);
  refalrts::alloc_ident(vm, context[170], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[171]);
  refalrts::alloc_open_bracket(vm, context[172]);
  refalrts::alloc_number(vm, context[173], 35UL);
  refalrts::alloc_ident(vm, context[174], identifiers[ident_Sysfun]);
  refalrts::alloc_ident(vm, context[175], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[176]);
  refalrts::alloc_open_bracket(vm, context[177]);
  refalrts::alloc_number(vm, context[178], 45UL);
  refalrts::alloc_ident(vm, context[179], identifiers[ident_Freeze]);
  refalrts::alloc_ident(vm, context[180], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[181]);
  refalrts::alloc_open_bracket(vm, context[182]);
  refalrts::alloc_number(vm, context[183], 46UL);
  refalrts::alloc_ident(vm, context[184], identifiers[ident_Freezer]);
  refalrts::alloc_ident(vm, context[185], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[186]);
  refalrts::alloc_open_bracket(vm, context[187]);
  refalrts::alloc_number(vm, context[188], 47UL);
  refalrts::alloc_ident(vm, context[189], identifiers[ident_Dn]);
  refalrts::alloc_ident(vm, context[190], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[191]);
  refalrts::alloc_open_bracket(vm, context[192]);
  refalrts::alloc_number(vm, context[193], 48UL);
  refalrts::alloc_ident(vm, context[194], identifiers[ident_Up]);
  refalrts::alloc_ident(vm, context[195], identifiers[ident_special]);
  refalrts::alloc_close_bracket(vm, context[196]);
  refalrts::alloc_open_bracket(vm, context[197]);
  refalrts::alloc_number(vm, context[198], 49UL);
  refalrts::alloc_ident(vm, context[199], identifiers[ident_Evm_met]);
  refalrts::alloc_ident(vm, context[200], identifiers[ident_special]);
  refalrts::alloc_close_bracket(vm, context[201]);
  refalrts::alloc_open_bracket(vm, context[202]);
  refalrts::alloc_number(vm, context[203], 50UL);
  refalrts::alloc_ident(vm, context[204], identifiers[ident_Residue]);
  refalrts::alloc_ident(vm, context[205], identifiers[ident_special]);
  refalrts::alloc_close_bracket(vm, context[206]);
  refalrts::alloc_open_bracket(vm, context[207]);
  refalrts::alloc_number(vm, context[208], 51UL);
  refalrts::alloc_ident(vm, context[209], identifiers[ident_GetEnv]);
  refalrts::alloc_ident(vm, context[210], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[211]);
  refalrts::alloc_open_bracket(vm, context[212]);
  refalrts::alloc_number(vm, context[213], 52UL);
  refalrts::alloc_ident(vm, context[214], identifiers[ident_System]);
  refalrts::alloc_ident(vm, context[215], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[216]);
  refalrts::alloc_open_bracket(vm, context[217]);
  refalrts::alloc_number(vm, context[218], 53UL);
  refalrts::alloc_ident(vm, context[219], identifiers[ident_Exit]);
  refalrts::alloc_ident(vm, context[220], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[221]);
  refalrts::alloc_open_bracket(vm, context[222]);
  refalrts::alloc_number(vm, context[223], 54UL);
  refalrts::alloc_ident(vm, context[224], identifiers[ident_Close]);
  refalrts::alloc_ident(vm, context[225], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[226]);
  refalrts::alloc_open_bracket(vm, context[227]);
  refalrts::alloc_number(vm, context[228], 55UL);
  refalrts::alloc_ident(vm, context[229], identifiers[ident_ExistFile]);
  refalrts::alloc_ident(vm, context[230], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[231]);
  refalrts::alloc_open_bracket(vm, context[232]);
  refalrts::alloc_number(vm, context[233], 56UL);
  refalrts::alloc_ident(vm, context[234], identifiers[ident_GetCurrentDirectory]);
  refalrts::alloc_ident(vm, context[235], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[236]);
  refalrts::alloc_open_bracket(vm, context[237]);
  refalrts::alloc_number(vm, context[238], 57UL);
  refalrts::alloc_ident(vm, context[239], identifiers[ident_RemoveFile]);
  refalrts::alloc_ident(vm, context[240], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[241]);
  refalrts::alloc_open_bracket(vm, context[242]);
  refalrts::alloc_number(vm, context[243], 58UL);
  refalrts::alloc_ident(vm, context[244], identifiers[ident_Implodeu_Ext]);
  refalrts::alloc_ident(vm, context[245], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[246]);
  refalrts::alloc_open_bracket(vm, context[247]);
  refalrts::alloc_number(vm, context[248], 59UL);
  refalrts::alloc_ident(vm, context[249], identifiers[ident_Explodeu_Ext]);
  refalrts::alloc_ident(vm, context[250], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[251]);
  refalrts::alloc_open_bracket(vm, context[252]);
  refalrts::alloc_number(vm, context[253], 60UL);
  refalrts::alloc_ident(vm, context[254], identifiers[ident_TimeElapsed]);
  refalrts::alloc_ident(vm, context[255], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[256]);
  refalrts::alloc_open_bracket(vm, context[257]);
  refalrts::alloc_number(vm, context[258], 61UL);
  refalrts::alloc_ident(vm, context[259], identifiers[ident_Compare]);
  refalrts::alloc_ident(vm, context[260], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[261]);
  refalrts::alloc_open_bracket(vm, context[262]);
  refalrts::alloc_number(vm, context[263], 62UL);
  refalrts::alloc_ident(vm, context[264], identifiers[ident_DeSysfun]);
  refalrts::alloc_ident(vm, context[265], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[266]);
  refalrts::alloc_open_bracket(vm, context[267]);
  refalrts::alloc_number(vm, context[268], 63UL);
  refalrts::alloc_ident(vm, context[269], identifiers[ident_XMLParse]);
  refalrts::alloc_ident(vm, context[270], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[271]);
  refalrts::alloc_open_bracket(vm, context[272]);
  refalrts::alloc_number(vm, context[273], 64UL);
  refalrts::alloc_ident(vm, context[274], identifiers[ident_Random]);
  refalrts::alloc_ident(vm, context[275], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[276]);
  refalrts::alloc_open_bracket(vm, context[277]);
  refalrts::alloc_number(vm, context[278], 65UL);
  refalrts::alloc_ident(vm, context[279], identifiers[ident_RandomDigit]);
  refalrts::alloc_ident(vm, context[280], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[281]);
  refalrts::alloc_open_bracket(vm, context[282]);
  refalrts::alloc_number(vm, context[283], 66UL);
  refalrts::alloc_ident(vm, context[284], identifiers[ident_Write]);
  refalrts::alloc_ident(vm, context[285], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[286]);
  refalrts::alloc_open_bracket(vm, context[287]);
  refalrts::alloc_number(vm, context[288], 67UL);
  refalrts::alloc_ident(vm, context[289], identifiers[ident_ListOfBuiltin]);
  refalrts::alloc_ident(vm, context[290], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[291]);
  refalrts::alloc_open_bracket(vm, context[292]);
  refalrts::alloc_number(vm, context[293], 68UL);
  refalrts::alloc_ident(vm, context[294], identifiers[ident_SizeOf]);
  refalrts::alloc_ident(vm, context[295], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[296]);
  refalrts::alloc_open_bracket(vm, context[297]);
  refalrts::alloc_number(vm, context[298], 69UL);
  refalrts::alloc_ident(vm, context[299], identifiers[ident_GetPID]);
  refalrts::alloc_ident(vm, context[300], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[301]);
  refalrts::alloc_open_bracket(vm, context[302]);
  refalrts::alloc_number(vm, context[303], 71UL);
  refalrts::alloc_ident(vm, context[304], identifiers[ident_GetPPID]);
  refalrts::alloc_ident(vm, context[305], identifiers[ident_regular]);
  refalrts::alloc_close_bracket(vm, context[306]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_number(context[4], 1UL);
  refalrts::reinit_ident(context[1], identifiers[ident_Mu]);
  refalrts::link_brackets( context[302], context[306] );
  refalrts::link_brackets( context[297], context[301] );
  refalrts::link_brackets( context[292], context[296] );
  refalrts::link_brackets( context[287], context[291] );
  refalrts::link_brackets( context[282], context[286] );
  refalrts::link_brackets( context[277], context[281] );
  refalrts::link_brackets( context[272], context[276] );
  refalrts::link_brackets( context[267], context[271] );
  refalrts::link_brackets( context[262], context[266] );
  refalrts::link_brackets( context[257], context[261] );
  refalrts::link_brackets( context[252], context[256] );
  refalrts::link_brackets( context[247], context[251] );
  refalrts::link_brackets( context[242], context[246] );
  refalrts::link_brackets( context[237], context[241] );
  refalrts::link_brackets( context[232], context[236] );
  refalrts::link_brackets( context[227], context[231] );
  refalrts::link_brackets( context[222], context[226] );
  refalrts::link_brackets( context[217], context[221] );
  refalrts::link_brackets( context[212], context[216] );
  refalrts::link_brackets( context[207], context[211] );
  refalrts::link_brackets( context[202], context[206] );
  refalrts::link_brackets( context[197], context[201] );
  refalrts::link_brackets( context[192], context[196] );
  refalrts::link_brackets( context[187], context[191] );
  refalrts::link_brackets( context[182], context[186] );
  refalrts::link_brackets( context[177], context[181] );
  refalrts::link_brackets( context[172], context[176] );
  refalrts::link_brackets( context[167], context[171] );
  refalrts::link_brackets( context[162], context[166] );
  refalrts::link_brackets( context[157], context[161] );
  refalrts::link_brackets( context[152], context[156] );
  refalrts::link_brackets( context[147], context[151] );
  refalrts::link_brackets( context[142], context[146] );
  refalrts::link_brackets( context[137], context[141] );
  refalrts::link_brackets( context[132], context[136] );
  refalrts::link_brackets( context[127], context[131] );
  refalrts::link_brackets( context[122], context[126] );
  refalrts::link_brackets( context[117], context[121] );
  refalrts::link_brackets( context[112], context[116] );
  refalrts::link_brackets( context[107], context[111] );
  refalrts::link_brackets( context[102], context[106] );
  refalrts::link_brackets( context[97], context[101] );
  refalrts::link_brackets( context[92], context[96] );
  refalrts::link_brackets( context[87], context[91] );
  refalrts::link_brackets( context[82], context[86] );
  refalrts::link_brackets( context[77], context[81] );
  refalrts::link_brackets( context[72], context[76] );
  refalrts::link_brackets( context[67], context[71] );
  refalrts::link_brackets( context[62], context[66] );
  refalrts::link_brackets( context[57], context[61] );
  refalrts::link_brackets( context[52], context[56] );
  refalrts::link_brackets( context[47], context[51] );
  refalrts::link_brackets( context[42], context[46] );
  refalrts::link_brackets( context[37], context[41] );
  refalrts::link_brackets( context[32], context[36] );
  refalrts::link_brackets( context[27], context[31] );
  refalrts::link_brackets( context[22], context[26] );
  refalrts::link_brackets( context[17], context[21] );
  refalrts::link_brackets( context[12], context[16] );
  refalrts::link_brackets( context[7], context[11] );
  refalrts::link_brackets( context[0], context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[306] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ListOfBuiltin("ListOfBuiltin", 0U, 0U, func_ListOfBuiltin);


static refalrts::FnResult func_SizeOf(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 3095 "Library.ref"
  refalrts::Iter content_b = 0, content_e = 0;
  refalrts::Iter pfunc_name =
    refalrts::call_left(content_b, content_e, arg_begin, arg_end);

  refalrts::Iter ptype = 0;
  if (
    ! refalrts::svar_left(ptype, content_b, content_e)
    || refalrts::cDataChar != ptype->tag
    || ! refalrts::empty_seq(content_b, content_e)
  ) {
    return refalrts::cRecognitionImpossible;
  }

  refalrts::RefalNumber result;

  switch (ptype->char_info) {
    case 'c': result = sizeof(char); break;
    case 's': result = sizeof(short); break;
    case 'i': result = sizeof(int); break;
    case 'l': result = sizeof(long); break;
    case 'p': result = sizeof(char *); break;

    default:
      return refalrts::cRecognitionImpossible;
  }

  refalrts::reinit_number(arg_begin, result);
  refalrts::splice_to_freelist(vm, pfunc_name, arg_end);
  return refalrts::cSuccess;
#line 34895 "Library.cpp"
}

static refalrts::NativeReference nat_ref_SizeOf("SizeOf", 0U, 0U, func_SizeOf);

#line 3132 "Library.ref"
namespace cookie_ns {

refalrts::FnResult return_pid(
  refalrts::VM *vm,
  refalrts::RefalNumber pid, refalrts::Iter arg_begin, refalrts::Iter arg_end
);

}  // namespace cookie_ns
#line 34909 "Library.cpp"

static refalrts::FnResult func_GetPID(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 3144 "Library.ref"
  return cookie_ns::return_pid(
    vm, refalrts::api::get_pid(), arg_begin, arg_end
  );
#line 34920 "Library.cpp"
}

static refalrts::NativeReference nat_ref_GetPID("GetPID", 0U, 0U, func_GetPID);

#line 3151 "Library.ref"
refalrts::FnResult cookie_ns::return_pid(
  refalrts::VM *vm,
  refalrts::RefalNumber pid, refalrts::Iter arg_begin, refalrts::Iter arg_end
) {
  refalrts::Iter content_b = 0, content_e = 0;
  refalrts::Iter pfunc_name =
    refalrts::call_left(content_b, content_e, arg_begin, arg_end);

  if (! refalrts::empty_seq(content_b, content_e)) {
    return refalrts::cRecognitionImpossible;
  }

  refalrts::reinit_number(arg_begin, pid);
  refalrts::splice_to_freelist(vm, pfunc_name, arg_end);
  return refalrts::cSuccess;
}
#line 34942 "Library.cpp"

static refalrts::FnResult func_GetPPID(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 3175 "Library.ref"
  return cookie_ns::return_pid(
    vm, refalrts::api::get_ppid(), arg_begin, arg_end
  );
#line 34953 "Library.cpp"
}

static refalrts::NativeReference nat_ref_GetPPID("GetPPID", 0U, 0U, func_GetPPID);


static refalrts::FnResult func_gen_Openm_Auto_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Open-Auto=1/4 t.Mode/5 s.FileNameChar/7 (/10 e.FileName/8 )/11 s.FreeHandle/12 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[8] = 0;
  context[9] = 0;
  context[10] = refalrts::brackets_left( context[8], context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[10], context[11]);
  // closed e.FileName as range 8
  if( ! refalrts::svar_left( context[12], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Mode: 5
  //DEBUG: s.FileNameChar: 7
  //DEBUG: e.FileName: 8
  //DEBUG: s.FreeHandle: 12

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.FileNameChar/7 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Open/4 AsIs: t.Mode/5 } Tile{ HalfReuse: s.FreeHandle12 /1 } Tile{ HalfReuse: s.FileNameChar7 /10 AsIs: e.FileName/8 HalfReuse: >/11 AsIs: s.FreeHandle/12 } Tile{ ]] }
  refalrts::update_name(context[4], functions[efunc_Open]);
  refalrts::reinit_svar( context[1], context[12] );
  refalrts::reinit_svar( context[10], context[7] );
  refalrts::reinit_close_call(context[11]);
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[10], context[12] );
  res = refalrts::splice_elem( res, context[1] );
  refalrts::splice_to_freelist_open( vm, context[6], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Openm_Auto_A1("Open-Auto=1", COOKIE1_, COOKIE2_, func_gen_Openm_Auto_A1);


static refalrts::FnResult func_Openm_Auto(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Open-Auto/4 t.Mode/5 s.FileNameChar/7 e.FileName/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.FileName as range 2
  //DEBUG: t.Mode: 5
  //DEBUG: s.FileNameChar: 7
  //DEBUG: e.FileName: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Open-Auto=1/4 AsIs: t.Mode/5 AsIs: s.FileNameChar/7 } (/8 Tile{ AsIs: e.FileName/2 } )/9 </10 & GetFreeHandle/11 >/12 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[8]);
  refalrts::alloc_close_bracket(vm, context[9]);
  refalrts::alloc_open_call(vm, context[10]);
  refalrts::alloc_name(vm, context[11], functions[efunc_GetFreeHandle]);
  refalrts::alloc_close_call(vm, context[12]);
  refalrts::update_name(context[4], functions[efunc_gen_Openm_Auto_A1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[10] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[9], context[12] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Openm_Auto("Open-Auto", 0U, 0U, func_Openm_Auto);


static refalrts::FnResult func_GetFreeHandle(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 3211 "Library.ref"
  refalrts::Iter content_b = 0;
  refalrts::Iter content_e = 0;
  refalrts::Iter pfunc_name =
    refalrts::call_left(content_b, content_e, arg_begin, arg_end);

  if (! refalrts::empty_seq(content_b, content_e)) {
    return refalrts::cRecognitionImpossible;
  }

  refalrts::RefalNumber free_file = 1;
  while (free_file < cMaxFileHandles && g_file_handles.ref(vm, free_file) != 0) {
    ++free_file;
  }

  if (free_file == cMaxFileHandles) {
    return refalrts::cRecognitionImpossible;
  }

  refalrts::reinit_number(arg_begin, free_file);
  refalrts::splice_to_freelist(vm, pfunc_name, arg_end);
  return refalrts::cSuccess;
#line 35095 "Library.cpp"
}

static refalrts::NativeReference nat_ref_GetFreeHandle("GetFreeHandle", COOKIE1_, COOKIE2_, func_GetFreeHandle);


static refalrts::FnResult func_Symbm_Digit(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 3243 "Library.ref"
  refalrts::Iter content_b = 0;
  refalrts::Iter content_e = 0;
  refalrts::Iter pfunc_name =
    refalrts::call_left(content_b, content_e, arg_begin, arg_end);

  refalrts::Iter number = 0;
  if (
    ! refalrts::svar_left(number, content_b, content_e)
    || ! refalrts::empty_seq(content_b, content_e)
    || refalrts::cDataNumber != number->tag
  ) {
    return refalrts::cRecognitionImpossible;
  }

  refalrts::reset_allocator(vm);
  refalrts::Iter begin_splice = arg_begin;

  if (refalrts::RefalNumber num = number->number_info) {
    // Длина десятичного числа = 0,3 * длина двоичного числа,
    // т.к. lg(2) = 0,3. Хрен с ним, что много. Главное, что не мало.
    enum { cMaxNumberLen = 8 * sizeof(refalrts::RefalNumber) * 3 / 10 + 2 };

    char buffer[cMaxNumberLen + 1] = { 0 };
    char *lim_digit = buffer + cMaxNumberLen;
    char *cur_digit = lim_digit;

    while (num != 0) {
      -- cur_digit;
      *cur_digit = static_cast<char>((num % 10) + '0');
      num /= 10;
    }

    refalrts::Iter num_begin;
    refalrts::Iter num_end;
    refalrts::alloc_chars(
      vm, num_begin, num_end, cur_digit, unsigned(lim_digit - cur_digit)
    );

    refalrts::splice_evar(arg_begin, num_begin, num_end);
  } else {
    refalrts::reinit_char(arg_begin, '0');
    begin_splice = pfunc_name;
  }

  refalrts::splice_to_freelist(vm, begin_splice, arg_end);

  return refalrts::cSuccess;
#line 35154 "Library.cpp"
}

static refalrts::NativeReference nat_ref_Symbm_Digit("Symb-Digit", COOKIE1_, COOKIE2_, func_Symbm_Digit);

#line 3298 "Library.ref"
namespace cookie_ns {

bool compare(refalrts::Iter left, refalrts::Iter right);

} // namespace cookie_ns
#line 35165 "Library.cpp"

static refalrts::FnResult func_SymbCompare(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 3307 "Library.ref"
  refalrts::Iter pX = 0, pY = 0;
  refalrts::Iter pFunc = refalrts::call_left(pX, pY, arg_begin, arg_end);

  if (pX->next != pY) {
    return refalrts::cRecognitionImpossible;
  }

  if (! cookie_ns::compare(pX, pY)) {
    return refalrts::cRecognitionImpossible;
  }

  refalrts::splice_to_freelist(vm, arg_begin, pFunc);
  refalrts::splice_to_freelist(vm, pY, arg_end);
  return refalrts::cSuccess;
#line 35187 "Library.cpp"
}

static refalrts::NativeReference nat_ref_SymbCompare("SymbCompare", 0U, 0U, func_SymbCompare);

#line 3325 "Library.ref"
namespace cookie_ns {

template <typename T>
char compare_char(T x, T y) {
  if (x < y) {
    return '<';
  } else if (x == y) {
    return '=';
  } else {
    return '>';
  }
}

char strcmp_char(const char *x, const char *y) {
  int res = strcmp(x, y);
  if (res < 0) {
    return '<';
  } else if (res > 0) {
    return '>';
  } else {
    return '=';
  }
}

} // namespace cookie_ns

bool cookie_ns::compare(refalrts::Iter left, refalrts::Iter right) {
  int rank[refalrts::cData_COUNT] = { 0 };

  rank[refalrts::cDataNumber] = 5;
  rank[refalrts::cDataChar] = 4;
  rank[refalrts::cDataFunction] = 3;
  rank[refalrts::cDataIdentifier] = 2;
  rank[refalrts::cDataFile] = 1;

  if (! rank[left->tag] || ! rank[right->tag]) {
    return false;
  }

  char order;

  if (rank[left->tag] > rank[right->tag]) {
    order = '>';
  } else if (rank[left->tag] < rank[right->tag]) {
    order = '<';
  } else {
    assert(left->tag == right->tag);

    switch(left->tag) {
      case refalrts::cDataNumber:
        order = compare_char(left->number_info, right->number_info);
        break;

      case refalrts::cDataChar:
        order = compare_char(left->char_info, right->char_info);
        break;

      case refalrts::cDataFunction:
        {
          refalrts::RefalFunction *fl = left->function_info;
          refalrts::RefalFunction *fr = right->function_info;

          const refalrts::RefalFuncName *fln = refalrts::function_name(fl);
          const refalrts::RefalFuncName *frn = refalrts::function_name(fr);

          order = strcmp_char(fln->name, frn->name);
          if (order == '=') {
            order = compare_char(fln->cookie1, frn->cookie1);
          }
          if (order == '=') {
            order = compare_char(fln->cookie2, frn->cookie2);
          }
          if (order == '=') {
            order = compare_char(fl, fr);
          }
        }
        break;

      case refalrts::cDataIdentifier:
        order =
          strcmp_char(left->ident_info->name(), right->ident_info->name());
        break;

      case refalrts::cDataFile:
        order = compare_char(left->file_info, right->file_info);
        break;

      default:
        refalrts_switch_default_violation(left->tag);
        assert(false);  // предупреждение компилятора
    }
  }

  refalrts::reinit_char(left, order);
  return true;
}
#line 35289 "Library.cpp"

static refalrts::FnResult func_WriteBytes(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 3432 "Library.ref"
  refalrts::Iter content_b = 0;
  refalrts::Iter content_e = 0;
  refalrts::call_left(content_b, content_e, arg_begin, arg_end);

  refalrts::Iter pfile_handle = 0;

  if (! file_handle_left(identifiers, pfile_handle, content_b, content_e)) {
    return refalrts::cRecognitionImpossible;
  }

  FILE *handle = extract_file_handle(vm, identifiers, pfile_handle);
  if (! handle) {
    return refalrts::cRecognitionImpossible;
  }

  int fputc_return = 0;

  while (fputc_return != EOF && ! refalrts::empty_seq(content_b, content_e)) {
    switch (content_b->tag) {
      case refalrts::cDataChar:
        fputc_return = fputc(content_b->char_info, handle);
        break;

      case refalrts::cDataNumber:
        fputc_return = fputc(content_b->number_info & 0xFF, handle);
        break;

      default:
        return refalrts::cRecognitionImpossible;
    }

    refalrts::move_left(content_b, content_e);
  }

  if (fputc_return == EOF) {
    return refalrts::cRecognitionImpossible;
  }

  refalrts::splice_to_freelist(vm, arg_begin, arg_end);
  return refalrts::cSuccess;
#line 35337 "Library.cpp"
}

static refalrts::NativeReference nat_ref_WriteBytes("WriteBytes", 0U, 0U, func_WriteBytes);


static refalrts::FnResult func_ReadBytes(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 3486 "Library.ref"
  refalrts::Iter content_b = 0;
  refalrts::Iter content_e = 0;
  refalrts::call_left(content_b, content_e, arg_begin, arg_end);

  refalrts::Iter pfile_handle = 0;
  refalrts::Iter pcount_bytes = 0;

  if (
    ! file_handle_left(identifiers, pfile_handle, content_b, content_e)
    || ! refalrts::svar_left(pcount_bytes, content_b, content_e)
    || refalrts::cDataNumber != pcount_bytes->tag
    || ! refalrts::empty_seq(content_b, content_e)
  ) {
    return refalrts::cRecognitionImpossible;
  }

  refalrts::reset_allocator(vm);

  FILE *handle = extract_file_handle(vm, identifiers, pfile_handle);
  if (! handle) {
    return refalrts::cRecognitionImpossible;
  }

  refalrts::RefalNumber count = pcount_bytes->number_info;

  refalrts::Iter begin = 0;
  refalrts::Iter end = 0;

  clearerr(handle);
  int cur_char = 0;
  while (count > 0 && (cur_char = getc(handle)) != EOF) {
    /*
      Пользуемся тем фактом, что в данной реализации размещёные в свободной
      памяти узлы располагаются в последовательных адресах.
    */
    refalrts::RefalNumber value = cur_char & 0xFFU;
    refalrts::alloc_number(vm, end, value);

    if (begin == 0) {
      begin = end;
    }
    --count;
  }

  if (begin == 0) assert (end == 0);
  if (begin != 0) assert (end != 0);

  if (cur_char == EOF && ferror(handle)) {
    return refalrts::cRecognitionImpossible;
  }

  refalrts::splice_evar(arg_begin, begin, end);
  refalrts::splice_to_freelist(vm, arg_begin, arg_end);
  return refalrts::cSuccess;
#line 35403 "Library.cpp"
}

static refalrts::NativeReference nat_ref_ReadBytes("ReadBytes", 0U, 0U, func_ReadBytes);


static refalrts::FnResult func_FTell(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 3549 "Library.ref"
  refalrts::Iter content_b = 0;
  refalrts::Iter content_e = 0;
  refalrts::Iter pfunc_name =
    refalrts::call_left(content_b, content_e, arg_begin, arg_end);

  refalrts::Iter pfile_handle = 0;

  if (
    ! file_handle_left(identifiers, pfile_handle, content_b, content_e)
    || ! refalrts::empty_seq(content_b, content_e)
  ) {
    return refalrts::cRecognitionImpossible;
  }

  FILE *handle = extract_file_handle(vm, identifiers, pfile_handle);
  if (! handle) {
    return refalrts::cRecognitionImpossible;
  }

  long int pos = ftell(handle);

  if (pos == -1L) {
    return refalrts::cRecognitionImpossible;
  }

  refalrts::reinit_number(arg_begin, static_cast<refalrts::RefalNumber>(pos));
  refalrts::splice_to_freelist(vm, pfunc_name, arg_end);
  return refalrts::cSuccess;
#line 35443 "Library.cpp"
}

static refalrts::NativeReference nat_ref_FTell("FTell", 0U, 0U, func_FTell);


static refalrts::FnResult func_FSeek(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 3592 "Library.ref"
  refalrts::Iter content_b = 0;
  refalrts::Iter content_e = 0;
  refalrts::call_left(content_b, content_e, arg_begin, arg_end);

  refalrts::Iter pfile_handle = 0;
  refalrts::Iter porigin = 0;
  refalrts::Iter psign = 0;
  refalrts::Iter poffset = 0;

  if (
    ! file_handle_left(identifiers, pfile_handle, content_b, content_e)
    || ! refalrts::svar_left(porigin, content_b, content_e)
    || refalrts::cDataIdentifier != porigin->tag
    || ! refalrts::svar_left(psign, content_b, content_e)
    || refalrts::cDataChar != psign->tag
    || ! refalrts::svar_left(poffset, content_b, content_e)
    || refalrts::cDataNumber != poffset->tag
    || ! refalrts::empty_seq(content_b, content_e)
  ) {
    return refalrts::cRecognitionImpossible;
  }

  FILE *handle = extract_file_handle(vm, identifiers, pfile_handle);
  if (! handle) {
    return refalrts::cRecognitionImpossible;
  }

  int origin;
  if (USE_IDENT(BEGIN) == porigin->ident_info) {
    origin = SEEK_SET;
  } else if (USE_IDENT(CURRENT) == porigin->ident_info) {
    origin = SEEK_CUR;
  } else if (USE_IDENT(END) == porigin->ident_info) {
    origin = SEEK_END;
  } else {
    return refalrts::cRecognitionImpossible;
  }

  signed sign;
  if ('+' == psign->char_info) {
    sign = +1;
  } else if ('-' == psign->char_info) {
    sign = -1;
  } else {
    return refalrts::cRecognitionImpossible;
  }

  long int offset = sign * static_cast<long int>(poffset->number_info);

  if (fseek(handle, offset, origin) != 0) {
    return refalrts::cRecognitionImpossible;
  }

  refalrts::splice_to_freelist(vm, arg_begin, arg_end);
  return refalrts::cSuccess;
#line 35510 "Library.cpp"
}

static refalrts::NativeReference nat_ref_FSeek("FSeek", 0U, 0U, func_FSeek);


static refalrts::FnResult func_RenameFile(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 3656 "Library.ref"
  refalrts::Iter content_b = 0;
  refalrts::Iter content_e = 0;
  refalrts::Iter pfunc_name =
    refalrts::call_left(content_b, content_e, arg_begin, arg_end);

  refalrts::Iter source_b = 0;
  refalrts::Iter source_e = 0;
  refalrts::Iter target_b = 0;
  refalrts::Iter target_e = 0;

  if (
    ! refalrts::brackets_left(source_b, source_e, content_b, content_e)
    || ! refalrts::brackets_left(target_b, target_e, content_b, content_e)
    || ! refalrts::empty_seq(content_b, content_e)
  ) {
    return refalrts::cRecognitionImpossible;
  }

  char source[FILENAME_MAX + 1] = { '\0' };
  unsigned source_len =
    refalrts::read_chars(source, FILENAME_MAX, source_b, source_e);

  if (! refalrts::empty_seq(source_b, source_e) || source_len == 0) {
    return refalrts::cRecognitionImpossible;
  }

  char target[FILENAME_MAX + 1] = { '\0' };
  unsigned target_len =
    refalrts::read_chars(target, FILENAME_MAX, target_b, target_e);

  if (! refalrts::empty_seq(target_b, target_e) || target_len == 0) {
    return refalrts::cRecognitionImpossible;
  }

  int result = rename(source, target);

  refalrts::RefalIdentifier i_result =
    result == 0 ? USE_IDENT(True) : USE_IDENT(False);

  refalrts::reinit_ident(arg_begin, i_result);
  refalrts::splice_to_freelist(vm, pfunc_name, arg_end);
  return refalrts::cSuccess;
#line 35564 "Library.cpp"
}

static refalrts::NativeReference nat_ref_RenameFile("RenameFile", 0U, 0U, func_RenameFile);


static refalrts::FnResult func_Modulem_Load(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 3713 "Library.ref"
  refalrts::Iter content_b = 0;
  refalrts::Iter content_e = 0;
  refalrts::call_left(content_b, content_e, arg_begin, arg_end);

  char module_name[FILENAME_MAX + 1] = { '\0' };
  unsigned module_name_len =
    refalrts::read_chars(module_name, FILENAME_MAX, content_b, content_e);

  if (
    ! refalrts::empty_seq(content_b, content_e)
    || module_name_len == 0
    || refalrts::dangerous_state(vm)
  ) {
    return refalrts::cRecognitionImpossible;
  }

  refalrts::FnResult result;
  refalrts::RefalFunction *module =
    refalrts::load_module_rep(vm, arg_end, module_name, 0, 0, result);

  if (refalrts::cSuccess != result) {
    return result;
  }

  if (module != 0) {
    refalrts::Iter pSuccess = 0;
    refalrts::Iter pHandle = 0;

    refalrts::alloc_ident(vm, pSuccess, USE_IDENT(Success));
    refalrts::alloc_name(vm, pHandle, module);
    refalrts::splice_elem(arg_begin, pSuccess);
    refalrts::splice_elem(arg_begin, pHandle);
  } else {
    refalrts::Iter pFails = 0;
    refalrts::alloc_ident(vm, pFails, USE_IDENT(Fails));
    refalrts::splice_elem(arg_begin, pFails);
  }

  refalrts::splice_to_freelist(vm, arg_begin, arg_end);
  return refalrts::cSuccess;
#line 35616 "Library.cpp"
}

static refalrts::NativeReference nat_ref_Modulem_Load("Module-Load", 0U, 0U, func_Modulem_Load);


static refalrts::FnResult func_Modulem_Unload(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 3761 "Library.ref"
  refalrts::Iter content_b = 0;
  refalrts::Iter content_e = 0;
  refalrts::call_left(content_b, content_e, arg_begin, arg_end);

  refalrts::Iter pHandle = 0;
  if (
    ! refalrts::svar_right(pHandle, content_b, content_e)
    || ! refalrts::empty_seq(content_b, content_e)
    || pHandle->tag != refalrts::cDataFunction
    || refalrts::dangerous_state(vm)
  ) {
    return refalrts::cRecognitionImpossible;
  }

  refalrts::FnResult result;
  bool success =
    refalrts::unload_module(vm, arg_end, pHandle->function_info, result);

  if (refalrts::cSuccess != result) {
    return result;
  }

  if (! success) {
    return refalrts::cRecognitionImpossible;
  }

  refalrts::splice_to_freelist(vm, arg_begin, arg_end);
  return refalrts::cSuccess;
#line 35656 "Library.cpp"
}

static refalrts::NativeReference nat_ref_Modulem_Unload("Module-Unload", 0U, 0U, func_Modulem_Unload);

#line 3805 "Library.ref"
namespace cookie_ns {

enum HandleExType {
  cHandleExType_Current,
  cHandleExType_Global,
  cHandleExType_CurrentAndGlobal,
  cHandleExType_Value,
};

bool module_handle_ex_left(
  const refalrts::RefalIdentifier *identifiers,
  HandleExType& type,
  refalrts::Iter& sModuleHandleEx,
  refalrts::Iter& content_b,
  refalrts::Iter& content_e
);

bool cookie_left(
  refalrts::UInt32& cookie1,
  refalrts::UInt32& cookie2,
  refalrts::Iter& content_b,
  refalrts::Iter& content_e
);

refalrts::RefalFunction *function_for_module(
  refalrts::VM *vm,
  HandleExType type,
  const char *func_name,
  refalrts::UInt32 cookie1,
  refalrts::UInt32 cookie2,
  refalrts::Iter sModuleHandleEx
);

}  // namespace cookie_ns
#line 35696 "Library.cpp"

static refalrts::FnResult func_Modulem_Mu(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 3843 "Library.ref"
  refalrts::Iter content_b = 0;
  refalrts::Iter content_e = 0;
  refalrts::Iter pfunc_name =
    refalrts::call_left(content_b, content_e, arg_begin, arg_end);

  cookie_ns::HandleExType type = cookie_ns::cHandleExType_Value;
  refalrts::Iter sModuleHandleEx = 0;
  if (
    ! cookie_ns::module_handle_ex_left(
      identifiers, type, sModuleHandleEx, content_b, content_e
    )
  ) {
    return refalrts::cRecognitionImpossible;
  }

  refalrts::UInt32 cookie1 = 0, cookie2 = 0;
  if (! cookie_ns::cookie_left(cookie1, cookie2, content_b, content_e)) {
    return refalrts::cRecognitionImpossible;
  }

  std::vector<char> func_name_vect;
  refalrts::Iter sFunctionName = 0;
  refalrts::Iter eFunctionName_b = 0, eFunctionName_e = 0;
  refalrts::Iter end_garbage;
  if (
    refalrts::svar_left(sFunctionName, content_b, content_e)
    && sFunctionName->tag == refalrts::cDataIdentifier
  ) {
    const char *func_name_cstr = sFunctionName->ident_info->name();
    size_t len = strlen(func_name_cstr);
    func_name_vect.assign(func_name_cstr, func_name_cstr + len + 1);
    end_garbage = sFunctionName;
  } else if (
    end_garbage = refalrts::brackets_left(
      eFunctionName_b, eFunctionName_e, content_b, content_e
    ),
    end_garbage != 0
  ) {
    refalrts::FnResult res = string_from_seq(
      func_name_vect, eFunctionName_b, eFunctionName_e
    );
    if (res != refalrts::cSuccess) {
      return res;
    }
    end_garbage = end_garbage->link_info;
  } else {
    return refalrts::cRecognitionImpossible;
  }

  refalrts::RefalFunction *result = cookie_ns::function_for_module(
    vm, type, &func_name_vect[0], cookie1, cookie2, sModuleHandleEx
  );

  if (! result) {
    return refalrts::cRecognitionImpossible;
  }

  refalrts::update_name(pfunc_name, result);
  refalrts::Iter begin_garbage = sModuleHandleEx;
  refalrts::splice_to_freelist(vm, begin_garbage, end_garbage);
  refalrts::push_stack(vm, arg_end);
  refalrts::push_stack(vm, arg_begin);
  return refalrts::cSuccess;
#line 35767 "Library.cpp"
}

static refalrts::NativeReference nat_ref_Modulem_Mu("Module-Mu", 0U, 0U, func_Modulem_Mu);

#line 3910 "Library.ref"
bool cookie_ns::module_handle_ex_left(
  const refalrts::RefalIdentifier *identifiers,
  cookie_ns::HandleExType& type,
  refalrts::Iter& sModuleHandleEx,
  refalrts::Iter& content_b,
  refalrts::Iter& content_e
) {
  if (
    ! refalrts::svar_left(sModuleHandleEx, content_b, content_e)
    && sModuleHandleEx->tag != refalrts::cDataFunction
    && ! refalrts::ident_term(USE_IDENT(GLOBAL), sModuleHandleEx)
    && ! refalrts::ident_term(USE_IDENT(CURRENT), sModuleHandleEx)
    && ! refalrts::ident_term(USE_IDENT(CURRENTm_ANDm_GLOBAL), sModuleHandleEx)
  ) {
    return false;
  }

  if (refalrts::ident_term(USE_IDENT(GLOBAL), sModuleHandleEx)) {
    type = cookie_ns::cHandleExType_Global;
  } else if (refalrts::ident_term(USE_IDENT(CURRENT), sModuleHandleEx)) {
    type = cookie_ns::cHandleExType_Current;
  } else if (
    refalrts::ident_term(USE_IDENT(CURRENTm_ANDm_GLOBAL), sModuleHandleEx)
  ) {
    type = cookie_ns::cHandleExType_CurrentAndGlobal;
  } else {
    type = cookie_ns::cHandleExType_Value;
  }

  return true;
}

bool cookie_ns::cookie_left(
  refalrts::UInt32& cookie1,
  refalrts::UInt32& cookie2,
  refalrts::Iter& content_b,
  refalrts::Iter& content_e
) {
  cookie1 = 0;
  cookie2 = 0;
  if (
    ! refalrts::empty_seq(content_b, content_e)
    && content_b->tag == refalrts::cDataNumber
  ) {
    refalrts::Iter sCookie1 = 0, sCookie2 = 0;
    if (
      refalrts::svar_left(sCookie1, content_b, content_e)
      && refalrts::svar_left(sCookie2, content_b, content_e)
      && sCookie2->tag == refalrts::cDataNumber
    ) {
      cookie1 = sCookie1->number_info;
      cookie2 = sCookie2->number_info;
    } else {
      return false;
    }
  }
  return true;
}

refalrts::RefalFunction *cookie_ns::function_for_module(
  refalrts::VM *vm,
  cookie_ns::HandleExType type,
  const char *func_name_cstr,
  refalrts::UInt32 cookie1,
  refalrts::UInt32 cookie2,
  refalrts::Iter sModuleHandleEx
) {
  const refalrts::RefalFuncName func_name(func_name_cstr, cookie1, cookie2);
  refalrts::Module *current = refalrts::current_module(vm);
  refalrts::RefalFunction *result = 0;

  switch (type) {
    case cookie_ns::cHandleExType_Global:
      result = refalrts::lookup_function_in_domain(vm, func_name);
      break;

    case cookie_ns::cHandleExType_Current:
      result = refalrts::lookup_function_in_module(vm, current, func_name);
      break;

    case cookie_ns::cHandleExType_CurrentAndGlobal:
      result = refalrts::lookup_function_in_module(vm, current, func_name);
      if (! result) {
        result = refalrts::lookup_function_in_domain(vm, func_name);
      }
      break;

    case cookie_ns::cHandleExType_Value:
      {
        refalrts::Module *module =
          refalrts::module_from_function_rep(vm, sModuleHandleEx->function_info);
        result = refalrts::lookup_function_in_module(vm, module, func_name);
      }
      break;

    default:
      refalrts_switch_default_violation(type);
  }

  return result;
}
#line 35874 "Library.cpp"
#line 4021 "Library.ref"
namespace cookie_ns {

refalrts::FnResult find_function(
  refalrts::VM *vm, const refalrts::RefalIdentifier *identifiers,
  refalrts::Iter arg_begin, refalrts::Iter arg_end,
  bool fail_down
);

}  // namespace cookie_ns
#line 35885 "Library.cpp"

static refalrts::FnResult func_Modulem_LookupFunction(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 4034 "Library.ref"
  return cookie_ns::find_function(vm, identifiers, arg_begin, arg_end, false);
#line 35894 "Library.cpp"
}

static refalrts::NativeReference nat_ref_Modulem_LookupFunction("Module-LookupFunction", 0U, 0U, func_Modulem_LookupFunction);

#line 4039 "Library.ref"

refalrts::FnResult cookie_ns::find_function(
  refalrts::VM *vm, const refalrts::RefalIdentifier *identifiers,
  refalrts::Iter arg_begin, refalrts::Iter arg_end,
  bool fail_down
) {
  refalrts::Iter content_b = 0;
  refalrts::Iter content_e = 0;
  refalrts::Iter pfunc_name =
    refalrts::call_left(content_b, content_e, arg_begin, arg_end);

  cookie_ns::HandleExType type = cookie_ns::cHandleExType_Value;
  refalrts::Iter sModuleHandleEx = 0;
  if (
    ! cookie_ns::module_handle_ex_left(
      identifiers, type, sModuleHandleEx, content_b, content_e
    )
  ) {
    return refalrts::cRecognitionImpossible;
  }

  refalrts::UInt32 cookie1 = 0, cookie2 = 0;
  if (! cookie_ns::cookie_left(cookie1, cookie2, content_b, content_e)) {
    return refalrts::cRecognitionImpossible;
  }

  std::vector<char> func_name_vect;
  refalrts::Iter sFunctionName = 0;
  if (content_b->tag == refalrts::cDataIdentifier) {
    refalrts::svar_left(sFunctionName, content_b, content_e);
    const char *func_name_cstr = sFunctionName->ident_info->name();
    size_t len = strlen(func_name_cstr);
    func_name_vect.assign(func_name_cstr, func_name_cstr + len + 1);
  } else {
    refalrts::FnResult res =
      string_from_seq(func_name_vect, content_b, content_e);
    if (res != refalrts::cSuccess) {
      return res;
    }
  }

  refalrts::RefalFunction *result = cookie_ns::function_for_module(
    vm, type, &func_name_vect[0], cookie1, cookie2, sModuleHandleEx
  );

  if (result != 0) {
    if (fail_down) {
      refalrts::reinit_name(arg_begin, result);
      refalrts::splice_to_freelist(vm, pfunc_name, arg_end);
    } else {
      refalrts::reinit_ident(arg_begin, USE_IDENT(Success));
      refalrts::update_name(pfunc_name, result);
      refalrts::splice_to_freelist(vm, sModuleHandleEx, arg_end);
    }
  } else {
    if (fail_down) {
      return refalrts::cRecognitionImpossible;
    } else {
      refalrts::reinit_ident(arg_begin, USE_IDENT(Fails));
      refalrts::splice_to_freelist(vm, pfunc_name, arg_end);
    }
  }

  return refalrts::cSuccess;
}
#line 35965 "Library.cpp"

static refalrts::FnResult func_Modulem_FunctionPtr(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 4113 "Library.ref"
  return cookie_ns::find_function(vm, identifiers, arg_begin, arg_end, true);
#line 35974 "Library.cpp"
}

static refalrts::NativeReference nat_ref_Modulem_FunctionPtr("Module-FunctionPtr", 0U, 0U, func_Modulem_FunctionPtr);


static refalrts::FnResult func_Platform(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 4123 "Library.ref"
  refalrts::Iter content_b = 0, content_e = 0;
  refalrts::Iter pfunc_name =
    refalrts::call_left(content_b, content_e, arg_begin, arg_end);

  if (! refalrts::empty_seq(content_b, content_e)) {
    return refalrts::cRecognitionImpossible;
  }

  refalrts::RefalIdentifier platform =
    refalrts::ident_implode(vm, refalrts::api::platform);

  if (! platform) {
    return refalrts::cIdentTableLimit;
  }

  refalrts::reinit_ident(arg_begin, platform);
  refalrts::splice_to_freelist(vm, pfunc_name, arg_end);

  return refalrts::cSuccess;
#line 36005 "Library.cpp"
}

static refalrts::NativeReference nat_ref_Platform("Platform", 0U, 0U, func_Platform);


static refalrts::FnResult func_DirectorySeparators(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 4151 "Library.ref"
  refalrts::Iter content_b = 0, content_e = 0;
  refalrts::call_left(content_b, content_e, arg_begin, arg_end);

  if (! refalrts::empty_seq(content_b, content_e)) {
    return refalrts::cRecognitionImpossible;
  }

  refalrts::reset_allocator(vm);
  refalrts::alloc_string(
    vm, content_b, content_e, refalrts::api::directory_separators
  );
  refalrts::splice_evar(arg_begin, content_b, content_e);
  refalrts::splice_to_freelist(vm, arg_begin, arg_end);
  return refalrts::cSuccess;
#line 36031 "Library.cpp"
}

static refalrts::NativeReference nat_ref_DirectorySeparators("DirectorySeparators", COOKIE1_, COOKIE2_, func_DirectorySeparators);


static refalrts::FnResult func_gen_DirectorySeparator_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & DirectorySeparator=1/4 s.Default/5 e.Other/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Other as range 2
  //DEBUG: s.Default: 5
  //DEBUG: e.Other: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DirectorySeparator=1/4 s.Default/5 e.Other/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: s.Default5 /1 ]] }
  refalrts::reinit_svar( context[1], context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DirectorySeparator_A1("DirectorySeparator=1", COOKIE1_, COOKIE2_, func_gen_DirectorySeparator_A1);


static refalrts::FnResult func_DirectorySeparator(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & DirectorySeparator/4 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DirectorySeparator=1/4 HalfReuse: </1 } & DirectorySeparators/5 >/6 >/7 Tile{ ]] }
  refalrts::alloc_name(vm, context[5], functions[efunc_DirectorySeparators]);
  refalrts::alloc_close_call(vm, context[6]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_gen_DirectorySeparator_A1]);
  refalrts::reinit_open_call(context[1]);
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[6] );
  refalrts::push_stack( vm, context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DirectorySeparator("DirectorySeparator", 0U, 0U, func_DirectorySeparator);


static refalrts::FnResult func_gen_IsDirectorySeparator_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & IsDirectorySeparator:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & IsDirectorySeparator:1/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & IsDirectorySeparator:1/4 s.Char/5 e.Separators-B/8 s.Char/12 e.Separators-E/10 >/1
    context[6] = context[2];
    context[7] = context[3];
    context[8] = 0;
    context[9] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[10] = context[6];
      context[11] = context[7];
      if( ! refalrts::repeated_stvar_left( vm, context[12], context[5], context[10], context[11] ) )
        continue;
      // closed e.Separators-E as range 10
      //DEBUG: s.Char: 5
      //DEBUG: e.Separators-B: 8
      //DEBUG: e.Separators-E: 10

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & IsDirectorySeparator:1/4 s.Char/5 e.Separators-B/8 s.Char/12 e.Separators-E/10 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
      refalrts::reinit_ident(context[1], identifiers[ident_True]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[8], context[9], context[6], context[7] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & IsDirectorySeparator:1/4 s.Char/5 e.Separators/2 >/1
  // closed e.Separators as range 2
  //DEBUG: s.Char: 5
  //DEBUG: e.Separators: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & IsDirectorySeparator:1/4 s.Char/5 e.Separators/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_False]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_IsDirectorySeparator_B1("IsDirectorySeparator:1", COOKIE1_, COOKIE2_, func_gen_IsDirectorySeparator_B1);


static refalrts::FnResult func_IsDirectorySeparator(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & IsDirectorySeparator/4 s.Char/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Char: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & IsDirectorySeparator:1/4 AsIs: s.Char/5 HalfReuse: </1 } & DirectorySeparators/6 >/7 >/8 Tile{ ]] }
  refalrts::alloc_name(vm, context[6], functions[efunc_DirectorySeparators]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_gen_IsDirectorySeparator_B1]);
  refalrts::reinit_open_call(context[1]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[6], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_IsDirectorySeparator("IsDirectorySeparator", 0U, 0U, func_IsDirectorySeparator);


static refalrts::FnResult func_PathSeparator(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 4195 "Library.ref"
  refalrts::Iter content_b = 0, content_e = 0;
  refalrts::Iter pfunc_name =
    refalrts::call_left(content_b, content_e, arg_begin, arg_end);

  if (! refalrts::empty_seq(content_b, content_e)) {
    return refalrts::cRecognitionImpossible;
  }

  refalrts::reinit_char(arg_begin, refalrts::api::path_env_separator);
  refalrts::splice_to_freelist(vm, pfunc_name, arg_end);

  return refalrts::cSuccess;
#line 36244 "Library.cpp"
}

static refalrts::NativeReference nat_ref_PathSeparator("PathSeparator", 0U, 0U, func_PathSeparator);


static refalrts::FnResult func_u_u_INIT(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 4213 "Library.ref"
  // 1. Дескрипторы файлов
  for (size_t i = 0; i < cMaxFileHandles; ++i) {
    g_file_handles.ref(vm, i) = 0;      // на всякий случай
  }

  // 2. Точный счётчик шагов
  const unsigned long init_and_go_steps = 2;
  cookie_ns::g_correction.ref(vm) = cookie_ns::raw_step(vm) + init_and_go_steps;
  cookie_ns::g_start_step.ref(vm) = 0;

  // 3. Время запуска программы для TimeElapsed
  g_time_elapsed_edge.ref(vm) = clock();

  // 4. Генератор случайных чисел
  g_gen.ref(vm) = new RndGen();

  refalrts::splice_to_freelist(vm, arg_begin, arg_end);
  return refalrts::cSuccess;
#line 36274 "Library.cpp"
}

static refalrts::NativeReference nat_ref_u_u_INIT("__INIT", COOKIE1_, COOKIE2_, func_u_u_INIT);


static refalrts::FnResult func_u_u_FINAL(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
#line 4236 "Library.ref"
  // 4. Генератор случайных чисел
  delete g_gen.ref(vm);
  g_gen.ref(vm) = 0;

  // 3. Время запуска программы для TimeElapsed
  //   (нет финализации)

  // 2. Точный счётчик шагов
  //   (нет финализации)

  // 1. Дескрипторы файлов
  for (size_t i = 0; i < cMaxFileHandles; ++i) {
    if (g_file_handles.ref(vm, i) != 0) {
      fclose(g_file_handles.ref(vm, i));
      g_file_handles.ref(vm, i) = 0;    // на всякий случай
    }
  }

  refalrts::splice_to_freelist(vm, arg_begin, arg_end);
  return refalrts::cSuccess;
#line 36306 "Library.cpp"
}

static refalrts::NativeReference nat_ref_u_u_FINAL("__FINAL", COOKIE1_, COOKIE2_, func_u_u_FINAL);


static refalrts::FnResult func_gen_Divmodm_Nat_S1A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Divmod-Nat$1=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Divmod-Nat$1=1@1/4 (/9 s.Quot/11 )/10 s.Rem/12 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    if( ! refalrts::svar_left( context[11], context[7], context[8] ) )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    if( ! refalrts::svar_left( context[12], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    //DEBUG: s.Quot: 11
    //DEBUG: s.Rem: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Divmod-Nat$1=1@1/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: s.Quot/11 AsIs: )/10 AsIs: s.Rem/12 } Tile{ ]] }
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[9], context[12] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Divmod-Nat$1=1@1/4 e.dyn/2 >/1
  // closed e.dyn as range 2
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & Divmod-Nat$1=1@0/6 (/7 )/8 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_Divmodm_Nat_S1A1Z0]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_close_bracket(vm, context[8]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Divmodm_Nat_S1A1Z1("Divmod-Nat$1=1@1", COOKIE1_, COOKIE2_, func_gen_Divmodm_Nat_S1A1Z1);


static refalrts::FnResult func_gen_Divmodm_Nat_S2A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 25 elems
  refalrts::Iter context[25];
  refalrts::zeros( context, 25 );
  // </0 & Divmod-Nat$2=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Divmod-Nat$2=1@1/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 e.new4/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 2
  do {
    // </0 & Divmod-Nat$2=1@1/4 s.DenomFirst0/5 (/8 e./14 )/9 (/12 e.First/16 )/13 s.NormShift/20 s.RestoreShift/21 >/1
    context[14] = context[6];
    context[15] = context[7];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[2];
    context[19] = context[3];
    // closed e. as range 14
    // closed e.First as range 16
    if( ! refalrts::svar_left( context[20], context[18], context[19] ) )
      continue;
    if( ! refalrts::svar_left( context[21], context[18], context[19] ) )
      continue;
    if( ! refalrts::empty_seq( context[18], context[19] ) )
      continue;
    //DEBUG: s.DenomFirst0: 5
    //DEBUG: e.: 14
    //DEBUG: e.First: 16
    //DEBUG: s.NormShift: 20
    //DEBUG: s.RestoreShift: 21

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.RestoreShift/21 {REMOVED TILE}
    //RESULT: Tile{ [[ } </22 & Divmod-Nat$2=2@1/23 Tile{ HalfReuse: s.RestoreShift21 /0 HalfReuse: s.NormShift20 /4 AsIs: s.DenomFirst0/5 AsIs: (/8 AsIs: e./14 AsIs: )/9 HalfReuse: </12 } Tile{ HalfReuse: & Divmod-Shl/13 AsIs: s.NormShift/20 } Tile{ AsIs: e.First/16 } >/24 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_name(vm, context[23], functions[efunc_gen_Divmodm_Nat_S2A2Z1]);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::reinit_svar( context[0], context[21] );
    refalrts::reinit_svar( context[4], context[20] );
    refalrts::reinit_open_call(context[12]);
    refalrts::reinit_name(context[13], functions[efunc_Divmodm_Shl]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[12] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[13], context[20] );
    res = refalrts::splice_evar( res, context[0], context[12] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Divmod-Nat$2=1@1/4 s.DenomFirst0/5 (/8 e./6 )/9 (/12 e.First/10 )/13 e.dyn/2 >/1
  // closed e. as range 6
  // closed e.First as range 10
  // closed e.dyn as range 2
  //DEBUG: s.DenomFirst0: 5
  //DEBUG: e.: 6
  //DEBUG: e.First: 10
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </14 & Divmod-Nat$2=1@0/15 (/16 )/17 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: s.DenomFirst0/5 AsIs: (/8 AsIs: e./6 AsIs: )/9 AsIs: (/12 AsIs: e.First/10 AsIs: )/13 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[14]);
  refalrts::alloc_name(vm, context[15], functions[efunc_gen_Divmodm_Nat_S2A1Z0]);
  refalrts::alloc_open_bracket(vm, context[16]);
  refalrts::alloc_close_bracket(vm, context[17]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[14] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[14], context[17] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Divmodm_Nat_S2A1Z1("Divmod-Nat$2=1@1", COOKIE1_, COOKIE2_, func_gen_Divmodm_Nat_S2A1Z1);


static refalrts::FnResult func_gen_Divmodm_Nat_S1A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Divmod-Nat$1=1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Divmod-Nat$1=1@2/4 (/9 s.Quot/11 )/10 s.Rem/12 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    if( ! refalrts::svar_left( context[11], context[7], context[8] ) )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    if( ! refalrts::svar_left( context[12], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    //DEBUG: s.Quot: 11
    //DEBUG: s.Rem: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/4 HalfReuse: '-'/9 AsIs: s.Quot/11 AsIs: )/10 AsIs: s.Rem/12 } Tile{ ]] }
    refalrts::reinit_open_bracket(context[4]);
    refalrts::reinit_char(context[9], '-');
    refalrts::link_brackets( context[4], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[4], context[12] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Divmod-Nat$1=1@2/4 e.dyn/2 >/1
  // closed e.dyn as range 2
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & Divmod-Nat$1=1@0/6 (/7 '-'/8 )/9 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_Divmodm_Nat_S1A1Z0]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_char(vm, context[8], '-');
  refalrts::alloc_close_bracket(vm, context[9]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::link_brackets( context[7], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Divmodm_Nat_S1A1Z2("Divmod-Nat$1=1@2", COOKIE1_, COOKIE2_, func_gen_Divmodm_Nat_S1A1Z2);


static refalrts::FnResult func_gen_Divmodm_Nat_S2A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 25 elems
  refalrts::Iter context[25];
  refalrts::zeros( context, 25 );
  // </0 & Divmod-Nat$2=1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Divmod-Nat$2=1@2/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 e.new4/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 2
  do {
    // </0 & Divmod-Nat$2=1@2/4 s.DenomFirst0/5 (/8 e./14 )/9 (/12 e.First/16 )/13 s.NormShift/20 s.RestoreShift/21 >/1
    context[14] = context[6];
    context[15] = context[7];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[2];
    context[19] = context[3];
    // closed e. as range 14
    // closed e.First as range 16
    if( ! refalrts::svar_left( context[20], context[18], context[19] ) )
      continue;
    if( ! refalrts::svar_left( context[21], context[18], context[19] ) )
      continue;
    if( ! refalrts::empty_seq( context[18], context[19] ) )
      continue;
    //DEBUG: s.DenomFirst0: 5
    //DEBUG: e.: 14
    //DEBUG: e.First: 16
    //DEBUG: s.NormShift: 20
    //DEBUG: s.RestoreShift: 21

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.RestoreShift/21 {REMOVED TILE}
    //RESULT: Tile{ [[ } </22 & Divmod-Nat$2=2@2/23 Tile{ HalfReuse: s.RestoreShift21 /0 HalfReuse: s.NormShift20 /4 AsIs: s.DenomFirst0/5 AsIs: (/8 AsIs: e./14 AsIs: )/9 HalfReuse: </12 } Tile{ HalfReuse: & Divmod-Shl/13 AsIs: s.NormShift/20 } Tile{ AsIs: e.First/16 } >/24 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_name(vm, context[23], functions[efunc_gen_Divmodm_Nat_S2A2Z2]);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::reinit_svar( context[0], context[21] );
    refalrts::reinit_svar( context[4], context[20] );
    refalrts::reinit_open_call(context[12]);
    refalrts::reinit_name(context[13], functions[efunc_Divmodm_Shl]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[12] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[13], context[20] );
    res = refalrts::splice_evar( res, context[0], context[12] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Divmod-Nat$2=1@2/4 s.DenomFirst0/5 (/8 e./6 )/9 (/12 e.First/10 )/13 e.dyn/2 >/1
  // closed e. as range 6
  // closed e.First as range 10
  // closed e.dyn as range 2
  //DEBUG: s.DenomFirst0: 5
  //DEBUG: e.: 6
  //DEBUG: e.First: 10
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </14 & Divmod-Nat$2=1@0/15 (/16 '-'/17 )/18 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: s.DenomFirst0/5 AsIs: (/8 AsIs: e./6 AsIs: )/9 AsIs: (/12 AsIs: e.First/10 AsIs: )/13 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[14]);
  refalrts::alloc_name(vm, context[15], functions[efunc_gen_Divmodm_Nat_S2A1Z0]);
  refalrts::alloc_open_bracket(vm, context[16]);
  refalrts::alloc_char(vm, context[17], '-');
  refalrts::alloc_close_bracket(vm, context[18]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[14] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::link_brackets( context[16], context[18] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[14], context[18] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Divmodm_Nat_S2A1Z2("Divmod-Nat$2=1@2", COOKIE1_, COOKIE2_, func_gen_Divmodm_Nat_S2A1Z2);


static refalrts::FnResult func_gen_Divmodm_Nat_S1A1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Divmod-Nat$1=1@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Divmod-Nat$1=1@3/4 (/9 s.Quot/11 )/10 s.Rem/12 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    if( ! refalrts::svar_left( context[11], context[7], context[8] ) )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    if( ! refalrts::svar_left( context[12], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    //DEBUG: s.Quot: 11
    //DEBUG: s.Rem: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Rem/12 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/4 HalfReuse: '-'/9 AsIs: s.Quot/11 AsIs: )/10 } Tile{ HalfReuse: '-'/0 } Tile{ HalfReuse: s.Rem12 /1 ]] }
    refalrts::reinit_open_bracket(context[4]);
    refalrts::reinit_char(context[9], '-');
    refalrts::reinit_char(context[0], '-');
    refalrts::reinit_svar( context[1], context[12] );
    refalrts::link_brackets( context[4], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[0] );
    res = refalrts::splice_evar( res, context[4], context[10] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Divmod-Nat$1=1@3/4 e.dyn/2 >/1
  // closed e.dyn as range 2
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & Divmod-Nat$1=1@0/6 (/7 '-'/8 )/9 (/10 Tile{ HalfReuse: '-'/0 HalfReuse: )/4 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_Divmodm_Nat_S1A1Z0]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_char(vm, context[8], '-');
  refalrts::alloc_close_bracket(vm, context[9]);
  refalrts::alloc_open_bracket(vm, context[10]);
  refalrts::reinit_char(context[0], '-');
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[10], context[4] );
  refalrts::link_brackets( context[7], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Divmodm_Nat_S1A1Z3("Divmod-Nat$1=1@3", COOKIE1_, COOKIE2_, func_gen_Divmodm_Nat_S1A1Z3);


static refalrts::FnResult func_gen_Divmodm_Nat_S2A1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 25 elems
  refalrts::Iter context[25];
  refalrts::zeros( context, 25 );
  // </0 & Divmod-Nat$2=1@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Divmod-Nat$2=1@3/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 e.new4/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 2
  do {
    // </0 & Divmod-Nat$2=1@3/4 s.DenomFirst0/5 (/8 e./14 )/9 (/12 e.First/16 )/13 s.NormShift/20 s.RestoreShift/21 >/1
    context[14] = context[6];
    context[15] = context[7];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[2];
    context[19] = context[3];
    // closed e. as range 14
    // closed e.First as range 16
    if( ! refalrts::svar_left( context[20], context[18], context[19] ) )
      continue;
    if( ! refalrts::svar_left( context[21], context[18], context[19] ) )
      continue;
    if( ! refalrts::empty_seq( context[18], context[19] ) )
      continue;
    //DEBUG: s.DenomFirst0: 5
    //DEBUG: e.: 14
    //DEBUG: e.First: 16
    //DEBUG: s.NormShift: 20
    //DEBUG: s.RestoreShift: 21

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.RestoreShift/21 {REMOVED TILE}
    //RESULT: Tile{ [[ } </22 & Divmod-Nat$2=2@3/23 Tile{ HalfReuse: s.RestoreShift21 /0 HalfReuse: s.NormShift20 /4 AsIs: s.DenomFirst0/5 AsIs: (/8 AsIs: e./14 AsIs: )/9 HalfReuse: </12 } Tile{ HalfReuse: & Divmod-Shl/13 AsIs: s.NormShift/20 } Tile{ AsIs: e.First/16 } >/24 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_name(vm, context[23], functions[efunc_gen_Divmodm_Nat_S2A2Z3]);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::reinit_svar( context[0], context[21] );
    refalrts::reinit_svar( context[4], context[20] );
    refalrts::reinit_open_call(context[12]);
    refalrts::reinit_name(context[13], functions[efunc_Divmodm_Shl]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[12] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[13], context[20] );
    res = refalrts::splice_evar( res, context[0], context[12] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Divmod-Nat$2=1@3/4 s.DenomFirst0/5 (/8 e./6 )/9 (/12 e.First/10 )/13 e.dyn/2 >/1
  // closed e. as range 6
  // closed e.First as range 10
  // closed e.dyn as range 2
  //DEBUG: s.DenomFirst0: 5
  //DEBUG: e.: 6
  //DEBUG: e.First: 10
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </14 & Divmod-Nat$2=1@0/15 (/16 '-'/17 )/18 (/19 Tile{ HalfReuse: '-'/0 HalfReuse: )/4 AsIs: s.DenomFirst0/5 AsIs: (/8 AsIs: e./6 AsIs: )/9 AsIs: (/12 AsIs: e.First/10 AsIs: )/13 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[14]);
  refalrts::alloc_name(vm, context[15], functions[efunc_gen_Divmodm_Nat_S2A1Z0]);
  refalrts::alloc_open_bracket(vm, context[16]);
  refalrts::alloc_char(vm, context[17], '-');
  refalrts::alloc_close_bracket(vm, context[18]);
  refalrts::alloc_open_bracket(vm, context[19]);
  refalrts::reinit_char(context[0], '-');
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[14] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[19], context[4] );
  refalrts::link_brackets( context[16], context[18] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[14], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Divmodm_Nat_S2A1Z3("Divmod-Nat$2=1@3", COOKIE1_, COOKIE2_, func_gen_Divmodm_Nat_S2A1Z3);


static refalrts::FnResult func_gen_Divmodm_Nat_S1A1Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Divmod-Nat$1=1@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Divmod-Nat$1=1@4/4 (/9 s.Quot/11 )/10 s.Rem/12 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    if( ! refalrts::svar_left( context[11], context[7], context[8] ) )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    if( ! refalrts::svar_left( context[12], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    //DEBUG: s.Quot: 11
    //DEBUG: s.Rem: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE} {REMOVED TILE} s.Rem/12 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: s.Quot/11 AsIs: )/10 } Tile{ HalfReuse: '-'/4 } Tile{ HalfReuse: s.Rem12 /1 ]] }
    refalrts::reinit_char(context[4], '-');
    refalrts::reinit_svar( context[1], context[12] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[4] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Divmod-Nat$1=1@4/4 e.dyn/2 >/1
  // closed e.dyn as range 2
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & Divmod-Nat$1=1@0/6 (/7 )/8 (/9 Tile{ HalfReuse: '-'/0 HalfReuse: )/4 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_Divmodm_Nat_S1A1Z0]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_close_bracket(vm, context[8]);
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::reinit_char(context[0], '-');
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[9], context[4] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Divmodm_Nat_S1A1Z4("Divmod-Nat$1=1@4", COOKIE1_, COOKIE2_, func_gen_Divmodm_Nat_S1A1Z4);


static refalrts::FnResult func_gen_Divmodm_Nat_S2A1Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 25 elems
  refalrts::Iter context[25];
  refalrts::zeros( context, 25 );
  // </0 & Divmod-Nat$2=1@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Divmod-Nat$2=1@4/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 e.new4/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 2
  do {
    // </0 & Divmod-Nat$2=1@4/4 s.DenomFirst0/5 (/8 e./14 )/9 (/12 e.First/16 )/13 s.NormShift/20 s.RestoreShift/21 >/1
    context[14] = context[6];
    context[15] = context[7];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[2];
    context[19] = context[3];
    // closed e. as range 14
    // closed e.First as range 16
    if( ! refalrts::svar_left( context[20], context[18], context[19] ) )
      continue;
    if( ! refalrts::svar_left( context[21], context[18], context[19] ) )
      continue;
    if( ! refalrts::empty_seq( context[18], context[19] ) )
      continue;
    //DEBUG: s.DenomFirst0: 5
    //DEBUG: e.: 14
    //DEBUG: e.First: 16
    //DEBUG: s.NormShift: 20
    //DEBUG: s.RestoreShift: 21

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.RestoreShift/21 {REMOVED TILE}
    //RESULT: Tile{ [[ } </22 & Divmod-Nat$2=2@4/23 Tile{ HalfReuse: s.RestoreShift21 /0 HalfReuse: s.NormShift20 /4 AsIs: s.DenomFirst0/5 AsIs: (/8 AsIs: e./14 AsIs: )/9 HalfReuse: </12 } Tile{ HalfReuse: & Divmod-Shl/13 AsIs: s.NormShift/20 } Tile{ AsIs: e.First/16 } >/24 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_name(vm, context[23], functions[efunc_gen_Divmodm_Nat_S2A2Z4]);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::reinit_svar( context[0], context[21] );
    refalrts::reinit_svar( context[4], context[20] );
    refalrts::reinit_open_call(context[12]);
    refalrts::reinit_name(context[13], functions[efunc_Divmodm_Shl]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[12] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[13], context[20] );
    res = refalrts::splice_evar( res, context[0], context[12] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Divmod-Nat$2=1@4/4 s.DenomFirst0/5 (/8 e./6 )/9 (/12 e.First/10 )/13 e.dyn/2 >/1
  // closed e. as range 6
  // closed e.First as range 10
  // closed e.dyn as range 2
  //DEBUG: s.DenomFirst0: 5
  //DEBUG: e.: 6
  //DEBUG: e.First: 10
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </14 & Divmod-Nat$2=1@0/15 (/16 )/17 (/18 Tile{ HalfReuse: '-'/0 HalfReuse: )/4 AsIs: s.DenomFirst0/5 AsIs: (/8 AsIs: e./6 AsIs: )/9 AsIs: (/12 AsIs: e.First/10 AsIs: )/13 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[14]);
  refalrts::alloc_name(vm, context[15], functions[efunc_gen_Divmodm_Nat_S2A1Z0]);
  refalrts::alloc_open_bracket(vm, context[16]);
  refalrts::alloc_close_bracket(vm, context[17]);
  refalrts::alloc_open_bracket(vm, context[18]);
  refalrts::reinit_char(context[0], '-');
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[14] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[18], context[4] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[14], context[18] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Divmodm_Nat_S2A1Z4("Divmod-Nat$2=1@4", COOKIE1_, COOKIE2_, func_gen_Divmodm_Nat_S2A1Z4);


static refalrts::FnResult func_gen_Divmodm_CalcDigits_A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 42 elems
  refalrts::Iter context[42];
  refalrts::zeros( context, 42 );
  // </0 & Divmod-CalcDigits=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Divmod-CalcDigits=1@1/4 s.new1/5 (/8 e.new2/6 )/9 e.new3/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new2 as range 6
  // closed e.new3 as range 2
  do {
    // </0 & Divmod-CalcDigits=1@1/4 s.new4/5 (/8 e.new7/10 )/9 s.new5/14 e.new6/12 >/1
    context[10] = context[6];
    context[11] = context[7];
    context[12] = context[2];
    context[13] = context[3];
    // closed e.new7 as range 10
    if( ! refalrts::svar_left( context[14], context[12], context[13] ) )
      continue;
    // closed e.new6 as range 12
    do {
      // </0 & Divmod-CalcDigits=1@1/4 s.new8/5 (/8 s.new11/19 e.new12/15 )/9 s.new9/14 e.new10/17 >/1
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      context[18] = context[13];
      // closed e.new10 as range 17
      if( ! refalrts::svar_left( context[19], context[15], context[16] ) )
        continue;
      // closed e.new12 as range 15
      do {
        // </0 & Divmod-CalcDigits=1@1/4 s.new13/5 (/8 s.new17/19 e.new18/20 )/9 s.new14/14 s.new15/24 e.new16/22 >/1
        context[20] = context[15];
        context[21] = context[16];
        context[22] = context[17];
        context[23] = context[18];
        // closed e.new18 as range 20
        if( ! refalrts::svar_left( context[24], context[22], context[23] ) )
          continue;
        // closed e.new16 as range 22
        do {
          // </0 & Divmod-CalcDigits=1@1/4 s.new19/5 (/8 s.new22/19 e.new23/25 )/9 s.new20/14 s.new21/24 >/1
          context[25] = context[20];
          context[26] = context[21];
          if( ! refalrts::empty_seq( context[22], context[23] ) )
            continue;
          // closed e.new23 as range 25
          do {
            // </0 & Divmod-CalcDigits=1@1/4 s.D/5 (/8 s.NextDigit/19 e./27 )/9 s.QuotDigit/14 s.N1/24 >/1
            context[27] = context[25];
            context[28] = context[26];
            // closed e. as range 27
            //DEBUG: s.D: 5
            //DEBUG: s.NextDigit: 19
            //DEBUG: s.QuotDigit: 14
            //DEBUG: s.N1: 24
            //DEBUG: e.: 27

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ AsIs: s.QuotDigit/14 } Tile{ AsIs: </0 AsIs: & Divmod-CalcDigits=1@1/4 AsIs: s.D/5 AsIs: (/8 } Tile{ AsIs: e./27 } Tile{ AsIs: )/9 } </29 & Divmod-GuessDigit/30 Tile{ AsIs: s.N1/24 } Tile{ AsIs: s.NextDigit/19 } s.D/5/31 >/32 Tile{ AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[29]);
            refalrts::alloc_name(vm, context[30], functions[efunc_Divmodm_GuessDigit]);
            refalrts::copy_stvar(vm, context[31], context[5]);
            refalrts::alloc_close_call(vm, context[32]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[32] );
            refalrts::push_stack( vm, context[29] );
            refalrts::link_brackets( context[8], context[9] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[31], context[32] );
            res = refalrts::splice_elem( res, context[19] );
            res = refalrts::splice_elem( res, context[24] );
            res = refalrts::splice_evar( res, context[29], context[30] );
            res = refalrts::splice_elem( res, context[9] );
            res = refalrts::splice_evar( res, context[27], context[28] );
            res = refalrts::splice_evar( res, context[0], context[8] );
            res = refalrts::splice_elem( res, context[14] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & Divmod-CalcDigits=1@1/4 s.D/5 (/8 s.NextDigit/19 e./27 )/9 s.QuotDigit/14 s.N1/24 >/1
          context[27] = context[25];
          context[28] = context[26];
          // closed e. as range 27
          //DEBUG: s.D: 5
          //DEBUG: s.NextDigit: 19
          //DEBUG: s.QuotDigit: 14
          //DEBUG: s.N1: 24
          //DEBUG: e.: 27

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: s.QuotDigit/14 } Tile{ AsIs: </0 AsIs: & Divmod-CalcDigits=1@1/4 AsIs: s.D/5 AsIs: (/8 } Tile{ AsIs: e./27 } Tile{ AsIs: )/9 } </29 & Divmod-GetNextDigit$2=1@3/30 s.N1/24/31 Tile{ AsIs: s.NextDigit/19 } s.D/5/32 </33 & Divmod-GuessDigit/34 Tile{ AsIs: s.N1/24 } s.NextDigit/19/35 s.D/5/36 >/37 >/38 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[29]);
          refalrts::alloc_name(vm, context[30], functions[efunc_gen_Divmodm_GetNextDigit_S2A1Z3]);
          refalrts::copy_stvar(vm, context[31], context[24]);
          refalrts::copy_stvar(vm, context[32], context[5]);
          refalrts::alloc_open_call(vm, context[33]);
          refalrts::alloc_name(vm, context[34], functions[efunc_Divmodm_GuessDigit]);
          refalrts::copy_stvar(vm, context[35], context[19]);
          refalrts::copy_stvar(vm, context[36], context[5]);
          refalrts::alloc_close_call(vm, context[37]);
          refalrts::alloc_close_call(vm, context[38]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[38] );
          refalrts::push_stack( vm, context[29] );
          refalrts::push_stack( vm, context[37] );
          refalrts::push_stack( vm, context[33] );
          refalrts::link_brackets( context[8], context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[35], context[38] );
          res = refalrts::splice_elem( res, context[24] );
          res = refalrts::splice_evar( res, context[32], context[34] );
          res = refalrts::splice_elem( res, context[19] );
          res = refalrts::splice_evar( res, context[29], context[31] );
          res = refalrts::splice_elem( res, context[9] );
          res = refalrts::splice_evar( res, context[27], context[28] );
          res = refalrts::splice_evar( res, context[0], context[8] );
          res = refalrts::splice_elem( res, context[14] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Divmod-CalcDigits=1@1/4 s.D/5 (/8 s.NextDigit/19 e./25 )/9 s.QuotDigit/14 s.N1/24 s.N2/29 e.1/27 >/1
        context[25] = context[20];
        context[26] = context[21];
        context[27] = context[22];
        context[28] = context[23];
        // closed e. as range 25
        if( ! refalrts::svar_left( context[29], context[27], context[28] ) )
          continue;
        // closed e.1 as range 27
        //DEBUG: s.D: 5
        //DEBUG: s.NextDigit: 19
        //DEBUG: s.QuotDigit: 14
        //DEBUG: s.N1: 24
        //DEBUG: e.: 25
        //DEBUG: s.N2: 29
        //DEBUG: e.1: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: s.QuotDigit/14 } Tile{ AsIs: </0 AsIs: & Divmod-CalcDigits=1@1/4 AsIs: s.D/5 AsIs: (/8 } Tile{ AsIs: e./25 } Tile{ AsIs: )/9 } </30 & Divmod-GetNextDigit$2=1@4/31 Tile{ AsIs: s.N1/24 AsIs: s.N2/29 } (/32 Tile{ AsIs: e.1/27 } )/33 Tile{ AsIs: s.NextDigit/19 } s.D/5/34 </35 & Divmod-GuessDigit/36 s.N1/24/37 s.N2/29/38 s.D/5/39 >/40 >/41 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[30]);
        refalrts::alloc_name(vm, context[31], functions[efunc_gen_Divmodm_GetNextDigit_S2A1Z4]);
        refalrts::alloc_open_bracket(vm, context[32]);
        refalrts::alloc_close_bracket(vm, context[33]);
        refalrts::copy_stvar(vm, context[34], context[5]);
        refalrts::alloc_open_call(vm, context[35]);
        refalrts::alloc_name(vm, context[36], functions[efunc_Divmodm_GuessDigit]);
        refalrts::copy_stvar(vm, context[37], context[24]);
        refalrts::copy_stvar(vm, context[38], context[29]);
        refalrts::copy_stvar(vm, context[39], context[5]);
        refalrts::alloc_close_call(vm, context[40]);
        refalrts::alloc_close_call(vm, context[41]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[41] );
        refalrts::push_stack( vm, context[30] );
        refalrts::push_stack( vm, context[40] );
        refalrts::push_stack( vm, context[35] );
        refalrts::link_brackets( context[32], context[33] );
        refalrts::link_brackets( context[8], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[34], context[41] );
        res = refalrts::splice_elem( res, context[19] );
        res = refalrts::splice_elem( res, context[33] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_elem( res, context[32] );
        res = refalrts::splice_evar( res, context[24], context[29] );
        res = refalrts::splice_evar( res, context[30], context[31] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_elem( res, context[14] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Divmod-CalcDigits=1@1/4 s.D/5 (/8 s.NextDigit/19 e./20 )/9 s.QuotDigit/14 e.Rem/22 >/1
      context[20] = context[15];
      context[21] = context[16];
      context[22] = context[17];
      context[23] = context[18];
      // closed e. as range 20
      // closed e.Rem as range 22
      //DEBUG: s.D: 5
      //DEBUG: s.NextDigit: 19
      //DEBUG: s.QuotDigit: 14
      //DEBUG: e.: 20
      //DEBUG: e.Rem: 22

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: s.QuotDigit/14 } Tile{ AsIs: </0 AsIs: & Divmod-CalcDigits=1@1/4 AsIs: s.D/5 AsIs: (/8 } Tile{ AsIs: e./20 } Tile{ AsIs: )/9 } </24 & Divmod-GetNextDigit*2/25 (/26 Tile{ AsIs: e.Rem/22 } Tile{ AsIs: s.NextDigit/19 } )/27 s.D/5/28 >/29 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[24]);
      refalrts::alloc_name(vm, context[25], functions[efunc_gen_Divmodm_GetNextDigit_D2]);
      refalrts::alloc_open_bracket(vm, context[26]);
      refalrts::alloc_close_bracket(vm, context[27]);
      refalrts::copy_stvar(vm, context[28], context[5]);
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[24] );
      refalrts::link_brackets( context[26], context[27] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[27], context[29] );
      res = refalrts::splice_elem( res, context[19] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[24], context[26] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_elem( res, context[14] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Divmod-CalcDigits=1@1/4 s.D/5 (/8 )/9 s.QuotDigit/14 e.Rem/15 >/1
      context[15] = context[12];
      context[16] = context[13];
      if( ! refalrts::empty_seq( context[10], context[11] ) )
        continue;
      // closed e.Rem as range 15
      //DEBUG: s.D: 5
      //DEBUG: s.QuotDigit: 14
      //DEBUG: e.Rem: 15

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.D/5 (/8 )/9 s.QuotDigit/14 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: s.QuotDigit14 /0 HalfReuse: (/4 } Tile{ AsIs: e.Rem/15 } Tile{ HalfReuse: )/1 ]] }
      refalrts::reinit_svar( context[0], context[14] );
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[4], context[1] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[15], context[16] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Divmod-CalcDigits=1@1/4 s.D/5 (/8 e.NumerRest0/15 )/9 s.QuotDigit/14 e.Rem/17 >/1
    context[15] = context[10];
    context[16] = context[11];
    context[17] = context[12];
    context[18] = context[13];
    // closed e.NumerRest0 as range 15
    // closed e.Rem as range 17
    //DEBUG: s.D: 5
    //DEBUG: s.QuotDigit: 14
    //DEBUG: e.NumerRest0: 15
    //DEBUG: e.Rem: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </19 Tile{ HalfReuse: & Divmod-CalcDigits:1*2/1 } Tile{ AsIs: s.QuotDigit/14 } (/20 Tile{ AsIs: e.Rem/17 } Tile{ HalfReuse: )/0 HalfReuse: (/4 AsIs: s.D/5 HalfReuse: )/8 AsIs: e.NumerRest0/15 HalfReuse: >/9 } Tile{ ]] }
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_open_bracket(vm, context[20]);
    refalrts::reinit_name(context[1], functions[efunc_gen_Divmodm_CalcDigits_B1D2]);
    refalrts::reinit_close_bracket(context[0]);
    refalrts::reinit_open_bracket(context[4]);
    refalrts::reinit_close_bracket(context[8]);
    refalrts::reinit_close_call(context[9]);
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[4], context[8] );
    refalrts::link_brackets( context[20], context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_elem( res, context[19] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Divmod-CalcDigits=1@1/4 s.D/5 (/8 e.NumerRest0/6 )/9 e.dyn/2 >/1
  // closed e.NumerRest0 as range 6
  // closed e.dyn as range 2
  //DEBUG: s.D: 5
  //DEBUG: e.NumerRest0: 6
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-CalcDigits=1@0/4 } (/10 Tile{ AsIs: s.D/5 } )/11 Tile{ AsIs: (/8 AsIs: e.NumerRest0/6 AsIs: )/9 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[10]);
  refalrts::alloc_close_bracket(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_gen_Divmodm_CalcDigits_A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[10], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_elem( res, context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Divmodm_CalcDigits_A1Z1("Divmod-CalcDigits=1@1", COOKIE1_, COOKIE2_, func_gen_Divmodm_CalcDigits_A1Z1);


static refalrts::FnResult func_gen_Divmodm_CalcDigits_A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 28 elems
  refalrts::Iter context[28];
  refalrts::zeros( context, 28 );
  // </0 & Divmod-CalcDigits=1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Divmod-CalcDigits=1@2/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 e.new4/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 2
  do {
    // </0 & Divmod-CalcDigits=1@2/4 s.new5/5 (/8 e.new8/14 )/9 (/12 e.new9/16 )/13 s.new6/20 e.new7/18 >/1
    context[14] = context[6];
    context[15] = context[7];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[2];
    context[19] = context[3];
    // closed e.new8 as range 14
    // closed e.new9 as range 16
    if( ! refalrts::svar_left( context[20], context[18], context[19] ) )
      continue;
    // closed e.new7 as range 18
    do {
      // </0 & Divmod-CalcDigits=1@2/4 s.D/5 (/8 e./21 )/9 (/12 s.NextDigit/27 e.0/23 )/13 s.QuotDigit/20 e.Rem/25 >/1
      context[21] = context[14];
      context[22] = context[15];
      context[23] = context[16];
      context[24] = context[17];
      context[25] = context[18];
      context[26] = context[19];
      // closed e. as range 21
      // closed e.Rem as range 25
      if( ! refalrts::svar_left( context[27], context[23], context[24] ) )
        continue;
      // closed e.0 as range 23
      //DEBUG: s.D: 5
      //DEBUG: s.QuotDigit: 20
      //DEBUG: e.: 21
      //DEBUG: e.Rem: 25
      //DEBUG: s.NextDigit: 27
      //DEBUG: e.0: 23

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: s.QuotDigit/20 } Tile{ AsIs: </0 Reuse: & Divmod-CalcDigits/4 } Tile{ AsIs: (/8 } Tile{ AsIs: e.Rem/25 } Tile{ AsIs: s.NextDigit/27 } Tile{ AsIs: )/9 AsIs: (/12 } Tile{ AsIs: e.0/23 } Tile{ AsIs: )/13 } Tile{ AsIs: s.D/5 } Tile{ AsIs: e./21 } Tile{ AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_Divmodm_CalcDigits]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_elem( res, context[5] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[9], context[12] );
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_elem( res, context[20] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Divmod-CalcDigits=1@2/4 s.D/5 (/8 e./21 )/9 (/12 )/13 s.QuotDigit/20 e.Rem/23 >/1
      context[21] = context[14];
      context[22] = context[15];
      context[23] = context[18];
      context[24] = context[19];
      if( ! refalrts::empty_seq( context[16], context[17] ) )
        continue;
      // closed e. as range 21
      // closed e.Rem as range 23
      //DEBUG: s.D: 5
      //DEBUG: s.QuotDigit: 20
      //DEBUG: e.: 21
      //DEBUG: e.Rem: 23

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.D/5 (/8 e./21 )/9 (/12 )/13 s.QuotDigit/20 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: s.QuotDigit20 /0 HalfReuse: (/4 } Tile{ AsIs: e.Rem/23 } Tile{ HalfReuse: )/1 ]] }
      refalrts::reinit_svar( context[0], context[20] );
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[4], context[1] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Divmod-CalcDigits=1@2/4 s.D/5 (/8 e./21 )/9 (/12 e.NumerRest0/23 )/13 s.QuotDigit/20 e.Rem/25 >/1
    context[21] = context[14];
    context[22] = context[15];
    context[23] = context[16];
    context[24] = context[17];
    context[25] = context[18];
    context[26] = context[19];
    // closed e. as range 21
    // closed e.NumerRest0 as range 23
    // closed e.Rem as range 25
    //DEBUG: s.D: 5
    //DEBUG: s.QuotDigit: 20
    //DEBUG: e.: 21
    //DEBUG: e.NumerRest0: 23
    //DEBUG: e.Rem: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.D/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-CalcDigits:1*2/4 } Tile{ AsIs: s.QuotDigit/20 } Tile{ AsIs: (/12 } Tile{ AsIs: e.Rem/25 } Tile{ AsIs: )/13 } (/27 Tile{ HalfReuse: s.D5 /8 AsIs: e./21 AsIs: )/9 } Tile{ AsIs: e.NumerRest0/23 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[27]);
    refalrts::update_name(context[4], functions[efunc_gen_Divmodm_CalcDigits_B1D2]);
    refalrts::reinit_svar( context[8], context[5] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[27], context[9] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    res = refalrts::splice_elem( res, context[27] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_elem( res, context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Divmod-CalcDigits=1@2/4 s.D/5 (/8 e./6 )/9 (/12 e.NumerRest0/10 )/13 e.dyn/2 >/1
  // closed e. as range 6
  // closed e.NumerRest0 as range 10
  // closed e.dyn as range 2
  //DEBUG: s.D: 5
  //DEBUG: e.: 6
  //DEBUG: e.NumerRest0: 10
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.D/5 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-CalcDigits=1@0/4 } (/14 Tile{ HalfReuse: s.D5 /8 AsIs: e./6 AsIs: )/9 AsIs: (/12 AsIs: e.NumerRest0/10 AsIs: )/13 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_gen_Divmodm_CalcDigits_A1Z0]);
  refalrts::reinit_svar( context[8], context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[14], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[14] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Divmodm_CalcDigits_A1Z2("Divmod-CalcDigits=1@2", COOKIE1_, COOKIE2_, func_gen_Divmodm_CalcDigits_A1Z2);


static refalrts::FnResult func_gen_Divmodm_AdjustDigit_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 43 elems
  refalrts::Iter context[43];
  refalrts::zeros( context, 43 );
  // </0 & Divmod-AdjustDigit@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Divmod-AdjustDigit@1/4 s.new1/5 (/8 e.new2/6 )/9 s.new3/10 e.new4/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new2 as range 6
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new4 as range 2
  do {
    // </0 & Divmod-AdjustDigit@1/4 s.QuotDigit0/5 (/8 '-'/15 e.Rem/11 )/9 s.D/10 e.Denominator0/13 >/1
    context[11] = context[6];
    context[12] = context[7];
    context[13] = context[2];
    context[14] = context[3];
    context[15] = refalrts::char_left( '-', context[11], context[12] );
    if( ! context[15] )
      continue;
    // closed e.Rem as range 11
    // closed e.Denominator0 as range 13
    //DEBUG: s.QuotDigit0: 5
    //DEBUG: s.D: 10
    //DEBUG: e.Rem: 11
    //DEBUG: e.Denominator0: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </16 & Divmod-AdjustDigit/17 Tile{ AsIs: </0 Reuse: & Sub-Digits/4 AsIs: s.QuotDigit0/5 HalfReuse: 1/8 HalfReuse: >/15 } </18 & Sub-Nat:1@1/19 s.D/10/20 (/21 e.Denominator0/13/22 )/24 (/25 Tile{ AsIs: e.Rem/11 } )/26 </27 & Compare-Align/28 (/29 (/30 Tile{ AsIs: )/9 AsIs: s.D/10 AsIs: e.Denominator0/13 HalfReuse: )/1 } (/31 )/32 e.Rem/11/33 >/35 >/36 (/37 s.D/10/38 e.Denominator0/13/39 )/41 >/42 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[16]);
    refalrts::alloc_name(vm, context[17], functions[efunc_Divmodm_AdjustDigit]);
    refalrts::alloc_open_call(vm, context[18]);
    refalrts::alloc_name(vm, context[19], functions[efunc_gen_Subm_Nat_B1Z1]);
    refalrts::copy_stvar(vm, context[20], context[10]);
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::copy_evar(vm, context[22], context[23], context[13], context[14]);
    refalrts::alloc_close_bracket(vm, context[24]);
    refalrts::alloc_open_bracket(vm, context[25]);
    refalrts::alloc_close_bracket(vm, context[26]);
    refalrts::alloc_open_call(vm, context[27]);
    refalrts::alloc_name(vm, context[28], functions[efunc_Comparem_Align]);
    refalrts::alloc_open_bracket(vm, context[29]);
    refalrts::alloc_open_bracket(vm, context[30]);
    refalrts::alloc_open_bracket(vm, context[31]);
    refalrts::alloc_close_bracket(vm, context[32]);
    refalrts::copy_evar(vm, context[33], context[34], context[11], context[12]);
    refalrts::alloc_close_call(vm, context[35]);
    refalrts::alloc_close_call(vm, context[36]);
    refalrts::alloc_open_bracket(vm, context[37]);
    refalrts::copy_stvar(vm, context[38], context[10]);
    refalrts::copy_evar(vm, context[39], context[40], context[13], context[14]);
    refalrts::alloc_close_bracket(vm, context[41]);
    refalrts::alloc_close_call(vm, context[42]);
    refalrts::update_name(context[4], functions[efunc_Subm_Digits]);
    refalrts::reinit_number(context[8], 1UL);
    refalrts::reinit_close_call(context[15]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::push_stack( vm, context[42] );
    refalrts::push_stack( vm, context[16] );
    refalrts::link_brackets( context[37], context[41] );
    refalrts::push_stack( vm, context[36] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[27] );
    refalrts::link_brackets( context[31], context[32] );
    refalrts::link_brackets( context[29], context[1] );
    refalrts::link_brackets( context[30], context[9] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[21], context[24] );
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[31], context[42] );
    res = refalrts::splice_evar( res, context[9], context[1] );
    res = refalrts::splice_evar( res, context[26], context[30] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[18], context[25] );
    res = refalrts::splice_evar( res, context[0], context[15] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Divmod-AdjustDigit@1/4 s.QuotDigit0/5 (/8 e.Rem/11 )/9 s.D/10 e.Denominator0/13 >/1
    context[11] = context[6];
    context[12] = context[7];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.Rem as range 11
    // closed e.Denominator0 as range 13
    //DEBUG: s.QuotDigit0: 5
    //DEBUG: s.D: 10
    //DEBUG: e.Rem: 11
    //DEBUG: e.Denominator0: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} & Divmod-AdjustDigit@1/4 s.QuotDigit0/5 (/8 {REMOVED TILE} )/9 s.D/10 e.Denominator0/13 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: s.QuotDigit05 /0 } Tile{ AsIs: e.Rem/11 } Tile{ ]] }
    refalrts::reinit_svar( context[0], context[5] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Divmod-AdjustDigit@1/4 s.QuotDigit0/5 (/8 e.dyn0/6 )/9 s.D/10 e.Denominator0/2 >/1
  // closed e.dyn0 as range 6
  // closed e.Denominator0 as range 2
  //DEBUG: s.QuotDigit0: 5
  //DEBUG: s.D: 10
  //DEBUG: e.dyn0: 6
  //DEBUG: e.Denominator0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.QuotDigit0/5 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-AdjustDigit@0/4 } Tile{ HalfReuse: s.QuotDigit05 /8 AsIs: e.dyn0/6 HalfReuse: (/9 AsIs: s.D/10 AsIs: e.Denominator0/2 HalfReuse: )/1 } >/11 Tile{ ]] }
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_gen_Divmodm_AdjustDigit_Z0]);
  refalrts::reinit_svar( context[8], context[5] );
  refalrts::reinit_open_bracket(context[9]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[8], context[1] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Divmodm_AdjustDigit_Z1("Divmod-AdjustDigit@1", COOKIE1_, COOKIE2_, func_gen_Divmodm_AdjustDigit_Z1);


static refalrts::FnResult func_gen_Divmodm_Nat_S2A1Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & Divmod-Nat$2=1@5/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Divmod-Nat$2=1@5/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Divmod-Nat$2=1@5/4 (/7 e.Number/9 )/8 s.NormShift/13 s.RestoreShift/14 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Number as range 9
    if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
      continue;
    if( ! refalrts::svar_left( context[14], context[11], context[12] ) )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.Number: 9
    //DEBUG: s.NormShift: 13
    //DEBUG: s.RestoreShift: 14

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </15 & Divmod-Nat$2=2@5/16 Tile{ AsIs: s.RestoreShift/14 } Tile{ AsIs: s.NormShift/13 } Tile{ AsIs: </0 Reuse: & Divmod-Shl/4 HalfReuse: s.NormShift13 /7 AsIs: e.Number/9 HalfReuse: >/8 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_gen_Divmodm_Nat_S2A2Z5]);
    refalrts::update_name(context[4], functions[efunc_Divmodm_Shl]);
    refalrts::reinit_svar( context[7], context[13] );
    refalrts::reinit_close_call(context[8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Divmod-Nat$2=1@5/4 (/7 e.Number/5 )/8 e.dyn/2 >/1
  // closed e.Number as range 5
  // closed e.dyn as range 2
  //DEBUG: e.Number: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Divmod-Nat$2=1@0/10 (/11 )/12 (/13 )/14 1000000000/15 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Number/5 AsIs: )/8 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Divmodm_Nat_S2A1Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_close_bracket(vm, context[12]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::alloc_number(vm, context[15], 1000000000UL);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[15] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Divmodm_Nat_S2A1Z5("Divmod-Nat$2=1@5", COOKIE1_, COOKIE2_, func_gen_Divmodm_Nat_S2A1Z5);


static refalrts::FnResult func_gen_Openm_Auto_A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Open-Auto=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Open-Auto=1@1/4 s.new1/5 (/8 e.new2/6 )/9 e.new3/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new2 as range 6
  // closed e.new3 as range 2
  do {
    // </0 & Open-Auto=1@1/4 s.FileNameChar0/5 (/8 e./10 )/9 s.FreeHandle/14 >/1
    context[10] = context[6];
    context[11] = context[7];
    context[12] = context[2];
    context[13] = context[3];
    // closed e. as range 10
    if( ! refalrts::svar_left( context[14], context[12], context[13] ) )
      continue;
    if( ! refalrts::empty_seq( context[12], context[13] ) )
      continue;
    //DEBUG: s.FileNameChar0: 5
    //DEBUG: e.: 10
    //DEBUG: s.FreeHandle: 14

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.FileNameChar0/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Open/4 } Tile{ HalfReuse: 'w'/1 } s.FreeHandle/14/15 Tile{ HalfReuse: s.FileNameChar05 /8 AsIs: e./10 HalfReuse: >/9 AsIs: s.FreeHandle/14 } Tile{ ]] }
    refalrts::copy_stvar(vm, context[15], context[14]);
    refalrts::update_name(context[4], functions[efunc_Open]);
    refalrts::reinit_char(context[1], 'w');
    refalrts::reinit_svar( context[8], context[5] );
    refalrts::reinit_close_call(context[9]);
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[8], context[14] );
    res = refalrts::splice_elem( res, context[15] );
    res = refalrts::splice_elem( res, context[1] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Open-Auto=1@1/4 s.FileNameChar0/5 (/8 e./6 )/9 e.dyn/2 >/1
  // closed e. as range 6
  // closed e.dyn as range 2
  //DEBUG: s.FileNameChar0: 5
  //DEBUG: e.: 6
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </10 Tile{ HalfReuse: & Open-Auto=1@0/0 HalfReuse: 'w'/4 AsIs: s.FileNameChar0/5 AsIs: (/8 AsIs: e./6 AsIs: )/9 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[10]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Openm_Auto_A1Z0]);
  refalrts::reinit_char(context[4], 'w');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[10] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Openm_Auto_A1Z1("Open-Auto=1@1", COOKIE1_, COOKIE2_, func_gen_Openm_Auto_A1Z1);


static refalrts::FnResult func_gen_Openm_Auto_A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Open-Auto=1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Open-Auto=1@2/4 s.new1/5 (/8 e.new2/6 )/9 e.new3/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new2 as range 6
  // closed e.new3 as range 2
  do {
    // </0 & Open-Auto=1@2/4 s.FileNameChar0/5 (/8 e./10 )/9 s.FreeHandle/14 >/1
    context[10] = context[6];
    context[11] = context[7];
    context[12] = context[2];
    context[13] = context[3];
    // closed e. as range 10
    if( ! refalrts::svar_left( context[14], context[12], context[13] ) )
      continue;
    if( ! refalrts::empty_seq( context[12], context[13] ) )
      continue;
    //DEBUG: s.FileNameChar0: 5
    //DEBUG: e.: 10
    //DEBUG: s.FreeHandle: 14

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.FileNameChar0/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Open/4 } Tile{ HalfReuse: 'r'/1 } s.FreeHandle/14/15 Tile{ HalfReuse: s.FileNameChar05 /8 AsIs: e./10 HalfReuse: >/9 AsIs: s.FreeHandle/14 } Tile{ ]] }
    refalrts::copy_stvar(vm, context[15], context[14]);
    refalrts::update_name(context[4], functions[efunc_Open]);
    refalrts::reinit_char(context[1], 'r');
    refalrts::reinit_svar( context[8], context[5] );
    refalrts::reinit_close_call(context[9]);
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[8], context[14] );
    res = refalrts::splice_elem( res, context[15] );
    res = refalrts::splice_elem( res, context[1] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Open-Auto=1@2/4 s.FileNameChar0/5 (/8 e./6 )/9 e.dyn/2 >/1
  // closed e. as range 6
  // closed e.dyn as range 2
  //DEBUG: s.FileNameChar0: 5
  //DEBUG: e.: 6
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </10 Tile{ HalfReuse: & Open-Auto=1@0/0 HalfReuse: 'r'/4 AsIs: s.FileNameChar0/5 AsIs: (/8 AsIs: e./6 AsIs: )/9 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[10]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Openm_Auto_A1Z0]);
  refalrts::reinit_char(context[4], 'r');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[10] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Openm_Auto_A1Z2("Open-Auto=1@2", COOKIE1_, COOKIE2_, func_gen_Openm_Auto_A1Z2);


static refalrts::FnResult func_gen_Xxoutm_Chars_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 58 elems
  refalrts::Iter context[58];
  refalrts::zeros( context, 58 );
  // </0 & Xxout-Chars@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Xxout-Chars@1/4 s.new1/5 s.new2/6 e.new3/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & Xxout-Chars@1/4 s.new4/5 s.new5/6 t.new6/9 e.new7/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new7 as range 7
    do {
      // </0 & Xxout-Chars@1/4 s.new8/5 s.new9/6 s.new10/9 e.new11/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      if( ! refalrts::svar_term( context[9], context[9] ) )
        continue;
      // closed e.new11 as range 11
      do {
        // </0 & Xxout-Chars@1/4 s.T/5 s.S0/6 s.Escaped/9 e.Tail/13 >/1
        context[13] = context[11];
        context[14] = context[12];
        // closed e.Tail as range 13
        //DEBUG: s.T: 5
        //DEBUG: s.S0: 6
        //DEBUG: s.Escaped: 9
        //DEBUG: e.Tail: 13
        //5: s.T
        //6: s.S0
        //9: s.Escaped
        //13: e.Tail

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[15]);
        refalrts::alloc_name(vm, context[17], functions[efunc_gen_Xxoutm_Chars_Z1S1C1]);
        refalrts::alloc_open_bracket(vm, context[18]);
        refalrts::alloc_chars(vm, context[19], context[20], "\\\\", 2);
        refalrts::alloc_close_bracket(vm, context[21]);
        refalrts::alloc_open_bracket(vm, context[22]);
        refalrts::alloc_chars(vm, context[23], context[24], "\'\'", 2);
        refalrts::alloc_close_bracket(vm, context[25]);
        refalrts::alloc_open_bracket(vm, context[26]);
        refalrts::alloc_chars(vm, context[27], context[28], "\"\"", 2);
        refalrts::alloc_close_bracket(vm, context[29]);
        refalrts::alloc_open_bracket(vm, context[30]);
        refalrts::alloc_chars(vm, context[31], context[32], "((", 2);
        refalrts::alloc_close_bracket(vm, context[33]);
        refalrts::alloc_open_bracket(vm, context[34]);
        refalrts::alloc_chars(vm, context[35], context[36], "))", 2);
        refalrts::alloc_close_bracket(vm, context[37]);
        refalrts::alloc_open_bracket(vm, context[38]);
        refalrts::alloc_chars(vm, context[39], context[40], "<<", 2);
        refalrts::alloc_close_bracket(vm, context[41]);
        refalrts::alloc_open_bracket(vm, context[42]);
        refalrts::alloc_chars(vm, context[43], context[44], ">>", 2);
        refalrts::alloc_close_bracket(vm, context[45]);
        refalrts::alloc_open_bracket(vm, context[46]);
        refalrts::alloc_chars(vm, context[47], context[48], "\nn", 2);
        refalrts::alloc_close_bracket(vm, context[49]);
        refalrts::alloc_open_bracket(vm, context[50]);
        refalrts::alloc_chars(vm, context[51], context[52], "\tt", 2);
        refalrts::alloc_close_bracket(vm, context[53]);
        refalrts::alloc_open_bracket(vm, context[54]);
        refalrts::alloc_chars(vm, context[55], context[56], "\rr", 2);
        refalrts::alloc_close_bracket(vm, context[57]);
        refalrts::alloc_close_call(vm, context[16]);
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[15] );
        res = refalrts::splice_elem( res, context[16] );
        refalrts::link_brackets( context[54], context[57] );
        res = refalrts::splice_elem( res, context[57] );
        res = refalrts::splice_evar( res, context[55], context[56] );
        res = refalrts::splice_elem( res, context[54] );
        refalrts::link_brackets( context[50], context[53] );
        res = refalrts::splice_elem( res, context[53] );
        res = refalrts::splice_evar( res, context[51], context[52] );
        res = refalrts::splice_elem( res, context[50] );
        refalrts::link_brackets( context[46], context[49] );
        res = refalrts::splice_elem( res, context[49] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_elem( res, context[46] );
        refalrts::link_brackets( context[42], context[45] );
        res = refalrts::splice_elem( res, context[45] );
        res = refalrts::splice_evar( res, context[43], context[44] );
        res = refalrts::splice_elem( res, context[42] );
        refalrts::link_brackets( context[38], context[41] );
        res = refalrts::splice_elem( res, context[41] );
        res = refalrts::splice_evar( res, context[39], context[40] );
        res = refalrts::splice_elem( res, context[38] );
        refalrts::link_brackets( context[34], context[37] );
        res = refalrts::splice_elem( res, context[37] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_elem( res, context[34] );
        refalrts::link_brackets( context[30], context[33] );
        res = refalrts::splice_elem( res, context[33] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_elem( res, context[30] );
        refalrts::link_brackets( context[26], context[29] );
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_elem( res, context[26] );
        refalrts::link_brackets( context[22], context[25] );
        res = refalrts::splice_elem( res, context[25] );
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_elem( res, context[22] );
        refalrts::link_brackets( context[18], context[21] );
        res = refalrts::splice_elem( res, context[21] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_elem( res, context[18] );
        res = refalrts::splice_elem( res, context[17] );
        res = refalrts::splice_elem( res, context[15] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </15 & Xxout-Chars@1$1?1/19 e.Escaped-B/20 (/26 s.Escaped/28 e.Replace/24 )/27 e.Escaped-E/22 >/16
          context[17] = 0;
          context[18] = 0;
          context[19] = refalrts::call_left( context[17], context[18], context[15], context[16] );
          context[20] = 0;
          context[21] = 0;
          refalrts::start_e_loop(vm);
          do {
            context[22] = context[17];
            context[23] = context[18];
            context[24] = 0;
            context[25] = 0;
            context[26] = refalrts::brackets_left( context[24], context[25], context[22], context[23] );
            if( ! context[26] )
              continue;
            refalrts::bracket_pointers(context[26], context[27]);
            if( ! refalrts::repeated_stvar_left( vm, context[28], context[9], context[24], context[25] ) )
              continue;
            // closed e.Replace as range 24
            // closed e.Escaped-E as range 22
            //DEBUG: s.T: 5
            //DEBUG: s.S0: 6
            //DEBUG: s.Escaped: 9
            //DEBUG: e.Tail: 13
            //DEBUG: e.Escaped-B: 20
            //DEBUG: e.Replace: 24
            //DEBUG: e.Escaped-E: 22

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} s.T/5 s.S0/6 s.Escaped/9 {REMOVED TILE} {REMOVED TILE} e.Escaped-B/20 {REMOVED TILE} s.Escaped/28 {REMOVED TILE} {REMOVED TILE} e.Escaped-E/22 {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 } Tile{ AsIs: (/26 } '\\'/29 Tile{ AsIs: e.Replace/24 } Tile{ AsIs: )/27 } Tile{ AsIs: </15 Reuse: & Type/19 } Tile{ AsIs: e.Tail/13 } Tile{ AsIs: >/16 AsIs: >/1 ]] }
            refalrts::alloc_char(vm, context[29], '\\');
            refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
            refalrts::update_name(context[19], functions[efunc_Type]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[16] );
            refalrts::push_stack( vm, context[15] );
            refalrts::link_brackets( context[26], context[27] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[16];
            res = refalrts::splice_evar( res, context[13], context[14] );
            res = refalrts::splice_evar( res, context[15], context[19] );
            res = refalrts::splice_elem( res, context[27] );
            res = refalrts::splice_evar( res, context[24], context[25] );
            res = refalrts::splice_elem( res, context[29] );
            res = refalrts::splice_elem( res, context[26] );
            refalrts::splice_to_freelist_open( vm, context[4], res );
            return refalrts::cSuccess;
          } while ( refalrts::open_evar_advance( context[20], context[21], context[17], context[18] ) );
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[15], context[16]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars@1/4 'L'/5 s.S0/6 s.Letter/9 e.Tail/13 >/1
        context[13] = context[11];
        context[14] = context[12];
        if( ! refalrts::char_term( 'L', context[5] ) )
          continue;
        // closed e.Tail as range 13
        //DEBUG: s.S0: 6
        //DEBUG: s.Letter: 9
        //DEBUG: e.Tail: 13

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.S0/6 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 HalfReuse: (/5 } Tile{ AsIs: s.Letter/9 } )/15 </16 & Type/17 Tile{ AsIs: e.Tail/13 } >/18 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[15]);
        refalrts::alloc_open_call(vm, context[16]);
        refalrts::alloc_name(vm, context[17], functions[efunc_Type]);
        refalrts::alloc_close_call(vm, context[18]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_open_bracket(context[5]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[5], context[15] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[18] );
        res = refalrts::splice_evar( res, context[13], context[14] );
        res = refalrts::splice_evar( res, context[15], context[17] );
        res = refalrts::splice_elem( res, context[9] );
        refalrts::splice_to_freelist_open( vm, context[5], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars@1/4 'D'/5 s.S0/6 s.Digit/9 e.Tail/13 >/1
        context[13] = context[11];
        context[14] = context[12];
        if( ! refalrts::char_term( 'D', context[5] ) )
          continue;
        // closed e.Tail as range 13
        //DEBUG: s.S0: 6
        //DEBUG: s.Digit: 9
        //DEBUG: e.Tail: 13

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.S0/6 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 HalfReuse: (/5 } Tile{ AsIs: s.Digit/9 } )/15 </16 & Type/17 Tile{ AsIs: e.Tail/13 } >/18 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[15]);
        refalrts::alloc_open_call(vm, context[16]);
        refalrts::alloc_name(vm, context[17], functions[efunc_Type]);
        refalrts::alloc_close_call(vm, context[18]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_open_bracket(context[5]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[5], context[15] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[18] );
        res = refalrts::splice_evar( res, context[13], context[14] );
        res = refalrts::splice_evar( res, context[15], context[17] );
        res = refalrts::splice_elem( res, context[9] );
        refalrts::splice_to_freelist_open( vm, context[5], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars@1/4 'W'/5 s.S0/6 s.Word/9 e.Tail/13 >/1
        context[13] = context[11];
        context[14] = context[12];
        if( ! refalrts::char_term( 'W', context[5] ) )
          continue;
        // closed e.Tail as range 13
        //DEBUG: s.S0: 6
        //DEBUG: s.Word: 9
        //DEBUG: e.Tail: 13

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: )/4 AsIs: 'W'/5 AsIs: s.S0/6 AsIs: s.Word/9 } Tile{ AsIs: e.Tail/13 } Tile{ ]] }
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_close_bracket(context[4]);
        refalrts::link_brackets( context[0], context[4] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[13], context[14] );
        refalrts::splice_to_freelist_open( vm, context[9], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars@1/4 'N'/5 s.S0/6 s.Number/9 e.Tail/13 >/1
        context[13] = context[11];
        context[14] = context[12];
        if( ! refalrts::char_term( 'N', context[5] ) )
          continue;
        // closed e.Tail as range 13
        //DEBUG: s.S0: 6
        //DEBUG: s.Number: 9
        //DEBUG: e.Tail: 13

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: )/4 AsIs: 'N'/5 AsIs: s.S0/6 AsIs: s.Number/9 } Tile{ AsIs: e.Tail/13 } Tile{ ]] }
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_close_bracket(context[4]);
        refalrts::link_brackets( context[0], context[4] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[13], context[14] );
        refalrts::splice_to_freelist_open( vm, context[9], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars@1/4 'P'/5 s.S0/6 s.Printable/9 e.Tail/13 >/1
        context[13] = context[11];
        context[14] = context[12];
        if( ! refalrts::char_term( 'P', context[5] ) )
          continue;
        // closed e.Tail as range 13
        //DEBUG: s.S0: 6
        //DEBUG: s.Printable: 9
        //DEBUG: e.Tail: 13

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.S0/6 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 HalfReuse: (/5 } Tile{ AsIs: s.Printable/9 } )/15 </16 & Type/17 Tile{ AsIs: e.Tail/13 } >/18 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[15]);
        refalrts::alloc_open_call(vm, context[16]);
        refalrts::alloc_name(vm, context[17], functions[efunc_Type]);
        refalrts::alloc_close_call(vm, context[18]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_open_bracket(context[5]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[5], context[15] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[18] );
        res = refalrts::splice_evar( res, context[13], context[14] );
        res = refalrts::splice_evar( res, context[15], context[17] );
        res = refalrts::splice_elem( res, context[9] );
        refalrts::splice_to_freelist_open( vm, context[5], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Xxout-Chars@1/4 'O'/5 s.S0/6 s.Other/9 e.Tail/13 >/1
      context[13] = context[11];
      context[14] = context[12];
      if( ! refalrts::char_term( 'O', context[5] ) )
        continue;
      // closed e.Tail as range 13
      //DEBUG: s.S0: 6
      //DEBUG: s.Other: 9
      //DEBUG: e.Tail: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.S0/6 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars$7=1@1/4 HalfReuse: (/5 } Tile{ AsIs: e.Tail/13 } )/15 </16 & Divmod-Digits/17 </18 & Ord/19 Tile{ AsIs: s.Other/9 } >/20 16/21 >/22 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[15]);
      refalrts::alloc_open_call(vm, context[16]);
      refalrts::alloc_name(vm, context[17], functions[efunc_Divmodm_Digits]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Ord]);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_number(vm, context[21], 16UL);
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::update_name(context[4], functions[efunc_gen_Xxoutm_Chars_S7A1Z1]);
      refalrts::reinit_open_bracket(context[5]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[18] );
      refalrts::link_brackets( context[5], context[15] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[22] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_evar( res, context[15], context[19] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      refalrts::splice_to_freelist_open( vm, context[5], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Xxout-Chars@1/4 'B'/5 s.S0/6 (/9 e.Inner/13 )/10 e.Tail/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = 0;
    context[14] = 0;
    if( ! refalrts::brackets_term( context[13], context[14], context[9] ) )
      continue;
    if( ! refalrts::char_term( 'B', context[5] ) )
      continue;
    // closed e.Inner as range 13
    // closed e.Tail as range 11
    //DEBUG: s.S0: 6
    //DEBUG: e.Inner: 13
    //DEBUG: e.Tail: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: )/4 AsIs: 'B'/5 AsIs: s.S0/6 AsIs: (/9 AsIs: e.Inner/13 AsIs: )/10 } Tile{ AsIs: e.Tail/11 } Tile{ ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::link_brackets( context[9], context[10] );
    refalrts::link_brackets( context[0], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    refalrts::splice_to_freelist_open( vm, context[10], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Xxout-Chars@1/4 '*'/5 s.S0/6 >/1
    if( ! refalrts::char_term( '*', context[5] ) )
      continue;
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: s.S0: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: )/4 AsIs: '*'/5 AsIs: s.S0/6 } Tile{ ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::link_brackets( context[0], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, context[6], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Xxout-Chars@1/4 s.dyn0/5 s.S0/6 e.dyn1/2 >/1
  // closed e.dyn1 as range 2
  //DEBUG: s.dyn0: 5
  //DEBUG: s.S0: 6
  //DEBUG: e.dyn1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 & Xxout-Chars@0/8 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: s.dyn0/5 AsIs: s.S0/6 AsIs: e.dyn1/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_Xxoutm_Chars_Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Xxoutm_Chars_Z1("Xxout-Chars@1", COOKIE1_, COOKIE2_, func_gen_Xxoutm_Chars_Z1);


static refalrts::FnResult func_gen_Divmodm_Nat_S2A2Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & Divmod-Nat$2=2@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Divmod-Nat$2=2@1/4 s.new1/5 s.new2/6 s.new3/7 (/10 e.new4/8 )/11 e.new5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[8] = 0;
  context[9] = 0;
  context[10] = refalrts::brackets_left( context[8], context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[10], context[11]);
  // closed e.new4 as range 8
  // closed e.new5 as range 2
  do {
    // </0 & Divmod-Nat$2=2@1/4 s.RestoreShift0/5 s.NormShift0/6 s.DenomFirst0/7 (/10 e./12 )/11 e.Numerator$a/14 >/1
    context[12] = context[8];
    context[13] = context[9];
    context[14] = context[2];
    context[15] = context[3];
    // closed e. as range 12
    // closed e.Numerator$a as range 14
    //DEBUG: s.RestoreShift0: 5
    //DEBUG: s.NormShift0: 6
    //DEBUG: s.DenomFirst0: 7
    //DEBUG: e.: 12
    //DEBUG: e.Numerator$a: 14

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-Nat$2=3@1/4 AsIs: s.RestoreShift0/5 } Tile{ AsIs: (/10 } Tile{ AsIs: e.Numerator$a/14 } Tile{ AsIs: )/11 } </16 & Divmod-Shl/17 Tile{ AsIs: s.NormShift0/6 AsIs: s.DenomFirst0/7 } Tile{ AsIs: e./12 } >/18 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[16]);
    refalrts::alloc_name(vm, context[17], functions[efunc_Divmodm_Shl]);
    refalrts::alloc_close_call(vm, context[18]);
    refalrts::update_name(context[4], functions[efunc_gen_Divmodm_Nat_S2A3Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[16] );
    refalrts::link_brackets( context[10], context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_elem( res, context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Divmod-Nat$2=2@1/4 s.RestoreShift0/5 s.NormShift0/6 s.DenomFirst0/7 (/10 e./8 )/11 e.dyn/2 >/1
  // closed e. as range 8
  // closed e.dyn as range 2
  //DEBUG: s.RestoreShift0: 5
  //DEBUG: s.NormShift0: 6
  //DEBUG: s.DenomFirst0: 7
  //DEBUG: e.: 8
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </12 & Divmod-Nat$2=2@0/13 (/14 )/15 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: s.RestoreShift0/5 AsIs: s.NormShift0/6 AsIs: s.DenomFirst0/7 AsIs: (/10 AsIs: e./8 AsIs: )/11 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[12]);
  refalrts::alloc_name(vm, context[13], functions[efunc_gen_Divmodm_Nat_S2A2Z0]);
  refalrts::alloc_open_bracket(vm, context[14]);
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[12] );
  refalrts::link_brackets( context[10], context[11] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::link_brackets( context[14], context[15] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[12], context[15] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Divmodm_Nat_S2A2Z1("Divmod-Nat$2=2@1", COOKIE1_, COOKIE2_, func_gen_Divmodm_Nat_S2A2Z1);


static refalrts::FnResult func_gen_Divmodm_Nat_S2A2Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & Divmod-Nat$2=2@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Divmod-Nat$2=2@2/4 s.new1/5 s.new2/6 s.new3/7 (/10 e.new4/8 )/11 e.new5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[8] = 0;
  context[9] = 0;
  context[10] = refalrts::brackets_left( context[8], context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[10], context[11]);
  // closed e.new4 as range 8
  // closed e.new5 as range 2
  do {
    // </0 & Divmod-Nat$2=2@2/4 s.RestoreShift0/5 s.NormShift0/6 s.DenomFirst0/7 (/10 e./12 )/11 e.Numerator$a/14 >/1
    context[12] = context[8];
    context[13] = context[9];
    context[14] = context[2];
    context[15] = context[3];
    // closed e. as range 12
    // closed e.Numerator$a as range 14
    //DEBUG: s.RestoreShift0: 5
    //DEBUG: s.NormShift0: 6
    //DEBUG: s.DenomFirst0: 7
    //DEBUG: e.: 12
    //DEBUG: e.Numerator$a: 14

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-Nat$2=3@2/4 AsIs: s.RestoreShift0/5 } Tile{ AsIs: (/10 } Tile{ AsIs: e.Numerator$a/14 } Tile{ AsIs: )/11 } </16 & Divmod-Shl/17 Tile{ AsIs: s.NormShift0/6 AsIs: s.DenomFirst0/7 } Tile{ AsIs: e./12 } >/18 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[16]);
    refalrts::alloc_name(vm, context[17], functions[efunc_Divmodm_Shl]);
    refalrts::alloc_close_call(vm, context[18]);
    refalrts::update_name(context[4], functions[efunc_gen_Divmodm_Nat_S2A3Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[16] );
    refalrts::link_brackets( context[10], context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_elem( res, context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Divmod-Nat$2=2@2/4 s.RestoreShift0/5 s.NormShift0/6 s.DenomFirst0/7 (/10 e./8 )/11 e.dyn/2 >/1
  // closed e. as range 8
  // closed e.dyn as range 2
  //DEBUG: s.RestoreShift0: 5
  //DEBUG: s.NormShift0: 6
  //DEBUG: s.DenomFirst0: 7
  //DEBUG: e.: 8
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </12 & Divmod-Nat$2=2@0/13 (/14 '-'/15 )/16 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: s.RestoreShift0/5 AsIs: s.NormShift0/6 AsIs: s.DenomFirst0/7 AsIs: (/10 AsIs: e./8 AsIs: )/11 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[12]);
  refalrts::alloc_name(vm, context[13], functions[efunc_gen_Divmodm_Nat_S2A2Z0]);
  refalrts::alloc_open_bracket(vm, context[14]);
  refalrts::alloc_char(vm, context[15], '-');
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[12] );
  refalrts::link_brackets( context[10], context[11] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::link_brackets( context[14], context[16] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[12], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Divmodm_Nat_S2A2Z2("Divmod-Nat$2=2@2", COOKIE1_, COOKIE2_, func_gen_Divmodm_Nat_S2A2Z2);


static refalrts::FnResult func_gen_Divmodm_Nat_S2A2Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & Divmod-Nat$2=2@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Divmod-Nat$2=2@3/4 s.new1/5 s.new2/6 s.new3/7 (/10 e.new4/8 )/11 e.new5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[8] = 0;
  context[9] = 0;
  context[10] = refalrts::brackets_left( context[8], context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[10], context[11]);
  // closed e.new4 as range 8
  // closed e.new5 as range 2
  do {
    // </0 & Divmod-Nat$2=2@3/4 s.RestoreShift0/5 s.NormShift0/6 s.DenomFirst0/7 (/10 e./12 )/11 e.Numerator$a/14 >/1
    context[12] = context[8];
    context[13] = context[9];
    context[14] = context[2];
    context[15] = context[3];
    // closed e. as range 12
    // closed e.Numerator$a as range 14
    //DEBUG: s.RestoreShift0: 5
    //DEBUG: s.NormShift0: 6
    //DEBUG: s.DenomFirst0: 7
    //DEBUG: e.: 12
    //DEBUG: e.Numerator$a: 14

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-Nat$2=3@3/4 AsIs: s.RestoreShift0/5 } Tile{ AsIs: (/10 } Tile{ AsIs: e.Numerator$a/14 } Tile{ AsIs: )/11 } </16 & Divmod-Shl/17 Tile{ AsIs: s.NormShift0/6 AsIs: s.DenomFirst0/7 } Tile{ AsIs: e./12 } >/18 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[16]);
    refalrts::alloc_name(vm, context[17], functions[efunc_Divmodm_Shl]);
    refalrts::alloc_close_call(vm, context[18]);
    refalrts::update_name(context[4], functions[efunc_gen_Divmodm_Nat_S2A3Z3]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[16] );
    refalrts::link_brackets( context[10], context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_elem( res, context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Divmod-Nat$2=2@3/4 s.RestoreShift0/5 s.NormShift0/6 s.DenomFirst0/7 (/10 e./8 )/11 e.dyn/2 >/1
  // closed e. as range 8
  // closed e.dyn as range 2
  //DEBUG: s.RestoreShift0: 5
  //DEBUG: s.NormShift0: 6
  //DEBUG: s.DenomFirst0: 7
  //DEBUG: e.: 8
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </12 & Divmod-Nat$2=2@0/13 (/14 '-'/15 )/16 (/17 Tile{ HalfReuse: '-'/0 HalfReuse: )/4 AsIs: s.RestoreShift0/5 AsIs: s.NormShift0/6 AsIs: s.DenomFirst0/7 AsIs: (/10 AsIs: e./8 AsIs: )/11 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[12]);
  refalrts::alloc_name(vm, context[13], functions[efunc_gen_Divmodm_Nat_S2A2Z0]);
  refalrts::alloc_open_bracket(vm, context[14]);
  refalrts::alloc_char(vm, context[15], '-');
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::reinit_char(context[0], '-');
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[12] );
  refalrts::link_brackets( context[10], context[11] );
  refalrts::link_brackets( context[17], context[4] );
  refalrts::link_brackets( context[14], context[16] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[12], context[17] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Divmodm_Nat_S2A2Z3("Divmod-Nat$2=2@3", COOKIE1_, COOKIE2_, func_gen_Divmodm_Nat_S2A2Z3);


static refalrts::FnResult func_gen_Divmodm_Nat_S2A2Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & Divmod-Nat$2=2@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Divmod-Nat$2=2@4/4 s.new1/5 s.new2/6 s.new3/7 (/10 e.new4/8 )/11 e.new5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[8] = 0;
  context[9] = 0;
  context[10] = refalrts::brackets_left( context[8], context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[10], context[11]);
  // closed e.new4 as range 8
  // closed e.new5 as range 2
  do {
    // </0 & Divmod-Nat$2=2@4/4 s.RestoreShift0/5 s.NormShift0/6 s.DenomFirst0/7 (/10 e./12 )/11 e.Numerator$a/14 >/1
    context[12] = context[8];
    context[13] = context[9];
    context[14] = context[2];
    context[15] = context[3];
    // closed e. as range 12
    // closed e.Numerator$a as range 14
    //DEBUG: s.RestoreShift0: 5
    //DEBUG: s.NormShift0: 6
    //DEBUG: s.DenomFirst0: 7
    //DEBUG: e.: 12
    //DEBUG: e.Numerator$a: 14

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-Nat$2=3@4/4 AsIs: s.RestoreShift0/5 } Tile{ AsIs: (/10 } Tile{ AsIs: e.Numerator$a/14 } Tile{ AsIs: )/11 } </16 & Divmod-Shl/17 Tile{ AsIs: s.NormShift0/6 AsIs: s.DenomFirst0/7 } Tile{ AsIs: e./12 } >/18 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[16]);
    refalrts::alloc_name(vm, context[17], functions[efunc_Divmodm_Shl]);
    refalrts::alloc_close_call(vm, context[18]);
    refalrts::update_name(context[4], functions[efunc_gen_Divmodm_Nat_S2A3Z4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[16] );
    refalrts::link_brackets( context[10], context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_elem( res, context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Divmod-Nat$2=2@4/4 s.RestoreShift0/5 s.NormShift0/6 s.DenomFirst0/7 (/10 e./8 )/11 e.dyn/2 >/1
  // closed e. as range 8
  // closed e.dyn as range 2
  //DEBUG: s.RestoreShift0: 5
  //DEBUG: s.NormShift0: 6
  //DEBUG: s.DenomFirst0: 7
  //DEBUG: e.: 8
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </12 & Divmod-Nat$2=2@0/13 (/14 )/15 (/16 Tile{ HalfReuse: '-'/0 HalfReuse: )/4 AsIs: s.RestoreShift0/5 AsIs: s.NormShift0/6 AsIs: s.DenomFirst0/7 AsIs: (/10 AsIs: e./8 AsIs: )/11 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[12]);
  refalrts::alloc_name(vm, context[13], functions[efunc_gen_Divmodm_Nat_S2A2Z0]);
  refalrts::alloc_open_bracket(vm, context[14]);
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::alloc_open_bracket(vm, context[16]);
  refalrts::reinit_char(context[0], '-');
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[12] );
  refalrts::link_brackets( context[10], context[11] );
  refalrts::link_brackets( context[16], context[4] );
  refalrts::link_brackets( context[14], context[15] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[12], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Divmodm_Nat_S2A2Z4("Divmod-Nat$2=2@4", COOKIE1_, COOKIE2_, func_gen_Divmodm_Nat_S2A2Z4);


static refalrts::FnResult func_gen_Divmodm_CalcDigits_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & Divmod-CalcDigits@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Divmod-CalcDigits@2/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Divmod-CalcDigits@2/4 (/7 e.Numerator0/9 )/8 e.NumerRest0/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Numerator0 as range 9
    // closed e.NumerRest0 as range 11
    //DEBUG: e.Numerator0: 9
    //DEBUG: e.NumerRest0: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </13 & Divmod-CalcDigits=1@3/14 (/15 Tile{ AsIs: e.NumerRest0/11 } )/16 Tile{ AsIs: </0 Reuse: & Divmod-GetNextDigit*2/4 AsIs: (/7 AsIs: e.Numerator0/9 AsIs: )/8 } >/17 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_gen_Divmodm_CalcDigits_A1Z3]);
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_Divmodm_GetNextDigit_D2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[15] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Divmod-CalcDigits@2/4 (/7 e.Numerator0/5 )/8 e.NumerRest0/2 >/1
  // closed e.Numerator0 as range 5
  // closed e.NumerRest0 as range 2
  //DEBUG: e.Numerator0: 5
  //DEBUG: e.NumerRest0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-CalcDigits@0/4 AsIs: (/7 AsIs: e.Numerator0/5 AsIs: )/8 } (/9 Tile{ AsIs: e.NumerRest0/2 } )/10 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::update_name(context[4], functions[efunc_gen_Divmodm_CalcDigits_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[10] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Divmodm_CalcDigits_Z2("Divmod-CalcDigits@2", COOKIE1_, COOKIE2_, func_gen_Divmodm_CalcDigits_Z2);


static refalrts::FnResult func_gen_Divmodm_GetNextDigit_S2A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & Divmod-GetNextDigit$2=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Divmod-GetNextDigit$2=1@1/4 s.new1/5 s.new2/6 s.new3/7 (/10 e.new4/8 )/11 e.new5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[8] = 0;
  context[9] = 0;
  context[10] = refalrts::brackets_left( context[8], context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[10], context[11]);
  // closed e.new4 as range 8
  // closed e.new5 as range 2
  do {
    // </0 & Divmod-GetNextDigit$2=1@1/4 s.N3/5 s.NextDigit/6 s.D0/7 (/10 e./12 )/11 s.QuotDigit/16 s.RemDigit/17 >/1
    context[12] = context[8];
    context[13] = context[9];
    context[14] = context[2];
    context[15] = context[3];
    // closed e. as range 12
    if( ! refalrts::svar_left( context[16], context[14], context[15] ) )
      continue;
    if( ! refalrts::svar_left( context[17], context[14], context[15] ) )
      continue;
    if( ! refalrts::empty_seq( context[14], context[15] ) )
      continue;
    //DEBUG: s.N3: 5
    //DEBUG: s.NextDigit: 6
    //DEBUG: s.D0: 7
    //DEBUG: e.: 12
    //DEBUG: s.QuotDigit: 16
    //DEBUG: s.RemDigit: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.RemDigit/17 {REMOVED TILE}
    //RESULT: Tile{ [[ } </18 & Divmod-AdjustDigit@1/19 Tile{ AsIs: s.QuotDigit/16 } (/20 </21 & Sub-Normed/22 (/23 '+'/24 Tile{ AsIs: </0 Reuse: & LeadingZeros/4 AsIs: s.N3/5 AsIs: s.NextDigit/6 } >/25 )/26 '+'/27 </28 & Mul-Nat-Line/29 Tile{ HalfReuse: s.D07 /10 AsIs: e./12 HalfReuse: s.QuotDigit16 /11 } >/30 >/31 )/32 Tile{ AsIs: s.D0/7 } e./12/33 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[18]);
    refalrts::alloc_name(vm, context[19], functions[efunc_gen_Divmodm_AdjustDigit_Z1]);
    refalrts::alloc_open_bracket(vm, context[20]);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_Subm_Normed]);
    refalrts::alloc_open_bracket(vm, context[23]);
    refalrts::alloc_char(vm, context[24], '+');
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::alloc_close_bracket(vm, context[26]);
    refalrts::alloc_char(vm, context[27], '+');
    refalrts::alloc_open_call(vm, context[28]);
    refalrts::alloc_name(vm, context[29], functions[efunc_Mulm_Natm_Line]);
    refalrts::alloc_close_call(vm, context[30]);
    refalrts::alloc_close_call(vm, context[31]);
    refalrts::alloc_close_bracket(vm, context[32]);
    refalrts::copy_evar(vm, context[33], context[34], context[12], context[13]);
    refalrts::update_name(context[4], functions[efunc_LeadingZeros]);
    refalrts::reinit_svar( context[10], context[7] );
    refalrts::reinit_svar( context[11], context[16] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[18] );
    refalrts::link_brackets( context[20], context[32] );
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[30] );
    refalrts::push_stack( vm, context[28] );
    refalrts::link_brackets( context[23], context[26] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_elem( res, context[7] );
    res = refalrts::splice_evar( res, context[30], context[32] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[25], context[29] );
    res = refalrts::splice_evar( res, context[0], context[6] );
    res = refalrts::splice_evar( res, context[20], context[24] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Divmod-GetNextDigit$2=1@1/4 s.N3/5 s.NextDigit/6 s.D0/7 (/10 e./8 )/11 e.dyn/2 >/1
  // closed e. as range 8
  // closed e.dyn as range 2
  //DEBUG: s.N3: 5
  //DEBUG: s.NextDigit: 6
  //DEBUG: s.D0: 7
  //DEBUG: e.: 8
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-GetNextDigit$2=1@0/4 AsIs: s.N3/5 AsIs: s.NextDigit/6 } (/12 )/13 Tile{ AsIs: s.D0/7 AsIs: (/10 AsIs: e./8 AsIs: )/11 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_gen_Divmodm_GetNextDigit_S2A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[10], context[11] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[7];
  res = refalrts::splice_evar( res, context[12], context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Divmodm_GetNextDigit_S2A1Z1("Divmod-GetNextDigit$2=1@1", COOKIE1_, COOKIE2_, func_gen_Divmodm_GetNextDigit_S2A1Z1);


static refalrts::FnResult func_gen_Divmodm_GetNextDigit_S2A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 40 elems
  refalrts::Iter context[40];
  refalrts::zeros( context, 40 );
  // </0 & Divmod-GetNextDigit$2=1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Divmod-GetNextDigit$2=1@2/4 s.new1/5 s.new2/6 (/9 e.new3/7 )/10 s.new4/11 s.new5/12 (/15 e.new6/13 )/16 e.new7/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new3 as range 7
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[12], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new6 as range 13
  // closed e.new7 as range 2
  do {
    // </0 & Divmod-GetNextDigit$2=1@2/4 s.N3/5 s.N4/6 (/9 e.1/17 )/10 s.NextDigit/11 s.D0/12 (/15 e./19 )/16 s.QuotDigit/23 s.RemDigit/24 >/1
    context[17] = context[7];
    context[18] = context[8];
    context[19] = context[13];
    context[20] = context[14];
    context[21] = context[2];
    context[22] = context[3];
    // closed e.1 as range 17
    // closed e. as range 19
    if( ! refalrts::svar_left( context[23], context[21], context[22] ) )
      continue;
    if( ! refalrts::svar_left( context[24], context[21], context[22] ) )
      continue;
    if( ! refalrts::empty_seq( context[21], context[22] ) )
      continue;
    //DEBUG: s.N3: 5
    //DEBUG: s.N4: 6
    //DEBUG: s.NextDigit: 11
    //DEBUG: s.D0: 12
    //DEBUG: e.1: 17
    //DEBUG: e.: 19
    //DEBUG: s.QuotDigit: 23
    //DEBUG: s.RemDigit: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.RemDigit/24 {REMOVED TILE}
    //RESULT: Tile{ [[ } </25 & Divmod-AdjustDigit@1/26 Tile{ AsIs: s.QuotDigit/23 } Tile{ AsIs: (/9 } </27 & Sub-Normed/28 (/29 '+'/30 Tile{ AsIs: </0 Reuse: & LeadingZeros/4 AsIs: s.N3/5 AsIs: s.N4/6 } Tile{ AsIs: e.1/17 } Tile{ AsIs: s.NextDigit/11 } >/31 Tile{ AsIs: )/10 } '+'/32 </33 & Mul-Nat-Line/34 Tile{ HalfReuse: s.D012 /15 AsIs: e./19 HalfReuse: s.QuotDigit23 /16 } >/35 >/36 )/37 Tile{ AsIs: s.D0/12 } e./19/38 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[25]);
    refalrts::alloc_name(vm, context[26], functions[efunc_gen_Divmodm_AdjustDigit_Z1]);
    refalrts::alloc_open_call(vm, context[27]);
    refalrts::alloc_name(vm, context[28], functions[efunc_Subm_Normed]);
    refalrts::alloc_open_bracket(vm, context[29]);
    refalrts::alloc_char(vm, context[30], '+');
    refalrts::alloc_close_call(vm, context[31]);
    refalrts::alloc_char(vm, context[32], '+');
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_Mulm_Natm_Line]);
    refalrts::alloc_close_call(vm, context[35]);
    refalrts::alloc_close_call(vm, context[36]);
    refalrts::alloc_close_bracket(vm, context[37]);
    refalrts::copy_evar(vm, context[38], context[39], context[19], context[20]);
    refalrts::update_name(context[4], functions[efunc_LeadingZeros]);
    refalrts::reinit_svar( context[15], context[12] );
    refalrts::reinit_svar( context[16], context[23] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[25] );
    refalrts::link_brackets( context[9], context[37] );
    refalrts::push_stack( vm, context[36] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[33] );
    refalrts::link_brackets( context[29], context[10] );
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[38], context[39] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[35], context[37] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[32], context[34] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_elem( res, context[31] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[0], context[6] );
    res = refalrts::splice_evar( res, context[27], context[30] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_elem( res, context[23] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Divmod-GetNextDigit$2=1@2/4 s.N3/5 s.N4/6 (/9 e.1/7 )/10 s.NextDigit/11 s.D0/12 (/15 e./13 )/16 e.dyn/2 >/1
  // closed e.1 as range 7
  // closed e. as range 13
  // closed e.dyn as range 2
  //DEBUG: s.N3: 5
  //DEBUG: s.N4: 6
  //DEBUG: s.NextDigit: 11
  //DEBUG: s.D0: 12
  //DEBUG: e.1: 7
  //DEBUG: e.: 13
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.NextDigit/11 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-GetNextDigit$2=1@0/4 AsIs: s.N3/5 AsIs: s.N4/6 AsIs: (/9 AsIs: e.1/7 HalfReuse: s.NextDigit11 /10 } )/17 Tile{ AsIs: s.D0/12 AsIs: (/15 AsIs: e./13 AsIs: )/16 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[17]);
  refalrts::update_name(context[4], functions[efunc_gen_Divmodm_GetNextDigit_S2A1Z0]);
  refalrts::reinit_svar( context[10], context[11] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[9], context[17] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[12];
  res = refalrts::splice_elem( res, context[17] );
  refalrts::splice_to_freelist_open( vm, context[10], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Divmodm_GetNextDigit_S2A1Z2("Divmod-GetNextDigit$2=1@2", COOKIE1_, COOKIE2_, func_gen_Divmodm_GetNextDigit_S2A1Z2);


static refalrts::FnResult func_gen_Subm_Nat_B1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & Sub-Nat:1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Sub-Nat:1@1/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 e.new4/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 2
  do {
    // </0 & Sub-Nat:1@1/4 s.new5/5 (/8 e.new7/14 )/9 (/12 e.new8/16 )/13 s.new6/20 >/1
    context[14] = context[6];
    context[15] = context[7];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[2];
    context[19] = context[3];
    // closed e.new7 as range 14
    // closed e.new8 as range 16
    if( ! refalrts::svar_left( context[20], context[18], context[19] ) )
      continue;
    if( ! refalrts::empty_seq( context[18], context[19] ) )
      continue;
    do {
      // </0 & Sub-Nat:1@1/4 s.D/5 (/8 e.Denominator0/21 )/9 (/12 e.Rem/23 )/13 '+'/20 >/1
      context[21] = context[14];
      context[22] = context[15];
      context[23] = context[16];
      context[24] = context[17];
      if( ! refalrts::char_term( '+', context[20] ) )
        continue;
      // closed e.Denominator0 as range 21
      // closed e.Rem as range 23
      //DEBUG: s.D: 5
      //DEBUG: e.Denominator0: 21
      //DEBUG: e.Rem: 23

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.D/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & LeadingZeros/4 } </25 Tile{ HalfReuse: & DoSub-Nat-Nat/13 } Tile{ AsIs: (/12 } Tile{ HalfReuse: s.D5 /8 AsIs: e.Denominator0/21 AsIs: )/9 } Tile{ AsIs: e.Rem/23 } Tile{ HalfReuse: >/20 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[25]);
      refalrts::update_name(context[4], functions[efunc_LeadingZeros]);
      refalrts::reinit_name(context[13], functions[efunc_DoSubm_Natm_Nat]);
      refalrts::reinit_svar( context[8], context[5] );
      refalrts::reinit_close_call(context[20]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[25] );
      refalrts::link_brackets( context[12], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[20];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[8], context[9] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_elem( res, context[25] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Sub-Nat:1@1/4 s.D/5 (/8 e.Denominator0/21 )/9 (/12 e.Rem/23 )/13 '-'/20 >/1
      context[21] = context[14];
      context[22] = context[15];
      context[23] = context[16];
      context[24] = context[17];
      if( ! refalrts::char_term( '-', context[20] ) )
        continue;
      // closed e.Denominator0 as range 21
      // closed e.Rem as range 23
      //DEBUG: s.D: 5
      //DEBUG: e.Denominator0: 21
      //DEBUG: e.Rem: 23

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.D/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } '-'/25 Tile{ AsIs: </0 Reuse: & LeadingZeros/4 } Tile{ HalfReuse: </8 } Tile{ HalfReuse: & DoSub-Nat-Nat/9 AsIs: (/12 AsIs: e.Rem/23 AsIs: )/13 HalfReuse: s.D5 /20 } Tile{ AsIs: e.Denominator0/21 } >/26 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_char(vm, context[25], '-');
      refalrts::alloc_close_call(vm, context[26]);
      refalrts::update_name(context[4], functions[efunc_LeadingZeros]);
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[9], functions[efunc_DoSubm_Natm_Nat]);
      refalrts::reinit_svar( context[20], context[5] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[8] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[9], context[20] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_elem( res, context[25] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Sub-Nat:1@1/4 s.D/5 (/8 e.Denominator0/21 )/9 (/12 e.Rem/23 )/13 '0'/20 >/1
    context[21] = context[14];
    context[22] = context[15];
    context[23] = context[16];
    context[24] = context[17];
    if( ! refalrts::char_term( '0', context[20] ) )
      continue;
    // closed e.Denominator0 as range 21
    // closed e.Rem as range 23
    //DEBUG: s.D: 5
    //DEBUG: e.Denominator0: 21
    //DEBUG: e.Rem: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Sub-Nat:1@1/4 s.D/5 (/8 e.Denominator0/21 )/9 (/12 e.Rem/23 )/13 '0'/20 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 0/1 ]] }
    refalrts::reinit_number(context[1], 0UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Sub-Nat:1@1/4 s.D/5 (/8 e.Denominator0/6 )/9 (/12 e.Rem/10 )/13 e.dyn/2 >/1
  // closed e.Denominator0 as range 6
  // closed e.Rem as range 10
  // closed e.dyn as range 2
  //DEBUG: s.D: 5
  //DEBUG: e.Denominator0: 6
  //DEBUG: e.Rem: 10
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.D/5 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sub-Nat:1@0/4 } (/14 Tile{ HalfReuse: s.D5 /8 AsIs: e.Denominator0/6 AsIs: )/9 AsIs: (/12 AsIs: e.Rem/10 AsIs: )/13 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_gen_Subm_Nat_B1Z0]);
  refalrts::reinit_svar( context[8], context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[14], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[14] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Subm_Nat_B1Z1("Sub-Nat:1@1", COOKIE1_, COOKIE2_, func_gen_Subm_Nat_B1Z1);


static refalrts::FnResult func_gen_DoImplode_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & DoImplode@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoImplode@2/4 (/7 e.new1/5 )/8 s.new2/9 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & DoImplode@2/4 (/7 e.new7/10 )/8 s.new4/9 s.new5/14 e.new6/12 >/1
    context[10] = context[5];
    context[11] = context[6];
    context[12] = context[2];
    context[13] = context[3];
    // closed e.new7 as range 10
    if( ! refalrts::svar_left( context[14], context[12], context[13] ) )
      continue;
    // closed e.new6 as range 12
    do {
      // </0 & DoImplode@2/4 (/7 e.X/15 )/8 s.X/9 '-'/14 e.Tail/17 >/1
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      context[18] = context[13];
      if( ! refalrts::char_term( '-', context[14] ) )
        continue;
      // closed e.X as range 15
      // closed e.Tail as range 17
      //DEBUG: s.X: 9
      //DEBUG: e.X: 15
      //DEBUG: e.Tail: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.X/9 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoImplode@2/4 AsIs: (/7 AsIs: e.X/15 HalfReuse: s.X9 /8 } )/19 Tile{ AsIs: '-'/14 AsIs: e.Tail/17 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[19]);
      refalrts::reinit_svar( context[8], context[9] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[19] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_elem( res, context[19] );
      refalrts::splice_to_freelist_open( vm, context[8], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoImplode@2/4 (/7 e.X/15 )/8 s.X/9 '_'/14 e.Tail/17 >/1
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      context[18] = context[13];
      if( ! refalrts::char_term( '_', context[14] ) )
        continue;
      // closed e.X as range 15
      // closed e.Tail as range 17
      //DEBUG: s.X: 9
      //DEBUG: e.X: 15
      //DEBUG: e.Tail: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.X/9 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoImplode@2/4 AsIs: (/7 AsIs: e.X/15 HalfReuse: s.X9 /8 } )/19 Tile{ AsIs: '_'/14 AsIs: e.Tail/17 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[19]);
      refalrts::reinit_svar( context[8], context[9] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[19] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_elem( res, context[19] );
      refalrts::splice_to_freelist_open( vm, context[8], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoImplode@2/4 (/7 e.X/15 )/8 s.X/9 '$'/14 e.Tail/17 >/1
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      context[18] = context[13];
      if( ! refalrts::char_term( '$', context[14] ) )
        continue;
      // closed e.X as range 15
      // closed e.Tail as range 17
      //DEBUG: s.X: 9
      //DEBUG: e.X: 15
      //DEBUG: e.Tail: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.X/9 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoImplode@2/4 AsIs: (/7 AsIs: e.X/15 HalfReuse: s.X9 /8 } )/19 Tile{ AsIs: '$'/14 AsIs: e.Tail/17 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[19]);
      refalrts::reinit_svar( context[8], context[9] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[19] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_elem( res, context[19] );
      refalrts::splice_to_freelist_open( vm, context[8], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DoImplode@2/4 (/7 e.X/15 )/8 s.X/9 s.Next/14 e.Tail/17 >/1
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      context[18] = context[13];
      // closed e.X as range 15
      // closed e.Tail as range 17
      //DEBUG: s.X: 9
      //DEBUG: s.Next: 14
      //DEBUG: e.X: 15
      //DEBUG: e.Tail: 17
      //9: s.X
      //14: s.Next
      //15: e.X
      //17: e.Tail
      //24: s.Next

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[19]);
      refalrts::alloc_name(vm, context[21], functions[efunc_gen_DoImplode_Z2S4C1]);
      refalrts::alloc_open_call(vm, context[22]);
      refalrts::alloc_name(vm, context[23], functions[efunc_Type]);
      refalrts::copy_stvar(vm, context[24], context[14]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[19] );
      res = refalrts::splice_elem( res, context[20] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[22] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_stvar( res, context[24] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_elem( res, context[21] );
      res = refalrts::splice_elem( res, context[19] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </19 & DoImplode@2$4?1/23 'L'/24 s.SubType/25 s.Lettern/26 >/20
        context[21] = 0;
        context[22] = 0;
        context[23] = refalrts::call_left( context[21], context[22], context[19], context[20] );
        context[24] = refalrts::char_left( 'L', context[21], context[22] );
        if( ! context[24] )
          continue;
        if( ! refalrts::svar_left( context[25], context[21], context[22] ) )
          continue;
        if( ! refalrts::svar_left( context[26], context[21], context[22] ) )
          continue;
        if( ! refalrts::empty_seq( context[21], context[22] ) )
          continue;
        //DEBUG: s.X: 9
        //DEBUG: s.Next: 14
        //DEBUG: e.X: 15
        //DEBUG: e.Tail: 17
        //DEBUG: s.SubType: 25
        //DEBUG: s.Lettern: 26

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.X/9 s.Next/14 {REMOVED TILE} </19 & DoImplode@2$4?1/23 {REMOVED TILE} s.SubType/25 {REMOVED TILE} >/20 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoImplode@2/4 AsIs: (/7 AsIs: e.X/15 HalfReuse: s.X9 /8 } Tile{ HalfReuse: )/24 } Tile{ AsIs: s.Lettern/26 } Tile{ AsIs: e.Tail/17 } Tile{ AsIs: >/1 ]] }
        refalrts::reinit_svar( context[8], context[9] );
        refalrts::reinit_close_bracket(context[24]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[24] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[17], context[18] );
        res = refalrts::splice_elem( res, context[26] );
        res = refalrts::splice_elem( res, context[24] );
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[19], context[20]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoImplode@2/4 (/7 e.X/15 )/8 s.X/9 s.Next/14 e.Tail/17 >/1
    context[15] = context[10];
    context[16] = context[11];
    context[17] = context[12];
    context[18] = context[13];
    // closed e.X as range 15
    // closed e.Tail as range 17
    //DEBUG: s.X: 9
    //DEBUG: s.Next: 14
    //DEBUG: e.X: 15
    //DEBUG: e.Tail: 17
    //9: s.X
    //14: s.Next
    //15: e.X
    //17: e.Tail
    //24: s.Next

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[21], functions[efunc_gen_DoImplode_Z2S5C1]);
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_name(vm, context[23], functions[efunc_Type]);
    refalrts::copy_stvar(vm, context[24], context[14]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::alloc_close_call(vm, context[20]);
    refalrts::push_stack( vm, context[20] );
    refalrts::push_stack( vm, context[19] );
    res = refalrts::splice_elem( res, context[20] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[22] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_stvar( res, context[24] );
    res = refalrts::splice_elem( res, context[23] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_elem( res, context[19] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </19 & DoImplode@2$5?1/23 'D'/24 s.SubType/25 s.Digit/26 >/20
      context[21] = 0;
      context[22] = 0;
      context[23] = refalrts::call_left( context[21], context[22], context[19], context[20] );
      context[24] = refalrts::char_left( 'D', context[21], context[22] );
      if( ! context[24] )
        continue;
      if( ! refalrts::svar_left( context[25], context[21], context[22] ) )
        continue;
      if( ! refalrts::svar_left( context[26], context[21], context[22] ) )
        continue;
      if( ! refalrts::empty_seq( context[21], context[22] ) )
        continue;
      //DEBUG: s.X: 9
      //DEBUG: s.Next: 14
      //DEBUG: e.X: 15
      //DEBUG: e.Tail: 17
      //DEBUG: s.SubType: 25
      //DEBUG: s.Digit: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.X/9 s.Next/14 {REMOVED TILE} </19 & DoImplode@2$5?1/23 {REMOVED TILE} s.SubType/25 {REMOVED TILE} >/20 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoImplode@2/4 AsIs: (/7 AsIs: e.X/15 HalfReuse: s.X9 /8 } Tile{ HalfReuse: )/24 } Tile{ AsIs: s.Digit/26 } Tile{ AsIs: e.Tail/17 } Tile{ AsIs: >/1 ]] }
      refalrts::reinit_svar( context[8], context[9] );
      refalrts::reinit_close_bracket(context[24]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[24] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_elem( res, context[24] );
      refalrts::splice_to_freelist_open( vm, context[8], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[19], context[20]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoImplode@2/4 (/7 e.X/10 )/8 s.X/9 e.Other/12 >/1
    context[10] = context[5];
    context[11] = context[6];
    context[12] = context[2];
    context[13] = context[3];
    // closed e.X as range 10
    // closed e.Other as range 12
    //DEBUG: s.X: 9
    //DEBUG: e.X: 10
    //DEBUG: e.Other: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Implode_Ext/4 } Tile{ AsIs: e.X/10 } Tile{ AsIs: s.X/9 } Tile{ AsIs: >/1 } Tile{ AsIs: e.Other/12 } Tile{ ]] }
    refalrts::update_name(context[4], functions[efunc_Implodeu_Ext]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoImplode@2/4 (/7 e.X/5 )/8 s.X/9 e.dyn1/2 >/1
  // closed e.X as range 5
  // closed e.dyn1 as range 2
  //DEBUG: s.X: 9
  //DEBUG: e.X: 5
  //DEBUG: e.dyn1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.X/9 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoImplode@0/4 AsIs: (/7 AsIs: e.X/5 HalfReuse: s.X9 /8 } )/10 Tile{ AsIs: e.dyn1/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::update_name(context[4], functions[efunc_gen_DoImplode_Z0]);
  refalrts::reinit_svar( context[8], context[9] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[10] );
  refalrts::splice_to_freelist_open( vm, context[8], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoImplode_Z2("DoImplode@2", COOKIE1_, COOKIE2_, func_gen_DoImplode_Z2);


static refalrts::FnResult func_gen_Divmodm_Nat_S2A2Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Divmod-Nat$2=2@5/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Divmod-Nat$2=2@5/4 s.new1/5 s.new2/6 e.new3/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & Divmod-Nat$2=2@5/4 s.RestoreShift0/5 s.NormShift0/6 e.Numerator$a/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    // closed e.Numerator$a as range 7
    //DEBUG: s.RestoreShift0: 5
    //DEBUG: s.NormShift0: 6
    //DEBUG: e.Numerator$a: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-Nat$2=3@1/4 AsIs: s.RestoreShift0/5 } (/9 Tile{ AsIs: e.Numerator$a/7 } )/10 </11 & Divmod-Shl/12 Tile{ AsIs: s.NormShift0/6 } 1000000000/13 >/14 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[9]);
    refalrts::alloc_close_bracket(vm, context[10]);
    refalrts::alloc_open_call(vm, context[11]);
    refalrts::alloc_name(vm, context[12], functions[efunc_Divmodm_Shl]);
    refalrts::alloc_number(vm, context[13], 1000000000UL);
    refalrts::alloc_close_call(vm, context[14]);
    refalrts::update_name(context[4], functions[efunc_gen_Divmodm_Nat_S2A3Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[11] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[6] );
    res = refalrts::splice_evar( res, context[10], context[12] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_elem( res, context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Divmod-Nat$2=2@5/4 s.RestoreShift0/5 s.NormShift0/6 e.dyn/2 >/1
  // closed e.dyn as range 2
  //DEBUG: s.RestoreShift0: 5
  //DEBUG: s.NormShift0: 6
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-Nat$2=2@0/4 } (/7 )/8 (/9 )/10 Tile{ AsIs: s.RestoreShift0/5 AsIs: s.NormShift0/6 } 1000000000/11 (/12 )/13 Tile{ AsIs: e.dyn/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_close_bracket(vm, context[8]);
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::alloc_number(vm, context[11], 1000000000UL);
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_gen_Divmodm_Nat_S2A2Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[11], context[13] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[7], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Divmodm_Nat_S2A2Z5("Divmod-Nat$2=2@5", COOKIE1_, COOKIE2_, func_gen_Divmodm_Nat_S2A2Z5);


static refalrts::FnResult func_gen_Xxoutm_Chars_S7A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 30 elems
  refalrts::Iter context[30];
  refalrts::zeros( context, 30 );
  // </0 & Xxout-Chars$7=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Xxout-Chars$7=1@1/4 (/9 e.new1/7 )/10 (/13 s.new2/15 )/14 s.new3/16 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    context[11] = 0;
    context[12] = 0;
    context[13] = refalrts::brackets_left( context[11], context[12], context[5], context[6] );
    if( ! context[13] )
      continue;
    refalrts::bracket_pointers(context[13], context[14]);
    // closed e.new1 as range 7
    if( ! refalrts::svar_left( context[15], context[11], context[12] ) )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.new5/17 )/10 (/13 0/15 )/14 s.new4/16 >/1
      context[17] = context[7];
      context[18] = context[8];
      if( ! refalrts::number_term( 0UL, context[15] ) )
        continue;
      // closed e.new5 as range 17
      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 0/15 )/14 0/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 0UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '0'/13 HalfReuse: '0'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '0');
        refalrts::reinit_char(context[15], '0');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 0/15 )/14 1/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 1UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '0'/13 HalfReuse: '1'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '0');
        refalrts::reinit_char(context[15], '1');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 0/15 )/14 2/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 2UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '0'/13 HalfReuse: '2'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '0');
        refalrts::reinit_char(context[15], '2');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 0/15 )/14 3/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 3UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '0'/13 HalfReuse: '3'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '0');
        refalrts::reinit_char(context[15], '3');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 0/15 )/14 4/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 4UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '0'/13 HalfReuse: '4'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '0');
        refalrts::reinit_char(context[15], '4');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 0/15 )/14 5/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 5UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '0'/13 HalfReuse: '5'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '0');
        refalrts::reinit_char(context[15], '5');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 0/15 )/14 6/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 6UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '0'/13 HalfReuse: '6'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '0');
        refalrts::reinit_char(context[15], '6');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 0/15 )/14 7/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 7UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '0'/13 HalfReuse: '7'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '0');
        refalrts::reinit_char(context[15], '7');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 0/15 )/14 8/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 8UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '0'/13 HalfReuse: '8'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '0');
        refalrts::reinit_char(context[15], '8');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 0/15 )/14 9/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 9UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '0'/13 HalfReuse: '9'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '0');
        refalrts::reinit_char(context[15], '9');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 0/15 )/14 10/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 10UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '0'/13 HalfReuse: 'A'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '0');
        refalrts::reinit_char(context[15], 'A');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 0/15 )/14 11/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 11UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '0'/13 HalfReuse: 'B'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '0');
        refalrts::reinit_char(context[15], 'B');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 0/15 )/14 12/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 12UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '0'/13 HalfReuse: 'C'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '0');
        refalrts::reinit_char(context[15], 'C');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 0/15 )/14 13/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 13UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '0'/13 HalfReuse: 'D'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '0');
        refalrts::reinit_char(context[15], 'D');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 0/15 )/14 14/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 14UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '0'/13 HalfReuse: 'E'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '0');
        refalrts::reinit_char(context[15], 'E');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 0/15 )/14 15/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 15UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '0'/13 HalfReuse: 'F'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '0');
        refalrts::reinit_char(context[15], 'F');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 0/15 )/14 s.Low/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      // closed e.Tail0 as range 19
      //DEBUG: s.Low: 16
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '0'/13 HalfReuse: </15 HalfReuse: & Hex*16/14 AsIs: s.Low/16 AsIs: >/1 } )/22 </23 & Type/24 Tile{ AsIs: e.Tail0/19 } >/25 >/26 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_bracket(vm, context[22]);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_Type]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::alloc_close_call(vm, context[26]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '0');
      refalrts::reinit_open_call(context[15]);
      refalrts::reinit_name(context[14], functions[efunc_gen_Hex_D16]);
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[23] );
      refalrts::link_brackets( context[9], context[22] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[22], context[24] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.new5/17 )/10 (/13 1/15 )/14 s.new4/16 >/1
      context[17] = context[7];
      context[18] = context[8];
      if( ! refalrts::number_term( 1UL, context[15] ) )
        continue;
      // closed e.new5 as range 17
      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 1/15 )/14 0/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 0UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '1'/13 HalfReuse: '0'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '1');
        refalrts::reinit_char(context[15], '0');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 1/15 )/14 1/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 1UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '1'/13 HalfReuse: '1'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '1');
        refalrts::reinit_char(context[15], '1');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 1/15 )/14 2/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 2UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '1'/13 HalfReuse: '2'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '1');
        refalrts::reinit_char(context[15], '2');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 1/15 )/14 3/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 3UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '1'/13 HalfReuse: '3'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '1');
        refalrts::reinit_char(context[15], '3');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 1/15 )/14 4/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 4UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '1'/13 HalfReuse: '4'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '1');
        refalrts::reinit_char(context[15], '4');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 1/15 )/14 5/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 5UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '1'/13 HalfReuse: '5'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '1');
        refalrts::reinit_char(context[15], '5');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 1/15 )/14 6/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 6UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '1'/13 HalfReuse: '6'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '1');
        refalrts::reinit_char(context[15], '6');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 1/15 )/14 7/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 7UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '1'/13 HalfReuse: '7'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '1');
        refalrts::reinit_char(context[15], '7');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 1/15 )/14 8/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 8UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '1'/13 HalfReuse: '8'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '1');
        refalrts::reinit_char(context[15], '8');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 1/15 )/14 9/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 9UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '1'/13 HalfReuse: '9'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '1');
        refalrts::reinit_char(context[15], '9');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 1/15 )/14 10/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 10UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '1'/13 HalfReuse: 'A'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '1');
        refalrts::reinit_char(context[15], 'A');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 1/15 )/14 11/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 11UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '1'/13 HalfReuse: 'B'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '1');
        refalrts::reinit_char(context[15], 'B');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 1/15 )/14 12/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 12UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '1'/13 HalfReuse: 'C'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '1');
        refalrts::reinit_char(context[15], 'C');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 1/15 )/14 13/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 13UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '1'/13 HalfReuse: 'D'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '1');
        refalrts::reinit_char(context[15], 'D');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 1/15 )/14 14/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 14UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '1'/13 HalfReuse: 'E'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '1');
        refalrts::reinit_char(context[15], 'E');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 1/15 )/14 15/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 15UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '1'/13 HalfReuse: 'F'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '1');
        refalrts::reinit_char(context[15], 'F');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 1/15 )/14 s.Low/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      // closed e.Tail0 as range 19
      //DEBUG: s.Low: 16
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '1'/13 HalfReuse: </15 HalfReuse: & Hex*16/14 AsIs: s.Low/16 AsIs: >/1 } )/22 </23 & Type/24 Tile{ AsIs: e.Tail0/19 } >/25 >/26 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_bracket(vm, context[22]);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_Type]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::alloc_close_call(vm, context[26]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '1');
      refalrts::reinit_open_call(context[15]);
      refalrts::reinit_name(context[14], functions[efunc_gen_Hex_D16]);
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[23] );
      refalrts::link_brackets( context[9], context[22] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[22], context[24] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Xxout-Chars$7=1@1/4 (/9 e.new5/17 )/10 (/13 2/15 )/14 s.new4/16 >/1
    context[17] = context[7];
    context[18] = context[8];
    if( ! refalrts::number_term( 2UL, context[15] ) )
      continue;
    // closed e.new5 as range 17
    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 2/15 )/14 0/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 0UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '2'/13 HalfReuse: '0'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '2');
      refalrts::reinit_char(context[15], '0');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 2/15 )/14 1/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 1UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '2'/13 HalfReuse: '1'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '2');
      refalrts::reinit_char(context[15], '1');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 2/15 )/14 2/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 2UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '2'/13 HalfReuse: '2'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '2');
      refalrts::reinit_char(context[15], '2');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 2/15 )/14 3/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 3UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '2'/13 HalfReuse: '3'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '2');
      refalrts::reinit_char(context[15], '3');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 2/15 )/14 4/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 4UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '2'/13 HalfReuse: '4'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '2');
      refalrts::reinit_char(context[15], '4');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 2/15 )/14 5/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 5UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '2'/13 HalfReuse: '5'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '2');
      refalrts::reinit_char(context[15], '5');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 2/15 )/14 6/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 6UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '2'/13 HalfReuse: '6'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '2');
      refalrts::reinit_char(context[15], '6');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 2/15 )/14 7/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 7UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '2'/13 HalfReuse: '7'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '2');
      refalrts::reinit_char(context[15], '7');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 2/15 )/14 8/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 8UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '2'/13 HalfReuse: '8'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '2');
      refalrts::reinit_char(context[15], '8');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 2/15 )/14 9/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 9UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '2'/13 HalfReuse: '9'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '2');
      refalrts::reinit_char(context[15], '9');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 2/15 )/14 10/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 10UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '2'/13 HalfReuse: 'A'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '2');
      refalrts::reinit_char(context[15], 'A');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 2/15 )/14 11/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 11UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '2'/13 HalfReuse: 'B'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '2');
      refalrts::reinit_char(context[15], 'B');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 2/15 )/14 12/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 12UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '2'/13 HalfReuse: 'C'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '2');
      refalrts::reinit_char(context[15], 'C');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 2/15 )/14 13/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 13UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '2'/13 HalfReuse: 'D'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '2');
      refalrts::reinit_char(context[15], 'D');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 2/15 )/14 14/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 14UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '2'/13 HalfReuse: 'E'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '2');
      refalrts::reinit_char(context[15], 'E');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 2/15 )/14 15/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 15UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '2'/13 HalfReuse: 'F'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '2');
      refalrts::reinit_char(context[15], 'F');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 2/15 )/14 s.Low/16 >/1
    context[19] = context[17];
    context[20] = context[18];
    // closed e.Tail0 as range 19
    //DEBUG: s.Low: 16
    //DEBUG: e.Tail0: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '2'/13 HalfReuse: </15 HalfReuse: & Hex*16/14 AsIs: s.Low/16 AsIs: >/1 } )/22 </23 & Type/24 Tile{ AsIs: e.Tail0/19 } >/25 >/26 Tile{ ]] }
    refalrts::alloc_char(vm, context[21], '\\');
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_Type]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
    refalrts::reinit_char(context[10], 'x');
    refalrts::reinit_char(context[13], '2');
    refalrts::reinit_open_call(context[15]);
    refalrts::reinit_name(context[14], functions[efunc_gen_Hex_D16]);
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[9], context[22] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_evar( res, context[10], context[1] );
    res = refalrts::splice_elem( res, context[21] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Xxout-Chars$7=1@1/4 (/9 e.new1/7 )/10 (/13 s.new2/15 )/14 s.new3/16 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    context[11] = 0;
    context[12] = 0;
    context[13] = refalrts::brackets_left( context[11], context[12], context[5], context[6] );
    if( ! context[13] )
      continue;
    refalrts::bracket_pointers(context[13], context[14]);
    // closed e.new1 as range 7
    if( ! refalrts::svar_left( context[15], context[11], context[12] ) )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.new5/17 )/10 (/13 3/15 )/14 s.new4/16 >/1
      context[17] = context[7];
      context[18] = context[8];
      if( ! refalrts::number_term( 3UL, context[15] ) )
        continue;
      // closed e.new5 as range 17
      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 3/15 )/14 0/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 0UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '3'/13 HalfReuse: '0'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '3');
        refalrts::reinit_char(context[15], '0');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 3/15 )/14 1/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 1UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '3'/13 HalfReuse: '1'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '3');
        refalrts::reinit_char(context[15], '1');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 3/15 )/14 2/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 2UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '3'/13 HalfReuse: '2'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '3');
        refalrts::reinit_char(context[15], '2');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 3/15 )/14 3/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 3UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '3'/13 HalfReuse: '3'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '3');
        refalrts::reinit_char(context[15], '3');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 3/15 )/14 4/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 4UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '3'/13 HalfReuse: '4'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '3');
        refalrts::reinit_char(context[15], '4');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 3/15 )/14 5/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 5UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '3'/13 HalfReuse: '5'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '3');
        refalrts::reinit_char(context[15], '5');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 3/15 )/14 6/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 6UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '3'/13 HalfReuse: '6'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '3');
        refalrts::reinit_char(context[15], '6');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 3/15 )/14 7/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 7UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '3'/13 HalfReuse: '7'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '3');
        refalrts::reinit_char(context[15], '7');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 3/15 )/14 8/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 8UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '3'/13 HalfReuse: '8'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '3');
        refalrts::reinit_char(context[15], '8');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 3/15 )/14 9/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 9UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '3'/13 HalfReuse: '9'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '3');
        refalrts::reinit_char(context[15], '9');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 3/15 )/14 10/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 10UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '3'/13 HalfReuse: 'A'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '3');
        refalrts::reinit_char(context[15], 'A');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 3/15 )/14 11/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 11UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '3'/13 HalfReuse: 'B'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '3');
        refalrts::reinit_char(context[15], 'B');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 3/15 )/14 12/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 12UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '3'/13 HalfReuse: 'C'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '3');
        refalrts::reinit_char(context[15], 'C');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 3/15 )/14 13/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 13UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '3'/13 HalfReuse: 'D'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '3');
        refalrts::reinit_char(context[15], 'D');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 3/15 )/14 14/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 14UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '3'/13 HalfReuse: 'E'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '3');
        refalrts::reinit_char(context[15], 'E');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 3/15 )/14 15/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 15UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '3'/13 HalfReuse: 'F'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '3');
        refalrts::reinit_char(context[15], 'F');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 3/15 )/14 s.Low/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      // closed e.Tail0 as range 19
      //DEBUG: s.Low: 16
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '3'/13 HalfReuse: </15 HalfReuse: & Hex*16/14 AsIs: s.Low/16 AsIs: >/1 } )/22 </23 & Type/24 Tile{ AsIs: e.Tail0/19 } >/25 >/26 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_bracket(vm, context[22]);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_Type]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::alloc_close_call(vm, context[26]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '3');
      refalrts::reinit_open_call(context[15]);
      refalrts::reinit_name(context[14], functions[efunc_gen_Hex_D16]);
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[23] );
      refalrts::link_brackets( context[9], context[22] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[22], context[24] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.new5/17 )/10 (/13 4/15 )/14 s.new4/16 >/1
      context[17] = context[7];
      context[18] = context[8];
      if( ! refalrts::number_term( 4UL, context[15] ) )
        continue;
      // closed e.new5 as range 17
      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 4/15 )/14 0/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 0UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '4'/13 HalfReuse: '0'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '4');
        refalrts::reinit_char(context[15], '0');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 4/15 )/14 1/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 1UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '4'/13 HalfReuse: '1'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '4');
        refalrts::reinit_char(context[15], '1');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 4/15 )/14 2/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 2UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '4'/13 HalfReuse: '2'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '4');
        refalrts::reinit_char(context[15], '2');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 4/15 )/14 3/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 3UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '4'/13 HalfReuse: '3'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '4');
        refalrts::reinit_char(context[15], '3');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 4/15 )/14 4/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 4UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '4'/13 HalfReuse: '4'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '4');
        refalrts::reinit_char(context[15], '4');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 4/15 )/14 5/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 5UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '4'/13 HalfReuse: '5'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '4');
        refalrts::reinit_char(context[15], '5');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 4/15 )/14 6/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 6UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '4'/13 HalfReuse: '6'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '4');
        refalrts::reinit_char(context[15], '6');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 4/15 )/14 7/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 7UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '4'/13 HalfReuse: '7'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '4');
        refalrts::reinit_char(context[15], '7');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 4/15 )/14 8/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 8UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '4'/13 HalfReuse: '8'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '4');
        refalrts::reinit_char(context[15], '8');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 4/15 )/14 9/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 9UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '4'/13 HalfReuse: '9'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '4');
        refalrts::reinit_char(context[15], '9');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 4/15 )/14 10/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 10UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '4'/13 HalfReuse: 'A'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '4');
        refalrts::reinit_char(context[15], 'A');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 4/15 )/14 11/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 11UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '4'/13 HalfReuse: 'B'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '4');
        refalrts::reinit_char(context[15], 'B');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 4/15 )/14 12/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 12UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '4'/13 HalfReuse: 'C'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '4');
        refalrts::reinit_char(context[15], 'C');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 4/15 )/14 13/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 13UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '4'/13 HalfReuse: 'D'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '4');
        refalrts::reinit_char(context[15], 'D');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 4/15 )/14 14/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 14UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '4'/13 HalfReuse: 'E'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '4');
        refalrts::reinit_char(context[15], 'E');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 4/15 )/14 15/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 15UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '4'/13 HalfReuse: 'F'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '4');
        refalrts::reinit_char(context[15], 'F');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 4/15 )/14 s.Low/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      // closed e.Tail0 as range 19
      //DEBUG: s.Low: 16
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '4'/13 HalfReuse: </15 HalfReuse: & Hex*16/14 AsIs: s.Low/16 AsIs: >/1 } )/22 </23 & Type/24 Tile{ AsIs: e.Tail0/19 } >/25 >/26 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_bracket(vm, context[22]);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_Type]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::alloc_close_call(vm, context[26]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '4');
      refalrts::reinit_open_call(context[15]);
      refalrts::reinit_name(context[14], functions[efunc_gen_Hex_D16]);
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[23] );
      refalrts::link_brackets( context[9], context[22] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[22], context[24] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Xxout-Chars$7=1@1/4 (/9 e.new5/17 )/10 (/13 5/15 )/14 s.new4/16 >/1
    context[17] = context[7];
    context[18] = context[8];
    if( ! refalrts::number_term( 5UL, context[15] ) )
      continue;
    // closed e.new5 as range 17
    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 5/15 )/14 0/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 0UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '5'/13 HalfReuse: '0'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '5');
      refalrts::reinit_char(context[15], '0');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 5/15 )/14 1/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 1UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '5'/13 HalfReuse: '1'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '5');
      refalrts::reinit_char(context[15], '1');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 5/15 )/14 2/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 2UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '5'/13 HalfReuse: '2'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '5');
      refalrts::reinit_char(context[15], '2');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 5/15 )/14 3/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 3UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '5'/13 HalfReuse: '3'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '5');
      refalrts::reinit_char(context[15], '3');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 5/15 )/14 4/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 4UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '5'/13 HalfReuse: '4'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '5');
      refalrts::reinit_char(context[15], '4');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 5/15 )/14 5/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 5UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '5'/13 HalfReuse: '5'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '5');
      refalrts::reinit_char(context[15], '5');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 5/15 )/14 6/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 6UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '5'/13 HalfReuse: '6'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '5');
      refalrts::reinit_char(context[15], '6');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 5/15 )/14 7/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 7UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '5'/13 HalfReuse: '7'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '5');
      refalrts::reinit_char(context[15], '7');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 5/15 )/14 8/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 8UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '5'/13 HalfReuse: '8'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '5');
      refalrts::reinit_char(context[15], '8');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 5/15 )/14 9/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 9UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '5'/13 HalfReuse: '9'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '5');
      refalrts::reinit_char(context[15], '9');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 5/15 )/14 10/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 10UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '5'/13 HalfReuse: 'A'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '5');
      refalrts::reinit_char(context[15], 'A');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 5/15 )/14 11/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 11UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '5'/13 HalfReuse: 'B'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '5');
      refalrts::reinit_char(context[15], 'B');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 5/15 )/14 12/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 12UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '5'/13 HalfReuse: 'C'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '5');
      refalrts::reinit_char(context[15], 'C');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 5/15 )/14 13/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 13UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '5'/13 HalfReuse: 'D'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '5');
      refalrts::reinit_char(context[15], 'D');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 5/15 )/14 14/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 14UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '5'/13 HalfReuse: 'E'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '5');
      refalrts::reinit_char(context[15], 'E');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 5/15 )/14 15/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 15UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '5'/13 HalfReuse: 'F'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '5');
      refalrts::reinit_char(context[15], 'F');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 5/15 )/14 s.Low/16 >/1
    context[19] = context[17];
    context[20] = context[18];
    // closed e.Tail0 as range 19
    //DEBUG: s.Low: 16
    //DEBUG: e.Tail0: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '5'/13 HalfReuse: </15 HalfReuse: & Hex*16/14 AsIs: s.Low/16 AsIs: >/1 } )/22 </23 & Type/24 Tile{ AsIs: e.Tail0/19 } >/25 >/26 Tile{ ]] }
    refalrts::alloc_char(vm, context[21], '\\');
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_Type]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
    refalrts::reinit_char(context[10], 'x');
    refalrts::reinit_char(context[13], '5');
    refalrts::reinit_open_call(context[15]);
    refalrts::reinit_name(context[14], functions[efunc_gen_Hex_D16]);
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[9], context[22] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_evar( res, context[10], context[1] );
    res = refalrts::splice_elem( res, context[21] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Xxout-Chars$7=1@1/4 (/9 e.new1/7 )/10 (/13 s.new2/15 )/14 s.new3/16 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    context[11] = 0;
    context[12] = 0;
    context[13] = refalrts::brackets_left( context[11], context[12], context[5], context[6] );
    if( ! context[13] )
      continue;
    refalrts::bracket_pointers(context[13], context[14]);
    // closed e.new1 as range 7
    if( ! refalrts::svar_left( context[15], context[11], context[12] ) )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.new5/17 )/10 (/13 6/15 )/14 s.new4/16 >/1
      context[17] = context[7];
      context[18] = context[8];
      if( ! refalrts::number_term( 6UL, context[15] ) )
        continue;
      // closed e.new5 as range 17
      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 6/15 )/14 0/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 0UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '6'/13 HalfReuse: '0'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '6');
        refalrts::reinit_char(context[15], '0');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 6/15 )/14 1/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 1UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '6'/13 HalfReuse: '1'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '6');
        refalrts::reinit_char(context[15], '1');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 6/15 )/14 2/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 2UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '6'/13 HalfReuse: '2'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '6');
        refalrts::reinit_char(context[15], '2');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 6/15 )/14 3/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 3UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '6'/13 HalfReuse: '3'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '6');
        refalrts::reinit_char(context[15], '3');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 6/15 )/14 4/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 4UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '6'/13 HalfReuse: '4'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '6');
        refalrts::reinit_char(context[15], '4');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 6/15 )/14 5/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 5UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '6'/13 HalfReuse: '5'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '6');
        refalrts::reinit_char(context[15], '5');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 6/15 )/14 6/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 6UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '6'/13 HalfReuse: '6'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '6');
        refalrts::reinit_char(context[15], '6');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 6/15 )/14 7/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 7UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '6'/13 HalfReuse: '7'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '6');
        refalrts::reinit_char(context[15], '7');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 6/15 )/14 8/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 8UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '6'/13 HalfReuse: '8'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '6');
        refalrts::reinit_char(context[15], '8');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 6/15 )/14 9/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 9UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '6'/13 HalfReuse: '9'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '6');
        refalrts::reinit_char(context[15], '9');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 6/15 )/14 10/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 10UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '6'/13 HalfReuse: 'A'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '6');
        refalrts::reinit_char(context[15], 'A');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 6/15 )/14 11/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 11UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '6'/13 HalfReuse: 'B'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '6');
        refalrts::reinit_char(context[15], 'B');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 6/15 )/14 12/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 12UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '6'/13 HalfReuse: 'C'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '6');
        refalrts::reinit_char(context[15], 'C');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 6/15 )/14 13/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 13UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '6'/13 HalfReuse: 'D'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '6');
        refalrts::reinit_char(context[15], 'D');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 6/15 )/14 14/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 14UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '6'/13 HalfReuse: 'E'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '6');
        refalrts::reinit_char(context[15], 'E');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 6/15 )/14 15/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 15UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '6'/13 HalfReuse: 'F'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '6');
        refalrts::reinit_char(context[15], 'F');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 6/15 )/14 s.Low/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      // closed e.Tail0 as range 19
      //DEBUG: s.Low: 16
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '6'/13 HalfReuse: </15 HalfReuse: & Hex*16/14 AsIs: s.Low/16 AsIs: >/1 } )/22 </23 & Type/24 Tile{ AsIs: e.Tail0/19 } >/25 >/26 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_bracket(vm, context[22]);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_Type]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::alloc_close_call(vm, context[26]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '6');
      refalrts::reinit_open_call(context[15]);
      refalrts::reinit_name(context[14], functions[efunc_gen_Hex_D16]);
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[23] );
      refalrts::link_brackets( context[9], context[22] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[22], context[24] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.new5/17 )/10 (/13 7/15 )/14 s.new4/16 >/1
      context[17] = context[7];
      context[18] = context[8];
      if( ! refalrts::number_term( 7UL, context[15] ) )
        continue;
      // closed e.new5 as range 17
      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 7/15 )/14 0/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 0UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '7'/13 HalfReuse: '0'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '7');
        refalrts::reinit_char(context[15], '0');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 7/15 )/14 1/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 1UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '7'/13 HalfReuse: '1'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '7');
        refalrts::reinit_char(context[15], '1');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 7/15 )/14 2/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 2UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '7'/13 HalfReuse: '2'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '7');
        refalrts::reinit_char(context[15], '2');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 7/15 )/14 3/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 3UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '7'/13 HalfReuse: '3'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '7');
        refalrts::reinit_char(context[15], '3');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 7/15 )/14 4/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 4UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '7'/13 HalfReuse: '4'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '7');
        refalrts::reinit_char(context[15], '4');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 7/15 )/14 5/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 5UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '7'/13 HalfReuse: '5'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '7');
        refalrts::reinit_char(context[15], '5');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 7/15 )/14 6/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 6UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '7'/13 HalfReuse: '6'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '7');
        refalrts::reinit_char(context[15], '6');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 7/15 )/14 7/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 7UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '7'/13 HalfReuse: '7'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '7');
        refalrts::reinit_char(context[15], '7');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 7/15 )/14 8/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 8UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '7'/13 HalfReuse: '8'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '7');
        refalrts::reinit_char(context[15], '8');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 7/15 )/14 9/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 9UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '7'/13 HalfReuse: '9'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '7');
        refalrts::reinit_char(context[15], '9');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 7/15 )/14 10/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 10UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '7'/13 HalfReuse: 'A'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '7');
        refalrts::reinit_char(context[15], 'A');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 7/15 )/14 11/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 11UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '7'/13 HalfReuse: 'B'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '7');
        refalrts::reinit_char(context[15], 'B');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 7/15 )/14 12/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 12UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '7'/13 HalfReuse: 'C'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '7');
        refalrts::reinit_char(context[15], 'C');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 7/15 )/14 13/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 13UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '7'/13 HalfReuse: 'D'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '7');
        refalrts::reinit_char(context[15], 'D');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 7/15 )/14 14/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 14UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '7'/13 HalfReuse: 'E'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '7');
        refalrts::reinit_char(context[15], 'E');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 7/15 )/14 15/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 15UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '7'/13 HalfReuse: 'F'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '7');
        refalrts::reinit_char(context[15], 'F');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 7/15 )/14 s.Low/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      // closed e.Tail0 as range 19
      //DEBUG: s.Low: 16
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '7'/13 HalfReuse: </15 HalfReuse: & Hex*16/14 AsIs: s.Low/16 AsIs: >/1 } )/22 </23 & Type/24 Tile{ AsIs: e.Tail0/19 } >/25 >/26 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_bracket(vm, context[22]);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_Type]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::alloc_close_call(vm, context[26]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '7');
      refalrts::reinit_open_call(context[15]);
      refalrts::reinit_name(context[14], functions[efunc_gen_Hex_D16]);
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[23] );
      refalrts::link_brackets( context[9], context[22] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[22], context[24] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Xxout-Chars$7=1@1/4 (/9 e.new5/17 )/10 (/13 8/15 )/14 s.new4/16 >/1
    context[17] = context[7];
    context[18] = context[8];
    if( ! refalrts::number_term( 8UL, context[15] ) )
      continue;
    // closed e.new5 as range 17
    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 8/15 )/14 0/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 0UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '8'/13 HalfReuse: '0'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '8');
      refalrts::reinit_char(context[15], '0');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 8/15 )/14 1/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 1UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '8'/13 HalfReuse: '1'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '8');
      refalrts::reinit_char(context[15], '1');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 8/15 )/14 2/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 2UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '8'/13 HalfReuse: '2'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '8');
      refalrts::reinit_char(context[15], '2');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 8/15 )/14 3/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 3UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '8'/13 HalfReuse: '3'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '8');
      refalrts::reinit_char(context[15], '3');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 8/15 )/14 4/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 4UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '8'/13 HalfReuse: '4'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '8');
      refalrts::reinit_char(context[15], '4');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 8/15 )/14 5/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 5UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '8'/13 HalfReuse: '5'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '8');
      refalrts::reinit_char(context[15], '5');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 8/15 )/14 6/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 6UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '8'/13 HalfReuse: '6'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '8');
      refalrts::reinit_char(context[15], '6');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 8/15 )/14 7/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 7UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '8'/13 HalfReuse: '7'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '8');
      refalrts::reinit_char(context[15], '7');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 8/15 )/14 8/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 8UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '8'/13 HalfReuse: '8'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '8');
      refalrts::reinit_char(context[15], '8');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 8/15 )/14 9/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 9UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '8'/13 HalfReuse: '9'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '8');
      refalrts::reinit_char(context[15], '9');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 8/15 )/14 10/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 10UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '8'/13 HalfReuse: 'A'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '8');
      refalrts::reinit_char(context[15], 'A');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 8/15 )/14 11/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 11UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '8'/13 HalfReuse: 'B'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '8');
      refalrts::reinit_char(context[15], 'B');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 8/15 )/14 12/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 12UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '8'/13 HalfReuse: 'C'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '8');
      refalrts::reinit_char(context[15], 'C');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 8/15 )/14 13/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 13UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '8'/13 HalfReuse: 'D'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '8');
      refalrts::reinit_char(context[15], 'D');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 8/15 )/14 14/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 14UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '8'/13 HalfReuse: 'E'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '8');
      refalrts::reinit_char(context[15], 'E');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 8/15 )/14 15/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 15UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '8'/13 HalfReuse: 'F'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '8');
      refalrts::reinit_char(context[15], 'F');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 8/15 )/14 s.Low/16 >/1
    context[19] = context[17];
    context[20] = context[18];
    // closed e.Tail0 as range 19
    //DEBUG: s.Low: 16
    //DEBUG: e.Tail0: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '8'/13 HalfReuse: </15 HalfReuse: & Hex*16/14 AsIs: s.Low/16 AsIs: >/1 } )/22 </23 & Type/24 Tile{ AsIs: e.Tail0/19 } >/25 >/26 Tile{ ]] }
    refalrts::alloc_char(vm, context[21], '\\');
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_Type]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
    refalrts::reinit_char(context[10], 'x');
    refalrts::reinit_char(context[13], '8');
    refalrts::reinit_open_call(context[15]);
    refalrts::reinit_name(context[14], functions[efunc_gen_Hex_D16]);
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[9], context[22] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_evar( res, context[10], context[1] );
    res = refalrts::splice_elem( res, context[21] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Xxout-Chars$7=1@1/4 (/9 e.new1/7 )/10 (/13 s.new2/15 )/14 s.new3/16 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    context[11] = 0;
    context[12] = 0;
    context[13] = refalrts::brackets_left( context[11], context[12], context[5], context[6] );
    if( ! context[13] )
      continue;
    refalrts::bracket_pointers(context[13], context[14]);
    // closed e.new1 as range 7
    if( ! refalrts::svar_left( context[15], context[11], context[12] ) )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.new5/17 )/10 (/13 9/15 )/14 s.new4/16 >/1
      context[17] = context[7];
      context[18] = context[8];
      if( ! refalrts::number_term( 9UL, context[15] ) )
        continue;
      // closed e.new5 as range 17
      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 9/15 )/14 0/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 0UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '9'/13 HalfReuse: '0'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '9');
        refalrts::reinit_char(context[15], '0');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 9/15 )/14 1/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 1UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '9'/13 HalfReuse: '1'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '9');
        refalrts::reinit_char(context[15], '1');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 9/15 )/14 2/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 2UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '9'/13 HalfReuse: '2'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '9');
        refalrts::reinit_char(context[15], '2');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 9/15 )/14 3/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 3UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '9'/13 HalfReuse: '3'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '9');
        refalrts::reinit_char(context[15], '3');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 9/15 )/14 4/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 4UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '9'/13 HalfReuse: '4'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '9');
        refalrts::reinit_char(context[15], '4');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 9/15 )/14 5/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 5UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '9'/13 HalfReuse: '5'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '9');
        refalrts::reinit_char(context[15], '5');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 9/15 )/14 6/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 6UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '9'/13 HalfReuse: '6'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '9');
        refalrts::reinit_char(context[15], '6');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 9/15 )/14 7/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 7UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '9'/13 HalfReuse: '7'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '9');
        refalrts::reinit_char(context[15], '7');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 9/15 )/14 8/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 8UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '9'/13 HalfReuse: '8'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '9');
        refalrts::reinit_char(context[15], '8');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 9/15 )/14 9/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 9UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '9'/13 HalfReuse: '9'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '9');
        refalrts::reinit_char(context[15], '9');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 9/15 )/14 10/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 10UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '9'/13 HalfReuse: 'A'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '9');
        refalrts::reinit_char(context[15], 'A');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 9/15 )/14 11/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 11UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '9'/13 HalfReuse: 'B'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '9');
        refalrts::reinit_char(context[15], 'B');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 9/15 )/14 12/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 12UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '9'/13 HalfReuse: 'C'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '9');
        refalrts::reinit_char(context[15], 'C');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 9/15 )/14 13/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 13UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '9'/13 HalfReuse: 'D'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '9');
        refalrts::reinit_char(context[15], 'D');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 9/15 )/14 14/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 14UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '9'/13 HalfReuse: 'E'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '9');
        refalrts::reinit_char(context[15], 'E');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 9/15 )/14 15/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 15UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '9'/13 HalfReuse: 'F'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], '9');
        refalrts::reinit_char(context[15], 'F');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 9/15 )/14 s.Low/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      // closed e.Tail0 as range 19
      //DEBUG: s.Low: 16
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: '9'/13 HalfReuse: </15 HalfReuse: & Hex*16/14 AsIs: s.Low/16 AsIs: >/1 } )/22 </23 & Type/24 Tile{ AsIs: e.Tail0/19 } >/25 >/26 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_bracket(vm, context[22]);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_Type]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::alloc_close_call(vm, context[26]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], '9');
      refalrts::reinit_open_call(context[15]);
      refalrts::reinit_name(context[14], functions[efunc_gen_Hex_D16]);
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[23] );
      refalrts::link_brackets( context[9], context[22] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[22], context[24] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.new5/17 )/10 (/13 10/15 )/14 s.new4/16 >/1
      context[17] = context[7];
      context[18] = context[8];
      if( ! refalrts::number_term( 10UL, context[15] ) )
        continue;
      // closed e.new5 as range 17
      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 10/15 )/14 0/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 0UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'A'/13 HalfReuse: '0'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], 'A');
        refalrts::reinit_char(context[15], '0');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 10/15 )/14 1/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 1UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'A'/13 HalfReuse: '1'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], 'A');
        refalrts::reinit_char(context[15], '1');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 10/15 )/14 2/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 2UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'A'/13 HalfReuse: '2'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], 'A');
        refalrts::reinit_char(context[15], '2');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 10/15 )/14 3/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 3UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'A'/13 HalfReuse: '3'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], 'A');
        refalrts::reinit_char(context[15], '3');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 10/15 )/14 4/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 4UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'A'/13 HalfReuse: '4'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], 'A');
        refalrts::reinit_char(context[15], '4');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 10/15 )/14 5/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 5UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'A'/13 HalfReuse: '5'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], 'A');
        refalrts::reinit_char(context[15], '5');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 10/15 )/14 6/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 6UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'A'/13 HalfReuse: '6'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], 'A');
        refalrts::reinit_char(context[15], '6');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 10/15 )/14 7/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 7UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'A'/13 HalfReuse: '7'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], 'A');
        refalrts::reinit_char(context[15], '7');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 10/15 )/14 8/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 8UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'A'/13 HalfReuse: '8'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], 'A');
        refalrts::reinit_char(context[15], '8');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 10/15 )/14 9/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 9UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'A'/13 HalfReuse: '9'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], 'A');
        refalrts::reinit_char(context[15], '9');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 10/15 )/14 10/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 10UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'A'/13 HalfReuse: 'A'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], 'A');
        refalrts::reinit_char(context[15], 'A');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 10/15 )/14 11/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 11UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'A'/13 HalfReuse: 'B'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], 'A');
        refalrts::reinit_char(context[15], 'B');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 10/15 )/14 12/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 12UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'A'/13 HalfReuse: 'C'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], 'A');
        refalrts::reinit_char(context[15], 'C');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 10/15 )/14 13/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 13UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'A'/13 HalfReuse: 'D'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], 'A');
        refalrts::reinit_char(context[15], 'D');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 10/15 )/14 14/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 14UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'A'/13 HalfReuse: 'E'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], 'A');
        refalrts::reinit_char(context[15], 'E');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 10/15 )/14 15/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 15UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'A'/13 HalfReuse: 'F'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], 'A');
        refalrts::reinit_char(context[15], 'F');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 10/15 )/14 s.Low/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      // closed e.Tail0 as range 19
      //DEBUG: s.Low: 16
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'A'/13 HalfReuse: </15 HalfReuse: & Hex*16/14 AsIs: s.Low/16 AsIs: >/1 } )/22 </23 & Type/24 Tile{ AsIs: e.Tail0/19 } >/25 >/26 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_bracket(vm, context[22]);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_Type]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::alloc_close_call(vm, context[26]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], 'A');
      refalrts::reinit_open_call(context[15]);
      refalrts::reinit_name(context[14], functions[efunc_gen_Hex_D16]);
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[23] );
      refalrts::link_brackets( context[9], context[22] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[22], context[24] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Xxout-Chars$7=1@1/4 (/9 e.new5/17 )/10 (/13 11/15 )/14 s.new4/16 >/1
    context[17] = context[7];
    context[18] = context[8];
    if( ! refalrts::number_term( 11UL, context[15] ) )
      continue;
    // closed e.new5 as range 17
    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 11/15 )/14 0/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 0UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'B'/13 HalfReuse: '0'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], 'B');
      refalrts::reinit_char(context[15], '0');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 11/15 )/14 1/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 1UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'B'/13 HalfReuse: '1'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], 'B');
      refalrts::reinit_char(context[15], '1');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 11/15 )/14 2/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 2UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'B'/13 HalfReuse: '2'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], 'B');
      refalrts::reinit_char(context[15], '2');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 11/15 )/14 3/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 3UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'B'/13 HalfReuse: '3'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], 'B');
      refalrts::reinit_char(context[15], '3');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 11/15 )/14 4/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 4UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'B'/13 HalfReuse: '4'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], 'B');
      refalrts::reinit_char(context[15], '4');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 11/15 )/14 5/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 5UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'B'/13 HalfReuse: '5'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], 'B');
      refalrts::reinit_char(context[15], '5');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 11/15 )/14 6/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 6UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'B'/13 HalfReuse: '6'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], 'B');
      refalrts::reinit_char(context[15], '6');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 11/15 )/14 7/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 7UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'B'/13 HalfReuse: '7'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], 'B');
      refalrts::reinit_char(context[15], '7');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 11/15 )/14 8/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 8UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'B'/13 HalfReuse: '8'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], 'B');
      refalrts::reinit_char(context[15], '8');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 11/15 )/14 9/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 9UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'B'/13 HalfReuse: '9'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], 'B');
      refalrts::reinit_char(context[15], '9');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 11/15 )/14 10/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 10UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'B'/13 HalfReuse: 'A'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], 'B');
      refalrts::reinit_char(context[15], 'A');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 11/15 )/14 11/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 11UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'B'/13 HalfReuse: 'B'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], 'B');
      refalrts::reinit_char(context[15], 'B');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 11/15 )/14 12/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 12UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'B'/13 HalfReuse: 'C'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], 'B');
      refalrts::reinit_char(context[15], 'C');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 11/15 )/14 13/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 13UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'B'/13 HalfReuse: 'D'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], 'B');
      refalrts::reinit_char(context[15], 'D');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 11/15 )/14 14/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 14UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'B'/13 HalfReuse: 'E'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], 'B');
      refalrts::reinit_char(context[15], 'E');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 11/15 )/14 15/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 15UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'B'/13 HalfReuse: 'F'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], 'B');
      refalrts::reinit_char(context[15], 'F');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 11/15 )/14 s.Low/16 >/1
    context[19] = context[17];
    context[20] = context[18];
    // closed e.Tail0 as range 19
    //DEBUG: s.Low: 16
    //DEBUG: e.Tail0: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'B'/13 HalfReuse: </15 HalfReuse: & Hex*16/14 AsIs: s.Low/16 AsIs: >/1 } )/22 </23 & Type/24 Tile{ AsIs: e.Tail0/19 } >/25 >/26 Tile{ ]] }
    refalrts::alloc_char(vm, context[21], '\\');
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_Type]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
    refalrts::reinit_char(context[10], 'x');
    refalrts::reinit_char(context[13], 'B');
    refalrts::reinit_open_call(context[15]);
    refalrts::reinit_name(context[14], functions[efunc_gen_Hex_D16]);
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[9], context[22] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_evar( res, context[10], context[1] );
    res = refalrts::splice_elem( res, context[21] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Xxout-Chars$7=1@1/4 (/9 e.new1/7 )/10 (/13 s.new2/15 )/14 s.new3/16 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    context[11] = 0;
    context[12] = 0;
    context[13] = refalrts::brackets_left( context[11], context[12], context[5], context[6] );
    if( ! context[13] )
      continue;
    refalrts::bracket_pointers(context[13], context[14]);
    // closed e.new1 as range 7
    if( ! refalrts::svar_left( context[15], context[11], context[12] ) )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.new5/17 )/10 (/13 12/15 )/14 s.new4/16 >/1
      context[17] = context[7];
      context[18] = context[8];
      if( ! refalrts::number_term( 12UL, context[15] ) )
        continue;
      // closed e.new5 as range 17
      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 12/15 )/14 0/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 0UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'C'/13 HalfReuse: '0'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], 'C');
        refalrts::reinit_char(context[15], '0');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 12/15 )/14 1/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 1UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'C'/13 HalfReuse: '1'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], 'C');
        refalrts::reinit_char(context[15], '1');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 12/15 )/14 2/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 2UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'C'/13 HalfReuse: '2'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], 'C');
        refalrts::reinit_char(context[15], '2');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 12/15 )/14 3/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 3UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'C'/13 HalfReuse: '3'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], 'C');
        refalrts::reinit_char(context[15], '3');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 12/15 )/14 4/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 4UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'C'/13 HalfReuse: '4'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], 'C');
        refalrts::reinit_char(context[15], '4');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 12/15 )/14 5/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 5UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'C'/13 HalfReuse: '5'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], 'C');
        refalrts::reinit_char(context[15], '5');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 12/15 )/14 6/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 6UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'C'/13 HalfReuse: '6'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], 'C');
        refalrts::reinit_char(context[15], '6');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 12/15 )/14 7/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 7UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'C'/13 HalfReuse: '7'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], 'C');
        refalrts::reinit_char(context[15], '7');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 12/15 )/14 8/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 8UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'C'/13 HalfReuse: '8'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], 'C');
        refalrts::reinit_char(context[15], '8');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 12/15 )/14 9/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 9UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'C'/13 HalfReuse: '9'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], 'C');
        refalrts::reinit_char(context[15], '9');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 12/15 )/14 10/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 10UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'C'/13 HalfReuse: 'A'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], 'C');
        refalrts::reinit_char(context[15], 'A');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 12/15 )/14 11/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 11UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'C'/13 HalfReuse: 'B'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], 'C');
        refalrts::reinit_char(context[15], 'B');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 12/15 )/14 12/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 12UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'C'/13 HalfReuse: 'C'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], 'C');
        refalrts::reinit_char(context[15], 'C');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 12/15 )/14 13/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 13UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'C'/13 HalfReuse: 'D'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], 'C');
        refalrts::reinit_char(context[15], 'D');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 12/15 )/14 14/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 14UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'C'/13 HalfReuse: 'E'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], 'C');
        refalrts::reinit_char(context[15], 'E');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 12/15 )/14 15/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 15UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'C'/13 HalfReuse: 'F'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], 'C');
        refalrts::reinit_char(context[15], 'F');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 12/15 )/14 s.Low/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      // closed e.Tail0 as range 19
      //DEBUG: s.Low: 16
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'C'/13 HalfReuse: </15 HalfReuse: & Hex*16/14 AsIs: s.Low/16 AsIs: >/1 } )/22 </23 & Type/24 Tile{ AsIs: e.Tail0/19 } >/25 >/26 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_bracket(vm, context[22]);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_Type]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::alloc_close_call(vm, context[26]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], 'C');
      refalrts::reinit_open_call(context[15]);
      refalrts::reinit_name(context[14], functions[efunc_gen_Hex_D16]);
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[23] );
      refalrts::link_brackets( context[9], context[22] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[22], context[24] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.new5/17 )/10 (/13 13/15 )/14 s.new4/16 >/1
      context[17] = context[7];
      context[18] = context[8];
      if( ! refalrts::number_term( 13UL, context[15] ) )
        continue;
      // closed e.new5 as range 17
      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 13/15 )/14 0/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 0UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'D'/13 HalfReuse: '0'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], 'D');
        refalrts::reinit_char(context[15], '0');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 13/15 )/14 1/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 1UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'D'/13 HalfReuse: '1'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], 'D');
        refalrts::reinit_char(context[15], '1');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 13/15 )/14 2/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 2UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'D'/13 HalfReuse: '2'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], 'D');
        refalrts::reinit_char(context[15], '2');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 13/15 )/14 3/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 3UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'D'/13 HalfReuse: '3'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], 'D');
        refalrts::reinit_char(context[15], '3');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 13/15 )/14 4/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 4UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'D'/13 HalfReuse: '4'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], 'D');
        refalrts::reinit_char(context[15], '4');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 13/15 )/14 5/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 5UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'D'/13 HalfReuse: '5'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], 'D');
        refalrts::reinit_char(context[15], '5');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 13/15 )/14 6/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 6UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'D'/13 HalfReuse: '6'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], 'D');
        refalrts::reinit_char(context[15], '6');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 13/15 )/14 7/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 7UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'D'/13 HalfReuse: '7'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], 'D');
        refalrts::reinit_char(context[15], '7');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 13/15 )/14 8/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 8UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'D'/13 HalfReuse: '8'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], 'D');
        refalrts::reinit_char(context[15], '8');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 13/15 )/14 9/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 9UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'D'/13 HalfReuse: '9'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], 'D');
        refalrts::reinit_char(context[15], '9');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 13/15 )/14 10/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 10UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'D'/13 HalfReuse: 'A'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], 'D');
        refalrts::reinit_char(context[15], 'A');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 13/15 )/14 11/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 11UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'D'/13 HalfReuse: 'B'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], 'D');
        refalrts::reinit_char(context[15], 'B');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 13/15 )/14 12/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 12UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'D'/13 HalfReuse: 'C'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], 'D');
        refalrts::reinit_char(context[15], 'C');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 13/15 )/14 13/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 13UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'D'/13 HalfReuse: 'D'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], 'D');
        refalrts::reinit_char(context[15], 'D');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 13/15 )/14 14/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 14UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'D'/13 HalfReuse: 'E'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], 'D');
        refalrts::reinit_char(context[15], 'E');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 13/15 )/14 15/16 >/1
        context[19] = context[17];
        context[20] = context[18];
        if( ! refalrts::number_term( 15UL, context[16] ) )
          continue;
        // closed e.Tail0 as range 19
        //DEBUG: e.Tail0: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'D'/13 HalfReuse: 'F'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
        refalrts::alloc_char(vm, context[21], '\\');
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[10], 'x');
        refalrts::reinit_char(context[13], 'D');
        refalrts::reinit_char(context[15], 'F');
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[9], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 13/15 )/14 s.Low/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      // closed e.Tail0 as range 19
      //DEBUG: s.Low: 16
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'D'/13 HalfReuse: </15 HalfReuse: & Hex*16/14 AsIs: s.Low/16 AsIs: >/1 } )/22 </23 & Type/24 Tile{ AsIs: e.Tail0/19 } >/25 >/26 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_bracket(vm, context[22]);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_Type]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::alloc_close_call(vm, context[26]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], 'D');
      refalrts::reinit_open_call(context[15]);
      refalrts::reinit_name(context[14], functions[efunc_gen_Hex_D16]);
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[23] );
      refalrts::link_brackets( context[9], context[22] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[22], context[24] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Xxout-Chars$7=1@1/4 (/9 e.new5/17 )/10 (/13 14/15 )/14 s.new4/16 >/1
    context[17] = context[7];
    context[18] = context[8];
    if( ! refalrts::number_term( 14UL, context[15] ) )
      continue;
    // closed e.new5 as range 17
    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 14/15 )/14 0/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 0UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'E'/13 HalfReuse: '0'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], 'E');
      refalrts::reinit_char(context[15], '0');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 14/15 )/14 1/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 1UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'E'/13 HalfReuse: '1'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], 'E');
      refalrts::reinit_char(context[15], '1');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 14/15 )/14 2/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 2UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'E'/13 HalfReuse: '2'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], 'E');
      refalrts::reinit_char(context[15], '2');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 14/15 )/14 3/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 3UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'E'/13 HalfReuse: '3'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], 'E');
      refalrts::reinit_char(context[15], '3');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 14/15 )/14 4/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 4UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'E'/13 HalfReuse: '4'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], 'E');
      refalrts::reinit_char(context[15], '4');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 14/15 )/14 5/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 5UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'E'/13 HalfReuse: '5'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], 'E');
      refalrts::reinit_char(context[15], '5');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 14/15 )/14 6/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 6UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'E'/13 HalfReuse: '6'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], 'E');
      refalrts::reinit_char(context[15], '6');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 14/15 )/14 7/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 7UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'E'/13 HalfReuse: '7'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], 'E');
      refalrts::reinit_char(context[15], '7');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 14/15 )/14 8/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 8UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'E'/13 HalfReuse: '8'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], 'E');
      refalrts::reinit_char(context[15], '8');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 14/15 )/14 9/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 9UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'E'/13 HalfReuse: '9'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], 'E');
      refalrts::reinit_char(context[15], '9');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 14/15 )/14 10/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 10UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'E'/13 HalfReuse: 'A'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], 'E');
      refalrts::reinit_char(context[15], 'A');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 14/15 )/14 11/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 11UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'E'/13 HalfReuse: 'B'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], 'E');
      refalrts::reinit_char(context[15], 'B');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 14/15 )/14 12/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 12UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'E'/13 HalfReuse: 'C'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], 'E');
      refalrts::reinit_char(context[15], 'C');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 14/15 )/14 13/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 13UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'E'/13 HalfReuse: 'D'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], 'E');
      refalrts::reinit_char(context[15], 'D');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 14/15 )/14 14/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 14UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'E'/13 HalfReuse: 'E'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], 'E');
      refalrts::reinit_char(context[15], 'E');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 14/15 )/14 15/16 >/1
      context[19] = context[17];
      context[20] = context[18];
      if( ! refalrts::number_term( 15UL, context[16] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'E'/13 HalfReuse: 'F'/15 AsIs: )/14 HalfReuse: </16 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/19 } >/22 >/23 Tile{ ]] }
      refalrts::alloc_char(vm, context[21], '\\');
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[10], 'x');
      refalrts::reinit_char(context[13], 'E');
      refalrts::reinit_char(context[15], 'F');
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[1], functions[efunc_Type]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Xxout-Chars$7=1@1/4 (/9 e.Tail0/19 )/10 (/13 14/15 )/14 s.Low/16 >/1
    context[19] = context[17];
    context[20] = context[18];
    // closed e.Tail0 as range 19
    //DEBUG: s.Low: 16
    //DEBUG: e.Tail0: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/9 } '\\'/21 Tile{ HalfReuse: 'x'/10 HalfReuse: 'E'/13 HalfReuse: </15 HalfReuse: & Hex*16/14 AsIs: s.Low/16 AsIs: >/1 } )/22 </23 & Type/24 Tile{ AsIs: e.Tail0/19 } >/25 >/26 Tile{ ]] }
    refalrts::alloc_char(vm, context[21], '\\');
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_Type]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
    refalrts::reinit_char(context[10], 'x');
    refalrts::reinit_char(context[13], 'E');
    refalrts::reinit_open_call(context[15]);
    refalrts::reinit_name(context[14], functions[efunc_gen_Hex_D16]);
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[9], context[22] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_evar( res, context[10], context[1] );
    res = refalrts::splice_elem( res, context[21] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Xxout-Chars$7=1@1/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Xxout-Chars$7=1@1/4 (/7 e.new5/9 )/8 (/15 s.new3/17 )/16 s.new4/18 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    context[13] = 0;
    context[14] = 0;
    context[15] = refalrts::brackets_left( context[13], context[14], context[11], context[12] );
    if( ! context[15] )
      continue;
    refalrts::bracket_pointers(context[15], context[16]);
    // closed e.new5 as range 9
    if( ! refalrts::svar_left( context[17], context[13], context[14] ) )
      continue;
    if( ! refalrts::empty_seq( context[13], context[14] ) )
      continue;
    if( ! refalrts::svar_left( context[18], context[11], context[12] ) )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    do {
      // </0 & Xxout-Chars$7=1@1/4 (/7 e.new7/19 )/8 (/15 15/17 )/16 s.new6/18 >/1
      context[19] = context[9];
      context[20] = context[10];
      if( ! refalrts::number_term( 15UL, context[17] ) )
        continue;
      // closed e.new7 as range 19
      do {
        // </0 & Xxout-Chars$7=1@1/4 (/7 e.Tail0/21 )/8 (/15 15/17 )/16 0/18 >/1
        context[21] = context[19];
        context[22] = context[20];
        if( ! refalrts::number_term( 0UL, context[18] ) )
          continue;
        // closed e.Tail0 as range 21
        //DEBUG: e.Tail0: 21

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 } '\\'/23 Tile{ HalfReuse: 'x'/8 HalfReuse: 'F'/15 HalfReuse: '0'/17 AsIs: )/16 HalfReuse: </18 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/21 } >/24 >/25 Tile{ ]] }
        refalrts::alloc_char(vm, context[23], '\\');
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::alloc_close_call(vm, context[25]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[8], 'x');
        refalrts::reinit_char(context[15], 'F');
        refalrts::reinit_char(context[17], '0');
        refalrts::reinit_open_call(context[18]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[25] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[18] );
        refalrts::link_brackets( context[7], context[16] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[21], context[22] );
        res = refalrts::splice_evar( res, context[8], context[1] );
        res = refalrts::splice_elem( res, context[23] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/7 e.Tail0/21 )/8 (/15 15/17 )/16 1/18 >/1
        context[21] = context[19];
        context[22] = context[20];
        if( ! refalrts::number_term( 1UL, context[18] ) )
          continue;
        // closed e.Tail0 as range 21
        //DEBUG: e.Tail0: 21

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 } '\\'/23 Tile{ HalfReuse: 'x'/8 HalfReuse: 'F'/15 HalfReuse: '1'/17 AsIs: )/16 HalfReuse: </18 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/21 } >/24 >/25 Tile{ ]] }
        refalrts::alloc_char(vm, context[23], '\\');
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::alloc_close_call(vm, context[25]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[8], 'x');
        refalrts::reinit_char(context[15], 'F');
        refalrts::reinit_char(context[17], '1');
        refalrts::reinit_open_call(context[18]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[25] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[18] );
        refalrts::link_brackets( context[7], context[16] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[21], context[22] );
        res = refalrts::splice_evar( res, context[8], context[1] );
        res = refalrts::splice_elem( res, context[23] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/7 e.Tail0/21 )/8 (/15 15/17 )/16 2/18 >/1
        context[21] = context[19];
        context[22] = context[20];
        if( ! refalrts::number_term( 2UL, context[18] ) )
          continue;
        // closed e.Tail0 as range 21
        //DEBUG: e.Tail0: 21

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 } '\\'/23 Tile{ HalfReuse: 'x'/8 HalfReuse: 'F'/15 HalfReuse: '2'/17 AsIs: )/16 HalfReuse: </18 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/21 } >/24 >/25 Tile{ ]] }
        refalrts::alloc_char(vm, context[23], '\\');
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::alloc_close_call(vm, context[25]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[8], 'x');
        refalrts::reinit_char(context[15], 'F');
        refalrts::reinit_char(context[17], '2');
        refalrts::reinit_open_call(context[18]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[25] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[18] );
        refalrts::link_brackets( context[7], context[16] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[21], context[22] );
        res = refalrts::splice_evar( res, context[8], context[1] );
        res = refalrts::splice_elem( res, context[23] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/7 e.Tail0/21 )/8 (/15 15/17 )/16 3/18 >/1
        context[21] = context[19];
        context[22] = context[20];
        if( ! refalrts::number_term( 3UL, context[18] ) )
          continue;
        // closed e.Tail0 as range 21
        //DEBUG: e.Tail0: 21

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 } '\\'/23 Tile{ HalfReuse: 'x'/8 HalfReuse: 'F'/15 HalfReuse: '3'/17 AsIs: )/16 HalfReuse: </18 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/21 } >/24 >/25 Tile{ ]] }
        refalrts::alloc_char(vm, context[23], '\\');
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::alloc_close_call(vm, context[25]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[8], 'x');
        refalrts::reinit_char(context[15], 'F');
        refalrts::reinit_char(context[17], '3');
        refalrts::reinit_open_call(context[18]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[25] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[18] );
        refalrts::link_brackets( context[7], context[16] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[21], context[22] );
        res = refalrts::splice_evar( res, context[8], context[1] );
        res = refalrts::splice_elem( res, context[23] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/7 e.Tail0/21 )/8 (/15 15/17 )/16 4/18 >/1
        context[21] = context[19];
        context[22] = context[20];
        if( ! refalrts::number_term( 4UL, context[18] ) )
          continue;
        // closed e.Tail0 as range 21
        //DEBUG: e.Tail0: 21

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 } '\\'/23 Tile{ HalfReuse: 'x'/8 HalfReuse: 'F'/15 HalfReuse: '4'/17 AsIs: )/16 HalfReuse: </18 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/21 } >/24 >/25 Tile{ ]] }
        refalrts::alloc_char(vm, context[23], '\\');
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::alloc_close_call(vm, context[25]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[8], 'x');
        refalrts::reinit_char(context[15], 'F');
        refalrts::reinit_char(context[17], '4');
        refalrts::reinit_open_call(context[18]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[25] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[18] );
        refalrts::link_brackets( context[7], context[16] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[21], context[22] );
        res = refalrts::splice_evar( res, context[8], context[1] );
        res = refalrts::splice_elem( res, context[23] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/7 e.Tail0/21 )/8 (/15 15/17 )/16 5/18 >/1
        context[21] = context[19];
        context[22] = context[20];
        if( ! refalrts::number_term( 5UL, context[18] ) )
          continue;
        // closed e.Tail0 as range 21
        //DEBUG: e.Tail0: 21

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 } '\\'/23 Tile{ HalfReuse: 'x'/8 HalfReuse: 'F'/15 HalfReuse: '5'/17 AsIs: )/16 HalfReuse: </18 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/21 } >/24 >/25 Tile{ ]] }
        refalrts::alloc_char(vm, context[23], '\\');
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::alloc_close_call(vm, context[25]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[8], 'x');
        refalrts::reinit_char(context[15], 'F');
        refalrts::reinit_char(context[17], '5');
        refalrts::reinit_open_call(context[18]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[25] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[18] );
        refalrts::link_brackets( context[7], context[16] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[21], context[22] );
        res = refalrts::splice_evar( res, context[8], context[1] );
        res = refalrts::splice_elem( res, context[23] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/7 e.Tail0/21 )/8 (/15 15/17 )/16 6/18 >/1
        context[21] = context[19];
        context[22] = context[20];
        if( ! refalrts::number_term( 6UL, context[18] ) )
          continue;
        // closed e.Tail0 as range 21
        //DEBUG: e.Tail0: 21

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 } '\\'/23 Tile{ HalfReuse: 'x'/8 HalfReuse: 'F'/15 HalfReuse: '6'/17 AsIs: )/16 HalfReuse: </18 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/21 } >/24 >/25 Tile{ ]] }
        refalrts::alloc_char(vm, context[23], '\\');
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::alloc_close_call(vm, context[25]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[8], 'x');
        refalrts::reinit_char(context[15], 'F');
        refalrts::reinit_char(context[17], '6');
        refalrts::reinit_open_call(context[18]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[25] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[18] );
        refalrts::link_brackets( context[7], context[16] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[21], context[22] );
        res = refalrts::splice_evar( res, context[8], context[1] );
        res = refalrts::splice_elem( res, context[23] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/7 e.Tail0/21 )/8 (/15 15/17 )/16 7/18 >/1
        context[21] = context[19];
        context[22] = context[20];
        if( ! refalrts::number_term( 7UL, context[18] ) )
          continue;
        // closed e.Tail0 as range 21
        //DEBUG: e.Tail0: 21

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 } '\\'/23 Tile{ HalfReuse: 'x'/8 HalfReuse: 'F'/15 HalfReuse: '7'/17 AsIs: )/16 HalfReuse: </18 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/21 } >/24 >/25 Tile{ ]] }
        refalrts::alloc_char(vm, context[23], '\\');
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::alloc_close_call(vm, context[25]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[8], 'x');
        refalrts::reinit_char(context[15], 'F');
        refalrts::reinit_char(context[17], '7');
        refalrts::reinit_open_call(context[18]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[25] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[18] );
        refalrts::link_brackets( context[7], context[16] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[21], context[22] );
        res = refalrts::splice_evar( res, context[8], context[1] );
        res = refalrts::splice_elem( res, context[23] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/7 e.Tail0/21 )/8 (/15 15/17 )/16 8/18 >/1
        context[21] = context[19];
        context[22] = context[20];
        if( ! refalrts::number_term( 8UL, context[18] ) )
          continue;
        // closed e.Tail0 as range 21
        //DEBUG: e.Tail0: 21

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 } '\\'/23 Tile{ HalfReuse: 'x'/8 HalfReuse: 'F'/15 HalfReuse: '8'/17 AsIs: )/16 HalfReuse: </18 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/21 } >/24 >/25 Tile{ ]] }
        refalrts::alloc_char(vm, context[23], '\\');
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::alloc_close_call(vm, context[25]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[8], 'x');
        refalrts::reinit_char(context[15], 'F');
        refalrts::reinit_char(context[17], '8');
        refalrts::reinit_open_call(context[18]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[25] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[18] );
        refalrts::link_brackets( context[7], context[16] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[21], context[22] );
        res = refalrts::splice_evar( res, context[8], context[1] );
        res = refalrts::splice_elem( res, context[23] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/7 e.Tail0/21 )/8 (/15 15/17 )/16 9/18 >/1
        context[21] = context[19];
        context[22] = context[20];
        if( ! refalrts::number_term( 9UL, context[18] ) )
          continue;
        // closed e.Tail0 as range 21
        //DEBUG: e.Tail0: 21

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 } '\\'/23 Tile{ HalfReuse: 'x'/8 HalfReuse: 'F'/15 HalfReuse: '9'/17 AsIs: )/16 HalfReuse: </18 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/21 } >/24 >/25 Tile{ ]] }
        refalrts::alloc_char(vm, context[23], '\\');
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::alloc_close_call(vm, context[25]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[8], 'x');
        refalrts::reinit_char(context[15], 'F');
        refalrts::reinit_char(context[17], '9');
        refalrts::reinit_open_call(context[18]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[25] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[18] );
        refalrts::link_brackets( context[7], context[16] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[21], context[22] );
        res = refalrts::splice_evar( res, context[8], context[1] );
        res = refalrts::splice_elem( res, context[23] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/7 e.Tail0/21 )/8 (/15 15/17 )/16 10/18 >/1
        context[21] = context[19];
        context[22] = context[20];
        if( ! refalrts::number_term( 10UL, context[18] ) )
          continue;
        // closed e.Tail0 as range 21
        //DEBUG: e.Tail0: 21

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 } '\\'/23 Tile{ HalfReuse: 'x'/8 HalfReuse: 'F'/15 HalfReuse: 'A'/17 AsIs: )/16 HalfReuse: </18 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/21 } >/24 >/25 Tile{ ]] }
        refalrts::alloc_char(vm, context[23], '\\');
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::alloc_close_call(vm, context[25]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[8], 'x');
        refalrts::reinit_char(context[15], 'F');
        refalrts::reinit_char(context[17], 'A');
        refalrts::reinit_open_call(context[18]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[25] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[18] );
        refalrts::link_brackets( context[7], context[16] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[21], context[22] );
        res = refalrts::splice_evar( res, context[8], context[1] );
        res = refalrts::splice_elem( res, context[23] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/7 e.Tail0/21 )/8 (/15 15/17 )/16 11/18 >/1
        context[21] = context[19];
        context[22] = context[20];
        if( ! refalrts::number_term( 11UL, context[18] ) )
          continue;
        // closed e.Tail0 as range 21
        //DEBUG: e.Tail0: 21

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 } '\\'/23 Tile{ HalfReuse: 'x'/8 HalfReuse: 'F'/15 HalfReuse: 'B'/17 AsIs: )/16 HalfReuse: </18 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/21 } >/24 >/25 Tile{ ]] }
        refalrts::alloc_char(vm, context[23], '\\');
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::alloc_close_call(vm, context[25]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[8], 'x');
        refalrts::reinit_char(context[15], 'F');
        refalrts::reinit_char(context[17], 'B');
        refalrts::reinit_open_call(context[18]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[25] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[18] );
        refalrts::link_brackets( context[7], context[16] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[21], context[22] );
        res = refalrts::splice_evar( res, context[8], context[1] );
        res = refalrts::splice_elem( res, context[23] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/7 e.Tail0/21 )/8 (/15 15/17 )/16 12/18 >/1
        context[21] = context[19];
        context[22] = context[20];
        if( ! refalrts::number_term( 12UL, context[18] ) )
          continue;
        // closed e.Tail0 as range 21
        //DEBUG: e.Tail0: 21

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 } '\\'/23 Tile{ HalfReuse: 'x'/8 HalfReuse: 'F'/15 HalfReuse: 'C'/17 AsIs: )/16 HalfReuse: </18 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/21 } >/24 >/25 Tile{ ]] }
        refalrts::alloc_char(vm, context[23], '\\');
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::alloc_close_call(vm, context[25]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[8], 'x');
        refalrts::reinit_char(context[15], 'F');
        refalrts::reinit_char(context[17], 'C');
        refalrts::reinit_open_call(context[18]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[25] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[18] );
        refalrts::link_brackets( context[7], context[16] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[21], context[22] );
        res = refalrts::splice_evar( res, context[8], context[1] );
        res = refalrts::splice_elem( res, context[23] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/7 e.Tail0/21 )/8 (/15 15/17 )/16 13/18 >/1
        context[21] = context[19];
        context[22] = context[20];
        if( ! refalrts::number_term( 13UL, context[18] ) )
          continue;
        // closed e.Tail0 as range 21
        //DEBUG: e.Tail0: 21

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 } '\\'/23 Tile{ HalfReuse: 'x'/8 HalfReuse: 'F'/15 HalfReuse: 'D'/17 AsIs: )/16 HalfReuse: </18 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/21 } >/24 >/25 Tile{ ]] }
        refalrts::alloc_char(vm, context[23], '\\');
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::alloc_close_call(vm, context[25]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[8], 'x');
        refalrts::reinit_char(context[15], 'F');
        refalrts::reinit_char(context[17], 'D');
        refalrts::reinit_open_call(context[18]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[25] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[18] );
        refalrts::link_brackets( context[7], context[16] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[21], context[22] );
        res = refalrts::splice_evar( res, context[8], context[1] );
        res = refalrts::splice_elem( res, context[23] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/7 e.Tail0/21 )/8 (/15 15/17 )/16 14/18 >/1
        context[21] = context[19];
        context[22] = context[20];
        if( ! refalrts::number_term( 14UL, context[18] ) )
          continue;
        // closed e.Tail0 as range 21
        //DEBUG: e.Tail0: 21

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 } '\\'/23 Tile{ HalfReuse: 'x'/8 HalfReuse: 'F'/15 HalfReuse: 'E'/17 AsIs: )/16 HalfReuse: </18 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/21 } >/24 >/25 Tile{ ]] }
        refalrts::alloc_char(vm, context[23], '\\');
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::alloc_close_call(vm, context[25]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[8], 'x');
        refalrts::reinit_char(context[15], 'F');
        refalrts::reinit_char(context[17], 'E');
        refalrts::reinit_open_call(context[18]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[25] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[18] );
        refalrts::link_brackets( context[7], context[16] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[21], context[22] );
        res = refalrts::splice_evar( res, context[8], context[1] );
        res = refalrts::splice_elem( res, context[23] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Xxout-Chars$7=1@1/4 (/7 e.Tail0/21 )/8 (/15 15/17 )/16 15/18 >/1
        context[21] = context[19];
        context[22] = context[20];
        if( ! refalrts::number_term( 15UL, context[18] ) )
          continue;
        // closed e.Tail0 as range 21
        //DEBUG: e.Tail0: 21

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 } '\\'/23 Tile{ HalfReuse: 'x'/8 HalfReuse: 'F'/15 HalfReuse: 'F'/17 AsIs: )/16 HalfReuse: </18 HalfReuse: & Type/1 } Tile{ AsIs: e.Tail0/21 } >/24 >/25 Tile{ ]] }
        refalrts::alloc_char(vm, context[23], '\\');
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::alloc_close_call(vm, context[25]);
        refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
        refalrts::reinit_char(context[8], 'x');
        refalrts::reinit_char(context[15], 'F');
        refalrts::reinit_char(context[17], 'F');
        refalrts::reinit_open_call(context[18]);
        refalrts::reinit_name(context[1], functions[efunc_Type]);
        refalrts::push_stack( vm, context[25] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[18] );
        refalrts::link_brackets( context[7], context[16] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[21], context[22] );
        res = refalrts::splice_evar( res, context[8], context[1] );
        res = refalrts::splice_elem( res, context[23] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Xxout-Chars$7=1@1/4 (/7 e.Tail0/21 )/8 (/15 15/17 )/16 s.Low/18 >/1
      context[21] = context[19];
      context[22] = context[20];
      // closed e.Tail0 as range 21
      //DEBUG: s.Low: 18
      //DEBUG: e.Tail0: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 } '\\'/23 Tile{ HalfReuse: 'x'/8 HalfReuse: 'F'/15 HalfReuse: </17 HalfReuse: & Hex*16/16 AsIs: s.Low/18 AsIs: >/1 } )/24 </25 & Type/26 Tile{ AsIs: e.Tail0/21 } >/27 >/28 Tile{ ]] }
      refalrts::alloc_char(vm, context[23], '\\');
      refalrts::alloc_close_bracket(vm, context[24]);
      refalrts::alloc_open_call(vm, context[25]);
      refalrts::alloc_name(vm, context[26], functions[efunc_Type]);
      refalrts::alloc_close_call(vm, context[27]);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_char(context[8], 'x');
      refalrts::reinit_char(context[15], 'F');
      refalrts::reinit_open_call(context[17]);
      refalrts::reinit_name(context[16], functions[efunc_gen_Hex_D16]);
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[27] );
      refalrts::push_stack( vm, context[25] );
      refalrts::link_brackets( context[7], context[24] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[17] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[24], context[26] );
      res = refalrts::splice_evar( res, context[8], context[1] );
      res = refalrts::splice_elem( res, context[23] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/7 e.Tail0/19 )/8 (/15 s.Hi/17 )/16 0/18 >/1
      context[19] = context[9];
      context[20] = context[10];
      if( ! refalrts::number_term( 0UL, context[18] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: s.Hi: 17
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 }"\\x"/21 Tile{ HalfReuse: </8 HalfReuse: & Hex*16/15 AsIs: s.Hi/17 HalfReuse: >/16 HalfReuse: '0'/18 HalfReuse: )/1 } </23 & Type/24 Tile{ AsIs: e.Tail0/19 } >/25 >/26 Tile{ ]] }
      refalrts::alloc_chars(vm, context[21], context[22], "\\x", 2);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_Type]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::alloc_close_call(vm, context[26]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[15], functions[efunc_gen_Hex_D16]);
      refalrts::reinit_close_call(context[16]);
      refalrts::reinit_char(context[18], '0');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[23] );
      refalrts::link_brackets( context[7], context[1] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[8], context[1] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/7 e.Tail0/19 )/8 (/15 s.Hi/17 )/16 1/18 >/1
      context[19] = context[9];
      context[20] = context[10];
      if( ! refalrts::number_term( 1UL, context[18] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: s.Hi: 17
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 }"\\x"/21 Tile{ HalfReuse: </8 HalfReuse: & Hex*16/15 AsIs: s.Hi/17 HalfReuse: >/16 HalfReuse: '1'/18 HalfReuse: )/1 } </23 & Type/24 Tile{ AsIs: e.Tail0/19 } >/25 >/26 Tile{ ]] }
      refalrts::alloc_chars(vm, context[21], context[22], "\\x", 2);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_Type]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::alloc_close_call(vm, context[26]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[15], functions[efunc_gen_Hex_D16]);
      refalrts::reinit_close_call(context[16]);
      refalrts::reinit_char(context[18], '1');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[23] );
      refalrts::link_brackets( context[7], context[1] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[8], context[1] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/7 e.Tail0/19 )/8 (/15 s.Hi/17 )/16 2/18 >/1
      context[19] = context[9];
      context[20] = context[10];
      if( ! refalrts::number_term( 2UL, context[18] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: s.Hi: 17
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 }"\\x"/21 Tile{ HalfReuse: </8 HalfReuse: & Hex*16/15 AsIs: s.Hi/17 HalfReuse: >/16 HalfReuse: '2'/18 HalfReuse: )/1 } </23 & Type/24 Tile{ AsIs: e.Tail0/19 } >/25 >/26 Tile{ ]] }
      refalrts::alloc_chars(vm, context[21], context[22], "\\x", 2);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_Type]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::alloc_close_call(vm, context[26]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[15], functions[efunc_gen_Hex_D16]);
      refalrts::reinit_close_call(context[16]);
      refalrts::reinit_char(context[18], '2');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[23] );
      refalrts::link_brackets( context[7], context[1] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[8], context[1] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/7 e.Tail0/19 )/8 (/15 s.Hi/17 )/16 3/18 >/1
      context[19] = context[9];
      context[20] = context[10];
      if( ! refalrts::number_term( 3UL, context[18] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: s.Hi: 17
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 }"\\x"/21 Tile{ HalfReuse: </8 HalfReuse: & Hex*16/15 AsIs: s.Hi/17 HalfReuse: >/16 HalfReuse: '3'/18 HalfReuse: )/1 } </23 & Type/24 Tile{ AsIs: e.Tail0/19 } >/25 >/26 Tile{ ]] }
      refalrts::alloc_chars(vm, context[21], context[22], "\\x", 2);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_Type]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::alloc_close_call(vm, context[26]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[15], functions[efunc_gen_Hex_D16]);
      refalrts::reinit_close_call(context[16]);
      refalrts::reinit_char(context[18], '3');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[23] );
      refalrts::link_brackets( context[7], context[1] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[8], context[1] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/7 e.Tail0/19 )/8 (/15 s.Hi/17 )/16 4/18 >/1
      context[19] = context[9];
      context[20] = context[10];
      if( ! refalrts::number_term( 4UL, context[18] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: s.Hi: 17
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 }"\\x"/21 Tile{ HalfReuse: </8 HalfReuse: & Hex*16/15 AsIs: s.Hi/17 HalfReuse: >/16 HalfReuse: '4'/18 HalfReuse: )/1 } </23 & Type/24 Tile{ AsIs: e.Tail0/19 } >/25 >/26 Tile{ ]] }
      refalrts::alloc_chars(vm, context[21], context[22], "\\x", 2);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_Type]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::alloc_close_call(vm, context[26]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[15], functions[efunc_gen_Hex_D16]);
      refalrts::reinit_close_call(context[16]);
      refalrts::reinit_char(context[18], '4');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[23] );
      refalrts::link_brackets( context[7], context[1] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[8], context[1] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/7 e.Tail0/19 )/8 (/15 s.Hi/17 )/16 5/18 >/1
      context[19] = context[9];
      context[20] = context[10];
      if( ! refalrts::number_term( 5UL, context[18] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: s.Hi: 17
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 }"\\x"/21 Tile{ HalfReuse: </8 HalfReuse: & Hex*16/15 AsIs: s.Hi/17 HalfReuse: >/16 HalfReuse: '5'/18 HalfReuse: )/1 } </23 & Type/24 Tile{ AsIs: e.Tail0/19 } >/25 >/26 Tile{ ]] }
      refalrts::alloc_chars(vm, context[21], context[22], "\\x", 2);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_Type]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::alloc_close_call(vm, context[26]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[15], functions[efunc_gen_Hex_D16]);
      refalrts::reinit_close_call(context[16]);
      refalrts::reinit_char(context[18], '5');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[23] );
      refalrts::link_brackets( context[7], context[1] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[8], context[1] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/7 e.Tail0/19 )/8 (/15 s.Hi/17 )/16 6/18 >/1
      context[19] = context[9];
      context[20] = context[10];
      if( ! refalrts::number_term( 6UL, context[18] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: s.Hi: 17
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 }"\\x"/21 Tile{ HalfReuse: </8 HalfReuse: & Hex*16/15 AsIs: s.Hi/17 HalfReuse: >/16 HalfReuse: '6'/18 HalfReuse: )/1 } </23 & Type/24 Tile{ AsIs: e.Tail0/19 } >/25 >/26 Tile{ ]] }
      refalrts::alloc_chars(vm, context[21], context[22], "\\x", 2);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_Type]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::alloc_close_call(vm, context[26]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[15], functions[efunc_gen_Hex_D16]);
      refalrts::reinit_close_call(context[16]);
      refalrts::reinit_char(context[18], '6');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[23] );
      refalrts::link_brackets( context[7], context[1] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[8], context[1] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/7 e.Tail0/19 )/8 (/15 s.Hi/17 )/16 7/18 >/1
      context[19] = context[9];
      context[20] = context[10];
      if( ! refalrts::number_term( 7UL, context[18] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: s.Hi: 17
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 }"\\x"/21 Tile{ HalfReuse: </8 HalfReuse: & Hex*16/15 AsIs: s.Hi/17 HalfReuse: >/16 HalfReuse: '7'/18 HalfReuse: )/1 } </23 & Type/24 Tile{ AsIs: e.Tail0/19 } >/25 >/26 Tile{ ]] }
      refalrts::alloc_chars(vm, context[21], context[22], "\\x", 2);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_Type]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::alloc_close_call(vm, context[26]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[15], functions[efunc_gen_Hex_D16]);
      refalrts::reinit_close_call(context[16]);
      refalrts::reinit_char(context[18], '7');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[23] );
      refalrts::link_brackets( context[7], context[1] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[8], context[1] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/7 e.Tail0/19 )/8 (/15 s.Hi/17 )/16 8/18 >/1
      context[19] = context[9];
      context[20] = context[10];
      if( ! refalrts::number_term( 8UL, context[18] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: s.Hi: 17
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 }"\\x"/21 Tile{ HalfReuse: </8 HalfReuse: & Hex*16/15 AsIs: s.Hi/17 HalfReuse: >/16 HalfReuse: '8'/18 HalfReuse: )/1 } </23 & Type/24 Tile{ AsIs: e.Tail0/19 } >/25 >/26 Tile{ ]] }
      refalrts::alloc_chars(vm, context[21], context[22], "\\x", 2);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_Type]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::alloc_close_call(vm, context[26]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[15], functions[efunc_gen_Hex_D16]);
      refalrts::reinit_close_call(context[16]);
      refalrts::reinit_char(context[18], '8');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[23] );
      refalrts::link_brackets( context[7], context[1] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[8], context[1] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/7 e.Tail0/19 )/8 (/15 s.Hi/17 )/16 9/18 >/1
      context[19] = context[9];
      context[20] = context[10];
      if( ! refalrts::number_term( 9UL, context[18] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: s.Hi: 17
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 }"\\x"/21 Tile{ HalfReuse: </8 HalfReuse: & Hex*16/15 AsIs: s.Hi/17 HalfReuse: >/16 HalfReuse: '9'/18 HalfReuse: )/1 } </23 & Type/24 Tile{ AsIs: e.Tail0/19 } >/25 >/26 Tile{ ]] }
      refalrts::alloc_chars(vm, context[21], context[22], "\\x", 2);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_Type]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::alloc_close_call(vm, context[26]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[15], functions[efunc_gen_Hex_D16]);
      refalrts::reinit_close_call(context[16]);
      refalrts::reinit_char(context[18], '9');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[23] );
      refalrts::link_brackets( context[7], context[1] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[8], context[1] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/7 e.Tail0/19 )/8 (/15 s.Hi/17 )/16 10/18 >/1
      context[19] = context[9];
      context[20] = context[10];
      if( ! refalrts::number_term( 10UL, context[18] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: s.Hi: 17
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 }"\\x"/21 Tile{ HalfReuse: </8 HalfReuse: & Hex*16/15 AsIs: s.Hi/17 HalfReuse: >/16 HalfReuse: 'A'/18 HalfReuse: )/1 } </23 & Type/24 Tile{ AsIs: e.Tail0/19 } >/25 >/26 Tile{ ]] }
      refalrts::alloc_chars(vm, context[21], context[22], "\\x", 2);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_Type]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::alloc_close_call(vm, context[26]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[15], functions[efunc_gen_Hex_D16]);
      refalrts::reinit_close_call(context[16]);
      refalrts::reinit_char(context[18], 'A');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[23] );
      refalrts::link_brackets( context[7], context[1] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[8], context[1] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/7 e.Tail0/19 )/8 (/15 s.Hi/17 )/16 11/18 >/1
      context[19] = context[9];
      context[20] = context[10];
      if( ! refalrts::number_term( 11UL, context[18] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: s.Hi: 17
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 }"\\x"/21 Tile{ HalfReuse: </8 HalfReuse: & Hex*16/15 AsIs: s.Hi/17 HalfReuse: >/16 HalfReuse: 'B'/18 HalfReuse: )/1 } </23 & Type/24 Tile{ AsIs: e.Tail0/19 } >/25 >/26 Tile{ ]] }
      refalrts::alloc_chars(vm, context[21], context[22], "\\x", 2);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_Type]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::alloc_close_call(vm, context[26]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[15], functions[efunc_gen_Hex_D16]);
      refalrts::reinit_close_call(context[16]);
      refalrts::reinit_char(context[18], 'B');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[23] );
      refalrts::link_brackets( context[7], context[1] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[8], context[1] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/7 e.Tail0/19 )/8 (/15 s.Hi/17 )/16 12/18 >/1
      context[19] = context[9];
      context[20] = context[10];
      if( ! refalrts::number_term( 12UL, context[18] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: s.Hi: 17
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 }"\\x"/21 Tile{ HalfReuse: </8 HalfReuse: & Hex*16/15 AsIs: s.Hi/17 HalfReuse: >/16 HalfReuse: 'C'/18 HalfReuse: )/1 } </23 & Type/24 Tile{ AsIs: e.Tail0/19 } >/25 >/26 Tile{ ]] }
      refalrts::alloc_chars(vm, context[21], context[22], "\\x", 2);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_Type]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::alloc_close_call(vm, context[26]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[15], functions[efunc_gen_Hex_D16]);
      refalrts::reinit_close_call(context[16]);
      refalrts::reinit_char(context[18], 'C');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[23] );
      refalrts::link_brackets( context[7], context[1] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[8], context[1] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/7 e.Tail0/19 )/8 (/15 s.Hi/17 )/16 13/18 >/1
      context[19] = context[9];
      context[20] = context[10];
      if( ! refalrts::number_term( 13UL, context[18] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: s.Hi: 17
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 }"\\x"/21 Tile{ HalfReuse: </8 HalfReuse: & Hex*16/15 AsIs: s.Hi/17 HalfReuse: >/16 HalfReuse: 'D'/18 HalfReuse: )/1 } </23 & Type/24 Tile{ AsIs: e.Tail0/19 } >/25 >/26 Tile{ ]] }
      refalrts::alloc_chars(vm, context[21], context[22], "\\x", 2);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_Type]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::alloc_close_call(vm, context[26]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[15], functions[efunc_gen_Hex_D16]);
      refalrts::reinit_close_call(context[16]);
      refalrts::reinit_char(context[18], 'D');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[23] );
      refalrts::link_brackets( context[7], context[1] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[8], context[1] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/7 e.Tail0/19 )/8 (/15 s.Hi/17 )/16 14/18 >/1
      context[19] = context[9];
      context[20] = context[10];
      if( ! refalrts::number_term( 14UL, context[18] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: s.Hi: 17
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 }"\\x"/21 Tile{ HalfReuse: </8 HalfReuse: & Hex*16/15 AsIs: s.Hi/17 HalfReuse: >/16 HalfReuse: 'E'/18 HalfReuse: )/1 } </23 & Type/24 Tile{ AsIs: e.Tail0/19 } >/25 >/26 Tile{ ]] }
      refalrts::alloc_chars(vm, context[21], context[22], "\\x", 2);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_Type]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::alloc_close_call(vm, context[26]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[15], functions[efunc_gen_Hex_D16]);
      refalrts::reinit_close_call(context[16]);
      refalrts::reinit_char(context[18], 'E');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[23] );
      refalrts::link_brackets( context[7], context[1] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[8], context[1] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Xxout-Chars$7=1@1/4 (/7 e.Tail0/19 )/8 (/15 s.Hi/17 )/16 15/18 >/1
      context[19] = context[9];
      context[20] = context[10];
      if( ! refalrts::number_term( 15UL, context[18] ) )
        continue;
      // closed e.Tail0 as range 19
      //DEBUG: s.Hi: 17
      //DEBUG: e.Tail0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 }"\\x"/21 Tile{ HalfReuse: </8 HalfReuse: & Hex*16/15 AsIs: s.Hi/17 HalfReuse: >/16 HalfReuse: 'F'/18 HalfReuse: )/1 } </23 & Type/24 Tile{ AsIs: e.Tail0/19 } >/25 >/26 Tile{ ]] }
      refalrts::alloc_chars(vm, context[21], context[22], "\\x", 2);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_Type]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::alloc_close_call(vm, context[26]);
      refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[15], functions[efunc_gen_Hex_D16]);
      refalrts::reinit_close_call(context[16]);
      refalrts::reinit_char(context[18], 'F');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[23] );
      refalrts::link_brackets( context[7], context[1] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[8], context[1] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Xxout-Chars$7=1@1/4 (/7 e.Tail0/19 )/8 (/15 s.Hi/17 )/16 s.Low/18 >/1
    context[19] = context[9];
    context[20] = context[10];
    // closed e.Tail0 as range 19
    //DEBUG: s.Hi: 17
    //DEBUG: s.Low: 18
    //DEBUG: e.Tail0: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Xxout-Chars/4 AsIs: (/7 }"\\x"/21 Tile{ HalfReuse: </8 HalfReuse: & Hex*16/15 AsIs: s.Hi/17 } >/23 </24 Tile{ HalfReuse: & Hex*16/16 AsIs: s.Low/18 AsIs: >/1 } )/25 </26 & Type/27 Tile{ AsIs: e.Tail0/19 } >/28 >/29 Tile{ ]] }
    refalrts::alloc_chars(vm, context[21], context[22], "\\x", 2);
    refalrts::alloc_close_call(vm, context[23]);
    refalrts::alloc_open_call(vm, context[24]);
    refalrts::alloc_close_bracket(vm, context[25]);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_Type]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::update_name(context[4], functions[efunc_Xxoutm_Chars]);
    refalrts::reinit_open_call(context[8]);
    refalrts::reinit_name(context[15], functions[efunc_gen_Hex_D16]);
    refalrts::reinit_name(context[16], functions[efunc_gen_Hex_D16]);
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[26] );
    refalrts::link_brackets( context[7], context[25] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[25], context[27] );
    res = refalrts::splice_evar( res, context[16], context[1] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[8], context[17] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Xxout-Chars$7=1@1/4 (/7 e.Tail0/5 )/8 e.dyn/2 >/1
  // closed e.Tail0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.Tail0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Xxout-Chars$7=1@0/10 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Tail0/5 AsIs: )/8 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Xxoutm_Chars_S7A1Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Xxoutm_Chars_S7A1Z1("Xxout-Chars$7=1@1", COOKIE1_, COOKIE2_, func_gen_Xxoutm_Chars_S7A1Z1);


static refalrts::FnResult func_gen_Divmodm_Nat_S2A3Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & Divmod-Nat$2=3@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Divmod-Nat$2=3@1/4 s.new1/5 (/8 e.new2/6 )/9 e.new3/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new2 as range 6
  // closed e.new3 as range 2
  do {
    // </0 & Divmod-Nat$2=3@1/4 s.RestoreShift0/5 (/8 s.N/14 e.0/10 )/9 s.D/15 e./12 >/1
    context[10] = context[6];
    context[11] = context[7];
    context[12] = context[2];
    context[13] = context[3];
    if( ! refalrts::svar_left( context[14], context[10], context[11] ) )
      continue;
    // closed e.0 as range 10
    if( ! refalrts::svar_left( context[15], context[12], context[13] ) )
      continue;
    // closed e. as range 12
    //DEBUG: s.RestoreShift0: 5
    //DEBUG: s.N: 14
    //DEBUG: e.0: 10
    //DEBUG: s.D: 15
    //DEBUG: e.: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-Nat$2=4@1/4 AsIs: s.RestoreShift0/5 HalfReuse: </8 } & Divmod-Align/16 (/17 0/18 Tile{ AsIs: s.N/14 } )/19 (/20 Tile{ AsIs: e.0/10 } )/21 Tile{ HalfReuse: (/9 AsIs: s.D/15 } )/22 Tile{ AsIs: e./12 } >/23 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[16], functions[efunc_Divmodm_Align]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_number(vm, context[18], 0UL);
    refalrts::alloc_close_bracket(vm, context[19]);
    refalrts::alloc_open_bracket(vm, context[20]);
    refalrts::alloc_close_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_close_call(vm, context[23]);
    refalrts::update_name(context[4], functions[efunc_gen_Divmodm_Nat_S2A4Z1]);
    refalrts::reinit_open_call(context[8]);
    refalrts::reinit_open_bracket(context[9]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[8] );
    refalrts::link_brackets( context[9], context[22] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[17], context[19] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[23] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[9], context[15] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[16], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Divmod-Nat$2=3@1/4 s.RestoreShift0/5 (/8 e.Numerator$a0/10 )/9 >/1
    context[10] = context[6];
    context[11] = context[7];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Numerator$a0 as range 10
    //DEBUG: s.RestoreShift0: 5
    //DEBUG: e.Numerator$a0: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-Nat$2=4@1/4 AsIs: s.RestoreShift0/5 HalfReuse: </8 } & Divmod-Align$2=1/12 </13 & Divmod-CalcDigits@2/14 (/15 0/16 )/17 Tile{ AsIs: e.Numerator$a0/10 } >/18 Tile{ HalfReuse: >/9 AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[12], functions[efunc_gen_Divmodm_Align_S2A1]);
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_gen_Divmodm_CalcDigits_Z2]);
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_number(vm, context[16], 0UL);
    refalrts::alloc_close_bracket(vm, context[17]);
    refalrts::alloc_close_call(vm, context[18]);
    refalrts::update_name(context[4], functions[efunc_gen_Divmodm_Nat_S2A4Z1]);
    refalrts::reinit_open_call(context[8]);
    refalrts::reinit_close_call(context[9]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[13] );
    refalrts::link_brackets( context[15], context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[9];
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[12], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Divmod-Nat$2=3@1/4 s.RestoreShift0/5 (/8 )/9 e.Denominator$a/10 >/1
    context[10] = context[2];
    context[11] = context[3];
    if( ! refalrts::empty_seq( context[6], context[7] ) )
      continue;
    // closed e.Denominator$a as range 10
    //DEBUG: s.RestoreShift0: 5
    //DEBUG: e.Denominator$a: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} e.Denominator$a/10 {REMOVED TILE}
    //RESULT: Tile{ [[ } </12 & Divmod-Nat$2=5@1/13 (/14 0/15 )/16 </17 & Divmod-Nat$2=5:1/18 Tile{ AsIs: </0 Reuse: & Divmod-Shl/4 AsIs: s.RestoreShift0/5 HalfReuse: >/8 HalfReuse: >/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Divmodm_Nat_S2A5Z1]);
    refalrts::alloc_open_bracket(vm, context[14]);
    refalrts::alloc_number(vm, context[15], 0UL);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_open_call(vm, context[17]);
    refalrts::alloc_name(vm, context[18], functions[efunc_gen_Divmodm_Nat_S2A5B1]);
    refalrts::update_name(context[4], functions[efunc_Divmodm_Shl]);
    refalrts::reinit_close_call(context[8]);
    refalrts::reinit_close_call(context[9]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[14], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[12], context[18] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Divmod-Nat$2=3@1/4 s.RestoreShift0/5 (/8 e.Numerator$a0/10 )/9 e.Denominator$a/12 >/1
    context[10] = context[6];
    context[11] = context[7];
    context[12] = context[2];
    context[13] = context[3];
    // closed e.Numerator$a0 as range 10
    // closed e.Denominator$a as range 12
    //DEBUG: s.RestoreShift0: 5
    //DEBUG: e.Numerator$a0: 10
    //DEBUG: e.Denominator$a: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-Nat$2=4@1/4 AsIs: s.RestoreShift0/5 HalfReuse: </8 } & Divmod-Align@0/14 (/15 0/16 )/17 (/18 Tile{ AsIs: e.Numerator$a0/10 } )/19 (/20 Tile{ AsIs: )/9 AsIs: e.Denominator$a/12 AsIs: >/1 } >/21 Tile{ ]] }
    refalrts::alloc_name(vm, context[14], functions[efunc_gen_Divmodm_Align_Z0]);
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_number(vm, context[16], 0UL);
    refalrts::alloc_close_bracket(vm, context[17]);
    refalrts::alloc_open_bracket(vm, context[18]);
    refalrts::alloc_close_bracket(vm, context[19]);
    refalrts::alloc_open_bracket(vm, context[20]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_Divmodm_Nat_S2A4Z1]);
    refalrts::reinit_open_call(context[8]);
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[8] );
    refalrts::link_brackets( context[20], context[9] );
    refalrts::link_brackets( context[18], context[19] );
    refalrts::link_brackets( context[15], context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[9], context[1] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[14], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Divmod-Nat$2=3@1/4 s.RestoreShift0/5 (/8 e.Numerator$a0/6 )/9 e.dyn/2 >/1
  // closed e.Numerator$a0 as range 6
  // closed e.dyn as range 2
  //DEBUG: s.RestoreShift0: 5
  //DEBUG: e.Numerator$a0: 6
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </10 & Divmod-Nat$2=3@0/11 (/12 )/13 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: s.RestoreShift0/5 AsIs: (/8 AsIs: e.Numerator$a0/6 AsIs: )/9 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[10]);
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_Divmodm_Nat_S2A3Z0]);
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[10] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[10], context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Divmodm_Nat_S2A3Z1("Divmod-Nat$2=3@1", COOKIE1_, COOKIE2_, func_gen_Divmodm_Nat_S2A3Z1);


static refalrts::FnResult func_gen_Divmodm_Nat_S2A3Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & Divmod-Nat$2=3@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Divmod-Nat$2=3@2/4 s.new1/5 (/8 e.new2/6 )/9 e.new3/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new2 as range 6
  // closed e.new3 as range 2
  do {
    // </0 & Divmod-Nat$2=3@2/4 s.RestoreShift0/5 (/8 s.N/14 e.0/10 )/9 s.D/15 e./12 >/1
    context[10] = context[6];
    context[11] = context[7];
    context[12] = context[2];
    context[13] = context[3];
    if( ! refalrts::svar_left( context[14], context[10], context[11] ) )
      continue;
    // closed e.0 as range 10
    if( ! refalrts::svar_left( context[15], context[12], context[13] ) )
      continue;
    // closed e. as range 12
    //DEBUG: s.RestoreShift0: 5
    //DEBUG: s.N: 14
    //DEBUG: e.0: 10
    //DEBUG: s.D: 15
    //DEBUG: e.: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-Nat$2=4@2/4 AsIs: s.RestoreShift0/5 HalfReuse: </8 } & Divmod-Align/16 (/17 0/18 Tile{ AsIs: s.N/14 } )/19 (/20 Tile{ AsIs: e.0/10 } )/21 Tile{ HalfReuse: (/9 AsIs: s.D/15 } )/22 Tile{ AsIs: e./12 } >/23 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[16], functions[efunc_Divmodm_Align]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_number(vm, context[18], 0UL);
    refalrts::alloc_close_bracket(vm, context[19]);
    refalrts::alloc_open_bracket(vm, context[20]);
    refalrts::alloc_close_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_close_call(vm, context[23]);
    refalrts::update_name(context[4], functions[efunc_gen_Divmodm_Nat_S2A4Z2]);
    refalrts::reinit_open_call(context[8]);
    refalrts::reinit_open_bracket(context[9]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[8] );
    refalrts::link_brackets( context[9], context[22] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[17], context[19] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[23] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[9], context[15] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[16], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Divmod-Nat$2=3@2/4 s.RestoreShift0/5 (/8 e.Numerator$a0/10 )/9 >/1
    context[10] = context[6];
    context[11] = context[7];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Numerator$a0 as range 10
    //DEBUG: s.RestoreShift0: 5
    //DEBUG: e.Numerator$a0: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-Nat$2=4@2/4 AsIs: s.RestoreShift0/5 HalfReuse: </8 } & Divmod-Align$2=1/12 </13 & Divmod-CalcDigits@2/14 (/15 0/16 )/17 Tile{ AsIs: e.Numerator$a0/10 } >/18 Tile{ HalfReuse: >/9 AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[12], functions[efunc_gen_Divmodm_Align_S2A1]);
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_gen_Divmodm_CalcDigits_Z2]);
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_number(vm, context[16], 0UL);
    refalrts::alloc_close_bracket(vm, context[17]);
    refalrts::alloc_close_call(vm, context[18]);
    refalrts::update_name(context[4], functions[efunc_gen_Divmodm_Nat_S2A4Z2]);
    refalrts::reinit_open_call(context[8]);
    refalrts::reinit_close_call(context[9]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[13] );
    refalrts::link_brackets( context[15], context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[9];
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[12], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Divmod-Nat$2=3@2/4 s.RestoreShift0/5 (/8 )/9 e.Denominator$a/10 >/1
    context[10] = context[2];
    context[11] = context[3];
    if( ! refalrts::empty_seq( context[6], context[7] ) )
      continue;
    // closed e.Denominator$a as range 10
    //DEBUG: s.RestoreShift0: 5
    //DEBUG: e.Denominator$a: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} e.Denominator$a/10 {REMOVED TILE}
    //RESULT: Tile{ [[ } </12 & Divmod-Nat$2=5@2/13 (/14 0/15 )/16 </17 & Divmod-Nat$2=5:1/18 Tile{ AsIs: </0 Reuse: & Divmod-Shl/4 AsIs: s.RestoreShift0/5 HalfReuse: >/8 HalfReuse: >/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Divmodm_Nat_S2A5Z2]);
    refalrts::alloc_open_bracket(vm, context[14]);
    refalrts::alloc_number(vm, context[15], 0UL);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_open_call(vm, context[17]);
    refalrts::alloc_name(vm, context[18], functions[efunc_gen_Divmodm_Nat_S2A5B1]);
    refalrts::update_name(context[4], functions[efunc_Divmodm_Shl]);
    refalrts::reinit_close_call(context[8]);
    refalrts::reinit_close_call(context[9]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[14], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[12], context[18] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Divmod-Nat$2=3@2/4 s.RestoreShift0/5 (/8 e.Numerator$a0/10 )/9 e.Denominator$a/12 >/1
    context[10] = context[6];
    context[11] = context[7];
    context[12] = context[2];
    context[13] = context[3];
    // closed e.Numerator$a0 as range 10
    // closed e.Denominator$a as range 12
    //DEBUG: s.RestoreShift0: 5
    //DEBUG: e.Numerator$a0: 10
    //DEBUG: e.Denominator$a: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-Nat$2=4@2/4 AsIs: s.RestoreShift0/5 HalfReuse: </8 } & Divmod-Align@0/14 (/15 0/16 )/17 (/18 Tile{ AsIs: e.Numerator$a0/10 } )/19 (/20 Tile{ AsIs: )/9 AsIs: e.Denominator$a/12 AsIs: >/1 } >/21 Tile{ ]] }
    refalrts::alloc_name(vm, context[14], functions[efunc_gen_Divmodm_Align_Z0]);
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_number(vm, context[16], 0UL);
    refalrts::alloc_close_bracket(vm, context[17]);
    refalrts::alloc_open_bracket(vm, context[18]);
    refalrts::alloc_close_bracket(vm, context[19]);
    refalrts::alloc_open_bracket(vm, context[20]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_Divmodm_Nat_S2A4Z2]);
    refalrts::reinit_open_call(context[8]);
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[8] );
    refalrts::link_brackets( context[20], context[9] );
    refalrts::link_brackets( context[18], context[19] );
    refalrts::link_brackets( context[15], context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[9], context[1] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[14], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Divmod-Nat$2=3@2/4 s.RestoreShift0/5 (/8 e.Numerator$a0/6 )/9 e.dyn/2 >/1
  // closed e.Numerator$a0 as range 6
  // closed e.dyn as range 2
  //DEBUG: s.RestoreShift0: 5
  //DEBUG: e.Numerator$a0: 6
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </10 & Divmod-Nat$2=3@0/11 (/12 '-'/13 )/14 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: s.RestoreShift0/5 AsIs: (/8 AsIs: e.Numerator$a0/6 AsIs: )/9 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[10]);
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_Divmodm_Nat_S2A3Z0]);
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_char(vm, context[13], '-');
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[10] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::link_brackets( context[12], context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[10], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Divmodm_Nat_S2A3Z2("Divmod-Nat$2=3@2", COOKIE1_, COOKIE2_, func_gen_Divmodm_Nat_S2A3Z2);


static refalrts::FnResult func_gen_Divmodm_Nat_S2A3Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & Divmod-Nat$2=3@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Divmod-Nat$2=3@3/4 s.new1/5 (/8 e.new2/6 )/9 e.new3/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new2 as range 6
  // closed e.new3 as range 2
  do {
    // </0 & Divmod-Nat$2=3@3/4 s.RestoreShift0/5 (/8 s.N/14 e.0/10 )/9 s.D/15 e./12 >/1
    context[10] = context[6];
    context[11] = context[7];
    context[12] = context[2];
    context[13] = context[3];
    if( ! refalrts::svar_left( context[14], context[10], context[11] ) )
      continue;
    // closed e.0 as range 10
    if( ! refalrts::svar_left( context[15], context[12], context[13] ) )
      continue;
    // closed e. as range 12
    //DEBUG: s.RestoreShift0: 5
    //DEBUG: s.N: 14
    //DEBUG: e.0: 10
    //DEBUG: s.D: 15
    //DEBUG: e.: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-Nat$2=4@3/4 AsIs: s.RestoreShift0/5 HalfReuse: </8 } & Divmod-Align/16 (/17 0/18 Tile{ AsIs: s.N/14 } )/19 (/20 Tile{ AsIs: e.0/10 } )/21 Tile{ HalfReuse: (/9 AsIs: s.D/15 } )/22 Tile{ AsIs: e./12 } >/23 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[16], functions[efunc_Divmodm_Align]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_number(vm, context[18], 0UL);
    refalrts::alloc_close_bracket(vm, context[19]);
    refalrts::alloc_open_bracket(vm, context[20]);
    refalrts::alloc_close_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_close_call(vm, context[23]);
    refalrts::update_name(context[4], functions[efunc_gen_Divmodm_Nat_S2A4Z3]);
    refalrts::reinit_open_call(context[8]);
    refalrts::reinit_open_bracket(context[9]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[8] );
    refalrts::link_brackets( context[9], context[22] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[17], context[19] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[23] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[9], context[15] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[16], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Divmod-Nat$2=3@3/4 s.RestoreShift0/5 (/8 e.Numerator$a0/10 )/9 >/1
    context[10] = context[6];
    context[11] = context[7];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Numerator$a0 as range 10
    //DEBUG: s.RestoreShift0: 5
    //DEBUG: e.Numerator$a0: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-Nat$2=4@3/4 AsIs: s.RestoreShift0/5 HalfReuse: </8 } & Divmod-Align$2=1/12 </13 & Divmod-CalcDigits@2/14 (/15 0/16 )/17 Tile{ AsIs: e.Numerator$a0/10 } >/18 Tile{ HalfReuse: >/9 AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[12], functions[efunc_gen_Divmodm_Align_S2A1]);
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_gen_Divmodm_CalcDigits_Z2]);
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_number(vm, context[16], 0UL);
    refalrts::alloc_close_bracket(vm, context[17]);
    refalrts::alloc_close_call(vm, context[18]);
    refalrts::update_name(context[4], functions[efunc_gen_Divmodm_Nat_S2A4Z3]);
    refalrts::reinit_open_call(context[8]);
    refalrts::reinit_close_call(context[9]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[13] );
    refalrts::link_brackets( context[15], context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[9];
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[12], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Divmod-Nat$2=3@3/4 s.RestoreShift0/5 (/8 )/9 e.Denominator$a/10 >/1
    context[10] = context[2];
    context[11] = context[3];
    if( ! refalrts::empty_seq( context[6], context[7] ) )
      continue;
    // closed e.Denominator$a as range 10
    //DEBUG: s.RestoreShift0: 5
    //DEBUG: e.Denominator$a: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} e.Denominator$a/10 {REMOVED TILE}
    //RESULT: Tile{ [[ } </12 & Divmod-Nat$2=5@3/13 (/14 0/15 )/16 </17 & Divmod-Nat$2=5:1/18 Tile{ AsIs: </0 Reuse: & Divmod-Shl/4 AsIs: s.RestoreShift0/5 HalfReuse: >/8 HalfReuse: >/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Divmodm_Nat_S2A5Z3]);
    refalrts::alloc_open_bracket(vm, context[14]);
    refalrts::alloc_number(vm, context[15], 0UL);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_open_call(vm, context[17]);
    refalrts::alloc_name(vm, context[18], functions[efunc_gen_Divmodm_Nat_S2A5B1]);
    refalrts::update_name(context[4], functions[efunc_Divmodm_Shl]);
    refalrts::reinit_close_call(context[8]);
    refalrts::reinit_close_call(context[9]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[14], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[12], context[18] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Divmod-Nat$2=3@3/4 s.RestoreShift0/5 (/8 e.Numerator$a0/10 )/9 e.Denominator$a/12 >/1
    context[10] = context[6];
    context[11] = context[7];
    context[12] = context[2];
    context[13] = context[3];
    // closed e.Numerator$a0 as range 10
    // closed e.Denominator$a as range 12
    //DEBUG: s.RestoreShift0: 5
    //DEBUG: e.Numerator$a0: 10
    //DEBUG: e.Denominator$a: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-Nat$2=4@3/4 AsIs: s.RestoreShift0/5 HalfReuse: </8 } & Divmod-Align@0/14 (/15 0/16 )/17 (/18 Tile{ AsIs: e.Numerator$a0/10 } )/19 (/20 Tile{ AsIs: )/9 AsIs: e.Denominator$a/12 AsIs: >/1 } >/21 Tile{ ]] }
    refalrts::alloc_name(vm, context[14], functions[efunc_gen_Divmodm_Align_Z0]);
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_number(vm, context[16], 0UL);
    refalrts::alloc_close_bracket(vm, context[17]);
    refalrts::alloc_open_bracket(vm, context[18]);
    refalrts::alloc_close_bracket(vm, context[19]);
    refalrts::alloc_open_bracket(vm, context[20]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_Divmodm_Nat_S2A4Z3]);
    refalrts::reinit_open_call(context[8]);
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[8] );
    refalrts::link_brackets( context[20], context[9] );
    refalrts::link_brackets( context[18], context[19] );
    refalrts::link_brackets( context[15], context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[9], context[1] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[14], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Divmod-Nat$2=3@3/4 s.RestoreShift0/5 (/8 e.Numerator$a0/6 )/9 e.dyn/2 >/1
  // closed e.Numerator$a0 as range 6
  // closed e.dyn as range 2
  //DEBUG: s.RestoreShift0: 5
  //DEBUG: e.Numerator$a0: 6
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </10 & Divmod-Nat$2=3@0/11 (/12 '-'/13 )/14 (/15 Tile{ HalfReuse: '-'/0 HalfReuse: )/4 AsIs: s.RestoreShift0/5 AsIs: (/8 AsIs: e.Numerator$a0/6 AsIs: )/9 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[10]);
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_Divmodm_Nat_S2A3Z0]);
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_char(vm, context[13], '-');
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::reinit_char(context[0], '-');
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[10] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[15], context[4] );
  refalrts::link_brackets( context[12], context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[10], context[15] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Divmodm_Nat_S2A3Z3("Divmod-Nat$2=3@3", COOKIE1_, COOKIE2_, func_gen_Divmodm_Nat_S2A3Z3);


static refalrts::FnResult func_gen_Divmodm_Nat_S2A3Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & Divmod-Nat$2=3@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Divmod-Nat$2=3@4/4 s.new1/5 (/8 e.new2/6 )/9 e.new3/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new2 as range 6
  // closed e.new3 as range 2
  do {
    // </0 & Divmod-Nat$2=3@4/4 s.RestoreShift0/5 (/8 s.N/14 e.0/10 )/9 s.D/15 e./12 >/1
    context[10] = context[6];
    context[11] = context[7];
    context[12] = context[2];
    context[13] = context[3];
    if( ! refalrts::svar_left( context[14], context[10], context[11] ) )
      continue;
    // closed e.0 as range 10
    if( ! refalrts::svar_left( context[15], context[12], context[13] ) )
      continue;
    // closed e. as range 12
    //DEBUG: s.RestoreShift0: 5
    //DEBUG: s.N: 14
    //DEBUG: e.0: 10
    //DEBUG: s.D: 15
    //DEBUG: e.: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-Nat$2=4@4/4 AsIs: s.RestoreShift0/5 HalfReuse: </8 } & Divmod-Align/16 (/17 0/18 Tile{ AsIs: s.N/14 } )/19 (/20 Tile{ AsIs: e.0/10 } )/21 Tile{ HalfReuse: (/9 AsIs: s.D/15 } )/22 Tile{ AsIs: e./12 } >/23 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[16], functions[efunc_Divmodm_Align]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_number(vm, context[18], 0UL);
    refalrts::alloc_close_bracket(vm, context[19]);
    refalrts::alloc_open_bracket(vm, context[20]);
    refalrts::alloc_close_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_close_call(vm, context[23]);
    refalrts::update_name(context[4], functions[efunc_gen_Divmodm_Nat_S2A4Z4]);
    refalrts::reinit_open_call(context[8]);
    refalrts::reinit_open_bracket(context[9]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[8] );
    refalrts::link_brackets( context[9], context[22] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[17], context[19] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[23] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[9], context[15] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[16], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Divmod-Nat$2=3@4/4 s.RestoreShift0/5 (/8 e.Numerator$a0/10 )/9 >/1
    context[10] = context[6];
    context[11] = context[7];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Numerator$a0 as range 10
    //DEBUG: s.RestoreShift0: 5
    //DEBUG: e.Numerator$a0: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-Nat$2=4@4/4 AsIs: s.RestoreShift0/5 HalfReuse: </8 } & Divmod-Align$2=1/12 </13 & Divmod-CalcDigits@2/14 (/15 0/16 )/17 Tile{ AsIs: e.Numerator$a0/10 } >/18 Tile{ HalfReuse: >/9 AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[12], functions[efunc_gen_Divmodm_Align_S2A1]);
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_gen_Divmodm_CalcDigits_Z2]);
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_number(vm, context[16], 0UL);
    refalrts::alloc_close_bracket(vm, context[17]);
    refalrts::alloc_close_call(vm, context[18]);
    refalrts::update_name(context[4], functions[efunc_gen_Divmodm_Nat_S2A4Z4]);
    refalrts::reinit_open_call(context[8]);
    refalrts::reinit_close_call(context[9]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[13] );
    refalrts::link_brackets( context[15], context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[9];
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[12], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Divmod-Nat$2=3@4/4 s.RestoreShift0/5 (/8 )/9 e.Denominator$a/10 >/1
    context[10] = context[2];
    context[11] = context[3];
    if( ! refalrts::empty_seq( context[6], context[7] ) )
      continue;
    // closed e.Denominator$a as range 10
    //DEBUG: s.RestoreShift0: 5
    //DEBUG: e.Denominator$a: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} e.Denominator$a/10 {REMOVED TILE}
    //RESULT: Tile{ [[ } </12 & Divmod-Nat$2=5@4/13 (/14 0/15 )/16 </17 & Divmod-Nat$2=5:1/18 Tile{ AsIs: </0 Reuse: & Divmod-Shl/4 AsIs: s.RestoreShift0/5 HalfReuse: >/8 HalfReuse: >/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Divmodm_Nat_S2A5Z4]);
    refalrts::alloc_open_bracket(vm, context[14]);
    refalrts::alloc_number(vm, context[15], 0UL);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_open_call(vm, context[17]);
    refalrts::alloc_name(vm, context[18], functions[efunc_gen_Divmodm_Nat_S2A5B1]);
    refalrts::update_name(context[4], functions[efunc_Divmodm_Shl]);
    refalrts::reinit_close_call(context[8]);
    refalrts::reinit_close_call(context[9]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[14], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[12], context[18] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Divmod-Nat$2=3@4/4 s.RestoreShift0/5 (/8 e.Numerator$a0/10 )/9 e.Denominator$a/12 >/1
    context[10] = context[6];
    context[11] = context[7];
    context[12] = context[2];
    context[13] = context[3];
    // closed e.Numerator$a0 as range 10
    // closed e.Denominator$a as range 12
    //DEBUG: s.RestoreShift0: 5
    //DEBUG: e.Numerator$a0: 10
    //DEBUG: e.Denominator$a: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-Nat$2=4@4/4 AsIs: s.RestoreShift0/5 HalfReuse: </8 } & Divmod-Align@0/14 (/15 0/16 )/17 (/18 Tile{ AsIs: e.Numerator$a0/10 } )/19 (/20 Tile{ AsIs: )/9 AsIs: e.Denominator$a/12 AsIs: >/1 } >/21 Tile{ ]] }
    refalrts::alloc_name(vm, context[14], functions[efunc_gen_Divmodm_Align_Z0]);
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_number(vm, context[16], 0UL);
    refalrts::alloc_close_bracket(vm, context[17]);
    refalrts::alloc_open_bracket(vm, context[18]);
    refalrts::alloc_close_bracket(vm, context[19]);
    refalrts::alloc_open_bracket(vm, context[20]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_Divmodm_Nat_S2A4Z4]);
    refalrts::reinit_open_call(context[8]);
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[8] );
    refalrts::link_brackets( context[20], context[9] );
    refalrts::link_brackets( context[18], context[19] );
    refalrts::link_brackets( context[15], context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[9], context[1] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[14], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Divmod-Nat$2=3@4/4 s.RestoreShift0/5 (/8 e.Numerator$a0/6 )/9 e.dyn/2 >/1
  // closed e.Numerator$a0 as range 6
  // closed e.dyn as range 2
  //DEBUG: s.RestoreShift0: 5
  //DEBUG: e.Numerator$a0: 6
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </10 & Divmod-Nat$2=3@0/11 (/12 )/13 (/14 Tile{ HalfReuse: '-'/0 HalfReuse: )/4 AsIs: s.RestoreShift0/5 AsIs: (/8 AsIs: e.Numerator$a0/6 AsIs: )/9 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[10]);
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_Divmodm_Nat_S2A3Z0]);
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::alloc_open_bracket(vm, context[14]);
  refalrts::reinit_char(context[0], '-');
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[10] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[14], context[4] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[10], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Divmodm_Nat_S2A3Z4("Divmod-Nat$2=3@4", COOKIE1_, COOKIE2_, func_gen_Divmodm_Nat_S2A3Z4);


static refalrts::FnResult func_gen_Divmodm_CalcDigits_A1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & Divmod-CalcDigits=1@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Divmod-CalcDigits=1@3/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Divmod-CalcDigits=1@3/4 (/7 e.new5/9 )/8 s.new3/13 e.new4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new5 as range 9
    if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
      continue;
    // closed e.new4 as range 11
    do {
      // </0 & Divmod-CalcDigits=1@3/4 (/7 s.NextDigit/18 e./14 )/8 s.QuotDigit/13 e.Rem/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      // closed e.Rem as range 16
      if( ! refalrts::svar_left( context[18], context[14], context[15] ) )
        continue;
      // closed e. as range 14
      //DEBUG: s.QuotDigit: 13
      //DEBUG: e.Rem: 16
      //DEBUG: s.NextDigit: 18
      //DEBUG: e.: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: s.QuotDigit/13 } Tile{ AsIs: </0 Reuse: & Divmod-CalcDigits@2/4 AsIs: (/7 } Tile{ AsIs: e.Rem/16 } Tile{ AsIs: s.NextDigit/18 } Tile{ AsIs: )/8 } Tile{ AsIs: e./14 } Tile{ AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_gen_Divmodm_CalcDigits_Z2]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[14], context[15] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_evar( res, context[0], context[7] );
      res = refalrts::splice_elem( res, context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Divmod-CalcDigits=1@3/4 (/7 )/8 s.QuotDigit/13 e.Rem/14 >/1
      context[14] = context[11];
      context[15] = context[12];
      if( ! refalrts::empty_seq( context[9], context[10] ) )
        continue;
      // closed e.Rem as range 14
      //DEBUG: s.QuotDigit: 13
      //DEBUG: e.Rem: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} (/7 )/8 s.QuotDigit/13 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: s.QuotDigit13 /0 HalfReuse: (/4 } Tile{ AsIs: e.Rem/14 } Tile{ HalfReuse: )/1 ]] }
      refalrts::reinit_svar( context[0], context[13] );
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[4], context[1] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[14], context[15] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Divmod-CalcDigits=1@3/4 (/7 e.NumerRest0/14 )/8 s.QuotDigit/13 e.Rem/16 >/1
    context[14] = context[9];
    context[15] = context[10];
    context[16] = context[11];
    context[17] = context[12];
    // closed e.NumerRest0 as range 14
    // closed e.Rem as range 16
    //DEBUG: s.QuotDigit: 13
    //DEBUG: e.NumerRest0: 14
    //DEBUG: e.Rem: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.QuotDigit/13 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-CalcDigits:1*2/4 HalfReuse: s.QuotDigit13 /7 } (/18 Tile{ AsIs: e.Rem/16 } Tile{ AsIs: )/8 } (/19 )/20 Tile{ AsIs: e.NumerRest0/14 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[18]);
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::update_name(context[4], functions[efunc_gen_Divmodm_CalcDigits_B1D2]);
    refalrts::reinit_svar( context[7], context[13] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[18], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_elem( res, context[18] );
    refalrts::splice_to_freelist_open( vm, context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Divmod-CalcDigits=1@3/4 (/7 e.NumerRest0/5 )/8 e.dyn/2 >/1
  // closed e.NumerRest0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.NumerRest0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Divmod-CalcDigits=1@0/10 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.NumerRest0/5 AsIs: )/8 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Divmodm_CalcDigits_A1Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Divmodm_CalcDigits_A1Z3("Divmod-CalcDigits=1@3", COOKIE1_, COOKIE2_, func_gen_Divmodm_CalcDigits_A1Z3);


static refalrts::FnResult func_gen_Divmodm_GetNextDigit_S2A1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & Divmod-GetNextDigit$2=1@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Divmod-GetNextDigit$2=1@3/4 s.new1/5 s.new2/6 s.new3/7 e.new4/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new4 as range 2
  do {
    // </0 & Divmod-GetNextDigit$2=1@3/4 s.N3/5 s.NextDigit/6 s.D0/7 s.QuotDigit/10 s.RemDigit/11 >/1
    context[8] = context[2];
    context[9] = context[3];
    if( ! refalrts::svar_left( context[10], context[8], context[9] ) )
      continue;
    if( ! refalrts::svar_left( context[11], context[8], context[9] ) )
      continue;
    if( ! refalrts::empty_seq( context[8], context[9] ) )
      continue;
    //DEBUG: s.N3: 5
    //DEBUG: s.NextDigit: 6
    //DEBUG: s.D0: 7
    //DEBUG: s.QuotDigit: 10
    //DEBUG: s.RemDigit: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.RemDigit/11 {REMOVED TILE}
    //RESULT: Tile{ [[ } </12 & Divmod-AdjustDigit@2/13 s.QuotDigit/10/14 </15 & Sub-Normed/16 (/17 '+'/18 Tile{ AsIs: </0 Reuse: & LeadingZeros/4 AsIs: s.N3/5 AsIs: s.NextDigit/6 } >/19 )/20 '+'/21 </22 & Mul-Nat-Line/23 Tile{ AsIs: s.D0/7 AsIs: s.QuotDigit/10 } >/24 >/25 s.D0/7/26 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Divmodm_AdjustDigit_Z2]);
    refalrts::copy_stvar(vm, context[14], context[10]);
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_Subm_Normed]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_char(vm, context[18], '+');
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_char(vm, context[21], '+');
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_name(vm, context[23], functions[efunc_Mulm_Natm_Line]);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::copy_stvar(vm, context[26], context[7]);
    refalrts::update_name(context[4], functions[efunc_LeadingZeros]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[22] );
    refalrts::link_brackets( context[17], context[20] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[24], context[26] );
    res = refalrts::splice_evar( res, context[7], context[10] );
    res = refalrts::splice_evar( res, context[19], context[23] );
    res = refalrts::splice_evar( res, context[0], context[6] );
    res = refalrts::splice_evar( res, context[12], context[18] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Divmod-GetNextDigit$2=1@3/4 s.N3/5 s.NextDigit/6 s.D0/7 e.dyn/2 >/1
  // closed e.dyn as range 2
  //DEBUG: s.N3: 5
  //DEBUG: s.NextDigit: 6
  //DEBUG: s.D0: 7
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-GetNextDigit$2=1@0/4 AsIs: s.N3/5 AsIs: s.NextDigit/6 } (/8 )/9 Tile{ AsIs: s.D0/7 } (/10 )/11 Tile{ AsIs: e.dyn/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[8]);
  refalrts::alloc_close_bracket(vm, context[9]);
  refalrts::alloc_open_bracket(vm, context[10]);
  refalrts::alloc_close_bracket(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_gen_Divmodm_GetNextDigit_S2A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[10], context[11] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[8], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Divmodm_GetNextDigit_S2A1Z3("Divmod-GetNextDigit$2=1@3", COOKIE1_, COOKIE2_, func_gen_Divmodm_GetNextDigit_S2A1Z3);


static refalrts::FnResult func_gen_Divmodm_GetNextDigit_S2A1Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 32 elems
  refalrts::Iter context[32];
  refalrts::zeros( context, 32 );
  // </0 & Divmod-GetNextDigit$2=1@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Divmod-GetNextDigit$2=1@4/4 s.new1/5 s.new2/6 (/9 e.new3/7 )/10 s.new4/11 s.new5/12 e.new6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new3 as range 7
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[12], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new6 as range 2
  do {
    // </0 & Divmod-GetNextDigit$2=1@4/4 s.N3/5 s.N4/6 (/9 e.1/13 )/10 s.NextDigit/11 s.D0/12 s.QuotDigit/17 s.RemDigit/18 >/1
    context[13] = context[7];
    context[14] = context[8];
    context[15] = context[2];
    context[16] = context[3];
    // closed e.1 as range 13
    if( ! refalrts::svar_left( context[17], context[15], context[16] ) )
      continue;
    if( ! refalrts::svar_left( context[18], context[15], context[16] ) )
      continue;
    if( ! refalrts::empty_seq( context[15], context[16] ) )
      continue;
    //DEBUG: s.N3: 5
    //DEBUG: s.N4: 6
    //DEBUG: s.NextDigit: 11
    //DEBUG: s.D0: 12
    //DEBUG: e.1: 13
    //DEBUG: s.QuotDigit: 17
    //DEBUG: s.RemDigit: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.RemDigit/18 {REMOVED TILE}
    //RESULT: Tile{ [[ } </19 & Divmod-AdjustDigit@2/20 s.QuotDigit/17/21 </22 & Sub-Normed/23 Tile{ AsIs: (/9 } '+'/24 Tile{ AsIs: </0 Reuse: & LeadingZeros/4 AsIs: s.N3/5 AsIs: s.N4/6 } Tile{ AsIs: e.1/13 } Tile{ AsIs: s.NextDigit/11 } >/25 Tile{ AsIs: )/10 } '+'/26 </27 & Mul-Nat-Line/28 Tile{ AsIs: s.D0/12 AsIs: s.QuotDigit/17 } >/29 >/30 s.D0/12/31 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_Divmodm_AdjustDigit_Z2]);
    refalrts::copy_stvar(vm, context[21], context[17]);
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_name(vm, context[23], functions[efunc_Subm_Normed]);
    refalrts::alloc_char(vm, context[24], '+');
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::alloc_char(vm, context[26], '+');
    refalrts::alloc_open_call(vm, context[27]);
    refalrts::alloc_name(vm, context[28], functions[efunc_Mulm_Natm_Line]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::alloc_close_call(vm, context[30]);
    refalrts::copy_stvar(vm, context[31], context[12]);
    refalrts::update_name(context[4], functions[efunc_LeadingZeros]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[30] );
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[29], context[31] );
    res = refalrts::splice_evar( res, context[12], context[17] );
    res = refalrts::splice_evar( res, context[26], context[28] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[0], context[6] );
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[19], context[23] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Divmod-GetNextDigit$2=1@4/4 s.N3/5 s.N4/6 (/9 e.1/7 )/10 s.NextDigit/11 s.D0/12 e.dyn/2 >/1
  // closed e.1 as range 7
  // closed e.dyn as range 2
  //DEBUG: s.N3: 5
  //DEBUG: s.N4: 6
  //DEBUG: s.NextDigit: 11
  //DEBUG: s.D0: 12
  //DEBUG: e.1: 7
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.NextDigit/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-GetNextDigit$2=1@0/4 AsIs: s.N3/5 AsIs: s.N4/6 AsIs: (/9 AsIs: e.1/7 HalfReuse: s.NextDigit11 /10 } )/13 Tile{ AsIs: s.D0/12 } (/14 )/15 Tile{ AsIs: e.dyn/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::alloc_open_bracket(vm, context[14]);
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::update_name(context[4], functions[efunc_gen_Divmodm_GetNextDigit_S2A1Z0]);
  refalrts::reinit_svar( context[10], context[11] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[14], context[15] );
  refalrts::link_brackets( context[9], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_elem( res, context[13] );
  refalrts::splice_to_freelist_open( vm, context[10], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Divmodm_GetNextDigit_S2A1Z4("Divmod-GetNextDigit$2=1@4", COOKIE1_, COOKIE2_, func_gen_Divmodm_GetNextDigit_S2A1Z4);


static refalrts::FnResult func_gen_Divmodm_Nat_S2A4Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & Divmod-Nat$2=4@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Divmod-Nat$2=4@1/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Divmod-Nat$2=4@1/4 s.RestoreShift0/5 (/10 e.Quot/8 )/11 e.Rem/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    context[8] = 0;
    context[9] = 0;
    context[10] = refalrts::brackets_left( context[8], context[9], context[6], context[7] );
    if( ! context[10] )
      continue;
    refalrts::bracket_pointers(context[10], context[11]);
    // closed e.Quot as range 8
    // closed e.Rem as range 6
    //DEBUG: s.RestoreShift0: 5
    //DEBUG: e.Quot: 8
    //DEBUG: e.Rem: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-Nat$2=5@1/4 } Tile{ AsIs: (/10 AsIs: e.Quot/8 AsIs: )/11 } </12 & Divmod-Nat$2=5:1/13 </14 & Divmod-Shl/15 Tile{ AsIs: s.RestoreShift0/5 } Tile{ AsIs: e.Rem/6 } >/16 >/17 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Divmodm_Nat_S2A5B1]);
    refalrts::alloc_open_call(vm, context[14]);
    refalrts::alloc_name(vm, context[15], functions[efunc_Divmodm_Shl]);
    refalrts::alloc_close_call(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_Divmodm_Nat_S2A5Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[14] );
    refalrts::link_brackets( context[10], context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_elem( res, context[5] );
    res = refalrts::splice_evar( res, context[12], context[15] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Divmod-Nat$2=4@1/4 s.RestoreShift0/5 e.dyn/2 >/1
  // closed e.dyn as range 2
  //DEBUG: s.RestoreShift0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </6 & Divmod-Nat$2=4@0/7 (/8 )/9 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: s.RestoreShift0/5 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_Divmodm_Nat_S2A4Z0]);
  refalrts::alloc_open_bracket(vm, context[8]);
  refalrts::alloc_close_bracket(vm, context[9]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[6] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[6], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Divmodm_Nat_S2A4Z1("Divmod-Nat$2=4@1", COOKIE1_, COOKIE2_, func_gen_Divmodm_Nat_S2A4Z1);


static refalrts::FnResult func_gen_Divmodm_Nat_S2A4Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & Divmod-Nat$2=4@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Divmod-Nat$2=4@2/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Divmod-Nat$2=4@2/4 s.RestoreShift0/5 (/10 e.Quot/8 )/11 e.Rem/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    context[8] = 0;
    context[9] = 0;
    context[10] = refalrts::brackets_left( context[8], context[9], context[6], context[7] );
    if( ! context[10] )
      continue;
    refalrts::bracket_pointers(context[10], context[11]);
    // closed e.Quot as range 8
    // closed e.Rem as range 6
    //DEBUG: s.RestoreShift0: 5
    //DEBUG: e.Quot: 8
    //DEBUG: e.Rem: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-Nat$2=5@2/4 } Tile{ AsIs: (/10 AsIs: e.Quot/8 AsIs: )/11 } </12 & Divmod-Nat$2=5:1/13 </14 & Divmod-Shl/15 Tile{ AsIs: s.RestoreShift0/5 } Tile{ AsIs: e.Rem/6 } >/16 >/17 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Divmodm_Nat_S2A5B1]);
    refalrts::alloc_open_call(vm, context[14]);
    refalrts::alloc_name(vm, context[15], functions[efunc_Divmodm_Shl]);
    refalrts::alloc_close_call(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_Divmodm_Nat_S2A5Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[14] );
    refalrts::link_brackets( context[10], context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_elem( res, context[5] );
    res = refalrts::splice_evar( res, context[12], context[15] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Divmod-Nat$2=4@2/4 s.RestoreShift0/5 e.dyn/2 >/1
  // closed e.dyn as range 2
  //DEBUG: s.RestoreShift0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </6 & Divmod-Nat$2=4@0/7 (/8 '-'/9 )/10 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: s.RestoreShift0/5 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_Divmodm_Nat_S2A4Z0]);
  refalrts::alloc_open_bracket(vm, context[8]);
  refalrts::alloc_char(vm, context[9], '-');
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[6] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::link_brackets( context[8], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[6], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Divmodm_Nat_S2A4Z2("Divmod-Nat$2=4@2", COOKIE1_, COOKIE2_, func_gen_Divmodm_Nat_S2A4Z2);


static refalrts::FnResult func_gen_Divmodm_Nat_S2A4Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & Divmod-Nat$2=4@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Divmod-Nat$2=4@3/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Divmod-Nat$2=4@3/4 s.RestoreShift0/5 (/10 e.Quot/8 )/11 e.Rem/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    context[8] = 0;
    context[9] = 0;
    context[10] = refalrts::brackets_left( context[8], context[9], context[6], context[7] );
    if( ! context[10] )
      continue;
    refalrts::bracket_pointers(context[10], context[11]);
    // closed e.Quot as range 8
    // closed e.Rem as range 6
    //DEBUG: s.RestoreShift0: 5
    //DEBUG: e.Quot: 8
    //DEBUG: e.Rem: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-Nat$2=5@3/4 } Tile{ AsIs: (/10 AsIs: e.Quot/8 AsIs: )/11 } </12 & Divmod-Nat$2=5:1/13 </14 & Divmod-Shl/15 Tile{ AsIs: s.RestoreShift0/5 } Tile{ AsIs: e.Rem/6 } >/16 >/17 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Divmodm_Nat_S2A5B1]);
    refalrts::alloc_open_call(vm, context[14]);
    refalrts::alloc_name(vm, context[15], functions[efunc_Divmodm_Shl]);
    refalrts::alloc_close_call(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_Divmodm_Nat_S2A5Z3]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[14] );
    refalrts::link_brackets( context[10], context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_elem( res, context[5] );
    res = refalrts::splice_evar( res, context[12], context[15] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Divmod-Nat$2=4@3/4 s.RestoreShift0/5 e.dyn/2 >/1
  // closed e.dyn as range 2
  //DEBUG: s.RestoreShift0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </6 & Divmod-Nat$2=4@0/7 (/8 '-'/9 )/10 (/11 Tile{ HalfReuse: '-'/0 HalfReuse: )/4 AsIs: s.RestoreShift0/5 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_Divmodm_Nat_S2A4Z0]);
  refalrts::alloc_open_bracket(vm, context[8]);
  refalrts::alloc_char(vm, context[9], '-');
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::reinit_char(context[0], '-');
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[6] );
  refalrts::link_brackets( context[11], context[4] );
  refalrts::link_brackets( context[8], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[6], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Divmodm_Nat_S2A4Z3("Divmod-Nat$2=4@3", COOKIE1_, COOKIE2_, func_gen_Divmodm_Nat_S2A4Z3);


static refalrts::FnResult func_gen_Divmodm_Nat_S2A4Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & Divmod-Nat$2=4@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Divmod-Nat$2=4@4/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Divmod-Nat$2=4@4/4 s.RestoreShift0/5 (/10 e.Quot/8 )/11 e.Rem/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    context[8] = 0;
    context[9] = 0;
    context[10] = refalrts::brackets_left( context[8], context[9], context[6], context[7] );
    if( ! context[10] )
      continue;
    refalrts::bracket_pointers(context[10], context[11]);
    // closed e.Quot as range 8
    // closed e.Rem as range 6
    //DEBUG: s.RestoreShift0: 5
    //DEBUG: e.Quot: 8
    //DEBUG: e.Rem: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-Nat$2=5@4/4 } Tile{ AsIs: (/10 AsIs: e.Quot/8 AsIs: )/11 } </12 & Divmod-Nat$2=5:1/13 </14 & Divmod-Shl/15 Tile{ AsIs: s.RestoreShift0/5 } Tile{ AsIs: e.Rem/6 } >/16 >/17 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Divmodm_Nat_S2A5B1]);
    refalrts::alloc_open_call(vm, context[14]);
    refalrts::alloc_name(vm, context[15], functions[efunc_Divmodm_Shl]);
    refalrts::alloc_close_call(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_Divmodm_Nat_S2A5Z4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[14] );
    refalrts::link_brackets( context[10], context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_elem( res, context[5] );
    res = refalrts::splice_evar( res, context[12], context[15] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Divmod-Nat$2=4@4/4 s.RestoreShift0/5 e.dyn/2 >/1
  // closed e.dyn as range 2
  //DEBUG: s.RestoreShift0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </6 & Divmod-Nat$2=4@0/7 (/8 )/9 (/10 Tile{ HalfReuse: '-'/0 HalfReuse: )/4 AsIs: s.RestoreShift0/5 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_Divmodm_Nat_S2A4Z0]);
  refalrts::alloc_open_bracket(vm, context[8]);
  refalrts::alloc_close_bracket(vm, context[9]);
  refalrts::alloc_open_bracket(vm, context[10]);
  refalrts::reinit_char(context[0], '-');
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[6] );
  refalrts::link_brackets( context[10], context[4] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[6], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Divmodm_Nat_S2A4Z4("Divmod-Nat$2=4@4", COOKIE1_, COOKIE2_, func_gen_Divmodm_Nat_S2A4Z4);


static refalrts::FnResult func_gen_Divmodm_AdjustDigit_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & Divmod-AdjustDigit@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Divmod-AdjustDigit@2/4 s.new1/5 e.new2/2 s.new3/6 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_right( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Divmod-AdjustDigit@2/4 s.QuotDigit0/5 '-'/9 e.Rem/7 s.D0/6 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[9] = refalrts::char_left( '-', context[7], context[8] );
    if( ! context[9] )
      continue;
    // closed e.Rem as range 7
    //DEBUG: s.QuotDigit0: 5
    //DEBUG: s.D0: 6
    //DEBUG: e.Rem: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </10 & Divmod-AdjustDigit/11 Tile{ AsIs: </0 Reuse: & Sub-Digits/4 AsIs: s.QuotDigit0/5 HalfReuse: 1/9 } >/12 </13 & Sub-Nat:1@2/14 s.D0/6/15 (/16 Tile{ AsIs: e.Rem/7 } )/17 </18 & Compare-Align/19 (/20 (/21 )/22 Tile{ AsIs: s.D0/6 } )/23 (/24 )/25 e.Rem/7/26 >/28 >/29 (/30 s.D0/6/31 )/32 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_Divmodm_AdjustDigit]);
    refalrts::alloc_close_call(vm, context[12]);
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_gen_Subm_Nat_B1Z2]);
    refalrts::copy_stvar(vm, context[15], context[6]);
    refalrts::alloc_open_bracket(vm, context[16]);
    refalrts::alloc_close_bracket(vm, context[17]);
    refalrts::alloc_open_call(vm, context[18]);
    refalrts::alloc_name(vm, context[19], functions[efunc_Comparem_Align]);
    refalrts::alloc_open_bracket(vm, context[20]);
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_close_bracket(vm, context[23]);
    refalrts::alloc_open_bracket(vm, context[24]);
    refalrts::alloc_close_bracket(vm, context[25]);
    refalrts::copy_evar(vm, context[26], context[27], context[7], context[8]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::alloc_open_bracket(vm, context[30]);
    refalrts::copy_stvar(vm, context[31], context[6]);
    refalrts::alloc_close_bracket(vm, context[32]);
    refalrts::update_name(context[4], functions[efunc_Subm_Digits]);
    refalrts::reinit_number(context[9], 1UL);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[10] );
    refalrts::link_brackets( context[30], context[32] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[18] );
    refalrts::link_brackets( context[24], context[25] );
    refalrts::link_brackets( context[20], context[23] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[23], context[32] );
    res = refalrts::splice_elem( res, context[6] );
    res = refalrts::splice_evar( res, context[17], context[22] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[12], context[16] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Divmod-AdjustDigit@2/4 s.QuotDigit0/5 e.Rem/7 s.D0/6 >/1
    context[7] = context[2];
    context[8] = context[3];
    // closed e.Rem as range 7
    //DEBUG: s.QuotDigit0: 5
    //DEBUG: s.D0: 6
    //DEBUG: e.Rem: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} & Divmod-AdjustDigit@2/4 s.QuotDigit0/5 {REMOVED TILE} s.D0/6 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: s.QuotDigit05 /0 } Tile{ AsIs: e.Rem/7 } Tile{ ]] }
    refalrts::reinit_svar( context[0], context[5] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Divmod-AdjustDigit@2/4 s.QuotDigit0/5 e.dyn0/2 s.D0/6 >/1
  // closed e.dyn0 as range 2
  //DEBUG: s.QuotDigit0: 5
  //DEBUG: s.D0: 6
  //DEBUG: e.dyn0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-AdjustDigit@0/4 AsIs: s.QuotDigit0/5 } Tile{ AsIs: e.dyn0/2 } (/7 Tile{ AsIs: s.D0/6 } )/8 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_close_bracket(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_gen_Divmodm_AdjustDigit_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_elem( res, context[6] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Divmodm_AdjustDigit_Z2("Divmod-AdjustDigit@2", COOKIE1_, COOKIE2_, func_gen_Divmodm_AdjustDigit_Z2);


static refalrts::FnResult func_gen_Divmodm_Nat_S2A5Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Divmod-Nat$2=5@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Divmod-Nat$2=5@1/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Divmod-Nat$2=5@1/4 (/7 e.Quot0/9 )/8 e.Rem$a/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Quot0 as range 9
    // closed e.Rem$a as range 11
    //DEBUG: e.Quot0: 9
    //DEBUG: e.Rem$a: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Divmod-Nat$2=5@1/4 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Quot0/9 AsIs: )/8 } Tile{ AsIs: e.Rem$a/11 } Tile{ ]] }
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Divmod-Nat$2=5@1/4 (/7 e.Quot0/5 )/8 e.dyn/2 >/1
  // closed e.Quot0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.Quot0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-Nat$2=5@0/4 AsIs: (/7 } )/9 (/10 Tile{ AsIs: e.Quot0/5 } )/11 (/12 Tile{ AsIs: )/8 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[9]);
  refalrts::alloc_open_bracket(vm, context[10]);
  refalrts::alloc_close_bracket(vm, context[11]);
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::update_name(context[4], functions[efunc_gen_Divmodm_Nat_S2A5Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[12], context[8] );
  refalrts::link_brackets( context[10], context[11] );
  refalrts::link_brackets( context[7], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Divmodm_Nat_S2A5Z1("Divmod-Nat$2=5@1", COOKIE1_, COOKIE2_, func_gen_Divmodm_Nat_S2A5Z1);


static refalrts::FnResult func_gen_Divmodm_Nat_S2A5Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & Divmod-Nat$2=5@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Divmod-Nat$2=5@2/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Divmod-Nat$2=5@2/4 (/7 e.Quot0/9 )/8 e.Rem$a/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Quot0 as range 9
    // closed e.Rem$a as range 11
    //DEBUG: e.Quot0: 9
    //DEBUG: e.Rem$a: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/4 HalfReuse: '-'/7 AsIs: e.Quot0/9 AsIs: )/8 } Tile{ AsIs: e.Rem$a/11 } Tile{ ]] }
    refalrts::reinit_open_bracket(context[4]);
    refalrts::reinit_char(context[7], '-');
    refalrts::link_brackets( context[4], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[4], context[8] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Divmod-Nat$2=5@2/4 (/7 e.Quot0/5 )/8 e.dyn/2 >/1
  // closed e.Quot0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.Quot0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-Nat$2=5@0/4 AsIs: (/7 } '-'/9 )/10 (/11 Tile{ AsIs: e.Quot0/5 } )/12 (/13 Tile{ AsIs: )/8 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_char(vm, context[9], '-');
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_close_bracket(vm, context[12]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_gen_Divmodm_Nat_S2A5Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[8] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[12], context[13] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[9], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Divmodm_Nat_S2A5Z2("Divmod-Nat$2=5@2", COOKIE1_, COOKIE2_, func_gen_Divmodm_Nat_S2A5Z2);


static refalrts::FnResult func_gen_Divmodm_Nat_S2A5Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Divmod-Nat$2=5@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Divmod-Nat$2=5@3/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Divmod-Nat$2=5@3/4 (/7 e.Quot0/9 )/8 e.Rem$a/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Quot0 as range 9
    // closed e.Rem$a as range 11
    //DEBUG: e.Quot0: 9
    //DEBUG: e.Rem$a: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/4 HalfReuse: '-'/7 AsIs: e.Quot0/9 AsIs: )/8 } Tile{ HalfReuse: '-'/1 } Tile{ AsIs: e.Rem$a/11 } Tile{ ]] }
    refalrts::reinit_open_bracket(context[4]);
    refalrts::reinit_char(context[7], '-');
    refalrts::reinit_char(context[1], '-');
    refalrts::link_brackets( context[4], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[4], context[8] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Divmod-Nat$2=5@3/4 (/7 e.Quot0/5 )/8 e.dyn/2 >/1
  // closed e.Quot0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.Quot0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-Nat$2=5@0/4 AsIs: (/7 } '-'/9 )/10 (/11 Tile{ AsIs: e.Quot0/5 } )/12 (/13 '-'/14 Tile{ AsIs: )/8 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_char(vm, context[9], '-');
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_close_bracket(vm, context[12]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_char(vm, context[14], '-');
  refalrts::update_name(context[4], functions[efunc_gen_Divmodm_Nat_S2A5Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[8] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[12], context[14] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[9], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Divmodm_Nat_S2A5Z3("Divmod-Nat$2=5@3", COOKIE1_, COOKIE2_, func_gen_Divmodm_Nat_S2A5Z3);


static refalrts::FnResult func_gen_Divmodm_Nat_S2A5Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & Divmod-Nat$2=5@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Divmod-Nat$2=5@4/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Divmod-Nat$2=5@4/4 (/7 e.Quot0/9 )/8 e.Rem$a/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Quot0 as range 9
    // closed e.Rem$a as range 11
    //DEBUG: e.Quot0: 9
    //DEBUG: e.Rem$a: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Divmod-Nat$2=5@4/4 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Quot0/9 AsIs: )/8 } Tile{ HalfReuse: '-'/1 } Tile{ AsIs: e.Rem$a/11 } Tile{ ]] }
    refalrts::reinit_char(context[1], '-');
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Divmod-Nat$2=5@4/4 (/7 e.Quot0/5 )/8 e.dyn/2 >/1
  // closed e.Quot0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.Quot0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Divmod-Nat$2=5@0/4 AsIs: (/7 } )/9 (/10 Tile{ AsIs: e.Quot0/5 } )/11 (/12 '-'/13 Tile{ AsIs: )/8 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[9]);
  refalrts::alloc_open_bracket(vm, context[10]);
  refalrts::alloc_close_bracket(vm, context[11]);
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_char(vm, context[13], '-');
  refalrts::update_name(context[4], functions[efunc_gen_Divmodm_Nat_S2A5Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[12], context[8] );
  refalrts::link_brackets( context[10], context[11] );
  refalrts::link_brackets( context[7], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[11], context[13] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Divmodm_Nat_S2A5Z4("Divmod-Nat$2=5@4", COOKIE1_, COOKIE2_, func_gen_Divmodm_Nat_S2A5Z4);


static refalrts::FnResult func_gen_Subm_Nat_B1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & Sub-Nat:1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Sub-Nat:1@2/4 s.new1/5 (/8 e.new2/6 )/9 e.new3/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new2 as range 6
  // closed e.new3 as range 2
  do {
    // </0 & Sub-Nat:1@2/4 s.new4/5 (/8 e.new6/10 )/9 s.new5/14 >/1
    context[10] = context[6];
    context[11] = context[7];
    context[12] = context[2];
    context[13] = context[3];
    // closed e.new6 as range 10
    if( ! refalrts::svar_left( context[14], context[12], context[13] ) )
      continue;
    if( ! refalrts::empty_seq( context[12], context[13] ) )
      continue;
    do {
      // </0 & Sub-Nat:1@2/4 s.D0/5 (/8 e.Rem/15 )/9 '+'/14 >/1
      context[15] = context[10];
      context[16] = context[11];
      if( ! refalrts::char_term( '+', context[14] ) )
        continue;
      // closed e.Rem as range 15
      //DEBUG: s.D0: 5
      //DEBUG: e.Rem: 15

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </17 & LeadingZeros/18 Tile{ HalfReuse: </1 } Tile{ HalfReuse: & DoSub-Nat-Nat/0 HalfReuse: (/4 AsIs: s.D0/5 HalfReuse: )/8 AsIs: e.Rem/15 HalfReuse: >/9 HalfReuse: >/14 } Tile{ ]] }
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_LeadingZeros]);
      refalrts::reinit_open_call(context[1]);
      refalrts::reinit_name(context[0], functions[efunc_DoSubm_Natm_Nat]);
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_close_bracket(context[8]);
      refalrts::reinit_close_call(context[9]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[9] );
      refalrts::push_stack( vm, context[1] );
      refalrts::link_brackets( context[4], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[0], context[14] );
      res = refalrts::splice_elem( res, context[1] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Sub-Nat:1@2/4 s.D0/5 (/8 e.Rem/15 )/9 '-'/14 >/1
      context[15] = context[10];
      context[16] = context[11];
      if( ! refalrts::char_term( '-', context[14] ) )
        continue;
      // closed e.Rem as range 15
      //DEBUG: s.D0: 5
      //DEBUG: e.Rem: 15

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.D0/5 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } '-'/17 Tile{ AsIs: </0 Reuse: & LeadingZeros/4 } </18 & DoSub-Nat-Nat/19 Tile{ AsIs: (/8 AsIs: e.Rem/15 AsIs: )/9 HalfReuse: s.D05 /14 AsIs: >/1 } >/20 Tile{ ]] }
      refalrts::alloc_char(vm, context[17], '-');
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_DoSubm_Natm_Nat]);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::update_name(context[4], functions[efunc_LeadingZeros]);
      refalrts::reinit_svar( context[14], context[5] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[18] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_evar( res, context[8], context[1] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_elem( res, context[17] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Sub-Nat:1@2/4 s.D0/5 (/8 e.Rem/15 )/9 '0'/14 >/1
    context[15] = context[10];
    context[16] = context[11];
    if( ! refalrts::char_term( '0', context[14] ) )
      continue;
    // closed e.Rem as range 15
    //DEBUG: s.D0: 5
    //DEBUG: e.Rem: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Sub-Nat:1@2/4 s.D0/5 (/8 e.Rem/15 )/9 '0'/14 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 0/1 ]] }
    refalrts::reinit_number(context[1], 0UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Sub-Nat:1@2/4 s.D0/5 (/8 e.Rem/6 )/9 e.dyn/2 >/1
  // closed e.Rem as range 6
  // closed e.dyn as range 2
  //DEBUG: s.D0: 5
  //DEBUG: e.Rem: 6
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sub-Nat:1@0/4 } (/10 Tile{ AsIs: s.D0/5 } )/11 Tile{ AsIs: (/8 AsIs: e.Rem/6 AsIs: )/9 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[10]);
  refalrts::alloc_close_bracket(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_gen_Subm_Nat_B1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[10], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_elem( res, context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Subm_Nat_B1Z2("Sub-Nat:1@2", COOKIE1_, COOKIE2_, func_gen_Subm_Nat_B1Z2);


static refalrts::FnResult func_gen_DoImplode_Z1D3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & DoImplode@1*3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoImplode@1*3/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & DoImplode@1*3/4 s.new3/5 s.new4/8 e.new5/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::svar_left( context[8], context[6], context[7] ) )
      continue;
    // closed e.new5 as range 6
    do {
      // </0 & DoImplode@1*3/4 s.Init$a/5 s.Next/8 e.Tail/9 >/1
      context[9] = context[6];
      context[10] = context[7];
      // closed e.Tail as range 9
      //DEBUG: s.Init$a: 5
      //DEBUG: s.Next: 8
      //DEBUG: e.Tail: 9
      //5: s.Init$a
      //8: s.Next
      //9: e.Tail
      //16: s.Next

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[11]);
      refalrts::alloc_name(vm, context[13], functions[efunc_gen_DoImplode_Z1D3S4C1]);
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_Type]);
      refalrts::copy_stvar(vm, context[16], context[8]);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::alloc_close_call(vm, context[12]);
      refalrts::push_stack( vm, context[12] );
      refalrts::push_stack( vm, context[11] );
      res = refalrts::splice_elem( res, context[12] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[14] );
      res = refalrts::splice_elem( res, context[17] );
      res = refalrts::splice_stvar( res, context[16] );
      res = refalrts::splice_elem( res, context[15] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_elem( res, context[11] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </11 & DoImplode@1*3$4?1/15 'L'/16 s.SubType/17 s.Lettern/18 >/12
        context[13] = 0;
        context[14] = 0;
        context[15] = refalrts::call_left( context[13], context[14], context[11], context[12] );
        context[16] = refalrts::char_left( 'L', context[13], context[14] );
        if( ! context[16] )
          continue;
        if( ! refalrts::svar_left( context[17], context[13], context[14] ) )
          continue;
        if( ! refalrts::svar_left( context[18], context[13], context[14] ) )
          continue;
        if( ! refalrts::empty_seq( context[13], context[14] ) )
          continue;
        //DEBUG: s.Init$a: 5
        //DEBUG: s.Next: 8
        //DEBUG: e.Tail: 9
        //DEBUG: s.SubType: 17
        //DEBUG: s.Lettern: 18

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Init$a/5 s.Next/8 {REMOVED TILE} {REMOVED TILE} s.SubType/17 {REMOVED TILE} >/12 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoImplode@2/4 } Tile{ HalfReuse: (/11 HalfReuse: s.Init$a5 /15 HalfReuse: )/16 } Tile{ AsIs: s.Lettern/18 } Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
        refalrts::update_name(context[4], functions[efunc_gen_DoImplode_Z2]);
        refalrts::reinit_open_bracket(context[11]);
        refalrts::reinit_svar( context[15], context[5] );
        refalrts::reinit_close_bracket(context[16]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[11], context[16] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[9], context[10] );
        res = refalrts::splice_elem( res, context[18] );
        res = refalrts::splice_evar( res, context[11], context[16] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[11], context[12]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoImplode@1*3/4 s.Init$a/5 s.Next/8 e.Tail/9 >/1
    context[9] = context[6];
    context[10] = context[7];
    // closed e.Tail as range 9
    //DEBUG: s.Init$a: 5
    //DEBUG: s.Next: 8
    //DEBUG: e.Tail: 9
    //5: s.Init$a
    //8: s.Next
    //9: e.Tail
    //16: s.Next

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[11]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_DoImplode_Z1D3S5C1]);
    refalrts::alloc_open_call(vm, context[14]);
    refalrts::alloc_name(vm, context[15], functions[efunc_Type]);
    refalrts::copy_stvar(vm, context[16], context[8]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::alloc_close_call(vm, context[12]);
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    res = refalrts::splice_elem( res, context[12] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[14] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_stvar( res, context[16] );
    res = refalrts::splice_elem( res, context[15] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </11 & DoImplode@1*3$5?1/15 'D'/16 s.SubType/17 s.Digit/18 >/12
      context[13] = 0;
      context[14] = 0;
      context[15] = refalrts::call_left( context[13], context[14], context[11], context[12] );
      context[16] = refalrts::char_left( 'D', context[13], context[14] );
      if( ! context[16] )
        continue;
      if( ! refalrts::svar_left( context[17], context[13], context[14] ) )
        continue;
      if( ! refalrts::svar_left( context[18], context[13], context[14] ) )
        continue;
      if( ! refalrts::empty_seq( context[13], context[14] ) )
        continue;
      //DEBUG: s.Init$a: 5
      //DEBUG: s.Next: 8
      //DEBUG: e.Tail: 9
      //DEBUG: s.SubType: 17
      //DEBUG: s.Digit: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Init$a/5 s.Next/8 {REMOVED TILE} {REMOVED TILE} s.SubType/17 {REMOVED TILE} >/12 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoImplode@2/4 } Tile{ HalfReuse: (/11 HalfReuse: s.Init$a5 /15 HalfReuse: )/16 } Tile{ AsIs: s.Digit/18 } Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_gen_DoImplode_Z2]);
      refalrts::reinit_open_bracket(context[11]);
      refalrts::reinit_svar( context[15], context[5] );
      refalrts::reinit_close_bracket(context[16]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[11], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_evar( res, context[11], context[16] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[11], context[12]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoImplode@1*3/4 s.Init$a/5 e.Other/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    // closed e.Other as range 6
    //DEBUG: s.Init$a: 5
    //DEBUG: e.Other: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Implode_Ext/4 AsIs: s.Init$a/5 } Tile{ AsIs: >/1 } Tile{ AsIs: e.Other/6 } Tile{ ]] }
    refalrts::update_name(context[4], functions[efunc_Implodeu_Ext]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_elem( res, context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoImplode@1*3/4 s.Init$a/5 e.dyn1/2 >/1
  // closed e.dyn1 as range 2
  //DEBUG: s.Init$a: 5
  //DEBUG: e.dyn1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoImplode@0/4 } (/6 Tile{ AsIs: s.Init$a/5 } )/7 Tile{ AsIs: e.dyn1/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[6]);
  refalrts::alloc_close_bracket(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_gen_DoImplode_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[6], context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_elem( res, context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoImplode_Z1D3("DoImplode@1*3", COOKIE1_, COOKIE2_, func_gen_DoImplode_Z1D3);


//End of file
